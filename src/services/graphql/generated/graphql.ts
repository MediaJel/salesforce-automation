/* eslint-disable */
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';
export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  DateTime: any;
  JSON: any;
  /** Raw JSON value */
  Json: any;
  /**
   * The `Long` scalar type represents non-fractional signed whole numeric values.
   * Long can represent values between -(2^63) and 2^63 - 1.
   */
  Long: any;
};

export type AdGroupCreatives = Node & {
  __typename?: 'AdGroupCreatives';
  adProviderId?: Maybe<Scalars['String']>;
  createdAt: Scalars['DateTime'];
  flag?: Maybe<Scalars['Boolean']>;
  id: Scalars['ID'];
  medias?: Maybe<Array<Media>>;
  name?: Maybe<Scalars['String']>;
  org?: Maybe<Array<Org>>;
  updatedAt: Scalars['DateTime'];
};


export type AdGroupCreativesMediasArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MediaOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<MediaWhereInput>;
};


export type AdGroupCreativesOrgArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<OrgOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<OrgWhereInput>;
};

export type AdGroupCreativesCreateInput = {
  adProviderId?: InputMaybe<Scalars['String']>;
  flag?: InputMaybe<Scalars['Boolean']>;
  medias?: InputMaybe<MediaCreateManyWithoutAdGroupCreativeInput>;
  name?: InputMaybe<Scalars['String']>;
  org?: InputMaybe<OrgCreateManyWithoutAdGroupCreativesInput>;
};

export type AdGroupCreativesCreateManyWithoutMediasInput = {
  connect?: InputMaybe<Array<AdGroupCreativesWhereUniqueInput>>;
  create?: InputMaybe<Array<AdGroupCreativesCreateWithoutMediasInput>>;
};

export type AdGroupCreativesCreateManyWithoutOrgInput = {
  connect?: InputMaybe<Array<AdGroupCreativesWhereUniqueInput>>;
  create?: InputMaybe<Array<AdGroupCreativesCreateWithoutOrgInput>>;
};

export type AdGroupCreativesCreateWithoutMediasInput = {
  adProviderId?: InputMaybe<Scalars['String']>;
  flag?: InputMaybe<Scalars['Boolean']>;
  name?: InputMaybe<Scalars['String']>;
  org?: InputMaybe<OrgCreateManyWithoutAdGroupCreativesInput>;
};

export type AdGroupCreativesCreateWithoutOrgInput = {
  adProviderId?: InputMaybe<Scalars['String']>;
  flag?: InputMaybe<Scalars['Boolean']>;
  medias?: InputMaybe<MediaCreateManyWithoutAdGroupCreativeInput>;
  name?: InputMaybe<Scalars['String']>;
};

export enum AdGroupCreativesOrderByInput {
  AdProviderIdAsc = 'adProviderId_ASC',
  AdProviderIdDesc = 'adProviderId_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  FlagAsc = 'flag_ASC',
  FlagDesc = 'flag_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  NameAsc = 'name_ASC',
  NameDesc = 'name_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC'
}

export type AdGroupCreativesUpdateInput = {
  adProviderId?: InputMaybe<Scalars['String']>;
  flag?: InputMaybe<Scalars['Boolean']>;
  medias?: InputMaybe<MediaUpdateManyWithoutAdGroupCreativeInput>;
  name?: InputMaybe<Scalars['String']>;
  org?: InputMaybe<OrgUpdateManyWithoutAdGroupCreativesInput>;
};

export type AdGroupCreativesUpdateManyWithoutMediasInput = {
  connect?: InputMaybe<Array<AdGroupCreativesWhereUniqueInput>>;
  create?: InputMaybe<Array<AdGroupCreativesCreateWithoutMediasInput>>;
  delete?: InputMaybe<Array<AdGroupCreativesWhereUniqueInput>>;
  disconnect?: InputMaybe<Array<AdGroupCreativesWhereUniqueInput>>;
  update?: InputMaybe<Array<AdGroupCreativesUpdateWithWhereUniqueWithoutMediasInput>>;
  upsert?: InputMaybe<Array<AdGroupCreativesUpsertWithWhereUniqueWithoutMediasInput>>;
};

export type AdGroupCreativesUpdateManyWithoutOrgInput = {
  connect?: InputMaybe<Array<AdGroupCreativesWhereUniqueInput>>;
  create?: InputMaybe<Array<AdGroupCreativesCreateWithoutOrgInput>>;
  delete?: InputMaybe<Array<AdGroupCreativesWhereUniqueInput>>;
  disconnect?: InputMaybe<Array<AdGroupCreativesWhereUniqueInput>>;
  update?: InputMaybe<Array<AdGroupCreativesUpdateWithWhereUniqueWithoutOrgInput>>;
  upsert?: InputMaybe<Array<AdGroupCreativesUpsertWithWhereUniqueWithoutOrgInput>>;
};

export type AdGroupCreativesUpdateWithWhereUniqueWithoutMediasInput = {
  data: AdGroupCreativesUpdateWithoutMediasDataInput;
  where: AdGroupCreativesWhereUniqueInput;
};

export type AdGroupCreativesUpdateWithWhereUniqueWithoutOrgInput = {
  data: AdGroupCreativesUpdateWithoutOrgDataInput;
  where: AdGroupCreativesWhereUniqueInput;
};

export type AdGroupCreativesUpdateWithoutMediasDataInput = {
  adProviderId?: InputMaybe<Scalars['String']>;
  flag?: InputMaybe<Scalars['Boolean']>;
  name?: InputMaybe<Scalars['String']>;
  org?: InputMaybe<OrgUpdateManyWithoutAdGroupCreativesInput>;
};

export type AdGroupCreativesUpdateWithoutOrgDataInput = {
  adProviderId?: InputMaybe<Scalars['String']>;
  flag?: InputMaybe<Scalars['Boolean']>;
  medias?: InputMaybe<MediaUpdateManyWithoutAdGroupCreativeInput>;
  name?: InputMaybe<Scalars['String']>;
};

export type AdGroupCreativesUpsertWithWhereUniqueWithoutMediasInput = {
  create: AdGroupCreativesCreateWithoutMediasInput;
  update: AdGroupCreativesUpdateWithoutMediasDataInput;
  where: AdGroupCreativesWhereUniqueInput;
};

export type AdGroupCreativesUpsertWithWhereUniqueWithoutOrgInput = {
  create: AdGroupCreativesCreateWithoutOrgInput;
  update: AdGroupCreativesUpdateWithoutOrgDataInput;
  where: AdGroupCreativesWhereUniqueInput;
};

export type AdGroupCreativesWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<AdGroupCreativesWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<AdGroupCreativesWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<AdGroupCreativesWhereInput>>;
  adProviderId?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  adProviderId_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  adProviderId_ends_with?: InputMaybe<Scalars['String']>;
  /** All values greater than the given value. */
  adProviderId_gt?: InputMaybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  adProviderId_gte?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  adProviderId_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  adProviderId_lt?: InputMaybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  adProviderId_lte?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  adProviderId_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  adProviderId_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string. */
  adProviderId_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  adProviderId_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  adProviderId_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  adProviderId_starts_with?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  flag?: InputMaybe<Scalars['Boolean']>;
  /** All values that are not equal to given value. */
  flag_not?: InputMaybe<Scalars['Boolean']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: InputMaybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: InputMaybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: InputMaybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  medias_every?: InputMaybe<MediaWhereInput>;
  medias_none?: InputMaybe<MediaWhereInput>;
  medias_some?: InputMaybe<MediaWhereInput>;
  name?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  name_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  name_ends_with?: InputMaybe<Scalars['String']>;
  /** All values greater than the given value. */
  name_gt?: InputMaybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  name_gte?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  name_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  name_lt?: InputMaybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  name_lte?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  name_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  name_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string. */
  name_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  name_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  name_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  name_starts_with?: InputMaybe<Scalars['String']>;
  org_every?: InputMaybe<OrgWhereInput>;
  org_none?: InputMaybe<OrgWhereInput>;
  org_some?: InputMaybe<OrgWhereInput>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
};

export type AdGroupCreativesWhereUniqueInput = {
  adProviderId?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
};

export type AdPublisher = Node & {
  __typename?: 'AdPublisher';
  createdAt: Scalars['DateTime'];
  deviceType?: Maybe<PublisherDeviceType>;
  extra?: Maybe<Scalars['Json']>;
  id: Scalars['ID'];
  imageUrl?: Maybe<Scalars['String']>;
  scraped?: Maybe<Scalars['Boolean']>;
  source: Scalars['String'];
  title?: Maybe<Scalars['String']>;
  updatedAt: Scalars['DateTime'];
  url?: Maybe<Scalars['String']>;
};

export type AdPublisherCreateInput = {
  deviceType?: InputMaybe<PublisherDeviceType>;
  extra?: InputMaybe<Scalars['Json']>;
  imageUrl?: InputMaybe<Scalars['String']>;
  scraped?: InputMaybe<Scalars['Boolean']>;
  source: Scalars['String'];
  title?: InputMaybe<Scalars['String']>;
  url?: InputMaybe<Scalars['String']>;
};

export type AdPublisherWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<AdPublisherWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<AdPublisherWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<AdPublisherWhereInput>>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  deviceType?: InputMaybe<PublisherDeviceType>;
  /** All values that are contained in given list. */
  deviceType_in?: InputMaybe<Array<PublisherDeviceType>>;
  /** All values that are not equal to given value. */
  deviceType_not?: InputMaybe<PublisherDeviceType>;
  /** All values that are not contained in given list. */
  deviceType_not_in?: InputMaybe<Array<PublisherDeviceType>>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: InputMaybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: InputMaybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: InputMaybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  imageUrl?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  imageUrl_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  imageUrl_ends_with?: InputMaybe<Scalars['String']>;
  /** All values greater than the given value. */
  imageUrl_gt?: InputMaybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  imageUrl_gte?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  imageUrl_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  imageUrl_lt?: InputMaybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  imageUrl_lte?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  imageUrl_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  imageUrl_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string. */
  imageUrl_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  imageUrl_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  imageUrl_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  imageUrl_starts_with?: InputMaybe<Scalars['String']>;
  scraped?: InputMaybe<Scalars['Boolean']>;
  /** All values that are not equal to given value. */
  scraped_not?: InputMaybe<Scalars['Boolean']>;
  source?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  source_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  source_ends_with?: InputMaybe<Scalars['String']>;
  /** All values greater than the given value. */
  source_gt?: InputMaybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  source_gte?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  source_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  source_lt?: InputMaybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  source_lte?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  source_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  source_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string. */
  source_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  source_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  source_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  source_starts_with?: InputMaybe<Scalars['String']>;
  title?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  title_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  title_ends_with?: InputMaybe<Scalars['String']>;
  /** All values greater than the given value. */
  title_gt?: InputMaybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  title_gte?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  title_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  title_lt?: InputMaybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  title_lte?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  title_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  title_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string. */
  title_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  title_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  title_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  title_starts_with?: InputMaybe<Scalars['String']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  url?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  url_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  url_ends_with?: InputMaybe<Scalars['String']>;
  /** All values greater than the given value. */
  url_gt?: InputMaybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  url_gte?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  url_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  url_lt?: InputMaybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  url_lte?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  url_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  url_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string. */
  url_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  url_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  url_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  url_starts_with?: InputMaybe<Scalars['String']>;
};

export type AdTag = Node & {
  __typename?: 'AdTag';
  appId: Array<Scalars['String']>;
  campaignOrder?: Maybe<CampaignOrder>;
  createdAt: Scalars['DateTime'];
  creative?: Maybe<Creative>;
  data?: Maybe<Scalars['Json']>;
  eventsTarget?: Maybe<EventsTarget>;
  id: Scalars['ID'];
  updatedAt: Scalars['DateTime'];
};

export type AdTagCreateManyWithoutCampaignOrderInput = {
  connect?: InputMaybe<Array<AdTagWhereUniqueInput>>;
  create?: InputMaybe<Array<AdTagCreateWithoutCampaignOrderInput>>;
};

export type AdTagCreateManyWithoutCreativeInput = {
  connect?: InputMaybe<Array<AdTagWhereUniqueInput>>;
  create?: InputMaybe<Array<AdTagCreateWithoutCreativeInput>>;
};

export type AdTagCreateManyWithoutEventsTargetInput = {
  connect?: InputMaybe<Array<AdTagWhereUniqueInput>>;
  create?: InputMaybe<Array<AdTagCreateWithoutEventsTargetInput>>;
};

export type AdTagCreateWithoutCampaignOrderInput = {
  appId?: InputMaybe<AdTagCreateappIdInput>;
  creative?: InputMaybe<CreativeCreateOneWithoutAdTagsInput>;
  data?: InputMaybe<Scalars['Json']>;
  eventsTarget?: InputMaybe<EventsTargetCreateOneWithoutEventTagsInput>;
};

export type AdTagCreateWithoutCreativeInput = {
  appId?: InputMaybe<AdTagCreateappIdInput>;
  campaignOrder?: InputMaybe<CampaignOrderCreateOneWithoutAdTagsInput>;
  data?: InputMaybe<Scalars['Json']>;
  eventsTarget?: InputMaybe<EventsTargetCreateOneWithoutEventTagsInput>;
};

export type AdTagCreateWithoutEventsTargetInput = {
  appId?: InputMaybe<AdTagCreateappIdInput>;
  campaignOrder?: InputMaybe<CampaignOrderCreateOneWithoutAdTagsInput>;
  creative?: InputMaybe<CreativeCreateOneWithoutAdTagsInput>;
  data?: InputMaybe<Scalars['Json']>;
};

export type AdTagCreateappIdInput = {
  set?: InputMaybe<Array<Scalars['String']>>;
};

export enum AdTagOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DataAsc = 'data_ASC',
  DataDesc = 'data_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC'
}

export type AdTagUpdateManyWithoutCampaignOrderInput = {
  connect?: InputMaybe<Array<AdTagWhereUniqueInput>>;
  create?: InputMaybe<Array<AdTagCreateWithoutCampaignOrderInput>>;
  delete?: InputMaybe<Array<AdTagWhereUniqueInput>>;
  disconnect?: InputMaybe<Array<AdTagWhereUniqueInput>>;
  update?: InputMaybe<Array<AdTagUpdateWithWhereUniqueWithoutCampaignOrderInput>>;
  upsert?: InputMaybe<Array<AdTagUpsertWithWhereUniqueWithoutCampaignOrderInput>>;
};

export type AdTagUpdateManyWithoutCreativeInput = {
  connect?: InputMaybe<Array<AdTagWhereUniqueInput>>;
  create?: InputMaybe<Array<AdTagCreateWithoutCreativeInput>>;
  delete?: InputMaybe<Array<AdTagWhereUniqueInput>>;
  disconnect?: InputMaybe<Array<AdTagWhereUniqueInput>>;
  update?: InputMaybe<Array<AdTagUpdateWithWhereUniqueWithoutCreativeInput>>;
  upsert?: InputMaybe<Array<AdTagUpsertWithWhereUniqueWithoutCreativeInput>>;
};

export type AdTagUpdateManyWithoutEventsTargetInput = {
  connect?: InputMaybe<Array<AdTagWhereUniqueInput>>;
  create?: InputMaybe<Array<AdTagCreateWithoutEventsTargetInput>>;
  delete?: InputMaybe<Array<AdTagWhereUniqueInput>>;
  disconnect?: InputMaybe<Array<AdTagWhereUniqueInput>>;
  update?: InputMaybe<Array<AdTagUpdateWithWhereUniqueWithoutEventsTargetInput>>;
  upsert?: InputMaybe<Array<AdTagUpsertWithWhereUniqueWithoutEventsTargetInput>>;
};

export type AdTagUpdateWithWhereUniqueWithoutCampaignOrderInput = {
  data: AdTagUpdateWithoutCampaignOrderDataInput;
  where: AdTagWhereUniqueInput;
};

export type AdTagUpdateWithWhereUniqueWithoutCreativeInput = {
  data: AdTagUpdateWithoutCreativeDataInput;
  where: AdTagWhereUniqueInput;
};

export type AdTagUpdateWithWhereUniqueWithoutEventsTargetInput = {
  data: AdTagUpdateWithoutEventsTargetDataInput;
  where: AdTagWhereUniqueInput;
};

export type AdTagUpdateWithoutCampaignOrderDataInput = {
  appId?: InputMaybe<AdTagUpdateappIdInput>;
  creative?: InputMaybe<CreativeUpdateOneWithoutAdTagsInput>;
  data?: InputMaybe<Scalars['Json']>;
  eventsTarget?: InputMaybe<EventsTargetUpdateOneWithoutEventTagsInput>;
};

export type AdTagUpdateWithoutCreativeDataInput = {
  appId?: InputMaybe<AdTagUpdateappIdInput>;
  campaignOrder?: InputMaybe<CampaignOrderUpdateOneWithoutAdTagsInput>;
  data?: InputMaybe<Scalars['Json']>;
  eventsTarget?: InputMaybe<EventsTargetUpdateOneWithoutEventTagsInput>;
};

export type AdTagUpdateWithoutEventsTargetDataInput = {
  appId?: InputMaybe<AdTagUpdateappIdInput>;
  campaignOrder?: InputMaybe<CampaignOrderUpdateOneWithoutAdTagsInput>;
  creative?: InputMaybe<CreativeUpdateOneWithoutAdTagsInput>;
  data?: InputMaybe<Scalars['Json']>;
};

export type AdTagUpdateappIdInput = {
  set?: InputMaybe<Array<Scalars['String']>>;
};

export type AdTagUpsertWithWhereUniqueWithoutCampaignOrderInput = {
  create: AdTagCreateWithoutCampaignOrderInput;
  update: AdTagUpdateWithoutCampaignOrderDataInput;
  where: AdTagWhereUniqueInput;
};

export type AdTagUpsertWithWhereUniqueWithoutCreativeInput = {
  create: AdTagCreateWithoutCreativeInput;
  update: AdTagUpdateWithoutCreativeDataInput;
  where: AdTagWhereUniqueInput;
};

export type AdTagUpsertWithWhereUniqueWithoutEventsTargetInput = {
  create: AdTagCreateWithoutEventsTargetInput;
  update: AdTagUpdateWithoutEventsTargetDataInput;
  where: AdTagWhereUniqueInput;
};

export type AdTagWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<AdTagWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<AdTagWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<AdTagWhereInput>>;
  campaignOrder?: InputMaybe<CampaignOrderWhereInput>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  creative?: InputMaybe<CreativeWhereInput>;
  eventsTarget?: InputMaybe<EventsTargetWhereInput>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: InputMaybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: InputMaybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: InputMaybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
};

export type AdTagWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export type AdUnit = Node & {
  __typename?: 'AdUnit';
  banners?: Maybe<Array<Creative>>;
  campaignOrder?: Maybe<CampaignOrder>;
  clickthrough: Scalars['String'];
  createdAt: Scalars['DateTime'];
  id: Scalars['ID'];
  lineItems?: Maybe<Array<LineItem>>;
  name: Scalars['String'];
  updatedAt: Scalars['DateTime'];
};


export type AdUnitBannersArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<CreativeOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<CreativeWhereInput>;
};


export type AdUnitLineItemsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<LineItemOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<LineItemWhereInput>;
};

export type AdUnitCreateManyWithoutCampaignOrderInput = {
  connect?: InputMaybe<Array<AdUnitWhereUniqueInput>>;
  create?: InputMaybe<Array<AdUnitCreateWithoutCampaignOrderInput>>;
};

export type AdUnitCreateManyWithoutLineItemsInput = {
  connect?: InputMaybe<Array<AdUnitWhereUniqueInput>>;
  create?: InputMaybe<Array<AdUnitCreateWithoutLineItemsInput>>;
};

export type AdUnitCreateOneWithoutBannersInput = {
  connect?: InputMaybe<AdUnitWhereUniqueInput>;
  create?: InputMaybe<AdUnitCreateWithoutBannersInput>;
};

export type AdUnitCreateWithoutBannersInput = {
  campaignOrder?: InputMaybe<CampaignOrderCreateOneWithoutAdUnitsInput>;
  clickthrough: Scalars['String'];
  lineItems?: InputMaybe<LineItemCreateManyWithoutAdUnitsInput>;
  name: Scalars['String'];
};

export type AdUnitCreateWithoutCampaignOrderInput = {
  banners?: InputMaybe<CreativeCreateManyWithoutAdUnitInput>;
  clickthrough: Scalars['String'];
  lineItems?: InputMaybe<LineItemCreateManyWithoutAdUnitsInput>;
  name: Scalars['String'];
};

export type AdUnitCreateWithoutLineItemsInput = {
  banners?: InputMaybe<CreativeCreateManyWithoutAdUnitInput>;
  campaignOrder?: InputMaybe<CampaignOrderCreateOneWithoutAdUnitsInput>;
  clickthrough: Scalars['String'];
  name: Scalars['String'];
};

export enum AdUnitOrderByInput {
  ClickthroughAsc = 'clickthrough_ASC',
  ClickthroughDesc = 'clickthrough_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  NameAsc = 'name_ASC',
  NameDesc = 'name_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC'
}

export type AdUnitUpdateManyWithoutCampaignOrderInput = {
  connect?: InputMaybe<Array<AdUnitWhereUniqueInput>>;
  create?: InputMaybe<Array<AdUnitCreateWithoutCampaignOrderInput>>;
  delete?: InputMaybe<Array<AdUnitWhereUniqueInput>>;
  disconnect?: InputMaybe<Array<AdUnitWhereUniqueInput>>;
  update?: InputMaybe<Array<AdUnitUpdateWithWhereUniqueWithoutCampaignOrderInput>>;
  upsert?: InputMaybe<Array<AdUnitUpsertWithWhereUniqueWithoutCampaignOrderInput>>;
};

export type AdUnitUpdateManyWithoutLineItemsInput = {
  connect?: InputMaybe<Array<AdUnitWhereUniqueInput>>;
  create?: InputMaybe<Array<AdUnitCreateWithoutLineItemsInput>>;
  delete?: InputMaybe<Array<AdUnitWhereUniqueInput>>;
  disconnect?: InputMaybe<Array<AdUnitWhereUniqueInput>>;
  update?: InputMaybe<Array<AdUnitUpdateWithWhereUniqueWithoutLineItemsInput>>;
  upsert?: InputMaybe<Array<AdUnitUpsertWithWhereUniqueWithoutLineItemsInput>>;
};

export type AdUnitUpdateOneWithoutBannersInput = {
  connect?: InputMaybe<AdUnitWhereUniqueInput>;
  create?: InputMaybe<AdUnitCreateWithoutBannersInput>;
  delete?: InputMaybe<Scalars['Boolean']>;
  disconnect?: InputMaybe<Scalars['Boolean']>;
  update?: InputMaybe<AdUnitUpdateWithoutBannersDataInput>;
  upsert?: InputMaybe<AdUnitUpsertWithoutBannersInput>;
};

export type AdUnitUpdateWithWhereUniqueWithoutCampaignOrderInput = {
  data: AdUnitUpdateWithoutCampaignOrderDataInput;
  where: AdUnitWhereUniqueInput;
};

export type AdUnitUpdateWithWhereUniqueWithoutLineItemsInput = {
  data: AdUnitUpdateWithoutLineItemsDataInput;
  where: AdUnitWhereUniqueInput;
};

export type AdUnitUpdateWithoutBannersDataInput = {
  campaignOrder?: InputMaybe<CampaignOrderUpdateOneWithoutAdUnitsInput>;
  clickthrough?: InputMaybe<Scalars['String']>;
  lineItems?: InputMaybe<LineItemUpdateManyWithoutAdUnitsInput>;
  name?: InputMaybe<Scalars['String']>;
};

export type AdUnitUpdateWithoutCampaignOrderDataInput = {
  banners?: InputMaybe<CreativeUpdateManyWithoutAdUnitInput>;
  clickthrough?: InputMaybe<Scalars['String']>;
  lineItems?: InputMaybe<LineItemUpdateManyWithoutAdUnitsInput>;
  name?: InputMaybe<Scalars['String']>;
};

export type AdUnitUpdateWithoutLineItemsDataInput = {
  banners?: InputMaybe<CreativeUpdateManyWithoutAdUnitInput>;
  campaignOrder?: InputMaybe<CampaignOrderUpdateOneWithoutAdUnitsInput>;
  clickthrough?: InputMaybe<Scalars['String']>;
  name?: InputMaybe<Scalars['String']>;
};

export type AdUnitUpsertWithWhereUniqueWithoutCampaignOrderInput = {
  create: AdUnitCreateWithoutCampaignOrderInput;
  update: AdUnitUpdateWithoutCampaignOrderDataInput;
  where: AdUnitWhereUniqueInput;
};

export type AdUnitUpsertWithWhereUniqueWithoutLineItemsInput = {
  create: AdUnitCreateWithoutLineItemsInput;
  update: AdUnitUpdateWithoutLineItemsDataInput;
  where: AdUnitWhereUniqueInput;
};

export type AdUnitUpsertWithoutBannersInput = {
  create: AdUnitCreateWithoutBannersInput;
  update: AdUnitUpdateWithoutBannersDataInput;
};

export type AdUnitWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<AdUnitWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<AdUnitWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<AdUnitWhereInput>>;
  banners_every?: InputMaybe<CreativeWhereInput>;
  banners_none?: InputMaybe<CreativeWhereInput>;
  banners_some?: InputMaybe<CreativeWhereInput>;
  campaignOrder?: InputMaybe<CampaignOrderWhereInput>;
  clickthrough?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  clickthrough_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  clickthrough_ends_with?: InputMaybe<Scalars['String']>;
  /** All values greater than the given value. */
  clickthrough_gt?: InputMaybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  clickthrough_gte?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  clickthrough_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  clickthrough_lt?: InputMaybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  clickthrough_lte?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  clickthrough_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  clickthrough_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string. */
  clickthrough_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  clickthrough_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  clickthrough_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  clickthrough_starts_with?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: InputMaybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: InputMaybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: InputMaybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  lineItems_every?: InputMaybe<LineItemWhereInput>;
  lineItems_none?: InputMaybe<LineItemWhereInput>;
  lineItems_some?: InputMaybe<LineItemWhereInput>;
  name?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  name_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  name_ends_with?: InputMaybe<Scalars['String']>;
  /** All values greater than the given value. */
  name_gt?: InputMaybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  name_gte?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  name_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  name_lt?: InputMaybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  name_lte?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  name_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  name_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string. */
  name_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  name_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  name_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  name_starts_with?: InputMaybe<Scalars['String']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
};

export type AdUnitWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export type AggregateAudience = {
  __typename?: 'AggregateAudience';
  count: Scalars['Int'];
};

export type AggregateCampaign = {
  __typename?: 'AggregateCampaign';
  count: Scalars['Int'];
};

export type AggregateCampaignOrder = {
  __typename?: 'AggregateCampaignOrder';
  count: Scalars['Int'];
};

export type AggregateCampaignReport = {
  __typename?: 'AggregateCampaignReport';
  count: Scalars['Int'];
};

export type AggregateDataObject = Node & {
  __typename?: 'AggregateDataObject';
  byDate?: Maybe<Scalars['Json']>;
  campaign?: Maybe<Campaign>;
  campaignOrder?: Maybe<CampaignOrder>;
  completeAttributionSummary?: Maybe<Scalars['Json']>;
  dayPacingData?: Maybe<AggregateUnit>;
  deviceClicks?: Maybe<Scalars['Json']>;
  id: Scalars['ID'];
  lineItem?: Maybe<LineItem>;
  overallData?: Maybe<AggregateUnit>;
  topCreatives?: Maybe<Scalars['Json']>;
  topPublishers?: Maybe<Scalars['Json']>;
};

export type AggregateDataObjectCreateOneWithoutCampaignInput = {
  connect?: InputMaybe<AggregateDataObjectWhereUniqueInput>;
  create?: InputMaybe<AggregateDataObjectCreateWithoutCampaignInput>;
};

export type AggregateDataObjectCreateOneWithoutCampaignOrderInput = {
  connect?: InputMaybe<AggregateDataObjectWhereUniqueInput>;
  create?: InputMaybe<AggregateDataObjectCreateWithoutCampaignOrderInput>;
};

export type AggregateDataObjectCreateOneWithoutLineItemInput = {
  connect?: InputMaybe<AggregateDataObjectWhereUniqueInput>;
  create?: InputMaybe<AggregateDataObjectCreateWithoutLineItemInput>;
};

export type AggregateDataObjectCreateWithoutCampaignInput = {
  byDate?: InputMaybe<Scalars['Json']>;
  campaignOrder?: InputMaybe<CampaignOrderCreateOneWithoutAggregateDataInput>;
  completeAttributionSummary?: InputMaybe<Scalars['Json']>;
  dayPacingData?: InputMaybe<AggregateUnitCreateOneInput>;
  deviceClicks?: InputMaybe<Scalars['Json']>;
  lineItem?: InputMaybe<LineItemCreateOneWithoutAggregateDataInput>;
  overallData?: InputMaybe<AggregateUnitCreateOneInput>;
  topCreatives?: InputMaybe<Scalars['Json']>;
  topPublishers?: InputMaybe<Scalars['Json']>;
};

export type AggregateDataObjectCreateWithoutCampaignOrderInput = {
  byDate?: InputMaybe<Scalars['Json']>;
  campaign?: InputMaybe<CampaignCreateOneWithoutAggregateDataInput>;
  completeAttributionSummary?: InputMaybe<Scalars['Json']>;
  dayPacingData?: InputMaybe<AggregateUnitCreateOneInput>;
  deviceClicks?: InputMaybe<Scalars['Json']>;
  lineItem?: InputMaybe<LineItemCreateOneWithoutAggregateDataInput>;
  overallData?: InputMaybe<AggregateUnitCreateOneInput>;
  topCreatives?: InputMaybe<Scalars['Json']>;
  topPublishers?: InputMaybe<Scalars['Json']>;
};

export type AggregateDataObjectCreateWithoutLineItemInput = {
  byDate?: InputMaybe<Scalars['Json']>;
  campaign?: InputMaybe<CampaignCreateOneWithoutAggregateDataInput>;
  campaignOrder?: InputMaybe<CampaignOrderCreateOneWithoutAggregateDataInput>;
  completeAttributionSummary?: InputMaybe<Scalars['Json']>;
  dayPacingData?: InputMaybe<AggregateUnitCreateOneInput>;
  deviceClicks?: InputMaybe<Scalars['Json']>;
  overallData?: InputMaybe<AggregateUnitCreateOneInput>;
  topCreatives?: InputMaybe<Scalars['Json']>;
  topPublishers?: InputMaybe<Scalars['Json']>;
};

export type AggregateDataObjectUpdateOneWithoutCampaignInput = {
  connect?: InputMaybe<AggregateDataObjectWhereUniqueInput>;
  create?: InputMaybe<AggregateDataObjectCreateWithoutCampaignInput>;
  delete?: InputMaybe<Scalars['Boolean']>;
  disconnect?: InputMaybe<Scalars['Boolean']>;
  update?: InputMaybe<AggregateDataObjectUpdateWithoutCampaignDataInput>;
  upsert?: InputMaybe<AggregateDataObjectUpsertWithoutCampaignInput>;
};

export type AggregateDataObjectUpdateOneWithoutCampaignOrderInput = {
  connect?: InputMaybe<AggregateDataObjectWhereUniqueInput>;
  create?: InputMaybe<AggregateDataObjectCreateWithoutCampaignOrderInput>;
  delete?: InputMaybe<Scalars['Boolean']>;
  disconnect?: InputMaybe<Scalars['Boolean']>;
  update?: InputMaybe<AggregateDataObjectUpdateWithoutCampaignOrderDataInput>;
  upsert?: InputMaybe<AggregateDataObjectUpsertWithoutCampaignOrderInput>;
};

export type AggregateDataObjectUpdateOneWithoutLineItemInput = {
  connect?: InputMaybe<AggregateDataObjectWhereUniqueInput>;
  create?: InputMaybe<AggregateDataObjectCreateWithoutLineItemInput>;
  delete?: InputMaybe<Scalars['Boolean']>;
  disconnect?: InputMaybe<Scalars['Boolean']>;
  update?: InputMaybe<AggregateDataObjectUpdateWithoutLineItemDataInput>;
  upsert?: InputMaybe<AggregateDataObjectUpsertWithoutLineItemInput>;
};

export type AggregateDataObjectUpdateWithoutCampaignDataInput = {
  byDate?: InputMaybe<Scalars['Json']>;
  campaignOrder?: InputMaybe<CampaignOrderUpdateOneWithoutAggregateDataInput>;
  completeAttributionSummary?: InputMaybe<Scalars['Json']>;
  dayPacingData?: InputMaybe<AggregateUnitUpdateOneInput>;
  deviceClicks?: InputMaybe<Scalars['Json']>;
  lineItem?: InputMaybe<LineItemUpdateOneWithoutAggregateDataInput>;
  overallData?: InputMaybe<AggregateUnitUpdateOneInput>;
  topCreatives?: InputMaybe<Scalars['Json']>;
  topPublishers?: InputMaybe<Scalars['Json']>;
};

export type AggregateDataObjectUpdateWithoutCampaignOrderDataInput = {
  byDate?: InputMaybe<Scalars['Json']>;
  campaign?: InputMaybe<CampaignUpdateOneWithoutAggregateDataInput>;
  completeAttributionSummary?: InputMaybe<Scalars['Json']>;
  dayPacingData?: InputMaybe<AggregateUnitUpdateOneInput>;
  deviceClicks?: InputMaybe<Scalars['Json']>;
  lineItem?: InputMaybe<LineItemUpdateOneWithoutAggregateDataInput>;
  overallData?: InputMaybe<AggregateUnitUpdateOneInput>;
  topCreatives?: InputMaybe<Scalars['Json']>;
  topPublishers?: InputMaybe<Scalars['Json']>;
};

export type AggregateDataObjectUpdateWithoutLineItemDataInput = {
  byDate?: InputMaybe<Scalars['Json']>;
  campaign?: InputMaybe<CampaignUpdateOneWithoutAggregateDataInput>;
  campaignOrder?: InputMaybe<CampaignOrderUpdateOneWithoutAggregateDataInput>;
  completeAttributionSummary?: InputMaybe<Scalars['Json']>;
  dayPacingData?: InputMaybe<AggregateUnitUpdateOneInput>;
  deviceClicks?: InputMaybe<Scalars['Json']>;
  overallData?: InputMaybe<AggregateUnitUpdateOneInput>;
  topCreatives?: InputMaybe<Scalars['Json']>;
  topPublishers?: InputMaybe<Scalars['Json']>;
};

export type AggregateDataObjectUpsertWithoutCampaignInput = {
  create: AggregateDataObjectCreateWithoutCampaignInput;
  update: AggregateDataObjectUpdateWithoutCampaignDataInput;
};

export type AggregateDataObjectUpsertWithoutCampaignOrderInput = {
  create: AggregateDataObjectCreateWithoutCampaignOrderInput;
  update: AggregateDataObjectUpdateWithoutCampaignOrderDataInput;
};

export type AggregateDataObjectUpsertWithoutLineItemInput = {
  create: AggregateDataObjectCreateWithoutLineItemInput;
  update: AggregateDataObjectUpdateWithoutLineItemDataInput;
};

export type AggregateDataObjectWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<AggregateDataObjectWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<AggregateDataObjectWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<AggregateDataObjectWhereInput>>;
  campaign?: InputMaybe<CampaignWhereInput>;
  campaignOrder?: InputMaybe<CampaignOrderWhereInput>;
  dayPacingData?: InputMaybe<AggregateUnitWhereInput>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: InputMaybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: InputMaybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: InputMaybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  lineItem?: InputMaybe<LineItemWhereInput>;
  overallData?: InputMaybe<AggregateUnitWhereInput>;
};

export type AggregateDataObjectWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export type AggregateEventsTarget = {
  __typename?: 'AggregateEventsTarget';
  count: Scalars['Int'];
};

export type AggregateGeoTarget = {
  __typename?: 'AggregateGeoTarget';
  count: Scalars['Int'];
};

export type AggregateLicense = {
  __typename?: 'AggregateLicense';
  count: Scalars['Int'];
};

export type AggregateOrg = {
  __typename?: 'AggregateOrg';
  count: Scalars['Int'];
};

export type AggregatePacingDataObject = {
  __typename?: 'AggregatePacingDataObject';
  count: Scalars['Int'];
};

export type AggregatePaidSearchSummary = {
  __typename?: 'AggregatePaidSearchSummary';
  count: Scalars['Int'];
};

export type AggregateUnit = Node & {
  __typename?: 'AggregateUnit';
  aggClicks: Scalars['Int'];
  aggCost: Scalars['Float'];
  aggEvents: Scalars['Json'];
  aggImpressions: Scalars['Int'];
  aggTotalCost: Scalars['Float'];
  aggTotalRevenue?: Maybe<Scalars['Float']>;
  aggTransactions?: Maybe<Scalars['Float']>;
  aggVWI?: Maybe<Scalars['Float']>;
  id: Scalars['ID'];
  signupsOverallData?: Maybe<Scalars['Int']>;
  totalObservations?: Maybe<Scalars['Int']>;
  updatedAt: Scalars['DateTime'];
};

export type AggregateUnitCreateInput = {
  aggClicks: Scalars['Int'];
  aggCost: Scalars['Float'];
  aggEvents: Scalars['Json'];
  aggImpressions: Scalars['Int'];
  aggTotalCost: Scalars['Float'];
  aggTotalRevenue?: InputMaybe<Scalars['Float']>;
  aggTransactions?: InputMaybe<Scalars['Float']>;
  aggVWI?: InputMaybe<Scalars['Float']>;
  signupsOverallData?: InputMaybe<Scalars['Int']>;
  totalObservations?: InputMaybe<Scalars['Int']>;
};

export type AggregateUnitCreateOneInput = {
  connect?: InputMaybe<AggregateUnitWhereUniqueInput>;
  create?: InputMaybe<AggregateUnitCreateInput>;
};

export type AggregateUnitUpdateDataInput = {
  aggClicks?: InputMaybe<Scalars['Int']>;
  aggCost?: InputMaybe<Scalars['Float']>;
  aggEvents?: InputMaybe<Scalars['Json']>;
  aggImpressions?: InputMaybe<Scalars['Int']>;
  aggTotalCost?: InputMaybe<Scalars['Float']>;
  aggTotalRevenue?: InputMaybe<Scalars['Float']>;
  aggTransactions?: InputMaybe<Scalars['Float']>;
  aggVWI?: InputMaybe<Scalars['Float']>;
  signupsOverallData?: InputMaybe<Scalars['Int']>;
  totalObservations?: InputMaybe<Scalars['Int']>;
};

export type AggregateUnitUpdateOneInput = {
  connect?: InputMaybe<AggregateUnitWhereUniqueInput>;
  create?: InputMaybe<AggregateUnitCreateInput>;
  delete?: InputMaybe<Scalars['Boolean']>;
  disconnect?: InputMaybe<Scalars['Boolean']>;
  update?: InputMaybe<AggregateUnitUpdateDataInput>;
  upsert?: InputMaybe<AggregateUnitUpsertNestedInput>;
};

export type AggregateUnitUpsertNestedInput = {
  create: AggregateUnitCreateInput;
  update: AggregateUnitUpdateDataInput;
};

export type AggregateUnitWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<AggregateUnitWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<AggregateUnitWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<AggregateUnitWhereInput>>;
  aggClicks?: InputMaybe<Scalars['Int']>;
  /** All values greater than the given value. */
  aggClicks_gt?: InputMaybe<Scalars['Int']>;
  /** All values greater than or equal the given value. */
  aggClicks_gte?: InputMaybe<Scalars['Int']>;
  /** All values that are contained in given list. */
  aggClicks_in?: InputMaybe<Array<Scalars['Int']>>;
  /** All values less than the given value. */
  aggClicks_lt?: InputMaybe<Scalars['Int']>;
  /** All values less than or equal the given value. */
  aggClicks_lte?: InputMaybe<Scalars['Int']>;
  /** All values that are not equal to given value. */
  aggClicks_not?: InputMaybe<Scalars['Int']>;
  /** All values that are not contained in given list. */
  aggClicks_not_in?: InputMaybe<Array<Scalars['Int']>>;
  aggCost?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  aggCost_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  aggCost_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  aggCost_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  aggCost_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  aggCost_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  aggCost_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  aggCost_not_in?: InputMaybe<Array<Scalars['Float']>>;
  aggImpressions?: InputMaybe<Scalars['Int']>;
  /** All values greater than the given value. */
  aggImpressions_gt?: InputMaybe<Scalars['Int']>;
  /** All values greater than or equal the given value. */
  aggImpressions_gte?: InputMaybe<Scalars['Int']>;
  /** All values that are contained in given list. */
  aggImpressions_in?: InputMaybe<Array<Scalars['Int']>>;
  /** All values less than the given value. */
  aggImpressions_lt?: InputMaybe<Scalars['Int']>;
  /** All values less than or equal the given value. */
  aggImpressions_lte?: InputMaybe<Scalars['Int']>;
  /** All values that are not equal to given value. */
  aggImpressions_not?: InputMaybe<Scalars['Int']>;
  /** All values that are not contained in given list. */
  aggImpressions_not_in?: InputMaybe<Array<Scalars['Int']>>;
  aggTotalCost?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  aggTotalCost_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  aggTotalCost_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  aggTotalCost_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  aggTotalCost_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  aggTotalCost_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  aggTotalCost_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  aggTotalCost_not_in?: InputMaybe<Array<Scalars['Float']>>;
  aggTotalRevenue?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  aggTotalRevenue_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  aggTotalRevenue_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  aggTotalRevenue_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  aggTotalRevenue_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  aggTotalRevenue_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  aggTotalRevenue_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  aggTotalRevenue_not_in?: InputMaybe<Array<Scalars['Float']>>;
  aggTransactions?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  aggTransactions_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  aggTransactions_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  aggTransactions_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  aggTransactions_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  aggTransactions_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  aggTransactions_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  aggTransactions_not_in?: InputMaybe<Array<Scalars['Float']>>;
  aggVWI?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  aggVWI_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  aggVWI_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  aggVWI_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  aggVWI_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  aggVWI_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  aggVWI_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  aggVWI_not_in?: InputMaybe<Array<Scalars['Float']>>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: InputMaybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: InputMaybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: InputMaybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  signupsOverallData?: InputMaybe<Scalars['Int']>;
  /** All values greater than the given value. */
  signupsOverallData_gt?: InputMaybe<Scalars['Int']>;
  /** All values greater than or equal the given value. */
  signupsOverallData_gte?: InputMaybe<Scalars['Int']>;
  /** All values that are contained in given list. */
  signupsOverallData_in?: InputMaybe<Array<Scalars['Int']>>;
  /** All values less than the given value. */
  signupsOverallData_lt?: InputMaybe<Scalars['Int']>;
  /** All values less than or equal the given value. */
  signupsOverallData_lte?: InputMaybe<Scalars['Int']>;
  /** All values that are not equal to given value. */
  signupsOverallData_not?: InputMaybe<Scalars['Int']>;
  /** All values that are not contained in given list. */
  signupsOverallData_not_in?: InputMaybe<Array<Scalars['Int']>>;
  totalObservations?: InputMaybe<Scalars['Int']>;
  /** All values greater than the given value. */
  totalObservations_gt?: InputMaybe<Scalars['Int']>;
  /** All values greater than or equal the given value. */
  totalObservations_gte?: InputMaybe<Scalars['Int']>;
  /** All values that are contained in given list. */
  totalObservations_in?: InputMaybe<Array<Scalars['Int']>>;
  /** All values less than the given value. */
  totalObservations_lt?: InputMaybe<Scalars['Int']>;
  /** All values less than or equal the given value. */
  totalObservations_lte?: InputMaybe<Scalars['Int']>;
  /** All values that are not equal to given value. */
  totalObservations_not?: InputMaybe<Scalars['Int']>;
  /** All values that are not contained in given list. */
  totalObservations_not_in?: InputMaybe<Array<Scalars['Int']>>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
};

export type AggregateUnitWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export type AiServiceConversationInput = {
  adName: Scalars['String'];
  locationIds: Array<Scalars['ID']>;
  message: Scalars['String'];
  sessionAttributes: SessionInputAttributes;
  token: Scalars['String'];
  userId: Scalars['String'];
};

export type AiServiceStartConversationInput = {
  locationIds: Array<Scalars['ID']>;
  name: Scalars['String'];
  token: Scalars['String'];
};

export type AirnFulfillment = {
  __typename?: 'AirnFulfillment';
  coupon?: Maybe<Array<Maybe<Scalars['String']>>>;
  location?: Maybe<Array<Maybe<Scalars['String']>>>;
  product?: Maybe<Array<Maybe<Scalars['String']>>>;
  strain?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type AmobeeAdvertiser = {
  __typename?: 'AmobeeAdvertiser';
  accountId: Scalars['String'];
  amobeeMultiTouchAttribution?: Maybe<Scalars['Boolean']>;
  clientStatus?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['String']>;
  currency?: Maybe<Scalars['String']>;
  externalAdvertiserId?: Maybe<Scalars['String']>;
  iabCategory?: Maybe<Scalars['String']>;
  id: Scalars['String'];
  language?: Maybe<Scalars['String']>;
  marketId?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  nielsenCampaignOptIn?: Maybe<Scalars['Boolean']>;
  primaryUrl?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  viewabilityProviders?: Maybe<Scalars['JSON']>;
  workflowStatus?: Maybe<Scalars['String']>;
};

export type AmobeeAdvertisersWhereInput = {
  advertiserId?: InputMaybe<Scalars['String']>;
};

export type AmobeeCreative = {
  __typename?: 'AmobeeCreative';
  adFormat?: Maybe<Scalars['String']>;
  advertiserId?: Maybe<Scalars['String']>;
  amobeeAdServer?: Maybe<Scalars['JSON']>;
  clientStatus?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['String']>;
  endDate?: Maybe<Scalars['String']>;
  iabCategory?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['String']>;
  isSslCompliant?: Maybe<Scalars['Boolean']>;
  language?: Maybe<Scalars['String']>;
  marketId?: Maybe<Scalars['String']>;
  mediaFormat?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  resourceType?: Maybe<Scalars['String']>;
  startDate?: Maybe<Scalars['String']>;
  thirdPartyTrackings?: Maybe<Scalars['JSON']>;
  updatedAt?: Maybe<Scalars['String']>;
  workflowStatus?: Maybe<Scalars['String']>;
};

export type AmobeeInsertionOrder = {
  __typename?: 'AmobeeInsertionOrder';
  advertiserId?: Maybe<Scalars['String']>;
  attributionService?: Maybe<Scalars['String']>;
  budget?: Maybe<Scalars['JSON']>;
  clientStatus?: Maybe<Scalars['String']>;
  cpcGoalAmount?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  creativeRotationEvent?: Maybe<Scalars['String']>;
  currency?: Maybe<Scalars['String']>;
  enableCrossDeviceFrequencyCap?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['String']>;
  managerAccountId?: Maybe<Scalars['String']>;
  marketId?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  resourceType?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  workflowStatus?: Maybe<Scalars['String']>;
};

export type AmobeeSegment = {
  __typename?: 'AmobeeSegment';
  advertiserId?: Maybe<Scalars['String']>;
  assigned?: Maybe<Scalars['Boolean']>;
  cost?: Maybe<Scalars['Float']>;
  createdAt?: Maybe<Scalars['String']>;
  currency?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  devices?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['String']>;
  marketId?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  resourceType?: Maybe<Scalars['String']>;
  segmentStatus?: Maybe<Scalars['String']>;
  segmentUsage?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  workflowStatus?: Maybe<Scalars['String']>;
};

export type AppNexusMappingRecord = {
  __typename?: 'AppNexusMappingRecord';
  active?: Maybe<Scalars['Boolean']>;
  data_category_id?: Maybe<Scalars['Int']>;
  data_provider_id?: Maybe<Scalars['Int']>;
  data_segment_type_id?: Maybe<Scalars['String']>;
  error?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['Int']>;
  is_public?: Maybe<Scalars['Boolean']>;
  member_id?: Maybe<Scalars['Int']>;
  recommend_include?: Maybe<Scalars['Boolean']>;
  segment_id?: Maybe<Scalars['Int']>;
};

export type AppNexusSegment = {
  __typename?: 'AppNexusSegment';
  active?: Maybe<Scalars['Boolean']>;
  advertiser_id?: Maybe<Scalars['Int']>;
  appnexusId?: Maybe<Scalars['String']>;
  category?: Maybe<Scalars['String']>;
  code?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  error?: Maybe<Scalars['String']>;
  last_activity?: Maybe<Scalars['String']>;
  member_id?: Maybe<Scalars['Int']>;
  price?: Maybe<Scalars['Float']>;
  provider?: Maybe<Scalars['String']>;
  short_name?: Maybe<Scalars['String']>;
};

export type AppNexusSharingRecord = {
  __typename?: 'AppNexusSharingRecord';
  buyer_member_id?: Maybe<Scalars['Int']>;
  data_member_id?: Maybe<Scalars['Int']>;
  error?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['Int']>;
  segment_exposure?: Maybe<Scalars['String']>;
  segments?: Maybe<Array<Scalars['JSON']>>;
};

export type Aroma = Node & {
  __typename?: 'Aroma';
  bitter?: Maybe<AromaBitter>;
  createdAt: Scalars['DateTime'];
  id: Scalars['ID'];
  products?: Maybe<Array<Product>>;
  savory?: Maybe<AromaSavory>;
  sour?: Maybe<AromaSour>;
  spicy?: Maybe<AromaSpicy>;
  strains?: Maybe<Array<Strain>>;
  sweet?: Maybe<AromaSweet>;
  updatedAt: Scalars['DateTime'];
};


export type AromaProductsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ProductOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ProductWhereInput>;
};


export type AromaStrainsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<StrainOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<StrainWhereInput>;
};

export type AromaBitter = Node & {
  __typename?: 'AromaBitter';
  acrid?: Maybe<Scalars['Float']>;
  aromas?: Maybe<Array<Aroma>>;
  astrigent?: Maybe<Scalars['Float']>;
  chemical?: Maybe<Scalars['Float']>;
  createdAt: Scalars['DateTime'];
  diesel?: Maybe<Scalars['Float']>;
  id: Scalars['ID'];
  metallic?: Maybe<Scalars['Float']>;
  pungent?: Maybe<Scalars['Float']>;
  skunky?: Maybe<Scalars['Float']>;
  updatedAt: Scalars['DateTime'];
};


export type AromaBitterAromasArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<AromaOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<AromaWhereInput>;
};

export type AromaBitterCreateOneWithoutAromasInput = {
  connect?: InputMaybe<AromaBitterWhereUniqueInput>;
  create?: InputMaybe<AromaBitterCreateWithoutAromasInput>;
};

export type AromaBitterCreateWithoutAromasInput = {
  acrid?: InputMaybe<Scalars['Float']>;
  astrigent?: InputMaybe<Scalars['Float']>;
  chemical?: InputMaybe<Scalars['Float']>;
  diesel?: InputMaybe<Scalars['Float']>;
  metallic?: InputMaybe<Scalars['Float']>;
  pungent?: InputMaybe<Scalars['Float']>;
  skunky?: InputMaybe<Scalars['Float']>;
};

export type AromaBitterUpdateOneWithoutAromasInput = {
  connect?: InputMaybe<AromaBitterWhereUniqueInput>;
  create?: InputMaybe<AromaBitterCreateWithoutAromasInput>;
  delete?: InputMaybe<Scalars['Boolean']>;
  disconnect?: InputMaybe<Scalars['Boolean']>;
  update?: InputMaybe<AromaBitterUpdateWithoutAromasDataInput>;
  upsert?: InputMaybe<AromaBitterUpsertWithoutAromasInput>;
};

export type AromaBitterUpdateWithoutAromasDataInput = {
  acrid?: InputMaybe<Scalars['Float']>;
  astrigent?: InputMaybe<Scalars['Float']>;
  chemical?: InputMaybe<Scalars['Float']>;
  diesel?: InputMaybe<Scalars['Float']>;
  metallic?: InputMaybe<Scalars['Float']>;
  pungent?: InputMaybe<Scalars['Float']>;
  skunky?: InputMaybe<Scalars['Float']>;
};

export type AromaBitterUpsertWithoutAromasInput = {
  create: AromaBitterCreateWithoutAromasInput;
  update: AromaBitterUpdateWithoutAromasDataInput;
};

export type AromaBitterWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<AromaBitterWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<AromaBitterWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<AromaBitterWhereInput>>;
  acrid?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  acrid_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  acrid_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  acrid_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  acrid_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  acrid_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  acrid_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  acrid_not_in?: InputMaybe<Array<Scalars['Float']>>;
  aromas_every?: InputMaybe<AromaWhereInput>;
  aromas_none?: InputMaybe<AromaWhereInput>;
  aromas_some?: InputMaybe<AromaWhereInput>;
  astrigent?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  astrigent_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  astrigent_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  astrigent_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  astrigent_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  astrigent_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  astrigent_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  astrigent_not_in?: InputMaybe<Array<Scalars['Float']>>;
  chemical?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  chemical_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  chemical_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  chemical_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  chemical_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  chemical_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  chemical_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  chemical_not_in?: InputMaybe<Array<Scalars['Float']>>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  diesel?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  diesel_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  diesel_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  diesel_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  diesel_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  diesel_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  diesel_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  diesel_not_in?: InputMaybe<Array<Scalars['Float']>>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: InputMaybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: InputMaybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: InputMaybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  metallic?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  metallic_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  metallic_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  metallic_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  metallic_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  metallic_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  metallic_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  metallic_not_in?: InputMaybe<Array<Scalars['Float']>>;
  pungent?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  pungent_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  pungent_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  pungent_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  pungent_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  pungent_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  pungent_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  pungent_not_in?: InputMaybe<Array<Scalars['Float']>>;
  skunky?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  skunky_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  skunky_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  skunky_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  skunky_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  skunky_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  skunky_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  skunky_not_in?: InputMaybe<Array<Scalars['Float']>>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
};

export type AromaBitterWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export type AromaCreateOneWithoutProductsInput = {
  connect?: InputMaybe<AromaWhereUniqueInput>;
  create?: InputMaybe<AromaCreateWithoutProductsInput>;
};

export type AromaCreateOneWithoutStrainsInput = {
  connect?: InputMaybe<AromaWhereUniqueInput>;
  create?: InputMaybe<AromaCreateWithoutStrainsInput>;
};

export type AromaCreateWithoutProductsInput = {
  bitter?: InputMaybe<AromaBitterCreateOneWithoutAromasInput>;
  savory?: InputMaybe<AromaSavoryCreateOneWithoutAromasInput>;
  sour?: InputMaybe<AromaSourCreateOneWithoutAromasInput>;
  spicy?: InputMaybe<AromaSpicyCreateOneWithoutAromasInput>;
  strains?: InputMaybe<StrainCreateManyWithoutAromaInput>;
  sweet?: InputMaybe<AromaSweetCreateOneWithoutAromasInput>;
};

export type AromaCreateWithoutStrainsInput = {
  bitter?: InputMaybe<AromaBitterCreateOneWithoutAromasInput>;
  products?: InputMaybe<ProductCreateManyWithoutAromaInput>;
  savory?: InputMaybe<AromaSavoryCreateOneWithoutAromasInput>;
  sour?: InputMaybe<AromaSourCreateOneWithoutAromasInput>;
  spicy?: InputMaybe<AromaSpicyCreateOneWithoutAromasInput>;
  sweet?: InputMaybe<AromaSweetCreateOneWithoutAromasInput>;
};

export enum AromaOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC'
}

export type AromaSavory = Node & {
  __typename?: 'AromaSavory';
  aromas?: Maybe<Array<Aroma>>;
  buttery?: Maybe<Scalars['Float']>;
  cheesy?: Maybe<Scalars['Float']>;
  creamy?: Maybe<Scalars['Float']>;
  createdAt: Scalars['DateTime'];
  dairy?: Maybe<Scalars['Float']>;
  id: Scalars['ID'];
  oily?: Maybe<Scalars['Float']>;
  tangy?: Maybe<Scalars['Float']>;
  updatedAt: Scalars['DateTime'];
  zesty?: Maybe<Scalars['Float']>;
};


export type AromaSavoryAromasArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<AromaOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<AromaWhereInput>;
};

export type AromaSavoryCreateOneWithoutAromasInput = {
  connect?: InputMaybe<AromaSavoryWhereUniqueInput>;
  create?: InputMaybe<AromaSavoryCreateWithoutAromasInput>;
};

export type AromaSavoryCreateWithoutAromasInput = {
  buttery?: InputMaybe<Scalars['Float']>;
  cheesy?: InputMaybe<Scalars['Float']>;
  creamy?: InputMaybe<Scalars['Float']>;
  dairy?: InputMaybe<Scalars['Float']>;
  oily?: InputMaybe<Scalars['Float']>;
  tangy?: InputMaybe<Scalars['Float']>;
  zesty?: InputMaybe<Scalars['Float']>;
};

export type AromaSavoryUpdateOneWithoutAromasInput = {
  connect?: InputMaybe<AromaSavoryWhereUniqueInput>;
  create?: InputMaybe<AromaSavoryCreateWithoutAromasInput>;
  delete?: InputMaybe<Scalars['Boolean']>;
  disconnect?: InputMaybe<Scalars['Boolean']>;
  update?: InputMaybe<AromaSavoryUpdateWithoutAromasDataInput>;
  upsert?: InputMaybe<AromaSavoryUpsertWithoutAromasInput>;
};

export type AromaSavoryUpdateWithoutAromasDataInput = {
  buttery?: InputMaybe<Scalars['Float']>;
  cheesy?: InputMaybe<Scalars['Float']>;
  creamy?: InputMaybe<Scalars['Float']>;
  dairy?: InputMaybe<Scalars['Float']>;
  oily?: InputMaybe<Scalars['Float']>;
  tangy?: InputMaybe<Scalars['Float']>;
  zesty?: InputMaybe<Scalars['Float']>;
};

export type AromaSavoryUpsertWithoutAromasInput = {
  create: AromaSavoryCreateWithoutAromasInput;
  update: AromaSavoryUpdateWithoutAromasDataInput;
};

export type AromaSavoryWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<AromaSavoryWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<AromaSavoryWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<AromaSavoryWhereInput>>;
  aromas_every?: InputMaybe<AromaWhereInput>;
  aromas_none?: InputMaybe<AromaWhereInput>;
  aromas_some?: InputMaybe<AromaWhereInput>;
  buttery?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  buttery_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  buttery_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  buttery_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  buttery_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  buttery_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  buttery_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  buttery_not_in?: InputMaybe<Array<Scalars['Float']>>;
  cheesy?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  cheesy_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  cheesy_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  cheesy_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  cheesy_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  cheesy_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  cheesy_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  cheesy_not_in?: InputMaybe<Array<Scalars['Float']>>;
  creamy?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  creamy_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  creamy_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  creamy_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  creamy_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  creamy_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  creamy_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  creamy_not_in?: InputMaybe<Array<Scalars['Float']>>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  dairy?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  dairy_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  dairy_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  dairy_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  dairy_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  dairy_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  dairy_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  dairy_not_in?: InputMaybe<Array<Scalars['Float']>>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: InputMaybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: InputMaybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: InputMaybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  oily?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  oily_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  oily_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  oily_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  oily_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  oily_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  oily_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  oily_not_in?: InputMaybe<Array<Scalars['Float']>>;
  tangy?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  tangy_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  tangy_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  tangy_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  tangy_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  tangy_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  tangy_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  tangy_not_in?: InputMaybe<Array<Scalars['Float']>>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  zesty?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  zesty_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  zesty_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  zesty_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  zesty_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  zesty_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  zesty_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  zesty_not_in?: InputMaybe<Array<Scalars['Float']>>;
};

export type AromaSavoryWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export type AromaSour = Node & {
  __typename?: 'AromaSour';
  aromas?: Maybe<Array<Aroma>>;
  citrus?: Maybe<Scalars['Float']>;
  createdAt: Scalars['DateTime'];
  fuel?: Maybe<Scalars['Float']>;
  id: Scalars['ID'];
  sour?: Maybe<Scalars['Float']>;
  tart?: Maybe<Scalars['Float']>;
  turpentine?: Maybe<Scalars['Float']>;
  updatedAt: Scalars['DateTime'];
};


export type AromaSourAromasArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<AromaOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<AromaWhereInput>;
};

export type AromaSourCreateOneWithoutAromasInput = {
  connect?: InputMaybe<AromaSourWhereUniqueInput>;
  create?: InputMaybe<AromaSourCreateWithoutAromasInput>;
};

export type AromaSourCreateWithoutAromasInput = {
  citrus?: InputMaybe<Scalars['Float']>;
  fuel?: InputMaybe<Scalars['Float']>;
  sour?: InputMaybe<Scalars['Float']>;
  tart?: InputMaybe<Scalars['Float']>;
  turpentine?: InputMaybe<Scalars['Float']>;
};

export type AromaSourUpdateOneWithoutAromasInput = {
  connect?: InputMaybe<AromaSourWhereUniqueInput>;
  create?: InputMaybe<AromaSourCreateWithoutAromasInput>;
  delete?: InputMaybe<Scalars['Boolean']>;
  disconnect?: InputMaybe<Scalars['Boolean']>;
  update?: InputMaybe<AromaSourUpdateWithoutAromasDataInput>;
  upsert?: InputMaybe<AromaSourUpsertWithoutAromasInput>;
};

export type AromaSourUpdateWithoutAromasDataInput = {
  citrus?: InputMaybe<Scalars['Float']>;
  fuel?: InputMaybe<Scalars['Float']>;
  sour?: InputMaybe<Scalars['Float']>;
  tart?: InputMaybe<Scalars['Float']>;
  turpentine?: InputMaybe<Scalars['Float']>;
};

export type AromaSourUpsertWithoutAromasInput = {
  create: AromaSourCreateWithoutAromasInput;
  update: AromaSourUpdateWithoutAromasDataInput;
};

export type AromaSourWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<AromaSourWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<AromaSourWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<AromaSourWhereInput>>;
  aromas_every?: InputMaybe<AromaWhereInput>;
  aromas_none?: InputMaybe<AromaWhereInput>;
  aromas_some?: InputMaybe<AromaWhereInput>;
  citrus?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  citrus_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  citrus_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  citrus_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  citrus_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  citrus_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  citrus_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  citrus_not_in?: InputMaybe<Array<Scalars['Float']>>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  fuel?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  fuel_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  fuel_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  fuel_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  fuel_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  fuel_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  fuel_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  fuel_not_in?: InputMaybe<Array<Scalars['Float']>>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: InputMaybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: InputMaybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: InputMaybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  sour?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  sour_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  sour_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  sour_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  sour_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  sour_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  sour_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  sour_not_in?: InputMaybe<Array<Scalars['Float']>>;
  tart?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  tart_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  tart_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  tart_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  tart_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  tart_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  tart_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  tart_not_in?: InputMaybe<Array<Scalars['Float']>>;
  turpentine?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  turpentine_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  turpentine_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  turpentine_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  turpentine_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  turpentine_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  turpentine_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  turpentine_not_in?: InputMaybe<Array<Scalars['Float']>>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
};

export type AromaSourWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export type AromaSpicy = Node & {
  __typename?: 'AromaSpicy';
  aromas?: Maybe<Array<Aroma>>;
  createdAt: Scalars['DateTime'];
  earthy?: Maybe<Scalars['Float']>;
  herbs?: Maybe<Scalars['Float']>;
  husky?: Maybe<Scalars['Float']>;
  id: Scalars['ID'];
  peppery?: Maybe<Scalars['Float']>;
  piney?: Maybe<Scalars['Float']>;
  spicy?: Maybe<Scalars['Float']>;
  updatedAt: Scalars['DateTime'];
  woody?: Maybe<Scalars['Float']>;
};


export type AromaSpicyAromasArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<AromaOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<AromaWhereInput>;
};

export type AromaSpicyCreateOneWithoutAromasInput = {
  connect?: InputMaybe<AromaSpicyWhereUniqueInput>;
  create?: InputMaybe<AromaSpicyCreateWithoutAromasInput>;
};

export type AromaSpicyCreateWithoutAromasInput = {
  earthy?: InputMaybe<Scalars['Float']>;
  herbs?: InputMaybe<Scalars['Float']>;
  husky?: InputMaybe<Scalars['Float']>;
  peppery?: InputMaybe<Scalars['Float']>;
  piney?: InputMaybe<Scalars['Float']>;
  spicy?: InputMaybe<Scalars['Float']>;
  woody?: InputMaybe<Scalars['Float']>;
};

export type AromaSpicyUpdateOneWithoutAromasInput = {
  connect?: InputMaybe<AromaSpicyWhereUniqueInput>;
  create?: InputMaybe<AromaSpicyCreateWithoutAromasInput>;
  delete?: InputMaybe<Scalars['Boolean']>;
  disconnect?: InputMaybe<Scalars['Boolean']>;
  update?: InputMaybe<AromaSpicyUpdateWithoutAromasDataInput>;
  upsert?: InputMaybe<AromaSpicyUpsertWithoutAromasInput>;
};

export type AromaSpicyUpdateWithoutAromasDataInput = {
  earthy?: InputMaybe<Scalars['Float']>;
  herbs?: InputMaybe<Scalars['Float']>;
  husky?: InputMaybe<Scalars['Float']>;
  peppery?: InputMaybe<Scalars['Float']>;
  piney?: InputMaybe<Scalars['Float']>;
  spicy?: InputMaybe<Scalars['Float']>;
  woody?: InputMaybe<Scalars['Float']>;
};

export type AromaSpicyUpsertWithoutAromasInput = {
  create: AromaSpicyCreateWithoutAromasInput;
  update: AromaSpicyUpdateWithoutAromasDataInput;
};

export type AromaSpicyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<AromaSpicyWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<AromaSpicyWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<AromaSpicyWhereInput>>;
  aromas_every?: InputMaybe<AromaWhereInput>;
  aromas_none?: InputMaybe<AromaWhereInput>;
  aromas_some?: InputMaybe<AromaWhereInput>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  earthy?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  earthy_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  earthy_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  earthy_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  earthy_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  earthy_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  earthy_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  earthy_not_in?: InputMaybe<Array<Scalars['Float']>>;
  herbs?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  herbs_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  herbs_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  herbs_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  herbs_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  herbs_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  herbs_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  herbs_not_in?: InputMaybe<Array<Scalars['Float']>>;
  husky?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  husky_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  husky_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  husky_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  husky_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  husky_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  husky_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  husky_not_in?: InputMaybe<Array<Scalars['Float']>>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: InputMaybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: InputMaybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: InputMaybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  peppery?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  peppery_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  peppery_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  peppery_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  peppery_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  peppery_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  peppery_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  peppery_not_in?: InputMaybe<Array<Scalars['Float']>>;
  piney?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  piney_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  piney_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  piney_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  piney_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  piney_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  piney_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  piney_not_in?: InputMaybe<Array<Scalars['Float']>>;
  spicy?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  spicy_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  spicy_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  spicy_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  spicy_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  spicy_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  spicy_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  spicy_not_in?: InputMaybe<Array<Scalars['Float']>>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  woody?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  woody_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  woody_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  woody_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  woody_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  woody_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  woody_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  woody_not_in?: InputMaybe<Array<Scalars['Float']>>;
};

export type AromaSpicyWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export type AromaSweet = Node & {
  __typename?: 'AromaSweet';
  aromas?: Maybe<Array<Aroma>>;
  berry?: Maybe<Scalars['Float']>;
  candy?: Maybe<Scalars['Float']>;
  createdAt: Scalars['DateTime'];
  floral?: Maybe<Scalars['Float']>;
  fruity?: Maybe<Scalars['Float']>;
  id: Scalars['ID'];
  minty?: Maybe<Scalars['Float']>;
  sugary?: Maybe<Scalars['Float']>;
  sweet?: Maybe<Scalars['Float']>;
  tropical?: Maybe<Scalars['Float']>;
  updatedAt: Scalars['DateTime'];
};


export type AromaSweetAromasArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<AromaOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<AromaWhereInput>;
};

export type AromaSweetCreateOneWithoutAromasInput = {
  connect?: InputMaybe<AromaSweetWhereUniqueInput>;
  create?: InputMaybe<AromaSweetCreateWithoutAromasInput>;
};

export type AromaSweetCreateWithoutAromasInput = {
  berry?: InputMaybe<Scalars['Float']>;
  candy?: InputMaybe<Scalars['Float']>;
  floral?: InputMaybe<Scalars['Float']>;
  fruity?: InputMaybe<Scalars['Float']>;
  minty?: InputMaybe<Scalars['Float']>;
  sugary?: InputMaybe<Scalars['Float']>;
  sweet?: InputMaybe<Scalars['Float']>;
  tropical?: InputMaybe<Scalars['Float']>;
};

export type AromaSweetUpdateOneWithoutAromasInput = {
  connect?: InputMaybe<AromaSweetWhereUniqueInput>;
  create?: InputMaybe<AromaSweetCreateWithoutAromasInput>;
  delete?: InputMaybe<Scalars['Boolean']>;
  disconnect?: InputMaybe<Scalars['Boolean']>;
  update?: InputMaybe<AromaSweetUpdateWithoutAromasDataInput>;
  upsert?: InputMaybe<AromaSweetUpsertWithoutAromasInput>;
};

export type AromaSweetUpdateWithoutAromasDataInput = {
  berry?: InputMaybe<Scalars['Float']>;
  candy?: InputMaybe<Scalars['Float']>;
  floral?: InputMaybe<Scalars['Float']>;
  fruity?: InputMaybe<Scalars['Float']>;
  minty?: InputMaybe<Scalars['Float']>;
  sugary?: InputMaybe<Scalars['Float']>;
  sweet?: InputMaybe<Scalars['Float']>;
  tropical?: InputMaybe<Scalars['Float']>;
};

export type AromaSweetUpsertWithoutAromasInput = {
  create: AromaSweetCreateWithoutAromasInput;
  update: AromaSweetUpdateWithoutAromasDataInput;
};

export type AromaSweetWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<AromaSweetWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<AromaSweetWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<AromaSweetWhereInput>>;
  aromas_every?: InputMaybe<AromaWhereInput>;
  aromas_none?: InputMaybe<AromaWhereInput>;
  aromas_some?: InputMaybe<AromaWhereInput>;
  berry?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  berry_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  berry_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  berry_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  berry_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  berry_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  berry_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  berry_not_in?: InputMaybe<Array<Scalars['Float']>>;
  candy?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  candy_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  candy_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  candy_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  candy_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  candy_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  candy_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  candy_not_in?: InputMaybe<Array<Scalars['Float']>>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  floral?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  floral_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  floral_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  floral_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  floral_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  floral_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  floral_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  floral_not_in?: InputMaybe<Array<Scalars['Float']>>;
  fruity?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  fruity_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  fruity_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  fruity_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  fruity_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  fruity_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  fruity_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  fruity_not_in?: InputMaybe<Array<Scalars['Float']>>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: InputMaybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: InputMaybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: InputMaybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  minty?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  minty_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  minty_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  minty_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  minty_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  minty_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  minty_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  minty_not_in?: InputMaybe<Array<Scalars['Float']>>;
  sugary?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  sugary_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  sugary_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  sugary_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  sugary_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  sugary_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  sugary_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  sugary_not_in?: InputMaybe<Array<Scalars['Float']>>;
  sweet?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  sweet_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  sweet_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  sweet_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  sweet_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  sweet_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  sweet_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  sweet_not_in?: InputMaybe<Array<Scalars['Float']>>;
  tropical?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  tropical_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  tropical_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  tropical_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  tropical_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  tropical_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  tropical_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  tropical_not_in?: InputMaybe<Array<Scalars['Float']>>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
};

export type AromaSweetWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export type AromaUpdateOneWithoutProductsInput = {
  connect?: InputMaybe<AromaWhereUniqueInput>;
  create?: InputMaybe<AromaCreateWithoutProductsInput>;
  delete?: InputMaybe<Scalars['Boolean']>;
  disconnect?: InputMaybe<Scalars['Boolean']>;
  update?: InputMaybe<AromaUpdateWithoutProductsDataInput>;
  upsert?: InputMaybe<AromaUpsertWithoutProductsInput>;
};

export type AromaUpdateOneWithoutStrainsInput = {
  connect?: InputMaybe<AromaWhereUniqueInput>;
  create?: InputMaybe<AromaCreateWithoutStrainsInput>;
  delete?: InputMaybe<Scalars['Boolean']>;
  disconnect?: InputMaybe<Scalars['Boolean']>;
  update?: InputMaybe<AromaUpdateWithoutStrainsDataInput>;
  upsert?: InputMaybe<AromaUpsertWithoutStrainsInput>;
};

export type AromaUpdateWithoutProductsDataInput = {
  bitter?: InputMaybe<AromaBitterUpdateOneWithoutAromasInput>;
  savory?: InputMaybe<AromaSavoryUpdateOneWithoutAromasInput>;
  sour?: InputMaybe<AromaSourUpdateOneWithoutAromasInput>;
  spicy?: InputMaybe<AromaSpicyUpdateOneWithoutAromasInput>;
  strains?: InputMaybe<StrainUpdateManyWithoutAromaInput>;
  sweet?: InputMaybe<AromaSweetUpdateOneWithoutAromasInput>;
};

export type AromaUpdateWithoutStrainsDataInput = {
  bitter?: InputMaybe<AromaBitterUpdateOneWithoutAromasInput>;
  products?: InputMaybe<ProductUpdateManyWithoutAromaInput>;
  savory?: InputMaybe<AromaSavoryUpdateOneWithoutAromasInput>;
  sour?: InputMaybe<AromaSourUpdateOneWithoutAromasInput>;
  spicy?: InputMaybe<AromaSpicyUpdateOneWithoutAromasInput>;
  sweet?: InputMaybe<AromaSweetUpdateOneWithoutAromasInput>;
};

export type AromaUpsertWithoutProductsInput = {
  create: AromaCreateWithoutProductsInput;
  update: AromaUpdateWithoutProductsDataInput;
};

export type AromaUpsertWithoutStrainsInput = {
  create: AromaCreateWithoutStrainsInput;
  update: AromaUpdateWithoutStrainsDataInput;
};

export type AromaWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<AromaWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<AromaWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<AromaWhereInput>>;
  bitter?: InputMaybe<AromaBitterWhereInput>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: InputMaybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: InputMaybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: InputMaybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  products_every?: InputMaybe<ProductWhereInput>;
  products_none?: InputMaybe<ProductWhereInput>;
  products_some?: InputMaybe<ProductWhereInput>;
  savory?: InputMaybe<AromaSavoryWhereInput>;
  sour?: InputMaybe<AromaSourWhereInput>;
  spicy?: InputMaybe<AromaSpicyWhereInput>;
  strains_every?: InputMaybe<StrainWhereInput>;
  strains_none?: InputMaybe<StrainWhereInput>;
  strains_some?: InputMaybe<StrainWhereInput>;
  sweet?: InputMaybe<AromaSweetWhereInput>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
};

export type AromaWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export type Article = Node & {
  __typename?: 'Article';
  category: ArticleCategory;
  content: Scalars['String'];
  createdAt: Scalars['DateTime'];
  id: Scalars['ID'];
  title: Scalars['String'];
  updatedAt: Scalars['DateTime'];
};

export type ArticleCategory = Node & {
  __typename?: 'ArticleCategory';
  articles?: Maybe<Array<Article>>;
  createdAt: Scalars['DateTime'];
  id: Scalars['ID'];
  title: Scalars['String'];
  updatedAt: Scalars['DateTime'];
};


export type ArticleCategoryArticlesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ArticleOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ArticleWhereInput>;
};

export type ArticleCategoryCreateInput = {
  articles?: InputMaybe<ArticleCreateManyWithoutCategoryInput>;
  title: Scalars['String'];
};

export type ArticleCategoryCreateOneWithoutArticlesInput = {
  connect?: InputMaybe<ArticleCategoryWhereUniqueInput>;
  create?: InputMaybe<ArticleCategoryCreateWithoutArticlesInput>;
};

export type ArticleCategoryCreateWithoutArticlesInput = {
  title: Scalars['String'];
};

export enum ArticleCategoryOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  TitleAsc = 'title_ASC',
  TitleDesc = 'title_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC'
}

export type ArticleCategoryUpdateInput = {
  articles?: InputMaybe<ArticleUpdateManyWithoutCategoryInput>;
  title?: InputMaybe<Scalars['String']>;
};

export type ArticleCategoryUpdateOneRequiredWithoutArticlesInput = {
  connect?: InputMaybe<ArticleCategoryWhereUniqueInput>;
  create?: InputMaybe<ArticleCategoryCreateWithoutArticlesInput>;
  update?: InputMaybe<ArticleCategoryUpdateWithoutArticlesDataInput>;
  upsert?: InputMaybe<ArticleCategoryUpsertWithoutArticlesInput>;
};

export type ArticleCategoryUpdateWithoutArticlesDataInput = {
  title?: InputMaybe<Scalars['String']>;
};

export type ArticleCategoryUpsertWithoutArticlesInput = {
  create: ArticleCategoryCreateWithoutArticlesInput;
  update: ArticleCategoryUpdateWithoutArticlesDataInput;
};

export type ArticleCategoryWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<ArticleCategoryWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<ArticleCategoryWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<ArticleCategoryWhereInput>>;
  articles_every?: InputMaybe<ArticleWhereInput>;
  articles_none?: InputMaybe<ArticleWhereInput>;
  articles_some?: InputMaybe<ArticleWhereInput>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: InputMaybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: InputMaybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: InputMaybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  title?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  title_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  title_ends_with?: InputMaybe<Scalars['String']>;
  /** All values greater than the given value. */
  title_gt?: InputMaybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  title_gte?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  title_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  title_lt?: InputMaybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  title_lte?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  title_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  title_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string. */
  title_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  title_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  title_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  title_starts_with?: InputMaybe<Scalars['String']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
};

export type ArticleCategoryWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export type ArticleCreateInput = {
  category: ArticleCategoryCreateOneWithoutArticlesInput;
  content: Scalars['String'];
  title: Scalars['String'];
};

export type ArticleCreateManyWithoutCategoryInput = {
  connect?: InputMaybe<Array<ArticleWhereUniqueInput>>;
  create?: InputMaybe<Array<ArticleCreateWithoutCategoryInput>>;
};

export type ArticleCreateWithoutCategoryInput = {
  content: Scalars['String'];
  title: Scalars['String'];
};

export enum ArticleOrderByInput {
  ContentAsc = 'content_ASC',
  ContentDesc = 'content_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  TitleAsc = 'title_ASC',
  TitleDesc = 'title_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC'
}

export type ArticleUpdateInput = {
  category?: InputMaybe<ArticleCategoryUpdateOneRequiredWithoutArticlesInput>;
  content?: InputMaybe<Scalars['String']>;
  title?: InputMaybe<Scalars['String']>;
};

export type ArticleUpdateManyWithoutCategoryInput = {
  connect?: InputMaybe<Array<ArticleWhereUniqueInput>>;
  create?: InputMaybe<Array<ArticleCreateWithoutCategoryInput>>;
  delete?: InputMaybe<Array<ArticleWhereUniqueInput>>;
  disconnect?: InputMaybe<Array<ArticleWhereUniqueInput>>;
  update?: InputMaybe<Array<ArticleUpdateWithWhereUniqueWithoutCategoryInput>>;
  upsert?: InputMaybe<Array<ArticleUpsertWithWhereUniqueWithoutCategoryInput>>;
};

export type ArticleUpdateWithWhereUniqueWithoutCategoryInput = {
  data: ArticleUpdateWithoutCategoryDataInput;
  where: ArticleWhereUniqueInput;
};

export type ArticleUpdateWithoutCategoryDataInput = {
  content?: InputMaybe<Scalars['String']>;
  title?: InputMaybe<Scalars['String']>;
};

export type ArticleUpsertWithWhereUniqueWithoutCategoryInput = {
  create: ArticleCreateWithoutCategoryInput;
  update: ArticleUpdateWithoutCategoryDataInput;
  where: ArticleWhereUniqueInput;
};

export type ArticleWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<ArticleWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<ArticleWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<ArticleWhereInput>>;
  category?: InputMaybe<ArticleCategoryWhereInput>;
  content?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  content_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  content_ends_with?: InputMaybe<Scalars['String']>;
  /** All values greater than the given value. */
  content_gt?: InputMaybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  content_gte?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  content_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  content_lt?: InputMaybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  content_lte?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  content_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  content_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string. */
  content_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  content_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  content_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  content_starts_with?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: InputMaybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: InputMaybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: InputMaybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  title?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  title_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  title_ends_with?: InputMaybe<Scalars['String']>;
  /** All values greater than the given value. */
  title_gt?: InputMaybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  title_gte?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  title_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  title_lt?: InputMaybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  title_lte?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  title_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  title_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string. */
  title_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  title_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  title_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  title_starts_with?: InputMaybe<Scalars['String']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
};

export type ArticleWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export type Audience = Node & {
  __typename?: 'Audience';
  changeLog?: Maybe<Array<Change>>;
  createdAt: Scalars['DateTime'];
  description?: Maybe<Scalars['String']>;
  deviceIdCount?: Maybe<Scalars['Int']>;
  distribution?: Maybe<Array<DistributionConfig>>;
  endDate?: Maybe<Scalars['DateTime']>;
  eventsTargets?: Maybe<Array<EventsTarget>>;
  geoTargets?: Maybe<Array<GeoTarget>>;
  id: Scalars['ID'];
  name?: Maybe<Scalars['String']>;
  observationCount?: Maybe<Scalars['Int']>;
  orgs?: Maybe<Array<Org>>;
  reports?: Maybe<Array<CampaignReport>>;
  retargetAudiences?: Maybe<Array<OrgDataConfig>>;
  startDate?: Maybe<Scalars['DateTime']>;
  tags: Array<Scalars['String']>;
  type?: Maybe<AudienceType>;
  uniqueCount?: Maybe<Scalars['Int']>;
  updatedAt: Scalars['DateTime'];
};


export type AudienceChangeLogArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ChangeOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ChangeWhereInput>;
};


export type AudienceDistributionArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<DistributionConfigOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<DistributionConfigWhereInput>;
};


export type AudienceEventsTargetsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<EventsTargetOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<EventsTargetWhereInput>;
};


export type AudienceGeoTargetsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<GeoTargetOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<GeoTargetWhereInput>;
};


export type AudienceOrgsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<OrgOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<OrgWhereInput>;
};


export type AudienceReportsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<CampaignReportOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<CampaignReportWhereInput>;
};


export type AudienceRetargetAudiencesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<OrgDataConfigOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<OrgDataConfigWhereInput>;
};

/** A connection to a list of items. */
export type AudienceConnection = {
  __typename?: 'AudienceConnection';
  aggregate: AggregateAudience;
  /** A list of edges. */
  edges: Array<Maybe<AudienceEdge>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type AudienceCreateInput = {
  changeLog?: InputMaybe<ChangeCreateManyWithoutAudienceInput>;
  description?: InputMaybe<Scalars['String']>;
  deviceIdCount?: InputMaybe<Scalars['Int']>;
  distribution?: InputMaybe<DistributionConfigCreateManyWithoutAudienceInput>;
  endDate?: InputMaybe<Scalars['DateTime']>;
  eventsTargets?: InputMaybe<EventsTargetCreateManyWithoutAudiencesInput>;
  geoTargets?: InputMaybe<GeoTargetCreateManyWithoutAudiencesInput>;
  name?: InputMaybe<Scalars['String']>;
  observationCount?: InputMaybe<Scalars['Int']>;
  orgs?: InputMaybe<OrgCreateManyWithoutAudiencesInput>;
  reports?: InputMaybe<CampaignReportCreateManyWithoutAudienceInput>;
  retargetAudiences?: InputMaybe<OrgDataConfigCreateManyWithoutRetargetingAudienceInput>;
  startDate?: InputMaybe<Scalars['DateTime']>;
  tags?: InputMaybe<AudienceCreatetagsInput>;
  type?: InputMaybe<AudienceType>;
  uniqueCount?: InputMaybe<Scalars['Int']>;
};

export type AudienceCreateManyInput = {
  connect?: InputMaybe<Array<AudienceWhereUniqueInput>>;
  create?: InputMaybe<Array<AudienceCreateInput>>;
};

export type AudienceCreateManyWithoutEventsTargetsInput = {
  connect?: InputMaybe<Array<AudienceWhereUniqueInput>>;
  create?: InputMaybe<Array<AudienceCreateWithoutEventsTargetsInput>>;
};

export type AudienceCreateManyWithoutGeoTargetsInput = {
  connect?: InputMaybe<Array<AudienceWhereUniqueInput>>;
  create?: InputMaybe<Array<AudienceCreateWithoutGeoTargetsInput>>;
};

export type AudienceCreateManyWithoutOrgsInput = {
  connect?: InputMaybe<Array<AudienceWhereUniqueInput>>;
  create?: InputMaybe<Array<AudienceCreateWithoutOrgsInput>>;
};

export type AudienceCreateOneInput = {
  connect?: InputMaybe<AudienceWhereUniqueInput>;
  create?: InputMaybe<AudienceCreateInput>;
};

export type AudienceCreateOneWithoutChangeLogInput = {
  connect?: InputMaybe<AudienceWhereUniqueInput>;
  create?: InputMaybe<AudienceCreateWithoutChangeLogInput>;
};

export type AudienceCreateOneWithoutReportsInput = {
  connect?: InputMaybe<AudienceWhereUniqueInput>;
  create?: InputMaybe<AudienceCreateWithoutReportsInput>;
};

export type AudienceCreateOneWithoutRetargetAudiencesInput = {
  connect?: InputMaybe<AudienceWhereUniqueInput>;
  create?: InputMaybe<AudienceCreateWithoutRetargetAudiencesInput>;
};

export type AudienceCreateWithoutChangeLogInput = {
  description?: InputMaybe<Scalars['String']>;
  deviceIdCount?: InputMaybe<Scalars['Int']>;
  distribution?: InputMaybe<DistributionConfigCreateManyWithoutAudienceInput>;
  endDate?: InputMaybe<Scalars['DateTime']>;
  eventsTargets?: InputMaybe<EventsTargetCreateManyWithoutAudiencesInput>;
  geoTargets?: InputMaybe<GeoTargetCreateManyWithoutAudiencesInput>;
  name?: InputMaybe<Scalars['String']>;
  observationCount?: InputMaybe<Scalars['Int']>;
  orgs?: InputMaybe<OrgCreateManyWithoutAudiencesInput>;
  reports?: InputMaybe<CampaignReportCreateManyWithoutAudienceInput>;
  retargetAudiences?: InputMaybe<OrgDataConfigCreateManyWithoutRetargetingAudienceInput>;
  startDate?: InputMaybe<Scalars['DateTime']>;
  tags?: InputMaybe<AudienceCreatetagsInput>;
  type?: InputMaybe<AudienceType>;
  uniqueCount?: InputMaybe<Scalars['Int']>;
};

export type AudienceCreateWithoutEventsTargetsInput = {
  changeLog?: InputMaybe<ChangeCreateManyWithoutAudienceInput>;
  description?: InputMaybe<Scalars['String']>;
  deviceIdCount?: InputMaybe<Scalars['Int']>;
  distribution?: InputMaybe<DistributionConfigCreateManyWithoutAudienceInput>;
  endDate?: InputMaybe<Scalars['DateTime']>;
  geoTargets?: InputMaybe<GeoTargetCreateManyWithoutAudiencesInput>;
  name?: InputMaybe<Scalars['String']>;
  observationCount?: InputMaybe<Scalars['Int']>;
  orgs?: InputMaybe<OrgCreateManyWithoutAudiencesInput>;
  reports?: InputMaybe<CampaignReportCreateManyWithoutAudienceInput>;
  retargetAudiences?: InputMaybe<OrgDataConfigCreateManyWithoutRetargetingAudienceInput>;
  startDate?: InputMaybe<Scalars['DateTime']>;
  tags?: InputMaybe<AudienceCreatetagsInput>;
  type?: InputMaybe<AudienceType>;
  uniqueCount?: InputMaybe<Scalars['Int']>;
};

export type AudienceCreateWithoutGeoTargetsInput = {
  changeLog?: InputMaybe<ChangeCreateManyWithoutAudienceInput>;
  description?: InputMaybe<Scalars['String']>;
  deviceIdCount?: InputMaybe<Scalars['Int']>;
  distribution?: InputMaybe<DistributionConfigCreateManyWithoutAudienceInput>;
  endDate?: InputMaybe<Scalars['DateTime']>;
  eventsTargets?: InputMaybe<EventsTargetCreateManyWithoutAudiencesInput>;
  name?: InputMaybe<Scalars['String']>;
  observationCount?: InputMaybe<Scalars['Int']>;
  orgs?: InputMaybe<OrgCreateManyWithoutAudiencesInput>;
  reports?: InputMaybe<CampaignReportCreateManyWithoutAudienceInput>;
  retargetAudiences?: InputMaybe<OrgDataConfigCreateManyWithoutRetargetingAudienceInput>;
  startDate?: InputMaybe<Scalars['DateTime']>;
  tags?: InputMaybe<AudienceCreatetagsInput>;
  type?: InputMaybe<AudienceType>;
  uniqueCount?: InputMaybe<Scalars['Int']>;
};

export type AudienceCreateWithoutOrgsInput = {
  changeLog?: InputMaybe<ChangeCreateManyWithoutAudienceInput>;
  description?: InputMaybe<Scalars['String']>;
  deviceIdCount?: InputMaybe<Scalars['Int']>;
  distribution?: InputMaybe<DistributionConfigCreateManyWithoutAudienceInput>;
  endDate?: InputMaybe<Scalars['DateTime']>;
  eventsTargets?: InputMaybe<EventsTargetCreateManyWithoutAudiencesInput>;
  geoTargets?: InputMaybe<GeoTargetCreateManyWithoutAudiencesInput>;
  name?: InputMaybe<Scalars['String']>;
  observationCount?: InputMaybe<Scalars['Int']>;
  reports?: InputMaybe<CampaignReportCreateManyWithoutAudienceInput>;
  retargetAudiences?: InputMaybe<OrgDataConfigCreateManyWithoutRetargetingAudienceInput>;
  startDate?: InputMaybe<Scalars['DateTime']>;
  tags?: InputMaybe<AudienceCreatetagsInput>;
  type?: InputMaybe<AudienceType>;
  uniqueCount?: InputMaybe<Scalars['Int']>;
};

export type AudienceCreateWithoutReportsInput = {
  changeLog?: InputMaybe<ChangeCreateManyWithoutAudienceInput>;
  description?: InputMaybe<Scalars['String']>;
  deviceIdCount?: InputMaybe<Scalars['Int']>;
  distribution?: InputMaybe<DistributionConfigCreateManyWithoutAudienceInput>;
  endDate?: InputMaybe<Scalars['DateTime']>;
  eventsTargets?: InputMaybe<EventsTargetCreateManyWithoutAudiencesInput>;
  geoTargets?: InputMaybe<GeoTargetCreateManyWithoutAudiencesInput>;
  name?: InputMaybe<Scalars['String']>;
  observationCount?: InputMaybe<Scalars['Int']>;
  orgs?: InputMaybe<OrgCreateManyWithoutAudiencesInput>;
  retargetAudiences?: InputMaybe<OrgDataConfigCreateManyWithoutRetargetingAudienceInput>;
  startDate?: InputMaybe<Scalars['DateTime']>;
  tags?: InputMaybe<AudienceCreatetagsInput>;
  type?: InputMaybe<AudienceType>;
  uniqueCount?: InputMaybe<Scalars['Int']>;
};

export type AudienceCreateWithoutRetargetAudiencesInput = {
  changeLog?: InputMaybe<ChangeCreateManyWithoutAudienceInput>;
  description?: InputMaybe<Scalars['String']>;
  deviceIdCount?: InputMaybe<Scalars['Int']>;
  distribution?: InputMaybe<DistributionConfigCreateManyWithoutAudienceInput>;
  endDate?: InputMaybe<Scalars['DateTime']>;
  eventsTargets?: InputMaybe<EventsTargetCreateManyWithoutAudiencesInput>;
  geoTargets?: InputMaybe<GeoTargetCreateManyWithoutAudiencesInput>;
  name?: InputMaybe<Scalars['String']>;
  observationCount?: InputMaybe<Scalars['Int']>;
  orgs?: InputMaybe<OrgCreateManyWithoutAudiencesInput>;
  reports?: InputMaybe<CampaignReportCreateManyWithoutAudienceInput>;
  startDate?: InputMaybe<Scalars['DateTime']>;
  tags?: InputMaybe<AudienceCreatetagsInput>;
  type?: InputMaybe<AudienceType>;
  uniqueCount?: InputMaybe<Scalars['Int']>;
};

export type AudienceCreatetagsInput = {
  set?: InputMaybe<Array<Scalars['String']>>;
};

/** An edge in a connection. */
export type AudienceEdge = {
  __typename?: 'AudienceEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: Audience;
};

export enum AudienceOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DescriptionAsc = 'description_ASC',
  DescriptionDesc = 'description_DESC',
  DeviceIdCountAsc = 'deviceIdCount_ASC',
  DeviceIdCountDesc = 'deviceIdCount_DESC',
  EndDateAsc = 'endDate_ASC',
  EndDateDesc = 'endDate_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  NameAsc = 'name_ASC',
  NameDesc = 'name_DESC',
  ObservationCountAsc = 'observationCount_ASC',
  ObservationCountDesc = 'observationCount_DESC',
  StartDateAsc = 'startDate_ASC',
  StartDateDesc = 'startDate_DESC',
  TypeAsc = 'type_ASC',
  TypeDesc = 'type_DESC',
  UniqueCountAsc = 'uniqueCount_ASC',
  UniqueCountDesc = 'uniqueCount_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC'
}

export enum AudienceType {
  Attribution = 'ATTRIBUTION',
  Retargeting = 'RETARGETING',
  Seo = 'SEO',
  Targeting = 'TARGETING'
}

export type AudienceUpdateDataInput = {
  changeLog?: InputMaybe<ChangeUpdateManyWithoutAudienceInput>;
  description?: InputMaybe<Scalars['String']>;
  deviceIdCount?: InputMaybe<Scalars['Int']>;
  distribution?: InputMaybe<DistributionConfigUpdateManyWithoutAudienceInput>;
  endDate?: InputMaybe<Scalars['DateTime']>;
  eventsTargets?: InputMaybe<EventsTargetUpdateManyWithoutAudiencesInput>;
  geoTargets?: InputMaybe<GeoTargetUpdateManyWithoutAudiencesInput>;
  name?: InputMaybe<Scalars['String']>;
  observationCount?: InputMaybe<Scalars['Int']>;
  orgs?: InputMaybe<OrgUpdateManyWithoutAudiencesInput>;
  reports?: InputMaybe<CampaignReportUpdateManyWithoutAudienceInput>;
  retargetAudiences?: InputMaybe<OrgDataConfigUpdateManyWithoutRetargetingAudienceInput>;
  startDate?: InputMaybe<Scalars['DateTime']>;
  tags?: InputMaybe<AudienceUpdatetagsInput>;
  type?: InputMaybe<AudienceType>;
  uniqueCount?: InputMaybe<Scalars['Int']>;
};

export type AudienceUpdateInput = {
  changeLog?: InputMaybe<ChangeUpdateManyWithoutAudienceInput>;
  description?: InputMaybe<Scalars['String']>;
  deviceIdCount?: InputMaybe<Scalars['Int']>;
  distribution?: InputMaybe<DistributionConfigUpdateManyWithoutAudienceInput>;
  endDate?: InputMaybe<Scalars['DateTime']>;
  eventsTargets?: InputMaybe<EventsTargetUpdateManyWithoutAudiencesInput>;
  geoTargets?: InputMaybe<GeoTargetUpdateManyWithoutAudiencesInput>;
  name?: InputMaybe<Scalars['String']>;
  observationCount?: InputMaybe<Scalars['Int']>;
  orgs?: InputMaybe<OrgUpdateManyWithoutAudiencesInput>;
  reports?: InputMaybe<CampaignReportUpdateManyWithoutAudienceInput>;
  retargetAudiences?: InputMaybe<OrgDataConfigUpdateManyWithoutRetargetingAudienceInput>;
  startDate?: InputMaybe<Scalars['DateTime']>;
  tags?: InputMaybe<AudienceUpdatetagsInput>;
  type?: InputMaybe<AudienceType>;
  uniqueCount?: InputMaybe<Scalars['Int']>;
};

export type AudienceUpdateManyInput = {
  connect?: InputMaybe<Array<AudienceWhereUniqueInput>>;
  create?: InputMaybe<Array<AudienceCreateInput>>;
  delete?: InputMaybe<Array<AudienceWhereUniqueInput>>;
  disconnect?: InputMaybe<Array<AudienceWhereUniqueInput>>;
  update?: InputMaybe<Array<AudienceUpdateWithWhereUniqueNestedInput>>;
  upsert?: InputMaybe<Array<AudienceUpsertWithWhereUniqueNestedInput>>;
};

export type AudienceUpdateManyWithoutEventsTargetsInput = {
  connect?: InputMaybe<Array<AudienceWhereUniqueInput>>;
  create?: InputMaybe<Array<AudienceCreateWithoutEventsTargetsInput>>;
  delete?: InputMaybe<Array<AudienceWhereUniqueInput>>;
  disconnect?: InputMaybe<Array<AudienceWhereUniqueInput>>;
  update?: InputMaybe<Array<AudienceUpdateWithWhereUniqueWithoutEventsTargetsInput>>;
  upsert?: InputMaybe<Array<AudienceUpsertWithWhereUniqueWithoutEventsTargetsInput>>;
};

export type AudienceUpdateManyWithoutGeoTargetsInput = {
  connect?: InputMaybe<Array<AudienceWhereUniqueInput>>;
  create?: InputMaybe<Array<AudienceCreateWithoutGeoTargetsInput>>;
  delete?: InputMaybe<Array<AudienceWhereUniqueInput>>;
  disconnect?: InputMaybe<Array<AudienceWhereUniqueInput>>;
  update?: InputMaybe<Array<AudienceUpdateWithWhereUniqueWithoutGeoTargetsInput>>;
  upsert?: InputMaybe<Array<AudienceUpsertWithWhereUniqueWithoutGeoTargetsInput>>;
};

export type AudienceUpdateManyWithoutOrgsInput = {
  connect?: InputMaybe<Array<AudienceWhereUniqueInput>>;
  create?: InputMaybe<Array<AudienceCreateWithoutOrgsInput>>;
  delete?: InputMaybe<Array<AudienceWhereUniqueInput>>;
  disconnect?: InputMaybe<Array<AudienceWhereUniqueInput>>;
  update?: InputMaybe<Array<AudienceUpdateWithWhereUniqueWithoutOrgsInput>>;
  upsert?: InputMaybe<Array<AudienceUpsertWithWhereUniqueWithoutOrgsInput>>;
};

export type AudienceUpdateOneInput = {
  connect?: InputMaybe<AudienceWhereUniqueInput>;
  create?: InputMaybe<AudienceCreateInput>;
  delete?: InputMaybe<Scalars['Boolean']>;
  disconnect?: InputMaybe<Scalars['Boolean']>;
  update?: InputMaybe<AudienceUpdateDataInput>;
  upsert?: InputMaybe<AudienceUpsertNestedInput>;
};

export type AudienceUpdateOneWithoutChangeLogInput = {
  connect?: InputMaybe<AudienceWhereUniqueInput>;
  create?: InputMaybe<AudienceCreateWithoutChangeLogInput>;
  delete?: InputMaybe<Scalars['Boolean']>;
  disconnect?: InputMaybe<Scalars['Boolean']>;
  update?: InputMaybe<AudienceUpdateWithoutChangeLogDataInput>;
  upsert?: InputMaybe<AudienceUpsertWithoutChangeLogInput>;
};

export type AudienceUpdateOneWithoutReportsInput = {
  connect?: InputMaybe<AudienceWhereUniqueInput>;
  create?: InputMaybe<AudienceCreateWithoutReportsInput>;
  delete?: InputMaybe<Scalars['Boolean']>;
  disconnect?: InputMaybe<Scalars['Boolean']>;
  update?: InputMaybe<AudienceUpdateWithoutReportsDataInput>;
  upsert?: InputMaybe<AudienceUpsertWithoutReportsInput>;
};

export type AudienceUpdateOneWithoutRetargetAudiencesInput = {
  connect?: InputMaybe<AudienceWhereUniqueInput>;
  create?: InputMaybe<AudienceCreateWithoutRetargetAudiencesInput>;
  delete?: InputMaybe<Scalars['Boolean']>;
  disconnect?: InputMaybe<Scalars['Boolean']>;
  update?: InputMaybe<AudienceUpdateWithoutRetargetAudiencesDataInput>;
  upsert?: InputMaybe<AudienceUpsertWithoutRetargetAudiencesInput>;
};

export type AudienceUpdateWithWhereUniqueNestedInput = {
  data: AudienceUpdateDataInput;
  where: AudienceWhereUniqueInput;
};

export type AudienceUpdateWithWhereUniqueWithoutEventsTargetsInput = {
  data: AudienceUpdateWithoutEventsTargetsDataInput;
  where: AudienceWhereUniqueInput;
};

export type AudienceUpdateWithWhereUniqueWithoutGeoTargetsInput = {
  data: AudienceUpdateWithoutGeoTargetsDataInput;
  where: AudienceWhereUniqueInput;
};

export type AudienceUpdateWithWhereUniqueWithoutOrgsInput = {
  data: AudienceUpdateWithoutOrgsDataInput;
  where: AudienceWhereUniqueInput;
};

export type AudienceUpdateWithoutChangeLogDataInput = {
  description?: InputMaybe<Scalars['String']>;
  deviceIdCount?: InputMaybe<Scalars['Int']>;
  distribution?: InputMaybe<DistributionConfigUpdateManyWithoutAudienceInput>;
  endDate?: InputMaybe<Scalars['DateTime']>;
  eventsTargets?: InputMaybe<EventsTargetUpdateManyWithoutAudiencesInput>;
  geoTargets?: InputMaybe<GeoTargetUpdateManyWithoutAudiencesInput>;
  name?: InputMaybe<Scalars['String']>;
  observationCount?: InputMaybe<Scalars['Int']>;
  orgs?: InputMaybe<OrgUpdateManyWithoutAudiencesInput>;
  reports?: InputMaybe<CampaignReportUpdateManyWithoutAudienceInput>;
  retargetAudiences?: InputMaybe<OrgDataConfigUpdateManyWithoutRetargetingAudienceInput>;
  startDate?: InputMaybe<Scalars['DateTime']>;
  tags?: InputMaybe<AudienceUpdatetagsInput>;
  type?: InputMaybe<AudienceType>;
  uniqueCount?: InputMaybe<Scalars['Int']>;
};

export type AudienceUpdateWithoutEventsTargetsDataInput = {
  changeLog?: InputMaybe<ChangeUpdateManyWithoutAudienceInput>;
  description?: InputMaybe<Scalars['String']>;
  deviceIdCount?: InputMaybe<Scalars['Int']>;
  distribution?: InputMaybe<DistributionConfigUpdateManyWithoutAudienceInput>;
  endDate?: InputMaybe<Scalars['DateTime']>;
  geoTargets?: InputMaybe<GeoTargetUpdateManyWithoutAudiencesInput>;
  name?: InputMaybe<Scalars['String']>;
  observationCount?: InputMaybe<Scalars['Int']>;
  orgs?: InputMaybe<OrgUpdateManyWithoutAudiencesInput>;
  reports?: InputMaybe<CampaignReportUpdateManyWithoutAudienceInput>;
  retargetAudiences?: InputMaybe<OrgDataConfigUpdateManyWithoutRetargetingAudienceInput>;
  startDate?: InputMaybe<Scalars['DateTime']>;
  tags?: InputMaybe<AudienceUpdatetagsInput>;
  type?: InputMaybe<AudienceType>;
  uniqueCount?: InputMaybe<Scalars['Int']>;
};

export type AudienceUpdateWithoutGeoTargetsDataInput = {
  changeLog?: InputMaybe<ChangeUpdateManyWithoutAudienceInput>;
  description?: InputMaybe<Scalars['String']>;
  deviceIdCount?: InputMaybe<Scalars['Int']>;
  distribution?: InputMaybe<DistributionConfigUpdateManyWithoutAudienceInput>;
  endDate?: InputMaybe<Scalars['DateTime']>;
  eventsTargets?: InputMaybe<EventsTargetUpdateManyWithoutAudiencesInput>;
  name?: InputMaybe<Scalars['String']>;
  observationCount?: InputMaybe<Scalars['Int']>;
  orgs?: InputMaybe<OrgUpdateManyWithoutAudiencesInput>;
  reports?: InputMaybe<CampaignReportUpdateManyWithoutAudienceInput>;
  retargetAudiences?: InputMaybe<OrgDataConfigUpdateManyWithoutRetargetingAudienceInput>;
  startDate?: InputMaybe<Scalars['DateTime']>;
  tags?: InputMaybe<AudienceUpdatetagsInput>;
  type?: InputMaybe<AudienceType>;
  uniqueCount?: InputMaybe<Scalars['Int']>;
};

export type AudienceUpdateWithoutOrgsDataInput = {
  changeLog?: InputMaybe<ChangeUpdateManyWithoutAudienceInput>;
  description?: InputMaybe<Scalars['String']>;
  deviceIdCount?: InputMaybe<Scalars['Int']>;
  distribution?: InputMaybe<DistributionConfigUpdateManyWithoutAudienceInput>;
  endDate?: InputMaybe<Scalars['DateTime']>;
  eventsTargets?: InputMaybe<EventsTargetUpdateManyWithoutAudiencesInput>;
  geoTargets?: InputMaybe<GeoTargetUpdateManyWithoutAudiencesInput>;
  name?: InputMaybe<Scalars['String']>;
  observationCount?: InputMaybe<Scalars['Int']>;
  reports?: InputMaybe<CampaignReportUpdateManyWithoutAudienceInput>;
  retargetAudiences?: InputMaybe<OrgDataConfigUpdateManyWithoutRetargetingAudienceInput>;
  startDate?: InputMaybe<Scalars['DateTime']>;
  tags?: InputMaybe<AudienceUpdatetagsInput>;
  type?: InputMaybe<AudienceType>;
  uniqueCount?: InputMaybe<Scalars['Int']>;
};

export type AudienceUpdateWithoutReportsDataInput = {
  changeLog?: InputMaybe<ChangeUpdateManyWithoutAudienceInput>;
  description?: InputMaybe<Scalars['String']>;
  deviceIdCount?: InputMaybe<Scalars['Int']>;
  distribution?: InputMaybe<DistributionConfigUpdateManyWithoutAudienceInput>;
  endDate?: InputMaybe<Scalars['DateTime']>;
  eventsTargets?: InputMaybe<EventsTargetUpdateManyWithoutAudiencesInput>;
  geoTargets?: InputMaybe<GeoTargetUpdateManyWithoutAudiencesInput>;
  name?: InputMaybe<Scalars['String']>;
  observationCount?: InputMaybe<Scalars['Int']>;
  orgs?: InputMaybe<OrgUpdateManyWithoutAudiencesInput>;
  retargetAudiences?: InputMaybe<OrgDataConfigUpdateManyWithoutRetargetingAudienceInput>;
  startDate?: InputMaybe<Scalars['DateTime']>;
  tags?: InputMaybe<AudienceUpdatetagsInput>;
  type?: InputMaybe<AudienceType>;
  uniqueCount?: InputMaybe<Scalars['Int']>;
};

export type AudienceUpdateWithoutRetargetAudiencesDataInput = {
  changeLog?: InputMaybe<ChangeUpdateManyWithoutAudienceInput>;
  description?: InputMaybe<Scalars['String']>;
  deviceIdCount?: InputMaybe<Scalars['Int']>;
  distribution?: InputMaybe<DistributionConfigUpdateManyWithoutAudienceInput>;
  endDate?: InputMaybe<Scalars['DateTime']>;
  eventsTargets?: InputMaybe<EventsTargetUpdateManyWithoutAudiencesInput>;
  geoTargets?: InputMaybe<GeoTargetUpdateManyWithoutAudiencesInput>;
  name?: InputMaybe<Scalars['String']>;
  observationCount?: InputMaybe<Scalars['Int']>;
  orgs?: InputMaybe<OrgUpdateManyWithoutAudiencesInput>;
  reports?: InputMaybe<CampaignReportUpdateManyWithoutAudienceInput>;
  startDate?: InputMaybe<Scalars['DateTime']>;
  tags?: InputMaybe<AudienceUpdatetagsInput>;
  type?: InputMaybe<AudienceType>;
  uniqueCount?: InputMaybe<Scalars['Int']>;
};

export type AudienceUpdatetagsInput = {
  set?: InputMaybe<Array<Scalars['String']>>;
};

export type AudienceUpsertNestedInput = {
  create: AudienceCreateInput;
  update: AudienceUpdateDataInput;
};

export type AudienceUpsertWithWhereUniqueNestedInput = {
  create: AudienceCreateInput;
  update: AudienceUpdateDataInput;
  where: AudienceWhereUniqueInput;
};

export type AudienceUpsertWithWhereUniqueWithoutEventsTargetsInput = {
  create: AudienceCreateWithoutEventsTargetsInput;
  update: AudienceUpdateWithoutEventsTargetsDataInput;
  where: AudienceWhereUniqueInput;
};

export type AudienceUpsertWithWhereUniqueWithoutGeoTargetsInput = {
  create: AudienceCreateWithoutGeoTargetsInput;
  update: AudienceUpdateWithoutGeoTargetsDataInput;
  where: AudienceWhereUniqueInput;
};

export type AudienceUpsertWithWhereUniqueWithoutOrgsInput = {
  create: AudienceCreateWithoutOrgsInput;
  update: AudienceUpdateWithoutOrgsDataInput;
  where: AudienceWhereUniqueInput;
};

export type AudienceUpsertWithoutChangeLogInput = {
  create: AudienceCreateWithoutChangeLogInput;
  update: AudienceUpdateWithoutChangeLogDataInput;
};

export type AudienceUpsertWithoutReportsInput = {
  create: AudienceCreateWithoutReportsInput;
  update: AudienceUpdateWithoutReportsDataInput;
};

export type AudienceUpsertWithoutRetargetAudiencesInput = {
  create: AudienceCreateWithoutRetargetAudiencesInput;
  update: AudienceUpdateWithoutRetargetAudiencesDataInput;
};

export type AudienceWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<AudienceWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<AudienceWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<AudienceWhereInput>>;
  changeLog_every?: InputMaybe<ChangeWhereInput>;
  changeLog_none?: InputMaybe<ChangeWhereInput>;
  changeLog_some?: InputMaybe<ChangeWhereInput>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  description?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  description_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  description_ends_with?: InputMaybe<Scalars['String']>;
  /** All values greater than the given value. */
  description_gt?: InputMaybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  description_gte?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  description_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  description_lt?: InputMaybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  description_lte?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  description_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  description_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string. */
  description_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  description_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  description_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  description_starts_with?: InputMaybe<Scalars['String']>;
  deviceIdCount?: InputMaybe<Scalars['Int']>;
  /** All values greater than the given value. */
  deviceIdCount_gt?: InputMaybe<Scalars['Int']>;
  /** All values greater than or equal the given value. */
  deviceIdCount_gte?: InputMaybe<Scalars['Int']>;
  /** All values that are contained in given list. */
  deviceIdCount_in?: InputMaybe<Array<Scalars['Int']>>;
  /** All values less than the given value. */
  deviceIdCount_lt?: InputMaybe<Scalars['Int']>;
  /** All values less than or equal the given value. */
  deviceIdCount_lte?: InputMaybe<Scalars['Int']>;
  /** All values that are not equal to given value. */
  deviceIdCount_not?: InputMaybe<Scalars['Int']>;
  /** All values that are not contained in given list. */
  deviceIdCount_not_in?: InputMaybe<Array<Scalars['Int']>>;
  distribution_every?: InputMaybe<DistributionConfigWhereInput>;
  distribution_none?: InputMaybe<DistributionConfigWhereInput>;
  distribution_some?: InputMaybe<DistributionConfigWhereInput>;
  endDate?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  endDate_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  endDate_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  endDate_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  endDate_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  endDate_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  endDate_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  endDate_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  eventsTargets_every?: InputMaybe<EventsTargetWhereInput>;
  eventsTargets_none?: InputMaybe<EventsTargetWhereInput>;
  eventsTargets_some?: InputMaybe<EventsTargetWhereInput>;
  geoTargets_every?: InputMaybe<GeoTargetWhereInput>;
  geoTargets_none?: InputMaybe<GeoTargetWhereInput>;
  geoTargets_some?: InputMaybe<GeoTargetWhereInput>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: InputMaybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: InputMaybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: InputMaybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  name?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  name_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  name_ends_with?: InputMaybe<Scalars['String']>;
  /** All values greater than the given value. */
  name_gt?: InputMaybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  name_gte?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  name_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  name_lt?: InputMaybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  name_lte?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  name_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  name_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string. */
  name_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  name_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  name_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  name_starts_with?: InputMaybe<Scalars['String']>;
  observationCount?: InputMaybe<Scalars['Int']>;
  /** All values greater than the given value. */
  observationCount_gt?: InputMaybe<Scalars['Int']>;
  /** All values greater than or equal the given value. */
  observationCount_gte?: InputMaybe<Scalars['Int']>;
  /** All values that are contained in given list. */
  observationCount_in?: InputMaybe<Array<Scalars['Int']>>;
  /** All values less than the given value. */
  observationCount_lt?: InputMaybe<Scalars['Int']>;
  /** All values less than or equal the given value. */
  observationCount_lte?: InputMaybe<Scalars['Int']>;
  /** All values that are not equal to given value. */
  observationCount_not?: InputMaybe<Scalars['Int']>;
  /** All values that are not contained in given list. */
  observationCount_not_in?: InputMaybe<Array<Scalars['Int']>>;
  orgs_every?: InputMaybe<OrgWhereInput>;
  orgs_none?: InputMaybe<OrgWhereInput>;
  orgs_some?: InputMaybe<OrgWhereInput>;
  reports_every?: InputMaybe<CampaignReportWhereInput>;
  reports_none?: InputMaybe<CampaignReportWhereInput>;
  reports_some?: InputMaybe<CampaignReportWhereInput>;
  retargetAudiences_every?: InputMaybe<OrgDataConfigWhereInput>;
  retargetAudiences_none?: InputMaybe<OrgDataConfigWhereInput>;
  retargetAudiences_some?: InputMaybe<OrgDataConfigWhereInput>;
  startDate?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  startDate_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  startDate_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  startDate_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  startDate_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  startDate_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  startDate_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  startDate_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  type?: InputMaybe<AudienceType>;
  /** All values that are contained in given list. */
  type_in?: InputMaybe<Array<AudienceType>>;
  /** All values that are not equal to given value. */
  type_not?: InputMaybe<AudienceType>;
  /** All values that are not contained in given list. */
  type_not_in?: InputMaybe<Array<AudienceType>>;
  uniqueCount?: InputMaybe<Scalars['Int']>;
  /** All values greater than the given value. */
  uniqueCount_gt?: InputMaybe<Scalars['Int']>;
  /** All values greater than or equal the given value. */
  uniqueCount_gte?: InputMaybe<Scalars['Int']>;
  /** All values that are contained in given list. */
  uniqueCount_in?: InputMaybe<Array<Scalars['Int']>>;
  /** All values less than the given value. */
  uniqueCount_lt?: InputMaybe<Scalars['Int']>;
  /** All values less than or equal the given value. */
  uniqueCount_lte?: InputMaybe<Scalars['Int']>;
  /** All values that are not equal to given value. */
  uniqueCount_not?: InputMaybe<Scalars['Int']>;
  /** All values that are not contained in given list. */
  uniqueCount_not_in?: InputMaybe<Array<Scalars['Int']>>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
};

export type AudienceWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export type BatchPayload = {
  __typename?: 'BatchPayload';
  /** The number of nodes that have been affected by the Batch operation. */
  count: Scalars['Long'];
};

export type BingConfig = {
  __typename?: 'BingConfig';
  accountId?: Maybe<Scalars['String']>;
  customerId?: Maybe<Scalars['String']>;
  orgDataConfigs?: Maybe<Array<OrgDataConfig>>;
};


export type BingConfigOrgDataConfigsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<OrgDataConfigOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<OrgDataConfigWhereInput>;
};

export type BingConfigCreateOneWithoutOrgDataConfigsInput = {
  create?: InputMaybe<BingConfigCreateWithoutOrgDataConfigsInput>;
};

export type BingConfigCreateWithoutOrgDataConfigsInput = {
  accountId?: InputMaybe<Scalars['String']>;
  customerId?: InputMaybe<Scalars['String']>;
};

export type BingConfigUpdateOneWithoutOrgDataConfigsInput = {
  create?: InputMaybe<BingConfigCreateWithoutOrgDataConfigsInput>;
  delete?: InputMaybe<Scalars['Boolean']>;
  disconnect?: InputMaybe<Scalars['Boolean']>;
  update?: InputMaybe<BingConfigUpdateWithoutOrgDataConfigsDataInput>;
  upsert?: InputMaybe<BingConfigUpsertWithoutOrgDataConfigsInput>;
};

export type BingConfigUpdateWithoutOrgDataConfigsDataInput = {
  accountId?: InputMaybe<Scalars['String']>;
  customerId?: InputMaybe<Scalars['String']>;
};

export type BingConfigUpsertWithoutOrgDataConfigsInput = {
  create: BingConfigCreateWithoutOrgDataConfigsInput;
  update: BingConfigUpdateWithoutOrgDataConfigsDataInput;
};

export type BingConfigWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<BingConfigWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<BingConfigWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<BingConfigWhereInput>>;
  accountId?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  accountId_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  accountId_ends_with?: InputMaybe<Scalars['String']>;
  /** All values greater than the given value. */
  accountId_gt?: InputMaybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  accountId_gte?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  accountId_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  accountId_lt?: InputMaybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  accountId_lte?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  accountId_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  accountId_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string. */
  accountId_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  accountId_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  accountId_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  accountId_starts_with?: InputMaybe<Scalars['String']>;
  customerId?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  customerId_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  customerId_ends_with?: InputMaybe<Scalars['String']>;
  /** All values greater than the given value. */
  customerId_gt?: InputMaybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  customerId_gte?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  customerId_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  customerId_lt?: InputMaybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  customerId_lte?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  customerId_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  customerId_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string. */
  customerId_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  customerId_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  customerId_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  customerId_starts_with?: InputMaybe<Scalars['String']>;
  orgDataConfigs_every?: InputMaybe<OrgDataConfigWhereInput>;
  orgDataConfigs_none?: InputMaybe<OrgDataConfigWhereInput>;
  orgDataConfigs_some?: InputMaybe<OrgDataConfigWhereInput>;
};

export type Brand = Node & {
  __typename?: 'Brand';
  campaignOrder?: Maybe<CampaignOrder>;
  createdAt: Scalars['DateTime'];
  createdBy?: Maybe<User>;
  customer?: Maybe<Customer>;
  description?: Maybe<Scalars['String']>;
  featured?: Maybe<Scalars['Boolean']>;
  id: Scalars['ID'];
  isPublished: Scalars['Boolean'];
  logo?: Maybe<Media>;
  name?: Maybe<Scalars['String']>;
  org?: Maybe<Org>;
  products?: Maybe<Array<Product>>;
  reviews?: Maybe<Array<Review>>;
  updatedAt: Scalars['DateTime'];
};


export type BrandProductsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ProductOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ProductWhereInput>;
};


export type BrandReviewsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ReviewOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ReviewWhereInput>;
};

export type BrandCreateInput = {
  campaignOrder?: InputMaybe<CampaignOrderCreateOneWithoutBrandsInput>;
  createdBy?: InputMaybe<UserCreateOneInput>;
  customer?: InputMaybe<CustomerCreateOneWithoutBrandsInput>;
  description?: InputMaybe<Scalars['String']>;
  featured?: InputMaybe<Scalars['Boolean']>;
  isPublished?: InputMaybe<Scalars['Boolean']>;
  logo?: InputMaybe<MediaCreateOneInput>;
  name?: InputMaybe<Scalars['String']>;
  org?: InputMaybe<OrgCreateOneInput>;
  products?: InputMaybe<ProductCreateManyWithoutBrandInput>;
  reviews?: InputMaybe<ReviewCreateManyInput>;
};

export type BrandCreateManyInput = {
  connect?: InputMaybe<Array<BrandWhereUniqueInput>>;
  create?: InputMaybe<Array<BrandCreateInput>>;
};

export type BrandCreateManyWithoutCampaignOrderInput = {
  connect?: InputMaybe<Array<BrandWhereUniqueInput>>;
  create?: InputMaybe<Array<BrandCreateWithoutCampaignOrderInput>>;
};

export type BrandCreateManyWithoutCustomerInput = {
  connect?: InputMaybe<Array<BrandWhereUniqueInput>>;
  create?: InputMaybe<Array<BrandCreateWithoutCustomerInput>>;
};

export type BrandCreateOneInput = {
  connect?: InputMaybe<BrandWhereUniqueInput>;
  create?: InputMaybe<BrandCreateInput>;
};

export type BrandCreateOneWithoutProductsInput = {
  connect?: InputMaybe<BrandWhereUniqueInput>;
  create?: InputMaybe<BrandCreateWithoutProductsInput>;
};

export type BrandCreateWithoutCampaignOrderInput = {
  createdBy?: InputMaybe<UserCreateOneInput>;
  customer?: InputMaybe<CustomerCreateOneWithoutBrandsInput>;
  description?: InputMaybe<Scalars['String']>;
  featured?: InputMaybe<Scalars['Boolean']>;
  isPublished?: InputMaybe<Scalars['Boolean']>;
  logo?: InputMaybe<MediaCreateOneInput>;
  name?: InputMaybe<Scalars['String']>;
  org?: InputMaybe<OrgCreateOneInput>;
  products?: InputMaybe<ProductCreateManyWithoutBrandInput>;
  reviews?: InputMaybe<ReviewCreateManyInput>;
};

export type BrandCreateWithoutCustomerInput = {
  campaignOrder?: InputMaybe<CampaignOrderCreateOneWithoutBrandsInput>;
  createdBy?: InputMaybe<UserCreateOneInput>;
  description?: InputMaybe<Scalars['String']>;
  featured?: InputMaybe<Scalars['Boolean']>;
  isPublished?: InputMaybe<Scalars['Boolean']>;
  logo?: InputMaybe<MediaCreateOneInput>;
  name?: InputMaybe<Scalars['String']>;
  org?: InputMaybe<OrgCreateOneInput>;
  products?: InputMaybe<ProductCreateManyWithoutBrandInput>;
  reviews?: InputMaybe<ReviewCreateManyInput>;
};

export type BrandCreateWithoutProductsInput = {
  campaignOrder?: InputMaybe<CampaignOrderCreateOneWithoutBrandsInput>;
  createdBy?: InputMaybe<UserCreateOneInput>;
  customer?: InputMaybe<CustomerCreateOneWithoutBrandsInput>;
  description?: InputMaybe<Scalars['String']>;
  featured?: InputMaybe<Scalars['Boolean']>;
  isPublished?: InputMaybe<Scalars['Boolean']>;
  logo?: InputMaybe<MediaCreateOneInput>;
  name?: InputMaybe<Scalars['String']>;
  org?: InputMaybe<OrgCreateOneInput>;
  reviews?: InputMaybe<ReviewCreateManyInput>;
};

export enum BrandOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DescriptionAsc = 'description_ASC',
  DescriptionDesc = 'description_DESC',
  FeaturedAsc = 'featured_ASC',
  FeaturedDesc = 'featured_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  IsPublishedAsc = 'isPublished_ASC',
  IsPublishedDesc = 'isPublished_DESC',
  NameAsc = 'name_ASC',
  NameDesc = 'name_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC'
}

export type BrandUpdateDataInput = {
  campaignOrder?: InputMaybe<CampaignOrderUpdateOneWithoutBrandsInput>;
  createdBy?: InputMaybe<UserUpdateOneInput>;
  customer?: InputMaybe<CustomerUpdateOneWithoutBrandsInput>;
  description?: InputMaybe<Scalars['String']>;
  featured?: InputMaybe<Scalars['Boolean']>;
  isPublished?: InputMaybe<Scalars['Boolean']>;
  logo?: InputMaybe<MediaUpdateOneInput>;
  name?: InputMaybe<Scalars['String']>;
  org?: InputMaybe<OrgUpdateOneInput>;
  products?: InputMaybe<ProductUpdateManyWithoutBrandInput>;
  reviews?: InputMaybe<ReviewUpdateManyInput>;
};

export type BrandUpdateInput = {
  campaignOrder?: InputMaybe<CampaignOrderUpdateOneWithoutBrandsInput>;
  createdBy?: InputMaybe<UserUpdateOneInput>;
  customer?: InputMaybe<CustomerUpdateOneWithoutBrandsInput>;
  description?: InputMaybe<Scalars['String']>;
  featured?: InputMaybe<Scalars['Boolean']>;
  isPublished?: InputMaybe<Scalars['Boolean']>;
  logo?: InputMaybe<MediaUpdateOneInput>;
  name?: InputMaybe<Scalars['String']>;
  org?: InputMaybe<OrgUpdateOneInput>;
  products?: InputMaybe<ProductUpdateManyWithoutBrandInput>;
  reviews?: InputMaybe<ReviewUpdateManyInput>;
};

export type BrandUpdateManyInput = {
  connect?: InputMaybe<Array<BrandWhereUniqueInput>>;
  create?: InputMaybe<Array<BrandCreateInput>>;
  delete?: InputMaybe<Array<BrandWhereUniqueInput>>;
  disconnect?: InputMaybe<Array<BrandWhereUniqueInput>>;
  update?: InputMaybe<Array<BrandUpdateWithWhereUniqueNestedInput>>;
  upsert?: InputMaybe<Array<BrandUpsertWithWhereUniqueNestedInput>>;
};

export type BrandUpdateManyWithoutCampaignOrderInput = {
  connect?: InputMaybe<Array<BrandWhereUniqueInput>>;
  create?: InputMaybe<Array<BrandCreateWithoutCampaignOrderInput>>;
  delete?: InputMaybe<Array<BrandWhereUniqueInput>>;
  disconnect?: InputMaybe<Array<BrandWhereUniqueInput>>;
  update?: InputMaybe<Array<BrandUpdateWithWhereUniqueWithoutCampaignOrderInput>>;
  upsert?: InputMaybe<Array<BrandUpsertWithWhereUniqueWithoutCampaignOrderInput>>;
};

export type BrandUpdateManyWithoutCustomerInput = {
  connect?: InputMaybe<Array<BrandWhereUniqueInput>>;
  create?: InputMaybe<Array<BrandCreateWithoutCustomerInput>>;
  delete?: InputMaybe<Array<BrandWhereUniqueInput>>;
  disconnect?: InputMaybe<Array<BrandWhereUniqueInput>>;
  update?: InputMaybe<Array<BrandUpdateWithWhereUniqueWithoutCustomerInput>>;
  upsert?: InputMaybe<Array<BrandUpsertWithWhereUniqueWithoutCustomerInput>>;
};

export type BrandUpdateOneInput = {
  connect?: InputMaybe<BrandWhereUniqueInput>;
  create?: InputMaybe<BrandCreateInput>;
  delete?: InputMaybe<Scalars['Boolean']>;
  disconnect?: InputMaybe<Scalars['Boolean']>;
  update?: InputMaybe<BrandUpdateDataInput>;
  upsert?: InputMaybe<BrandUpsertNestedInput>;
};

export type BrandUpdateOneWithoutProductsInput = {
  connect?: InputMaybe<BrandWhereUniqueInput>;
  create?: InputMaybe<BrandCreateWithoutProductsInput>;
  delete?: InputMaybe<Scalars['Boolean']>;
  disconnect?: InputMaybe<Scalars['Boolean']>;
  update?: InputMaybe<BrandUpdateWithoutProductsDataInput>;
  upsert?: InputMaybe<BrandUpsertWithoutProductsInput>;
};

export type BrandUpdateWithWhereUniqueNestedInput = {
  data: BrandUpdateDataInput;
  where: BrandWhereUniqueInput;
};

export type BrandUpdateWithWhereUniqueWithoutCampaignOrderInput = {
  data: BrandUpdateWithoutCampaignOrderDataInput;
  where: BrandWhereUniqueInput;
};

export type BrandUpdateWithWhereUniqueWithoutCustomerInput = {
  data: BrandUpdateWithoutCustomerDataInput;
  where: BrandWhereUniqueInput;
};

export type BrandUpdateWithoutCampaignOrderDataInput = {
  createdBy?: InputMaybe<UserUpdateOneInput>;
  customer?: InputMaybe<CustomerUpdateOneWithoutBrandsInput>;
  description?: InputMaybe<Scalars['String']>;
  featured?: InputMaybe<Scalars['Boolean']>;
  isPublished?: InputMaybe<Scalars['Boolean']>;
  logo?: InputMaybe<MediaUpdateOneInput>;
  name?: InputMaybe<Scalars['String']>;
  org?: InputMaybe<OrgUpdateOneInput>;
  products?: InputMaybe<ProductUpdateManyWithoutBrandInput>;
  reviews?: InputMaybe<ReviewUpdateManyInput>;
};

export type BrandUpdateWithoutCustomerDataInput = {
  campaignOrder?: InputMaybe<CampaignOrderUpdateOneWithoutBrandsInput>;
  createdBy?: InputMaybe<UserUpdateOneInput>;
  description?: InputMaybe<Scalars['String']>;
  featured?: InputMaybe<Scalars['Boolean']>;
  isPublished?: InputMaybe<Scalars['Boolean']>;
  logo?: InputMaybe<MediaUpdateOneInput>;
  name?: InputMaybe<Scalars['String']>;
  org?: InputMaybe<OrgUpdateOneInput>;
  products?: InputMaybe<ProductUpdateManyWithoutBrandInput>;
  reviews?: InputMaybe<ReviewUpdateManyInput>;
};

export type BrandUpdateWithoutProductsDataInput = {
  campaignOrder?: InputMaybe<CampaignOrderUpdateOneWithoutBrandsInput>;
  createdBy?: InputMaybe<UserUpdateOneInput>;
  customer?: InputMaybe<CustomerUpdateOneWithoutBrandsInput>;
  description?: InputMaybe<Scalars['String']>;
  featured?: InputMaybe<Scalars['Boolean']>;
  isPublished?: InputMaybe<Scalars['Boolean']>;
  logo?: InputMaybe<MediaUpdateOneInput>;
  name?: InputMaybe<Scalars['String']>;
  org?: InputMaybe<OrgUpdateOneInput>;
  reviews?: InputMaybe<ReviewUpdateManyInput>;
};

export type BrandUpsertNestedInput = {
  create: BrandCreateInput;
  update: BrandUpdateDataInput;
};

export type BrandUpsertWithWhereUniqueNestedInput = {
  create: BrandCreateInput;
  update: BrandUpdateDataInput;
  where: BrandWhereUniqueInput;
};

export type BrandUpsertWithWhereUniqueWithoutCampaignOrderInput = {
  create: BrandCreateWithoutCampaignOrderInput;
  update: BrandUpdateWithoutCampaignOrderDataInput;
  where: BrandWhereUniqueInput;
};

export type BrandUpsertWithWhereUniqueWithoutCustomerInput = {
  create: BrandCreateWithoutCustomerInput;
  update: BrandUpdateWithoutCustomerDataInput;
  where: BrandWhereUniqueInput;
};

export type BrandUpsertWithoutProductsInput = {
  create: BrandCreateWithoutProductsInput;
  update: BrandUpdateWithoutProductsDataInput;
};

export type BrandWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<BrandWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<BrandWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<BrandWhereInput>>;
  campaignOrder?: InputMaybe<CampaignOrderWhereInput>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  createdBy?: InputMaybe<UserWhereInput>;
  customer?: InputMaybe<CustomerWhereInput>;
  description?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  description_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  description_ends_with?: InputMaybe<Scalars['String']>;
  /** All values greater than the given value. */
  description_gt?: InputMaybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  description_gte?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  description_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  description_lt?: InputMaybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  description_lte?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  description_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  description_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string. */
  description_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  description_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  description_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  description_starts_with?: InputMaybe<Scalars['String']>;
  featured?: InputMaybe<Scalars['Boolean']>;
  /** All values that are not equal to given value. */
  featured_not?: InputMaybe<Scalars['Boolean']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: InputMaybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: InputMaybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: InputMaybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  isPublished?: InputMaybe<Scalars['Boolean']>;
  /** All values that are not equal to given value. */
  isPublished_not?: InputMaybe<Scalars['Boolean']>;
  logo?: InputMaybe<MediaWhereInput>;
  name?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  name_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  name_ends_with?: InputMaybe<Scalars['String']>;
  /** All values greater than the given value. */
  name_gt?: InputMaybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  name_gte?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  name_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  name_lt?: InputMaybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  name_lte?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  name_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  name_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string. */
  name_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  name_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  name_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  name_starts_with?: InputMaybe<Scalars['String']>;
  org?: InputMaybe<OrgWhereInput>;
  products_every?: InputMaybe<ProductWhereInput>;
  products_none?: InputMaybe<ProductWhereInput>;
  products_some?: InputMaybe<ProductWhereInput>;
  reviews_every?: InputMaybe<ReviewWhereInput>;
  reviews_none?: InputMaybe<ReviewWhereInput>;
  reviews_some?: InputMaybe<ReviewWhereInput>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
};

export type BrandWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
  name?: InputMaybe<Scalars['String']>;
};

export type ById = {
  id?: InputMaybe<Scalars['Int']>;
};

export type CallEvent = Node & {
  __typename?: 'CallEvent';
  accountSid?: Maybe<Scalars['String']>;
  apiVersion?: Maybe<Scalars['String']>;
  callDuration?: Maybe<Scalars['String']>;
  callSid?: Maybe<Scalars['String']>;
  callStatus?: Maybe<Scalars['String']>;
  called?: Maybe<Scalars['String']>;
  calledCity?: Maybe<Scalars['String']>;
  calledCountry?: Maybe<Scalars['String']>;
  calledState?: Maybe<Scalars['String']>;
  calledZip?: Maybe<Scalars['String']>;
  caller?: Maybe<Scalars['String']>;
  callerCity?: Maybe<Scalars['String']>;
  callerCountry?: Maybe<Scalars['String']>;
  callerState?: Maybe<Scalars['String']>;
  callerZip?: Maybe<Scalars['String']>;
  campaign?: Maybe<Campaign>;
  createdAt: Scalars['DateTime'];
  direction?: Maybe<Scalars['String']>;
  duration?: Maybe<Scalars['String']>;
  from?: Maybe<Scalars['String']>;
  fromCity?: Maybe<Scalars['String']>;
  fromCountry?: Maybe<Scalars['String']>;
  fromState?: Maybe<Scalars['String']>;
  fromZip?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  to?: Maybe<Scalars['String']>;
  toCity?: Maybe<Scalars['String']>;
  toCountry?: Maybe<Scalars['String']>;
  toState?: Maybe<Scalars['String']>;
  toZip?: Maybe<Scalars['String']>;
  updatedAt: Scalars['DateTime'];
};

export type CallEventCreateManyWithoutCampaignInput = {
  connect?: InputMaybe<Array<CallEventWhereUniqueInput>>;
  create?: InputMaybe<Array<CallEventCreateWithoutCampaignInput>>;
};

export type CallEventCreateWithoutCampaignInput = {
  accountSid?: InputMaybe<Scalars['String']>;
  apiVersion?: InputMaybe<Scalars['String']>;
  callDuration?: InputMaybe<Scalars['String']>;
  callSid?: InputMaybe<Scalars['String']>;
  callStatus?: InputMaybe<Scalars['String']>;
  called?: InputMaybe<Scalars['String']>;
  calledCity?: InputMaybe<Scalars['String']>;
  calledCountry?: InputMaybe<Scalars['String']>;
  calledState?: InputMaybe<Scalars['String']>;
  calledZip?: InputMaybe<Scalars['String']>;
  caller?: InputMaybe<Scalars['String']>;
  callerCity?: InputMaybe<Scalars['String']>;
  callerCountry?: InputMaybe<Scalars['String']>;
  callerState?: InputMaybe<Scalars['String']>;
  callerZip?: InputMaybe<Scalars['String']>;
  direction?: InputMaybe<Scalars['String']>;
  duration?: InputMaybe<Scalars['String']>;
  from?: InputMaybe<Scalars['String']>;
  fromCity?: InputMaybe<Scalars['String']>;
  fromCountry?: InputMaybe<Scalars['String']>;
  fromState?: InputMaybe<Scalars['String']>;
  fromZip?: InputMaybe<Scalars['String']>;
  to?: InputMaybe<Scalars['String']>;
  toCity?: InputMaybe<Scalars['String']>;
  toCountry?: InputMaybe<Scalars['String']>;
  toState?: InputMaybe<Scalars['String']>;
  toZip?: InputMaybe<Scalars['String']>;
};

export enum CallEventOrderByInput {
  AccountSidAsc = 'accountSid_ASC',
  AccountSidDesc = 'accountSid_DESC',
  ApiVersionAsc = 'apiVersion_ASC',
  ApiVersionDesc = 'apiVersion_DESC',
  CallDurationAsc = 'callDuration_ASC',
  CallDurationDesc = 'callDuration_DESC',
  CallSidAsc = 'callSid_ASC',
  CallSidDesc = 'callSid_DESC',
  CallStatusAsc = 'callStatus_ASC',
  CallStatusDesc = 'callStatus_DESC',
  CalledCityAsc = 'calledCity_ASC',
  CalledCityDesc = 'calledCity_DESC',
  CalledCountryAsc = 'calledCountry_ASC',
  CalledCountryDesc = 'calledCountry_DESC',
  CalledStateAsc = 'calledState_ASC',
  CalledStateDesc = 'calledState_DESC',
  CalledZipAsc = 'calledZip_ASC',
  CalledZipDesc = 'calledZip_DESC',
  CalledAsc = 'called_ASC',
  CalledDesc = 'called_DESC',
  CallerCityAsc = 'callerCity_ASC',
  CallerCityDesc = 'callerCity_DESC',
  CallerCountryAsc = 'callerCountry_ASC',
  CallerCountryDesc = 'callerCountry_DESC',
  CallerStateAsc = 'callerState_ASC',
  CallerStateDesc = 'callerState_DESC',
  CallerZipAsc = 'callerZip_ASC',
  CallerZipDesc = 'callerZip_DESC',
  CallerAsc = 'caller_ASC',
  CallerDesc = 'caller_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DirectionAsc = 'direction_ASC',
  DirectionDesc = 'direction_DESC',
  DurationAsc = 'duration_ASC',
  DurationDesc = 'duration_DESC',
  FromCityAsc = 'fromCity_ASC',
  FromCityDesc = 'fromCity_DESC',
  FromCountryAsc = 'fromCountry_ASC',
  FromCountryDesc = 'fromCountry_DESC',
  FromStateAsc = 'fromState_ASC',
  FromStateDesc = 'fromState_DESC',
  FromZipAsc = 'fromZip_ASC',
  FromZipDesc = 'fromZip_DESC',
  FromAsc = 'from_ASC',
  FromDesc = 'from_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  ToCityAsc = 'toCity_ASC',
  ToCityDesc = 'toCity_DESC',
  ToCountryAsc = 'toCountry_ASC',
  ToCountryDesc = 'toCountry_DESC',
  ToStateAsc = 'toState_ASC',
  ToStateDesc = 'toState_DESC',
  ToZipAsc = 'toZip_ASC',
  ToZipDesc = 'toZip_DESC',
  ToAsc = 'to_ASC',
  ToDesc = 'to_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC'
}

export type CallEventUpdateManyWithoutCampaignInput = {
  connect?: InputMaybe<Array<CallEventWhereUniqueInput>>;
  create?: InputMaybe<Array<CallEventCreateWithoutCampaignInput>>;
  delete?: InputMaybe<Array<CallEventWhereUniqueInput>>;
  disconnect?: InputMaybe<Array<CallEventWhereUniqueInput>>;
  update?: InputMaybe<Array<CallEventUpdateWithWhereUniqueWithoutCampaignInput>>;
  upsert?: InputMaybe<Array<CallEventUpsertWithWhereUniqueWithoutCampaignInput>>;
};

export type CallEventUpdateWithWhereUniqueWithoutCampaignInput = {
  data: CallEventUpdateWithoutCampaignDataInput;
  where: CallEventWhereUniqueInput;
};

export type CallEventUpdateWithoutCampaignDataInput = {
  accountSid?: InputMaybe<Scalars['String']>;
  apiVersion?: InputMaybe<Scalars['String']>;
  callDuration?: InputMaybe<Scalars['String']>;
  callSid?: InputMaybe<Scalars['String']>;
  callStatus?: InputMaybe<Scalars['String']>;
  called?: InputMaybe<Scalars['String']>;
  calledCity?: InputMaybe<Scalars['String']>;
  calledCountry?: InputMaybe<Scalars['String']>;
  calledState?: InputMaybe<Scalars['String']>;
  calledZip?: InputMaybe<Scalars['String']>;
  caller?: InputMaybe<Scalars['String']>;
  callerCity?: InputMaybe<Scalars['String']>;
  callerCountry?: InputMaybe<Scalars['String']>;
  callerState?: InputMaybe<Scalars['String']>;
  callerZip?: InputMaybe<Scalars['String']>;
  direction?: InputMaybe<Scalars['String']>;
  duration?: InputMaybe<Scalars['String']>;
  from?: InputMaybe<Scalars['String']>;
  fromCity?: InputMaybe<Scalars['String']>;
  fromCountry?: InputMaybe<Scalars['String']>;
  fromState?: InputMaybe<Scalars['String']>;
  fromZip?: InputMaybe<Scalars['String']>;
  to?: InputMaybe<Scalars['String']>;
  toCity?: InputMaybe<Scalars['String']>;
  toCountry?: InputMaybe<Scalars['String']>;
  toState?: InputMaybe<Scalars['String']>;
  toZip?: InputMaybe<Scalars['String']>;
};

export type CallEventUpsertWithWhereUniqueWithoutCampaignInput = {
  create: CallEventCreateWithoutCampaignInput;
  update: CallEventUpdateWithoutCampaignDataInput;
  where: CallEventWhereUniqueInput;
};

export type CallEventWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<CallEventWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<CallEventWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<CallEventWhereInput>>;
  accountSid?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  accountSid_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  accountSid_ends_with?: InputMaybe<Scalars['String']>;
  /** All values greater than the given value. */
  accountSid_gt?: InputMaybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  accountSid_gte?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  accountSid_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  accountSid_lt?: InputMaybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  accountSid_lte?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  accountSid_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  accountSid_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string. */
  accountSid_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  accountSid_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  accountSid_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  accountSid_starts_with?: InputMaybe<Scalars['String']>;
  apiVersion?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  apiVersion_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  apiVersion_ends_with?: InputMaybe<Scalars['String']>;
  /** All values greater than the given value. */
  apiVersion_gt?: InputMaybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  apiVersion_gte?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  apiVersion_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  apiVersion_lt?: InputMaybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  apiVersion_lte?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  apiVersion_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  apiVersion_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string. */
  apiVersion_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  apiVersion_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  apiVersion_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  apiVersion_starts_with?: InputMaybe<Scalars['String']>;
  callDuration?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  callDuration_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  callDuration_ends_with?: InputMaybe<Scalars['String']>;
  /** All values greater than the given value. */
  callDuration_gt?: InputMaybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  callDuration_gte?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  callDuration_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  callDuration_lt?: InputMaybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  callDuration_lte?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  callDuration_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  callDuration_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string. */
  callDuration_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  callDuration_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  callDuration_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  callDuration_starts_with?: InputMaybe<Scalars['String']>;
  callSid?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  callSid_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  callSid_ends_with?: InputMaybe<Scalars['String']>;
  /** All values greater than the given value. */
  callSid_gt?: InputMaybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  callSid_gte?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  callSid_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  callSid_lt?: InputMaybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  callSid_lte?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  callSid_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  callSid_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string. */
  callSid_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  callSid_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  callSid_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  callSid_starts_with?: InputMaybe<Scalars['String']>;
  callStatus?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  callStatus_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  callStatus_ends_with?: InputMaybe<Scalars['String']>;
  /** All values greater than the given value. */
  callStatus_gt?: InputMaybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  callStatus_gte?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  callStatus_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  callStatus_lt?: InputMaybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  callStatus_lte?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  callStatus_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  callStatus_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string. */
  callStatus_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  callStatus_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  callStatus_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  callStatus_starts_with?: InputMaybe<Scalars['String']>;
  called?: InputMaybe<Scalars['String']>;
  calledCity?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  calledCity_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  calledCity_ends_with?: InputMaybe<Scalars['String']>;
  /** All values greater than the given value. */
  calledCity_gt?: InputMaybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  calledCity_gte?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  calledCity_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  calledCity_lt?: InputMaybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  calledCity_lte?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  calledCity_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  calledCity_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string. */
  calledCity_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  calledCity_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  calledCity_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  calledCity_starts_with?: InputMaybe<Scalars['String']>;
  calledCountry?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  calledCountry_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  calledCountry_ends_with?: InputMaybe<Scalars['String']>;
  /** All values greater than the given value. */
  calledCountry_gt?: InputMaybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  calledCountry_gte?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  calledCountry_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  calledCountry_lt?: InputMaybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  calledCountry_lte?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  calledCountry_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  calledCountry_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string. */
  calledCountry_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  calledCountry_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  calledCountry_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  calledCountry_starts_with?: InputMaybe<Scalars['String']>;
  calledState?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  calledState_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  calledState_ends_with?: InputMaybe<Scalars['String']>;
  /** All values greater than the given value. */
  calledState_gt?: InputMaybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  calledState_gte?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  calledState_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  calledState_lt?: InputMaybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  calledState_lte?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  calledState_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  calledState_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string. */
  calledState_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  calledState_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  calledState_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  calledState_starts_with?: InputMaybe<Scalars['String']>;
  calledZip?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  calledZip_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  calledZip_ends_with?: InputMaybe<Scalars['String']>;
  /** All values greater than the given value. */
  calledZip_gt?: InputMaybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  calledZip_gte?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  calledZip_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  calledZip_lt?: InputMaybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  calledZip_lte?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  calledZip_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  calledZip_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string. */
  calledZip_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  calledZip_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  calledZip_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  calledZip_starts_with?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  called_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  called_ends_with?: InputMaybe<Scalars['String']>;
  /** All values greater than the given value. */
  called_gt?: InputMaybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  called_gte?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  called_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  called_lt?: InputMaybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  called_lte?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  called_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  called_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string. */
  called_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  called_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  called_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  called_starts_with?: InputMaybe<Scalars['String']>;
  caller?: InputMaybe<Scalars['String']>;
  callerCity?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  callerCity_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  callerCity_ends_with?: InputMaybe<Scalars['String']>;
  /** All values greater than the given value. */
  callerCity_gt?: InputMaybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  callerCity_gte?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  callerCity_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  callerCity_lt?: InputMaybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  callerCity_lte?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  callerCity_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  callerCity_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string. */
  callerCity_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  callerCity_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  callerCity_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  callerCity_starts_with?: InputMaybe<Scalars['String']>;
  callerCountry?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  callerCountry_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  callerCountry_ends_with?: InputMaybe<Scalars['String']>;
  /** All values greater than the given value. */
  callerCountry_gt?: InputMaybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  callerCountry_gte?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  callerCountry_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  callerCountry_lt?: InputMaybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  callerCountry_lte?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  callerCountry_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  callerCountry_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string. */
  callerCountry_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  callerCountry_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  callerCountry_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  callerCountry_starts_with?: InputMaybe<Scalars['String']>;
  callerState?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  callerState_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  callerState_ends_with?: InputMaybe<Scalars['String']>;
  /** All values greater than the given value. */
  callerState_gt?: InputMaybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  callerState_gte?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  callerState_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  callerState_lt?: InputMaybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  callerState_lte?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  callerState_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  callerState_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string. */
  callerState_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  callerState_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  callerState_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  callerState_starts_with?: InputMaybe<Scalars['String']>;
  callerZip?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  callerZip_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  callerZip_ends_with?: InputMaybe<Scalars['String']>;
  /** All values greater than the given value. */
  callerZip_gt?: InputMaybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  callerZip_gte?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  callerZip_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  callerZip_lt?: InputMaybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  callerZip_lte?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  callerZip_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  callerZip_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string. */
  callerZip_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  callerZip_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  callerZip_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  callerZip_starts_with?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  caller_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  caller_ends_with?: InputMaybe<Scalars['String']>;
  /** All values greater than the given value. */
  caller_gt?: InputMaybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  caller_gte?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  caller_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  caller_lt?: InputMaybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  caller_lte?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  caller_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  caller_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string. */
  caller_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  caller_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  caller_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  caller_starts_with?: InputMaybe<Scalars['String']>;
  campaign?: InputMaybe<CampaignWhereInput>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  direction?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  direction_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  direction_ends_with?: InputMaybe<Scalars['String']>;
  /** All values greater than the given value. */
  direction_gt?: InputMaybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  direction_gte?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  direction_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  direction_lt?: InputMaybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  direction_lte?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  direction_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  direction_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string. */
  direction_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  direction_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  direction_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  direction_starts_with?: InputMaybe<Scalars['String']>;
  duration?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  duration_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  duration_ends_with?: InputMaybe<Scalars['String']>;
  /** All values greater than the given value. */
  duration_gt?: InputMaybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  duration_gte?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  duration_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  duration_lt?: InputMaybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  duration_lte?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  duration_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  duration_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string. */
  duration_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  duration_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  duration_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  duration_starts_with?: InputMaybe<Scalars['String']>;
  from?: InputMaybe<Scalars['String']>;
  fromCity?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  fromCity_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  fromCity_ends_with?: InputMaybe<Scalars['String']>;
  /** All values greater than the given value. */
  fromCity_gt?: InputMaybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  fromCity_gte?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  fromCity_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  fromCity_lt?: InputMaybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  fromCity_lte?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  fromCity_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  fromCity_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string. */
  fromCity_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  fromCity_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  fromCity_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  fromCity_starts_with?: InputMaybe<Scalars['String']>;
  fromCountry?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  fromCountry_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  fromCountry_ends_with?: InputMaybe<Scalars['String']>;
  /** All values greater than the given value. */
  fromCountry_gt?: InputMaybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  fromCountry_gte?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  fromCountry_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  fromCountry_lt?: InputMaybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  fromCountry_lte?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  fromCountry_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  fromCountry_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string. */
  fromCountry_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  fromCountry_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  fromCountry_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  fromCountry_starts_with?: InputMaybe<Scalars['String']>;
  fromState?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  fromState_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  fromState_ends_with?: InputMaybe<Scalars['String']>;
  /** All values greater than the given value. */
  fromState_gt?: InputMaybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  fromState_gte?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  fromState_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  fromState_lt?: InputMaybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  fromState_lte?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  fromState_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  fromState_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string. */
  fromState_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  fromState_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  fromState_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  fromState_starts_with?: InputMaybe<Scalars['String']>;
  fromZip?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  fromZip_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  fromZip_ends_with?: InputMaybe<Scalars['String']>;
  /** All values greater than the given value. */
  fromZip_gt?: InputMaybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  fromZip_gte?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  fromZip_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  fromZip_lt?: InputMaybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  fromZip_lte?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  fromZip_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  fromZip_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string. */
  fromZip_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  fromZip_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  fromZip_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  fromZip_starts_with?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  from_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  from_ends_with?: InputMaybe<Scalars['String']>;
  /** All values greater than the given value. */
  from_gt?: InputMaybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  from_gte?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  from_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  from_lt?: InputMaybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  from_lte?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  from_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  from_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string. */
  from_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  from_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  from_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  from_starts_with?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: InputMaybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: InputMaybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: InputMaybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  to?: InputMaybe<Scalars['String']>;
  toCity?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  toCity_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  toCity_ends_with?: InputMaybe<Scalars['String']>;
  /** All values greater than the given value. */
  toCity_gt?: InputMaybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  toCity_gte?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  toCity_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  toCity_lt?: InputMaybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  toCity_lte?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  toCity_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  toCity_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string. */
  toCity_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  toCity_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  toCity_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  toCity_starts_with?: InputMaybe<Scalars['String']>;
  toCountry?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  toCountry_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  toCountry_ends_with?: InputMaybe<Scalars['String']>;
  /** All values greater than the given value. */
  toCountry_gt?: InputMaybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  toCountry_gte?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  toCountry_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  toCountry_lt?: InputMaybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  toCountry_lte?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  toCountry_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  toCountry_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string. */
  toCountry_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  toCountry_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  toCountry_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  toCountry_starts_with?: InputMaybe<Scalars['String']>;
  toState?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  toState_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  toState_ends_with?: InputMaybe<Scalars['String']>;
  /** All values greater than the given value. */
  toState_gt?: InputMaybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  toState_gte?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  toState_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  toState_lt?: InputMaybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  toState_lte?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  toState_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  toState_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string. */
  toState_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  toState_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  toState_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  toState_starts_with?: InputMaybe<Scalars['String']>;
  toZip?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  toZip_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  toZip_ends_with?: InputMaybe<Scalars['String']>;
  /** All values greater than the given value. */
  toZip_gt?: InputMaybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  toZip_gte?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  toZip_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  toZip_lt?: InputMaybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  toZip_lte?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  toZip_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  toZip_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string. */
  toZip_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  toZip_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  toZip_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  toZip_starts_with?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  to_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  to_ends_with?: InputMaybe<Scalars['String']>;
  /** All values greater than the given value. */
  to_gt?: InputMaybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  to_gte?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  to_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  to_lt?: InputMaybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  to_lte?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  to_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  to_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string. */
  to_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  to_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  to_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  to_starts_with?: InputMaybe<Scalars['String']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
};

export type CallEventWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export type Campaign = Node & {
  __typename?: 'Campaign';
  adProviderId?: Maybe<Scalars['String']>;
  aggregateData?: Maybe<AggregateDataObject>;
  budgetByDay?: Maybe<Scalars['Float']>;
  budgetTotal?: Maybe<Scalars['Float']>;
  callEvents?: Maybe<Array<CallEvent>>;
  campaignOrder?: Maybe<CampaignOrder>;
  campaignPacingData?: Maybe<PacingDataObject>;
  clientOrg?: Maybe<Scalars['String']>;
  cpm?: Maybe<Scalars['Float']>;
  createdAt: Scalars['DateTime'];
  data?: Maybe<Scalars['Json']>;
  demandSidePlatform?: Maybe<DemandSidePlatform>;
  endDate?: Maybe<Scalars['DateTime']>;
  forwardingNumber?: Maybe<Scalars['String']>;
  googleAnalyticsMetaData?: Maybe<GoogleAnalytics>;
  id: Scalars['ID'];
  lineItems?: Maybe<Array<LineItem>>;
  logsKey?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  orgs?: Maybe<Array<Org>>;
  originalEndDate?: Maybe<Scalars['DateTime']>;
  originalStartDate?: Maybe<Scalars['DateTime']>;
  phoneNumber?: Maybe<Scalars['String']>;
  rawCost?: Maybe<Scalars['Float']>;
  reports?: Maybe<Array<CampaignReport>>;
  startDate?: Maybe<Scalars['DateTime']>;
  updatedAt: Scalars['DateTime'];
};


export type CampaignCallEventsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<CallEventOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<CallEventWhereInput>;
};


export type CampaignLineItemsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<LineItemOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<LineItemWhereInput>;
};


export type CampaignOrgsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<OrgOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<OrgWhereInput>;
};


export type CampaignReportsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<CampaignReportOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<CampaignReportWhereInput>;
};

export type CampaignChecklist = Node & {
  __typename?: 'CampaignChecklist';
  campaignOrders?: Maybe<Array<CampaignOrder>>;
  id: Scalars['ID'];
  processFive: Scalars['Boolean'];
  processFiveText?: Maybe<Scalars['Json']>;
  processFour: Scalars['Boolean'];
  processFourText?: Maybe<Scalars['Json']>;
  processOne: Scalars['Boolean'];
  processOneText?: Maybe<Scalars['Json']>;
  processThree: Scalars['Boolean'];
  processThreeText?: Maybe<Scalars['Json']>;
  processTwo: Scalars['Boolean'];
  processTwoText?: Maybe<Scalars['Json']>;
};


export type CampaignChecklistCampaignOrdersArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<CampaignOrderOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<CampaignOrderWhereInput>;
};

export type CampaignChecklistCreateOneWithoutCampaignOrdersInput = {
  connect?: InputMaybe<CampaignChecklistWhereUniqueInput>;
  create?: InputMaybe<CampaignChecklistCreateWithoutCampaignOrdersInput>;
};

export type CampaignChecklistCreateWithoutCampaignOrdersInput = {
  processFive?: InputMaybe<Scalars['Boolean']>;
  processFiveText?: InputMaybe<Scalars['Json']>;
  processFour?: InputMaybe<Scalars['Boolean']>;
  processFourText?: InputMaybe<Scalars['Json']>;
  processOne?: InputMaybe<Scalars['Boolean']>;
  processOneText?: InputMaybe<Scalars['Json']>;
  processThree?: InputMaybe<Scalars['Boolean']>;
  processThreeText?: InputMaybe<Scalars['Json']>;
  processTwo?: InputMaybe<Scalars['Boolean']>;
  processTwoText?: InputMaybe<Scalars['Json']>;
};

export type CampaignChecklistUpdateOneWithoutCampaignOrdersInput = {
  connect?: InputMaybe<CampaignChecklistWhereUniqueInput>;
  create?: InputMaybe<CampaignChecklistCreateWithoutCampaignOrdersInput>;
  delete?: InputMaybe<Scalars['Boolean']>;
  disconnect?: InputMaybe<Scalars['Boolean']>;
  update?: InputMaybe<CampaignChecklistUpdateWithoutCampaignOrdersDataInput>;
  upsert?: InputMaybe<CampaignChecklistUpsertWithoutCampaignOrdersInput>;
};

export type CampaignChecklistUpdateWithoutCampaignOrdersDataInput = {
  processFive?: InputMaybe<Scalars['Boolean']>;
  processFiveText?: InputMaybe<Scalars['Json']>;
  processFour?: InputMaybe<Scalars['Boolean']>;
  processFourText?: InputMaybe<Scalars['Json']>;
  processOne?: InputMaybe<Scalars['Boolean']>;
  processOneText?: InputMaybe<Scalars['Json']>;
  processThree?: InputMaybe<Scalars['Boolean']>;
  processThreeText?: InputMaybe<Scalars['Json']>;
  processTwo?: InputMaybe<Scalars['Boolean']>;
  processTwoText?: InputMaybe<Scalars['Json']>;
};

export type CampaignChecklistUpsertWithoutCampaignOrdersInput = {
  create: CampaignChecklistCreateWithoutCampaignOrdersInput;
  update: CampaignChecklistUpdateWithoutCampaignOrdersDataInput;
};

export type CampaignChecklistWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<CampaignChecklistWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<CampaignChecklistWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<CampaignChecklistWhereInput>>;
  campaignOrders_every?: InputMaybe<CampaignOrderWhereInput>;
  campaignOrders_none?: InputMaybe<CampaignOrderWhereInput>;
  campaignOrders_some?: InputMaybe<CampaignOrderWhereInput>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: InputMaybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: InputMaybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: InputMaybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  processFive?: InputMaybe<Scalars['Boolean']>;
  /** All values that are not equal to given value. */
  processFive_not?: InputMaybe<Scalars['Boolean']>;
  processFour?: InputMaybe<Scalars['Boolean']>;
  /** All values that are not equal to given value. */
  processFour_not?: InputMaybe<Scalars['Boolean']>;
  processOne?: InputMaybe<Scalars['Boolean']>;
  /** All values that are not equal to given value. */
  processOne_not?: InputMaybe<Scalars['Boolean']>;
  processThree?: InputMaybe<Scalars['Boolean']>;
  /** All values that are not equal to given value. */
  processThree_not?: InputMaybe<Scalars['Boolean']>;
  processTwo?: InputMaybe<Scalars['Boolean']>;
  /** All values that are not equal to given value. */
  processTwo_not?: InputMaybe<Scalars['Boolean']>;
};

export type CampaignChecklistWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

/** A connection to a list of items. */
export type CampaignConnection = {
  __typename?: 'CampaignConnection';
  aggregate: AggregateCampaign;
  /** A list of edges. */
  edges: Array<Maybe<CampaignEdge>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type CampaignCreateInput = {
  adProviderId?: InputMaybe<Scalars['String']>;
  aggregateData?: InputMaybe<AggregateDataObjectCreateOneWithoutCampaignInput>;
  budgetByDay?: InputMaybe<Scalars['Float']>;
  budgetTotal?: InputMaybe<Scalars['Float']>;
  callEvents?: InputMaybe<CallEventCreateManyWithoutCampaignInput>;
  campaignOrder?: InputMaybe<CampaignOrderCreateOneWithoutCampaignsInput>;
  campaignPacingData?: InputMaybe<PacingDataObjectCreateOneWithoutCampaignInput>;
  clientOrg?: InputMaybe<Scalars['String']>;
  cpm?: InputMaybe<Scalars['Float']>;
  data?: InputMaybe<Scalars['Json']>;
  demandSidePlatform?: InputMaybe<DemandSidePlatform>;
  endDate?: InputMaybe<Scalars['DateTime']>;
  forwardingNumber?: InputMaybe<Scalars['String']>;
  googleAnalyticsMetaData?: InputMaybe<GoogleAnalyticsCreateOneWithoutCampaignsInput>;
  lineItems?: InputMaybe<LineItemCreateManyWithoutCampaignInput>;
  logsKey?: InputMaybe<Scalars['String']>;
  name?: InputMaybe<Scalars['String']>;
  orgs?: InputMaybe<OrgCreateManyWithoutCampaignsInput>;
  originalEndDate?: InputMaybe<Scalars['DateTime']>;
  originalStartDate?: InputMaybe<Scalars['DateTime']>;
  phoneNumber?: InputMaybe<Scalars['String']>;
  rawCost?: InputMaybe<Scalars['Float']>;
  reports?: InputMaybe<CampaignReportCreateManyWithoutCampaignInput>;
  startDate?: InputMaybe<Scalars['DateTime']>;
};

export type CampaignCreateManyWithoutCampaignOrderInput = {
  connect?: InputMaybe<Array<CampaignWhereUniqueInput>>;
  create?: InputMaybe<Array<CampaignCreateWithoutCampaignOrderInput>>;
};

export type CampaignCreateManyWithoutGoogleAnalyticsMetaDataInput = {
  connect?: InputMaybe<Array<CampaignWhereUniqueInput>>;
  create?: InputMaybe<Array<CampaignCreateWithoutGoogleAnalyticsMetaDataInput>>;
};

export type CampaignCreateManyWithoutOrgsInput = {
  connect?: InputMaybe<Array<CampaignWhereUniqueInput>>;
  create?: InputMaybe<Array<CampaignCreateWithoutOrgsInput>>;
};

export type CampaignCreateOneWithoutAggregateDataInput = {
  connect?: InputMaybe<CampaignWhereUniqueInput>;
  create?: InputMaybe<CampaignCreateWithoutAggregateDataInput>;
};

export type CampaignCreateOneWithoutCampaignPacingDataInput = {
  connect?: InputMaybe<CampaignWhereUniqueInput>;
  create?: InputMaybe<CampaignCreateWithoutCampaignPacingDataInput>;
};

export type CampaignCreateOneWithoutLineItemsInput = {
  connect?: InputMaybe<CampaignWhereUniqueInput>;
  create?: InputMaybe<CampaignCreateWithoutLineItemsInput>;
};

export type CampaignCreateOneWithoutReportsInput = {
  connect?: InputMaybe<CampaignWhereUniqueInput>;
  create?: InputMaybe<CampaignCreateWithoutReportsInput>;
};

export type CampaignCreateWithoutAggregateDataInput = {
  adProviderId?: InputMaybe<Scalars['String']>;
  budgetByDay?: InputMaybe<Scalars['Float']>;
  budgetTotal?: InputMaybe<Scalars['Float']>;
  callEvents?: InputMaybe<CallEventCreateManyWithoutCampaignInput>;
  campaignOrder?: InputMaybe<CampaignOrderCreateOneWithoutCampaignsInput>;
  campaignPacingData?: InputMaybe<PacingDataObjectCreateOneWithoutCampaignInput>;
  clientOrg?: InputMaybe<Scalars['String']>;
  cpm?: InputMaybe<Scalars['Float']>;
  data?: InputMaybe<Scalars['Json']>;
  demandSidePlatform?: InputMaybe<DemandSidePlatform>;
  endDate?: InputMaybe<Scalars['DateTime']>;
  forwardingNumber?: InputMaybe<Scalars['String']>;
  googleAnalyticsMetaData?: InputMaybe<GoogleAnalyticsCreateOneWithoutCampaignsInput>;
  lineItems?: InputMaybe<LineItemCreateManyWithoutCampaignInput>;
  logsKey?: InputMaybe<Scalars['String']>;
  name?: InputMaybe<Scalars['String']>;
  orgs?: InputMaybe<OrgCreateManyWithoutCampaignsInput>;
  originalEndDate?: InputMaybe<Scalars['DateTime']>;
  originalStartDate?: InputMaybe<Scalars['DateTime']>;
  phoneNumber?: InputMaybe<Scalars['String']>;
  rawCost?: InputMaybe<Scalars['Float']>;
  reports?: InputMaybe<CampaignReportCreateManyWithoutCampaignInput>;
  startDate?: InputMaybe<Scalars['DateTime']>;
};

export type CampaignCreateWithoutCampaignOrderInput = {
  adProviderId?: InputMaybe<Scalars['String']>;
  aggregateData?: InputMaybe<AggregateDataObjectCreateOneWithoutCampaignInput>;
  budgetByDay?: InputMaybe<Scalars['Float']>;
  budgetTotal?: InputMaybe<Scalars['Float']>;
  callEvents?: InputMaybe<CallEventCreateManyWithoutCampaignInput>;
  campaignPacingData?: InputMaybe<PacingDataObjectCreateOneWithoutCampaignInput>;
  clientOrg?: InputMaybe<Scalars['String']>;
  cpm?: InputMaybe<Scalars['Float']>;
  data?: InputMaybe<Scalars['Json']>;
  demandSidePlatform?: InputMaybe<DemandSidePlatform>;
  endDate?: InputMaybe<Scalars['DateTime']>;
  forwardingNumber?: InputMaybe<Scalars['String']>;
  googleAnalyticsMetaData?: InputMaybe<GoogleAnalyticsCreateOneWithoutCampaignsInput>;
  lineItems?: InputMaybe<LineItemCreateManyWithoutCampaignInput>;
  logsKey?: InputMaybe<Scalars['String']>;
  name?: InputMaybe<Scalars['String']>;
  orgs?: InputMaybe<OrgCreateManyWithoutCampaignsInput>;
  originalEndDate?: InputMaybe<Scalars['DateTime']>;
  originalStartDate?: InputMaybe<Scalars['DateTime']>;
  phoneNumber?: InputMaybe<Scalars['String']>;
  rawCost?: InputMaybe<Scalars['Float']>;
  reports?: InputMaybe<CampaignReportCreateManyWithoutCampaignInput>;
  startDate?: InputMaybe<Scalars['DateTime']>;
};

export type CampaignCreateWithoutCampaignPacingDataInput = {
  adProviderId?: InputMaybe<Scalars['String']>;
  aggregateData?: InputMaybe<AggregateDataObjectCreateOneWithoutCampaignInput>;
  budgetByDay?: InputMaybe<Scalars['Float']>;
  budgetTotal?: InputMaybe<Scalars['Float']>;
  callEvents?: InputMaybe<CallEventCreateManyWithoutCampaignInput>;
  campaignOrder?: InputMaybe<CampaignOrderCreateOneWithoutCampaignsInput>;
  clientOrg?: InputMaybe<Scalars['String']>;
  cpm?: InputMaybe<Scalars['Float']>;
  data?: InputMaybe<Scalars['Json']>;
  demandSidePlatform?: InputMaybe<DemandSidePlatform>;
  endDate?: InputMaybe<Scalars['DateTime']>;
  forwardingNumber?: InputMaybe<Scalars['String']>;
  googleAnalyticsMetaData?: InputMaybe<GoogleAnalyticsCreateOneWithoutCampaignsInput>;
  lineItems?: InputMaybe<LineItemCreateManyWithoutCampaignInput>;
  logsKey?: InputMaybe<Scalars['String']>;
  name?: InputMaybe<Scalars['String']>;
  orgs?: InputMaybe<OrgCreateManyWithoutCampaignsInput>;
  originalEndDate?: InputMaybe<Scalars['DateTime']>;
  originalStartDate?: InputMaybe<Scalars['DateTime']>;
  phoneNumber?: InputMaybe<Scalars['String']>;
  rawCost?: InputMaybe<Scalars['Float']>;
  reports?: InputMaybe<CampaignReportCreateManyWithoutCampaignInput>;
  startDate?: InputMaybe<Scalars['DateTime']>;
};

export type CampaignCreateWithoutGoogleAnalyticsMetaDataInput = {
  adProviderId?: InputMaybe<Scalars['String']>;
  aggregateData?: InputMaybe<AggregateDataObjectCreateOneWithoutCampaignInput>;
  budgetByDay?: InputMaybe<Scalars['Float']>;
  budgetTotal?: InputMaybe<Scalars['Float']>;
  callEvents?: InputMaybe<CallEventCreateManyWithoutCampaignInput>;
  campaignOrder?: InputMaybe<CampaignOrderCreateOneWithoutCampaignsInput>;
  campaignPacingData?: InputMaybe<PacingDataObjectCreateOneWithoutCampaignInput>;
  clientOrg?: InputMaybe<Scalars['String']>;
  cpm?: InputMaybe<Scalars['Float']>;
  data?: InputMaybe<Scalars['Json']>;
  demandSidePlatform?: InputMaybe<DemandSidePlatform>;
  endDate?: InputMaybe<Scalars['DateTime']>;
  forwardingNumber?: InputMaybe<Scalars['String']>;
  lineItems?: InputMaybe<LineItemCreateManyWithoutCampaignInput>;
  logsKey?: InputMaybe<Scalars['String']>;
  name?: InputMaybe<Scalars['String']>;
  orgs?: InputMaybe<OrgCreateManyWithoutCampaignsInput>;
  originalEndDate?: InputMaybe<Scalars['DateTime']>;
  originalStartDate?: InputMaybe<Scalars['DateTime']>;
  phoneNumber?: InputMaybe<Scalars['String']>;
  rawCost?: InputMaybe<Scalars['Float']>;
  reports?: InputMaybe<CampaignReportCreateManyWithoutCampaignInput>;
  startDate?: InputMaybe<Scalars['DateTime']>;
};

export type CampaignCreateWithoutLineItemsInput = {
  adProviderId?: InputMaybe<Scalars['String']>;
  aggregateData?: InputMaybe<AggregateDataObjectCreateOneWithoutCampaignInput>;
  budgetByDay?: InputMaybe<Scalars['Float']>;
  budgetTotal?: InputMaybe<Scalars['Float']>;
  callEvents?: InputMaybe<CallEventCreateManyWithoutCampaignInput>;
  campaignOrder?: InputMaybe<CampaignOrderCreateOneWithoutCampaignsInput>;
  campaignPacingData?: InputMaybe<PacingDataObjectCreateOneWithoutCampaignInput>;
  clientOrg?: InputMaybe<Scalars['String']>;
  cpm?: InputMaybe<Scalars['Float']>;
  data?: InputMaybe<Scalars['Json']>;
  demandSidePlatform?: InputMaybe<DemandSidePlatform>;
  endDate?: InputMaybe<Scalars['DateTime']>;
  forwardingNumber?: InputMaybe<Scalars['String']>;
  googleAnalyticsMetaData?: InputMaybe<GoogleAnalyticsCreateOneWithoutCampaignsInput>;
  logsKey?: InputMaybe<Scalars['String']>;
  name?: InputMaybe<Scalars['String']>;
  orgs?: InputMaybe<OrgCreateManyWithoutCampaignsInput>;
  originalEndDate?: InputMaybe<Scalars['DateTime']>;
  originalStartDate?: InputMaybe<Scalars['DateTime']>;
  phoneNumber?: InputMaybe<Scalars['String']>;
  rawCost?: InputMaybe<Scalars['Float']>;
  reports?: InputMaybe<CampaignReportCreateManyWithoutCampaignInput>;
  startDate?: InputMaybe<Scalars['DateTime']>;
};

export type CampaignCreateWithoutOrgsInput = {
  adProviderId?: InputMaybe<Scalars['String']>;
  aggregateData?: InputMaybe<AggregateDataObjectCreateOneWithoutCampaignInput>;
  budgetByDay?: InputMaybe<Scalars['Float']>;
  budgetTotal?: InputMaybe<Scalars['Float']>;
  callEvents?: InputMaybe<CallEventCreateManyWithoutCampaignInput>;
  campaignOrder?: InputMaybe<CampaignOrderCreateOneWithoutCampaignsInput>;
  campaignPacingData?: InputMaybe<PacingDataObjectCreateOneWithoutCampaignInput>;
  clientOrg?: InputMaybe<Scalars['String']>;
  cpm?: InputMaybe<Scalars['Float']>;
  data?: InputMaybe<Scalars['Json']>;
  demandSidePlatform?: InputMaybe<DemandSidePlatform>;
  endDate?: InputMaybe<Scalars['DateTime']>;
  forwardingNumber?: InputMaybe<Scalars['String']>;
  googleAnalyticsMetaData?: InputMaybe<GoogleAnalyticsCreateOneWithoutCampaignsInput>;
  lineItems?: InputMaybe<LineItemCreateManyWithoutCampaignInput>;
  logsKey?: InputMaybe<Scalars['String']>;
  name?: InputMaybe<Scalars['String']>;
  originalEndDate?: InputMaybe<Scalars['DateTime']>;
  originalStartDate?: InputMaybe<Scalars['DateTime']>;
  phoneNumber?: InputMaybe<Scalars['String']>;
  rawCost?: InputMaybe<Scalars['Float']>;
  reports?: InputMaybe<CampaignReportCreateManyWithoutCampaignInput>;
  startDate?: InputMaybe<Scalars['DateTime']>;
};

export type CampaignCreateWithoutReportsInput = {
  adProviderId?: InputMaybe<Scalars['String']>;
  aggregateData?: InputMaybe<AggregateDataObjectCreateOneWithoutCampaignInput>;
  budgetByDay?: InputMaybe<Scalars['Float']>;
  budgetTotal?: InputMaybe<Scalars['Float']>;
  callEvents?: InputMaybe<CallEventCreateManyWithoutCampaignInput>;
  campaignOrder?: InputMaybe<CampaignOrderCreateOneWithoutCampaignsInput>;
  campaignPacingData?: InputMaybe<PacingDataObjectCreateOneWithoutCampaignInput>;
  clientOrg?: InputMaybe<Scalars['String']>;
  cpm?: InputMaybe<Scalars['Float']>;
  data?: InputMaybe<Scalars['Json']>;
  demandSidePlatform?: InputMaybe<DemandSidePlatform>;
  endDate?: InputMaybe<Scalars['DateTime']>;
  forwardingNumber?: InputMaybe<Scalars['String']>;
  googleAnalyticsMetaData?: InputMaybe<GoogleAnalyticsCreateOneWithoutCampaignsInput>;
  lineItems?: InputMaybe<LineItemCreateManyWithoutCampaignInput>;
  logsKey?: InputMaybe<Scalars['String']>;
  name?: InputMaybe<Scalars['String']>;
  orgs?: InputMaybe<OrgCreateManyWithoutCampaignsInput>;
  originalEndDate?: InputMaybe<Scalars['DateTime']>;
  originalStartDate?: InputMaybe<Scalars['DateTime']>;
  phoneNumber?: InputMaybe<Scalars['String']>;
  rawCost?: InputMaybe<Scalars['Float']>;
  startDate?: InputMaybe<Scalars['DateTime']>;
};

/** An edge in a connection. */
export type CampaignEdge = {
  __typename?: 'CampaignEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: Campaign;
};

export type CampaignOrder = Node & {
  __typename?: 'CampaignOrder';
  adTags?: Maybe<Array<AdTag>>;
  adUnits?: Maybe<Array<AdUnit>>;
  advertiser?: Maybe<Org>;
  advertiserName?: Maybe<Scalars['String']>;
  age: Array<Scalars['String']>;
  aggregateData?: Maybe<AggregateDataObject>;
  attributionAudiences?: Maybe<Array<Audience>>;
  attributionTargets?: Maybe<Array<GeoTarget>>;
  attributionWindow?: Maybe<Scalars['Int']>;
  awarenessCampaign?: Maybe<Scalars['Boolean']>;
  brands?: Maybe<Array<Brand>>;
  budget?: Maybe<Scalars['Float']>;
  campaignChecklistProcess?: Maybe<CampaignChecklist>;
  campaigns?: Maybe<Array<Campaign>>;
  category: Array<Scalars['String']>;
  changeLog?: Maybe<Array<Change>>;
  cpm?: Maybe<Scalars['Float']>;
  createdAt: Scalars['DateTime'];
  description?: Maybe<Scalars['String']>;
  devices: Array<DeviceType>;
  displayReportDateUnits?: Maybe<Array<DisplayReportDateUnit>>;
  endDate?: Maybe<Scalars['DateTime']>;
  geoTargets?: Maybe<Array<GeoTarget>>;
  id: Scalars['ID'];
  income: Array<Scalars['String']>;
  isEditCampaign?: Maybe<Scalars['Boolean']>;
  isMonitored?: Maybe<Scalars['Boolean']>;
  isRegulated?: Maybe<Scalars['Boolean']>;
  isRequestChange?: Maybe<Scalars['String']>;
  kpi: Kpi;
  kpiGoal?: Maybe<Scalars['Float']>;
  language: Array<Language>;
  name: Scalars['String'];
  objectiveExistingCustomers?: Maybe<Scalars['Int']>;
  objectiveNewCustomers?: Maybe<Scalars['Int']>;
  orgs?: Maybe<Array<Org>>;
  pacingData?: Maybe<PacingDataObject>;
  processorId?: Maybe<Scalars['String']>;
  prospectsKey?: Maybe<Scalars['String']>;
  region: Array<Scalars['String']>;
  reports?: Maybe<Array<CampaignReport>>;
  repullVWI?: Maybe<Scalars['Boolean']>;
  requestorId?: Maybe<Scalars['String']>;
  retargetDayCap?: Maybe<Scalars['Int']>;
  retargetTotalCap?: Maybe<Scalars['Int']>;
  salesforceId?: Maybe<Scalars['String']>;
  signUpCampaign?: Maybe<Scalars['Boolean']>;
  signUpConfig?: Maybe<SignUpConfig>;
  startDate?: Maybe<Scalars['DateTime']>;
  status: CampaignStatus;
  tags: Array<Scalars['String']>;
  targetAudiences?: Maybe<Array<Audience>>;
  targetingCriteria?: Maybe<Scalars['String']>;
  transactionTarget?: Maybe<Scalars['String']>;
  transactionsConfig?: Maybe<TransactionsConfig>;
  transactionsKey?: Maybe<Scalars['String']>;
  type?: Maybe<CampaignType>;
  updatedAt: Scalars['DateTime'];
  version?: Maybe<Scalars['Float']>;
};


export type CampaignOrderAdTagsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<AdTagOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<AdTagWhereInput>;
};


export type CampaignOrderAdUnitsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<AdUnitOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<AdUnitWhereInput>;
};


export type CampaignOrderAttributionAudiencesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<AudienceOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<AudienceWhereInput>;
};


export type CampaignOrderAttributionTargetsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<GeoTargetOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<GeoTargetWhereInput>;
};


export type CampaignOrderBrandsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<BrandOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<BrandWhereInput>;
};


export type CampaignOrderCampaignsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<CampaignOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<CampaignWhereInput>;
};


export type CampaignOrderChangeLogArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ChangeOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ChangeWhereInput>;
};


export type CampaignOrderDisplayReportDateUnitsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<DisplayReportDateUnitOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<DisplayReportDateUnitWhereInput>;
};


export type CampaignOrderGeoTargetsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<GeoTargetOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<GeoTargetWhereInput>;
};


export type CampaignOrderOrgsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<OrgOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<OrgWhereInput>;
};


export type CampaignOrderReportsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<CampaignReportOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<CampaignReportWhereInput>;
};


export type CampaignOrderTargetAudiencesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<AudienceOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<AudienceWhereInput>;
};

export enum CampaignOrderByInput {
  AdProviderIdAsc = 'adProviderId_ASC',
  AdProviderIdDesc = 'adProviderId_DESC',
  BudgetByDayAsc = 'budgetByDay_ASC',
  BudgetByDayDesc = 'budgetByDay_DESC',
  BudgetTotalAsc = 'budgetTotal_ASC',
  BudgetTotalDesc = 'budgetTotal_DESC',
  ClientOrgAsc = 'clientOrg_ASC',
  ClientOrgDesc = 'clientOrg_DESC',
  CpmAsc = 'cpm_ASC',
  CpmDesc = 'cpm_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DataAsc = 'data_ASC',
  DataDesc = 'data_DESC',
  DemandSidePlatformAsc = 'demandSidePlatform_ASC',
  DemandSidePlatformDesc = 'demandSidePlatform_DESC',
  EndDateAsc = 'endDate_ASC',
  EndDateDesc = 'endDate_DESC',
  ForwardingNumberAsc = 'forwardingNumber_ASC',
  ForwardingNumberDesc = 'forwardingNumber_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  LogsKeyAsc = 'logsKey_ASC',
  LogsKeyDesc = 'logsKey_DESC',
  NameAsc = 'name_ASC',
  NameDesc = 'name_DESC',
  OriginalEndDateAsc = 'originalEndDate_ASC',
  OriginalEndDateDesc = 'originalEndDate_DESC',
  OriginalStartDateAsc = 'originalStartDate_ASC',
  OriginalStartDateDesc = 'originalStartDate_DESC',
  PhoneNumberAsc = 'phoneNumber_ASC',
  PhoneNumberDesc = 'phoneNumber_DESC',
  RawCostAsc = 'rawCost_ASC',
  RawCostDesc = 'rawCost_DESC',
  StartDateAsc = 'startDate_ASC',
  StartDateDesc = 'startDate_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC'
}

/** A connection to a list of items. */
export type CampaignOrderConnection = {
  __typename?: 'CampaignOrderConnection';
  aggregate: AggregateCampaignOrder;
  /** A list of edges. */
  edges: Array<Maybe<CampaignOrderEdge>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type CampaignOrderCreateInput = {
  adTags?: InputMaybe<AdTagCreateManyWithoutCampaignOrderInput>;
  adUnits?: InputMaybe<AdUnitCreateManyWithoutCampaignOrderInput>;
  advertiser?: InputMaybe<OrgCreateOneWithoutAdvertiserCampaignOrdersInput>;
  advertiserName?: InputMaybe<Scalars['String']>;
  age?: InputMaybe<CampaignOrderCreateageInput>;
  aggregateData?: InputMaybe<AggregateDataObjectCreateOneWithoutCampaignOrderInput>;
  attributionAudiences?: InputMaybe<AudienceCreateManyInput>;
  attributionTargets?: InputMaybe<GeoTargetCreateManyInput>;
  attributionWindow?: InputMaybe<Scalars['Int']>;
  awarenessCampaign?: InputMaybe<Scalars['Boolean']>;
  brands?: InputMaybe<BrandCreateManyWithoutCampaignOrderInput>;
  budget?: InputMaybe<Scalars['Float']>;
  campaignChecklistProcess?: InputMaybe<CampaignChecklistCreateOneWithoutCampaignOrdersInput>;
  campaigns?: InputMaybe<CampaignCreateManyWithoutCampaignOrderInput>;
  category?: InputMaybe<CampaignOrderCreatecategoryInput>;
  changeLog?: InputMaybe<ChangeCreateManyWithoutCampaignOrderInput>;
  cpm?: InputMaybe<Scalars['Float']>;
  description?: InputMaybe<Scalars['String']>;
  devices?: InputMaybe<CampaignOrderCreatedevicesInput>;
  displayReportDateUnits?: InputMaybe<DisplayReportDateUnitCreateManyInput>;
  endDate?: InputMaybe<Scalars['DateTime']>;
  geoTargets?: InputMaybe<GeoTargetCreateManyWithoutCampaignOrderInput>;
  income?: InputMaybe<CampaignOrderCreateincomeInput>;
  isEditCampaign?: InputMaybe<Scalars['Boolean']>;
  isMonitored?: InputMaybe<Scalars['Boolean']>;
  isRegulated?: InputMaybe<Scalars['Boolean']>;
  isRequestChange?: InputMaybe<Scalars['String']>;
  kpi: Kpi;
  kpiGoal?: InputMaybe<Scalars['Float']>;
  language?: InputMaybe<CampaignOrderCreatelanguageInput>;
  name: Scalars['String'];
  objectiveExistingCustomers?: InputMaybe<Scalars['Int']>;
  objectiveNewCustomers?: InputMaybe<Scalars['Int']>;
  orgs?: InputMaybe<OrgCreateManyWithoutCampaignOrdersInput>;
  pacingData?: InputMaybe<PacingDataObjectCreateOneWithoutCampaignOrderInput>;
  processorId?: InputMaybe<Scalars['String']>;
  prospectsKey?: InputMaybe<Scalars['String']>;
  region?: InputMaybe<CampaignOrderCreateregionInput>;
  reports?: InputMaybe<CampaignReportCreateManyWithoutCampaignOrderInput>;
  repullVWI?: InputMaybe<Scalars['Boolean']>;
  requestorId?: InputMaybe<Scalars['String']>;
  retargetDayCap?: InputMaybe<Scalars['Int']>;
  retargetTotalCap?: InputMaybe<Scalars['Int']>;
  salesforceId?: InputMaybe<Scalars['String']>;
  signUpCampaign?: InputMaybe<Scalars['Boolean']>;
  signUpConfig?: InputMaybe<SignUpConfigCreateOneWithoutCampaignOrdersInput>;
  startDate?: InputMaybe<Scalars['DateTime']>;
  status: CampaignStatus;
  tags?: InputMaybe<CampaignOrderCreatetagsInput>;
  targetAudiences?: InputMaybe<AudienceCreateManyInput>;
  targetingCriteria?: InputMaybe<Scalars['String']>;
  transactionTarget?: InputMaybe<Scalars['String']>;
  transactionsConfig?: InputMaybe<TransactionsConfigCreateOneWithoutCampaignOrdersInput>;
  transactionsKey?: InputMaybe<Scalars['String']>;
  type?: InputMaybe<CampaignType>;
  version?: InputMaybe<Scalars['Float']>;
};

export type CampaignOrderCreateManyWithoutAdvertiserInput = {
  connect?: InputMaybe<Array<CampaignOrderWhereUniqueInput>>;
  create?: InputMaybe<Array<CampaignOrderCreateWithoutAdvertiserInput>>;
};

export type CampaignOrderCreateManyWithoutOrgsInput = {
  connect?: InputMaybe<Array<CampaignOrderWhereUniqueInput>>;
  create?: InputMaybe<Array<CampaignOrderCreateWithoutOrgsInput>>;
};

export type CampaignOrderCreateManyWithoutTransactionsConfigInput = {
  connect?: InputMaybe<Array<CampaignOrderWhereUniqueInput>>;
  create?: InputMaybe<Array<CampaignOrderCreateWithoutTransactionsConfigInput>>;
};

export type CampaignOrderCreateOneInput = {
  connect?: InputMaybe<CampaignOrderWhereUniqueInput>;
  create?: InputMaybe<CampaignOrderCreateInput>;
};

export type CampaignOrderCreateOneWithoutAdTagsInput = {
  connect?: InputMaybe<CampaignOrderWhereUniqueInput>;
  create?: InputMaybe<CampaignOrderCreateWithoutAdTagsInput>;
};

export type CampaignOrderCreateOneWithoutAdUnitsInput = {
  connect?: InputMaybe<CampaignOrderWhereUniqueInput>;
  create?: InputMaybe<CampaignOrderCreateWithoutAdUnitsInput>;
};

export type CampaignOrderCreateOneWithoutAggregateDataInput = {
  connect?: InputMaybe<CampaignOrderWhereUniqueInput>;
  create?: InputMaybe<CampaignOrderCreateWithoutAggregateDataInput>;
};

export type CampaignOrderCreateOneWithoutBrandsInput = {
  connect?: InputMaybe<CampaignOrderWhereUniqueInput>;
  create?: InputMaybe<CampaignOrderCreateWithoutBrandsInput>;
};

export type CampaignOrderCreateOneWithoutCampaignsInput = {
  connect?: InputMaybe<CampaignOrderWhereUniqueInput>;
  create?: InputMaybe<CampaignOrderCreateWithoutCampaignsInput>;
};

export type CampaignOrderCreateOneWithoutChangeLogInput = {
  connect?: InputMaybe<CampaignOrderWhereUniqueInput>;
  create?: InputMaybe<CampaignOrderCreateWithoutChangeLogInput>;
};

export type CampaignOrderCreateOneWithoutGeoTargetsInput = {
  connect?: InputMaybe<CampaignOrderWhereUniqueInput>;
  create?: InputMaybe<CampaignOrderCreateWithoutGeoTargetsInput>;
};

export type CampaignOrderCreateOneWithoutPacingDataInput = {
  connect?: InputMaybe<CampaignOrderWhereUniqueInput>;
  create?: InputMaybe<CampaignOrderCreateWithoutPacingDataInput>;
};

export type CampaignOrderCreateOneWithoutReportsInput = {
  connect?: InputMaybe<CampaignOrderWhereUniqueInput>;
  create?: InputMaybe<CampaignOrderCreateWithoutReportsInput>;
};

export type CampaignOrderCreateWithoutAdTagsInput = {
  adUnits?: InputMaybe<AdUnitCreateManyWithoutCampaignOrderInput>;
  advertiser?: InputMaybe<OrgCreateOneWithoutAdvertiserCampaignOrdersInput>;
  advertiserName?: InputMaybe<Scalars['String']>;
  age?: InputMaybe<CampaignOrderCreateageInput>;
  aggregateData?: InputMaybe<AggregateDataObjectCreateOneWithoutCampaignOrderInput>;
  attributionAudiences?: InputMaybe<AudienceCreateManyInput>;
  attributionTargets?: InputMaybe<GeoTargetCreateManyInput>;
  attributionWindow?: InputMaybe<Scalars['Int']>;
  awarenessCampaign?: InputMaybe<Scalars['Boolean']>;
  brands?: InputMaybe<BrandCreateManyWithoutCampaignOrderInput>;
  budget?: InputMaybe<Scalars['Float']>;
  campaignChecklistProcess?: InputMaybe<CampaignChecklistCreateOneWithoutCampaignOrdersInput>;
  campaigns?: InputMaybe<CampaignCreateManyWithoutCampaignOrderInput>;
  category?: InputMaybe<CampaignOrderCreatecategoryInput>;
  changeLog?: InputMaybe<ChangeCreateManyWithoutCampaignOrderInput>;
  cpm?: InputMaybe<Scalars['Float']>;
  description?: InputMaybe<Scalars['String']>;
  devices?: InputMaybe<CampaignOrderCreatedevicesInput>;
  displayReportDateUnits?: InputMaybe<DisplayReportDateUnitCreateManyInput>;
  endDate?: InputMaybe<Scalars['DateTime']>;
  geoTargets?: InputMaybe<GeoTargetCreateManyWithoutCampaignOrderInput>;
  income?: InputMaybe<CampaignOrderCreateincomeInput>;
  isEditCampaign?: InputMaybe<Scalars['Boolean']>;
  isMonitored?: InputMaybe<Scalars['Boolean']>;
  isRegulated?: InputMaybe<Scalars['Boolean']>;
  isRequestChange?: InputMaybe<Scalars['String']>;
  kpi: Kpi;
  kpiGoal?: InputMaybe<Scalars['Float']>;
  language?: InputMaybe<CampaignOrderCreatelanguageInput>;
  name: Scalars['String'];
  objectiveExistingCustomers?: InputMaybe<Scalars['Int']>;
  objectiveNewCustomers?: InputMaybe<Scalars['Int']>;
  orgs?: InputMaybe<OrgCreateManyWithoutCampaignOrdersInput>;
  pacingData?: InputMaybe<PacingDataObjectCreateOneWithoutCampaignOrderInput>;
  processorId?: InputMaybe<Scalars['String']>;
  prospectsKey?: InputMaybe<Scalars['String']>;
  region?: InputMaybe<CampaignOrderCreateregionInput>;
  reports?: InputMaybe<CampaignReportCreateManyWithoutCampaignOrderInput>;
  repullVWI?: InputMaybe<Scalars['Boolean']>;
  requestorId?: InputMaybe<Scalars['String']>;
  retargetDayCap?: InputMaybe<Scalars['Int']>;
  retargetTotalCap?: InputMaybe<Scalars['Int']>;
  salesforceId?: InputMaybe<Scalars['String']>;
  signUpCampaign?: InputMaybe<Scalars['Boolean']>;
  signUpConfig?: InputMaybe<SignUpConfigCreateOneWithoutCampaignOrdersInput>;
  startDate?: InputMaybe<Scalars['DateTime']>;
  status: CampaignStatus;
  tags?: InputMaybe<CampaignOrderCreatetagsInput>;
  targetAudiences?: InputMaybe<AudienceCreateManyInput>;
  targetingCriteria?: InputMaybe<Scalars['String']>;
  transactionTarget?: InputMaybe<Scalars['String']>;
  transactionsConfig?: InputMaybe<TransactionsConfigCreateOneWithoutCampaignOrdersInput>;
  transactionsKey?: InputMaybe<Scalars['String']>;
  type?: InputMaybe<CampaignType>;
  version?: InputMaybe<Scalars['Float']>;
};

export type CampaignOrderCreateWithoutAdUnitsInput = {
  adTags?: InputMaybe<AdTagCreateManyWithoutCampaignOrderInput>;
  advertiser?: InputMaybe<OrgCreateOneWithoutAdvertiserCampaignOrdersInput>;
  advertiserName?: InputMaybe<Scalars['String']>;
  age?: InputMaybe<CampaignOrderCreateageInput>;
  aggregateData?: InputMaybe<AggregateDataObjectCreateOneWithoutCampaignOrderInput>;
  attributionAudiences?: InputMaybe<AudienceCreateManyInput>;
  attributionTargets?: InputMaybe<GeoTargetCreateManyInput>;
  attributionWindow?: InputMaybe<Scalars['Int']>;
  awarenessCampaign?: InputMaybe<Scalars['Boolean']>;
  brands?: InputMaybe<BrandCreateManyWithoutCampaignOrderInput>;
  budget?: InputMaybe<Scalars['Float']>;
  campaignChecklistProcess?: InputMaybe<CampaignChecklistCreateOneWithoutCampaignOrdersInput>;
  campaigns?: InputMaybe<CampaignCreateManyWithoutCampaignOrderInput>;
  category?: InputMaybe<CampaignOrderCreatecategoryInput>;
  changeLog?: InputMaybe<ChangeCreateManyWithoutCampaignOrderInput>;
  cpm?: InputMaybe<Scalars['Float']>;
  description?: InputMaybe<Scalars['String']>;
  devices?: InputMaybe<CampaignOrderCreatedevicesInput>;
  displayReportDateUnits?: InputMaybe<DisplayReportDateUnitCreateManyInput>;
  endDate?: InputMaybe<Scalars['DateTime']>;
  geoTargets?: InputMaybe<GeoTargetCreateManyWithoutCampaignOrderInput>;
  income?: InputMaybe<CampaignOrderCreateincomeInput>;
  isEditCampaign?: InputMaybe<Scalars['Boolean']>;
  isMonitored?: InputMaybe<Scalars['Boolean']>;
  isRegulated?: InputMaybe<Scalars['Boolean']>;
  isRequestChange?: InputMaybe<Scalars['String']>;
  kpi: Kpi;
  kpiGoal?: InputMaybe<Scalars['Float']>;
  language?: InputMaybe<CampaignOrderCreatelanguageInput>;
  name: Scalars['String'];
  objectiveExistingCustomers?: InputMaybe<Scalars['Int']>;
  objectiveNewCustomers?: InputMaybe<Scalars['Int']>;
  orgs?: InputMaybe<OrgCreateManyWithoutCampaignOrdersInput>;
  pacingData?: InputMaybe<PacingDataObjectCreateOneWithoutCampaignOrderInput>;
  processorId?: InputMaybe<Scalars['String']>;
  prospectsKey?: InputMaybe<Scalars['String']>;
  region?: InputMaybe<CampaignOrderCreateregionInput>;
  reports?: InputMaybe<CampaignReportCreateManyWithoutCampaignOrderInput>;
  repullVWI?: InputMaybe<Scalars['Boolean']>;
  requestorId?: InputMaybe<Scalars['String']>;
  retargetDayCap?: InputMaybe<Scalars['Int']>;
  retargetTotalCap?: InputMaybe<Scalars['Int']>;
  salesforceId?: InputMaybe<Scalars['String']>;
  signUpCampaign?: InputMaybe<Scalars['Boolean']>;
  signUpConfig?: InputMaybe<SignUpConfigCreateOneWithoutCampaignOrdersInput>;
  startDate?: InputMaybe<Scalars['DateTime']>;
  status: CampaignStatus;
  tags?: InputMaybe<CampaignOrderCreatetagsInput>;
  targetAudiences?: InputMaybe<AudienceCreateManyInput>;
  targetingCriteria?: InputMaybe<Scalars['String']>;
  transactionTarget?: InputMaybe<Scalars['String']>;
  transactionsConfig?: InputMaybe<TransactionsConfigCreateOneWithoutCampaignOrdersInput>;
  transactionsKey?: InputMaybe<Scalars['String']>;
  type?: InputMaybe<CampaignType>;
  version?: InputMaybe<Scalars['Float']>;
};

export type CampaignOrderCreateWithoutAdvertiserInput = {
  adTags?: InputMaybe<AdTagCreateManyWithoutCampaignOrderInput>;
  adUnits?: InputMaybe<AdUnitCreateManyWithoutCampaignOrderInput>;
  advertiserName?: InputMaybe<Scalars['String']>;
  age?: InputMaybe<CampaignOrderCreateageInput>;
  aggregateData?: InputMaybe<AggregateDataObjectCreateOneWithoutCampaignOrderInput>;
  attributionAudiences?: InputMaybe<AudienceCreateManyInput>;
  attributionTargets?: InputMaybe<GeoTargetCreateManyInput>;
  attributionWindow?: InputMaybe<Scalars['Int']>;
  awarenessCampaign?: InputMaybe<Scalars['Boolean']>;
  brands?: InputMaybe<BrandCreateManyWithoutCampaignOrderInput>;
  budget?: InputMaybe<Scalars['Float']>;
  campaignChecklistProcess?: InputMaybe<CampaignChecklistCreateOneWithoutCampaignOrdersInput>;
  campaigns?: InputMaybe<CampaignCreateManyWithoutCampaignOrderInput>;
  category?: InputMaybe<CampaignOrderCreatecategoryInput>;
  changeLog?: InputMaybe<ChangeCreateManyWithoutCampaignOrderInput>;
  cpm?: InputMaybe<Scalars['Float']>;
  description?: InputMaybe<Scalars['String']>;
  devices?: InputMaybe<CampaignOrderCreatedevicesInput>;
  displayReportDateUnits?: InputMaybe<DisplayReportDateUnitCreateManyInput>;
  endDate?: InputMaybe<Scalars['DateTime']>;
  geoTargets?: InputMaybe<GeoTargetCreateManyWithoutCampaignOrderInput>;
  income?: InputMaybe<CampaignOrderCreateincomeInput>;
  isEditCampaign?: InputMaybe<Scalars['Boolean']>;
  isMonitored?: InputMaybe<Scalars['Boolean']>;
  isRegulated?: InputMaybe<Scalars['Boolean']>;
  isRequestChange?: InputMaybe<Scalars['String']>;
  kpi: Kpi;
  kpiGoal?: InputMaybe<Scalars['Float']>;
  language?: InputMaybe<CampaignOrderCreatelanguageInput>;
  name: Scalars['String'];
  objectiveExistingCustomers?: InputMaybe<Scalars['Int']>;
  objectiveNewCustomers?: InputMaybe<Scalars['Int']>;
  orgs?: InputMaybe<OrgCreateManyWithoutCampaignOrdersInput>;
  pacingData?: InputMaybe<PacingDataObjectCreateOneWithoutCampaignOrderInput>;
  processorId?: InputMaybe<Scalars['String']>;
  prospectsKey?: InputMaybe<Scalars['String']>;
  region?: InputMaybe<CampaignOrderCreateregionInput>;
  reports?: InputMaybe<CampaignReportCreateManyWithoutCampaignOrderInput>;
  repullVWI?: InputMaybe<Scalars['Boolean']>;
  requestorId?: InputMaybe<Scalars['String']>;
  retargetDayCap?: InputMaybe<Scalars['Int']>;
  retargetTotalCap?: InputMaybe<Scalars['Int']>;
  salesforceId?: InputMaybe<Scalars['String']>;
  signUpCampaign?: InputMaybe<Scalars['Boolean']>;
  signUpConfig?: InputMaybe<SignUpConfigCreateOneWithoutCampaignOrdersInput>;
  startDate?: InputMaybe<Scalars['DateTime']>;
  status: CampaignStatus;
  tags?: InputMaybe<CampaignOrderCreatetagsInput>;
  targetAudiences?: InputMaybe<AudienceCreateManyInput>;
  targetingCriteria?: InputMaybe<Scalars['String']>;
  transactionTarget?: InputMaybe<Scalars['String']>;
  transactionsConfig?: InputMaybe<TransactionsConfigCreateOneWithoutCampaignOrdersInput>;
  transactionsKey?: InputMaybe<Scalars['String']>;
  type?: InputMaybe<CampaignType>;
  version?: InputMaybe<Scalars['Float']>;
};

export type CampaignOrderCreateWithoutAggregateDataInput = {
  adTags?: InputMaybe<AdTagCreateManyWithoutCampaignOrderInput>;
  adUnits?: InputMaybe<AdUnitCreateManyWithoutCampaignOrderInput>;
  advertiser?: InputMaybe<OrgCreateOneWithoutAdvertiserCampaignOrdersInput>;
  advertiserName?: InputMaybe<Scalars['String']>;
  age?: InputMaybe<CampaignOrderCreateageInput>;
  attributionAudiences?: InputMaybe<AudienceCreateManyInput>;
  attributionTargets?: InputMaybe<GeoTargetCreateManyInput>;
  attributionWindow?: InputMaybe<Scalars['Int']>;
  awarenessCampaign?: InputMaybe<Scalars['Boolean']>;
  brands?: InputMaybe<BrandCreateManyWithoutCampaignOrderInput>;
  budget?: InputMaybe<Scalars['Float']>;
  campaignChecklistProcess?: InputMaybe<CampaignChecklistCreateOneWithoutCampaignOrdersInput>;
  campaigns?: InputMaybe<CampaignCreateManyWithoutCampaignOrderInput>;
  category?: InputMaybe<CampaignOrderCreatecategoryInput>;
  changeLog?: InputMaybe<ChangeCreateManyWithoutCampaignOrderInput>;
  cpm?: InputMaybe<Scalars['Float']>;
  description?: InputMaybe<Scalars['String']>;
  devices?: InputMaybe<CampaignOrderCreatedevicesInput>;
  displayReportDateUnits?: InputMaybe<DisplayReportDateUnitCreateManyInput>;
  endDate?: InputMaybe<Scalars['DateTime']>;
  geoTargets?: InputMaybe<GeoTargetCreateManyWithoutCampaignOrderInput>;
  income?: InputMaybe<CampaignOrderCreateincomeInput>;
  isEditCampaign?: InputMaybe<Scalars['Boolean']>;
  isMonitored?: InputMaybe<Scalars['Boolean']>;
  isRegulated?: InputMaybe<Scalars['Boolean']>;
  isRequestChange?: InputMaybe<Scalars['String']>;
  kpi: Kpi;
  kpiGoal?: InputMaybe<Scalars['Float']>;
  language?: InputMaybe<CampaignOrderCreatelanguageInput>;
  name: Scalars['String'];
  objectiveExistingCustomers?: InputMaybe<Scalars['Int']>;
  objectiveNewCustomers?: InputMaybe<Scalars['Int']>;
  orgs?: InputMaybe<OrgCreateManyWithoutCampaignOrdersInput>;
  pacingData?: InputMaybe<PacingDataObjectCreateOneWithoutCampaignOrderInput>;
  processorId?: InputMaybe<Scalars['String']>;
  prospectsKey?: InputMaybe<Scalars['String']>;
  region?: InputMaybe<CampaignOrderCreateregionInput>;
  reports?: InputMaybe<CampaignReportCreateManyWithoutCampaignOrderInput>;
  repullVWI?: InputMaybe<Scalars['Boolean']>;
  requestorId?: InputMaybe<Scalars['String']>;
  retargetDayCap?: InputMaybe<Scalars['Int']>;
  retargetTotalCap?: InputMaybe<Scalars['Int']>;
  salesforceId?: InputMaybe<Scalars['String']>;
  signUpCampaign?: InputMaybe<Scalars['Boolean']>;
  signUpConfig?: InputMaybe<SignUpConfigCreateOneWithoutCampaignOrdersInput>;
  startDate?: InputMaybe<Scalars['DateTime']>;
  status: CampaignStatus;
  tags?: InputMaybe<CampaignOrderCreatetagsInput>;
  targetAudiences?: InputMaybe<AudienceCreateManyInput>;
  targetingCriteria?: InputMaybe<Scalars['String']>;
  transactionTarget?: InputMaybe<Scalars['String']>;
  transactionsConfig?: InputMaybe<TransactionsConfigCreateOneWithoutCampaignOrdersInput>;
  transactionsKey?: InputMaybe<Scalars['String']>;
  type?: InputMaybe<CampaignType>;
  version?: InputMaybe<Scalars['Float']>;
};

export type CampaignOrderCreateWithoutBrandsInput = {
  adTags?: InputMaybe<AdTagCreateManyWithoutCampaignOrderInput>;
  adUnits?: InputMaybe<AdUnitCreateManyWithoutCampaignOrderInput>;
  advertiser?: InputMaybe<OrgCreateOneWithoutAdvertiserCampaignOrdersInput>;
  advertiserName?: InputMaybe<Scalars['String']>;
  age?: InputMaybe<CampaignOrderCreateageInput>;
  aggregateData?: InputMaybe<AggregateDataObjectCreateOneWithoutCampaignOrderInput>;
  attributionAudiences?: InputMaybe<AudienceCreateManyInput>;
  attributionTargets?: InputMaybe<GeoTargetCreateManyInput>;
  attributionWindow?: InputMaybe<Scalars['Int']>;
  awarenessCampaign?: InputMaybe<Scalars['Boolean']>;
  budget?: InputMaybe<Scalars['Float']>;
  campaignChecklistProcess?: InputMaybe<CampaignChecklistCreateOneWithoutCampaignOrdersInput>;
  campaigns?: InputMaybe<CampaignCreateManyWithoutCampaignOrderInput>;
  category?: InputMaybe<CampaignOrderCreatecategoryInput>;
  changeLog?: InputMaybe<ChangeCreateManyWithoutCampaignOrderInput>;
  cpm?: InputMaybe<Scalars['Float']>;
  description?: InputMaybe<Scalars['String']>;
  devices?: InputMaybe<CampaignOrderCreatedevicesInput>;
  displayReportDateUnits?: InputMaybe<DisplayReportDateUnitCreateManyInput>;
  endDate?: InputMaybe<Scalars['DateTime']>;
  geoTargets?: InputMaybe<GeoTargetCreateManyWithoutCampaignOrderInput>;
  income?: InputMaybe<CampaignOrderCreateincomeInput>;
  isEditCampaign?: InputMaybe<Scalars['Boolean']>;
  isMonitored?: InputMaybe<Scalars['Boolean']>;
  isRegulated?: InputMaybe<Scalars['Boolean']>;
  isRequestChange?: InputMaybe<Scalars['String']>;
  kpi: Kpi;
  kpiGoal?: InputMaybe<Scalars['Float']>;
  language?: InputMaybe<CampaignOrderCreatelanguageInput>;
  name: Scalars['String'];
  objectiveExistingCustomers?: InputMaybe<Scalars['Int']>;
  objectiveNewCustomers?: InputMaybe<Scalars['Int']>;
  orgs?: InputMaybe<OrgCreateManyWithoutCampaignOrdersInput>;
  pacingData?: InputMaybe<PacingDataObjectCreateOneWithoutCampaignOrderInput>;
  processorId?: InputMaybe<Scalars['String']>;
  prospectsKey?: InputMaybe<Scalars['String']>;
  region?: InputMaybe<CampaignOrderCreateregionInput>;
  reports?: InputMaybe<CampaignReportCreateManyWithoutCampaignOrderInput>;
  repullVWI?: InputMaybe<Scalars['Boolean']>;
  requestorId?: InputMaybe<Scalars['String']>;
  retargetDayCap?: InputMaybe<Scalars['Int']>;
  retargetTotalCap?: InputMaybe<Scalars['Int']>;
  salesforceId?: InputMaybe<Scalars['String']>;
  signUpCampaign?: InputMaybe<Scalars['Boolean']>;
  signUpConfig?: InputMaybe<SignUpConfigCreateOneWithoutCampaignOrdersInput>;
  startDate?: InputMaybe<Scalars['DateTime']>;
  status: CampaignStatus;
  tags?: InputMaybe<CampaignOrderCreatetagsInput>;
  targetAudiences?: InputMaybe<AudienceCreateManyInput>;
  targetingCriteria?: InputMaybe<Scalars['String']>;
  transactionTarget?: InputMaybe<Scalars['String']>;
  transactionsConfig?: InputMaybe<TransactionsConfigCreateOneWithoutCampaignOrdersInput>;
  transactionsKey?: InputMaybe<Scalars['String']>;
  type?: InputMaybe<CampaignType>;
  version?: InputMaybe<Scalars['Float']>;
};

export type CampaignOrderCreateWithoutCampaignsInput = {
  adTags?: InputMaybe<AdTagCreateManyWithoutCampaignOrderInput>;
  adUnits?: InputMaybe<AdUnitCreateManyWithoutCampaignOrderInput>;
  advertiser?: InputMaybe<OrgCreateOneWithoutAdvertiserCampaignOrdersInput>;
  advertiserName?: InputMaybe<Scalars['String']>;
  age?: InputMaybe<CampaignOrderCreateageInput>;
  aggregateData?: InputMaybe<AggregateDataObjectCreateOneWithoutCampaignOrderInput>;
  attributionAudiences?: InputMaybe<AudienceCreateManyInput>;
  attributionTargets?: InputMaybe<GeoTargetCreateManyInput>;
  attributionWindow?: InputMaybe<Scalars['Int']>;
  awarenessCampaign?: InputMaybe<Scalars['Boolean']>;
  brands?: InputMaybe<BrandCreateManyWithoutCampaignOrderInput>;
  budget?: InputMaybe<Scalars['Float']>;
  campaignChecklistProcess?: InputMaybe<CampaignChecklistCreateOneWithoutCampaignOrdersInput>;
  category?: InputMaybe<CampaignOrderCreatecategoryInput>;
  changeLog?: InputMaybe<ChangeCreateManyWithoutCampaignOrderInput>;
  cpm?: InputMaybe<Scalars['Float']>;
  description?: InputMaybe<Scalars['String']>;
  devices?: InputMaybe<CampaignOrderCreatedevicesInput>;
  displayReportDateUnits?: InputMaybe<DisplayReportDateUnitCreateManyInput>;
  endDate?: InputMaybe<Scalars['DateTime']>;
  geoTargets?: InputMaybe<GeoTargetCreateManyWithoutCampaignOrderInput>;
  income?: InputMaybe<CampaignOrderCreateincomeInput>;
  isEditCampaign?: InputMaybe<Scalars['Boolean']>;
  isMonitored?: InputMaybe<Scalars['Boolean']>;
  isRegulated?: InputMaybe<Scalars['Boolean']>;
  isRequestChange?: InputMaybe<Scalars['String']>;
  kpi: Kpi;
  kpiGoal?: InputMaybe<Scalars['Float']>;
  language?: InputMaybe<CampaignOrderCreatelanguageInput>;
  name: Scalars['String'];
  objectiveExistingCustomers?: InputMaybe<Scalars['Int']>;
  objectiveNewCustomers?: InputMaybe<Scalars['Int']>;
  orgs?: InputMaybe<OrgCreateManyWithoutCampaignOrdersInput>;
  pacingData?: InputMaybe<PacingDataObjectCreateOneWithoutCampaignOrderInput>;
  processorId?: InputMaybe<Scalars['String']>;
  prospectsKey?: InputMaybe<Scalars['String']>;
  region?: InputMaybe<CampaignOrderCreateregionInput>;
  reports?: InputMaybe<CampaignReportCreateManyWithoutCampaignOrderInput>;
  repullVWI?: InputMaybe<Scalars['Boolean']>;
  requestorId?: InputMaybe<Scalars['String']>;
  retargetDayCap?: InputMaybe<Scalars['Int']>;
  retargetTotalCap?: InputMaybe<Scalars['Int']>;
  salesforceId?: InputMaybe<Scalars['String']>;
  signUpCampaign?: InputMaybe<Scalars['Boolean']>;
  signUpConfig?: InputMaybe<SignUpConfigCreateOneWithoutCampaignOrdersInput>;
  startDate?: InputMaybe<Scalars['DateTime']>;
  status: CampaignStatus;
  tags?: InputMaybe<CampaignOrderCreatetagsInput>;
  targetAudiences?: InputMaybe<AudienceCreateManyInput>;
  targetingCriteria?: InputMaybe<Scalars['String']>;
  transactionTarget?: InputMaybe<Scalars['String']>;
  transactionsConfig?: InputMaybe<TransactionsConfigCreateOneWithoutCampaignOrdersInput>;
  transactionsKey?: InputMaybe<Scalars['String']>;
  type?: InputMaybe<CampaignType>;
  version?: InputMaybe<Scalars['Float']>;
};

export type CampaignOrderCreateWithoutChangeLogInput = {
  adTags?: InputMaybe<AdTagCreateManyWithoutCampaignOrderInput>;
  adUnits?: InputMaybe<AdUnitCreateManyWithoutCampaignOrderInput>;
  advertiser?: InputMaybe<OrgCreateOneWithoutAdvertiserCampaignOrdersInput>;
  advertiserName?: InputMaybe<Scalars['String']>;
  age?: InputMaybe<CampaignOrderCreateageInput>;
  aggregateData?: InputMaybe<AggregateDataObjectCreateOneWithoutCampaignOrderInput>;
  attributionAudiences?: InputMaybe<AudienceCreateManyInput>;
  attributionTargets?: InputMaybe<GeoTargetCreateManyInput>;
  attributionWindow?: InputMaybe<Scalars['Int']>;
  awarenessCampaign?: InputMaybe<Scalars['Boolean']>;
  brands?: InputMaybe<BrandCreateManyWithoutCampaignOrderInput>;
  budget?: InputMaybe<Scalars['Float']>;
  campaignChecklistProcess?: InputMaybe<CampaignChecklistCreateOneWithoutCampaignOrdersInput>;
  campaigns?: InputMaybe<CampaignCreateManyWithoutCampaignOrderInput>;
  category?: InputMaybe<CampaignOrderCreatecategoryInput>;
  cpm?: InputMaybe<Scalars['Float']>;
  description?: InputMaybe<Scalars['String']>;
  devices?: InputMaybe<CampaignOrderCreatedevicesInput>;
  displayReportDateUnits?: InputMaybe<DisplayReportDateUnitCreateManyInput>;
  endDate?: InputMaybe<Scalars['DateTime']>;
  geoTargets?: InputMaybe<GeoTargetCreateManyWithoutCampaignOrderInput>;
  income?: InputMaybe<CampaignOrderCreateincomeInput>;
  isEditCampaign?: InputMaybe<Scalars['Boolean']>;
  isMonitored?: InputMaybe<Scalars['Boolean']>;
  isRegulated?: InputMaybe<Scalars['Boolean']>;
  isRequestChange?: InputMaybe<Scalars['String']>;
  kpi: Kpi;
  kpiGoal?: InputMaybe<Scalars['Float']>;
  language?: InputMaybe<CampaignOrderCreatelanguageInput>;
  name: Scalars['String'];
  objectiveExistingCustomers?: InputMaybe<Scalars['Int']>;
  objectiveNewCustomers?: InputMaybe<Scalars['Int']>;
  orgs?: InputMaybe<OrgCreateManyWithoutCampaignOrdersInput>;
  pacingData?: InputMaybe<PacingDataObjectCreateOneWithoutCampaignOrderInput>;
  processorId?: InputMaybe<Scalars['String']>;
  prospectsKey?: InputMaybe<Scalars['String']>;
  region?: InputMaybe<CampaignOrderCreateregionInput>;
  reports?: InputMaybe<CampaignReportCreateManyWithoutCampaignOrderInput>;
  repullVWI?: InputMaybe<Scalars['Boolean']>;
  requestorId?: InputMaybe<Scalars['String']>;
  retargetDayCap?: InputMaybe<Scalars['Int']>;
  retargetTotalCap?: InputMaybe<Scalars['Int']>;
  salesforceId?: InputMaybe<Scalars['String']>;
  signUpCampaign?: InputMaybe<Scalars['Boolean']>;
  signUpConfig?: InputMaybe<SignUpConfigCreateOneWithoutCampaignOrdersInput>;
  startDate?: InputMaybe<Scalars['DateTime']>;
  status: CampaignStatus;
  tags?: InputMaybe<CampaignOrderCreatetagsInput>;
  targetAudiences?: InputMaybe<AudienceCreateManyInput>;
  targetingCriteria?: InputMaybe<Scalars['String']>;
  transactionTarget?: InputMaybe<Scalars['String']>;
  transactionsConfig?: InputMaybe<TransactionsConfigCreateOneWithoutCampaignOrdersInput>;
  transactionsKey?: InputMaybe<Scalars['String']>;
  type?: InputMaybe<CampaignType>;
  version?: InputMaybe<Scalars['Float']>;
};

export type CampaignOrderCreateWithoutGeoTargetsInput = {
  adTags?: InputMaybe<AdTagCreateManyWithoutCampaignOrderInput>;
  adUnits?: InputMaybe<AdUnitCreateManyWithoutCampaignOrderInput>;
  advertiser?: InputMaybe<OrgCreateOneWithoutAdvertiserCampaignOrdersInput>;
  advertiserName?: InputMaybe<Scalars['String']>;
  age?: InputMaybe<CampaignOrderCreateageInput>;
  aggregateData?: InputMaybe<AggregateDataObjectCreateOneWithoutCampaignOrderInput>;
  attributionAudiences?: InputMaybe<AudienceCreateManyInput>;
  attributionTargets?: InputMaybe<GeoTargetCreateManyInput>;
  attributionWindow?: InputMaybe<Scalars['Int']>;
  awarenessCampaign?: InputMaybe<Scalars['Boolean']>;
  brands?: InputMaybe<BrandCreateManyWithoutCampaignOrderInput>;
  budget?: InputMaybe<Scalars['Float']>;
  campaignChecklistProcess?: InputMaybe<CampaignChecklistCreateOneWithoutCampaignOrdersInput>;
  campaigns?: InputMaybe<CampaignCreateManyWithoutCampaignOrderInput>;
  category?: InputMaybe<CampaignOrderCreatecategoryInput>;
  changeLog?: InputMaybe<ChangeCreateManyWithoutCampaignOrderInput>;
  cpm?: InputMaybe<Scalars['Float']>;
  description?: InputMaybe<Scalars['String']>;
  devices?: InputMaybe<CampaignOrderCreatedevicesInput>;
  displayReportDateUnits?: InputMaybe<DisplayReportDateUnitCreateManyInput>;
  endDate?: InputMaybe<Scalars['DateTime']>;
  income?: InputMaybe<CampaignOrderCreateincomeInput>;
  isEditCampaign?: InputMaybe<Scalars['Boolean']>;
  isMonitored?: InputMaybe<Scalars['Boolean']>;
  isRegulated?: InputMaybe<Scalars['Boolean']>;
  isRequestChange?: InputMaybe<Scalars['String']>;
  kpi: Kpi;
  kpiGoal?: InputMaybe<Scalars['Float']>;
  language?: InputMaybe<CampaignOrderCreatelanguageInput>;
  name: Scalars['String'];
  objectiveExistingCustomers?: InputMaybe<Scalars['Int']>;
  objectiveNewCustomers?: InputMaybe<Scalars['Int']>;
  orgs?: InputMaybe<OrgCreateManyWithoutCampaignOrdersInput>;
  pacingData?: InputMaybe<PacingDataObjectCreateOneWithoutCampaignOrderInput>;
  processorId?: InputMaybe<Scalars['String']>;
  prospectsKey?: InputMaybe<Scalars['String']>;
  region?: InputMaybe<CampaignOrderCreateregionInput>;
  reports?: InputMaybe<CampaignReportCreateManyWithoutCampaignOrderInput>;
  repullVWI?: InputMaybe<Scalars['Boolean']>;
  requestorId?: InputMaybe<Scalars['String']>;
  retargetDayCap?: InputMaybe<Scalars['Int']>;
  retargetTotalCap?: InputMaybe<Scalars['Int']>;
  salesforceId?: InputMaybe<Scalars['String']>;
  signUpCampaign?: InputMaybe<Scalars['Boolean']>;
  signUpConfig?: InputMaybe<SignUpConfigCreateOneWithoutCampaignOrdersInput>;
  startDate?: InputMaybe<Scalars['DateTime']>;
  status: CampaignStatus;
  tags?: InputMaybe<CampaignOrderCreatetagsInput>;
  targetAudiences?: InputMaybe<AudienceCreateManyInput>;
  targetingCriteria?: InputMaybe<Scalars['String']>;
  transactionTarget?: InputMaybe<Scalars['String']>;
  transactionsConfig?: InputMaybe<TransactionsConfigCreateOneWithoutCampaignOrdersInput>;
  transactionsKey?: InputMaybe<Scalars['String']>;
  type?: InputMaybe<CampaignType>;
  version?: InputMaybe<Scalars['Float']>;
};

export type CampaignOrderCreateWithoutOrgsInput = {
  adTags?: InputMaybe<AdTagCreateManyWithoutCampaignOrderInput>;
  adUnits?: InputMaybe<AdUnitCreateManyWithoutCampaignOrderInput>;
  advertiser?: InputMaybe<OrgCreateOneWithoutAdvertiserCampaignOrdersInput>;
  advertiserName?: InputMaybe<Scalars['String']>;
  age?: InputMaybe<CampaignOrderCreateageInput>;
  aggregateData?: InputMaybe<AggregateDataObjectCreateOneWithoutCampaignOrderInput>;
  attributionAudiences?: InputMaybe<AudienceCreateManyInput>;
  attributionTargets?: InputMaybe<GeoTargetCreateManyInput>;
  attributionWindow?: InputMaybe<Scalars['Int']>;
  awarenessCampaign?: InputMaybe<Scalars['Boolean']>;
  brands?: InputMaybe<BrandCreateManyWithoutCampaignOrderInput>;
  budget?: InputMaybe<Scalars['Float']>;
  campaignChecklistProcess?: InputMaybe<CampaignChecklistCreateOneWithoutCampaignOrdersInput>;
  campaigns?: InputMaybe<CampaignCreateManyWithoutCampaignOrderInput>;
  category?: InputMaybe<CampaignOrderCreatecategoryInput>;
  changeLog?: InputMaybe<ChangeCreateManyWithoutCampaignOrderInput>;
  cpm?: InputMaybe<Scalars['Float']>;
  description?: InputMaybe<Scalars['String']>;
  devices?: InputMaybe<CampaignOrderCreatedevicesInput>;
  displayReportDateUnits?: InputMaybe<DisplayReportDateUnitCreateManyInput>;
  endDate?: InputMaybe<Scalars['DateTime']>;
  geoTargets?: InputMaybe<GeoTargetCreateManyWithoutCampaignOrderInput>;
  income?: InputMaybe<CampaignOrderCreateincomeInput>;
  isEditCampaign?: InputMaybe<Scalars['Boolean']>;
  isMonitored?: InputMaybe<Scalars['Boolean']>;
  isRegulated?: InputMaybe<Scalars['Boolean']>;
  isRequestChange?: InputMaybe<Scalars['String']>;
  kpi: Kpi;
  kpiGoal?: InputMaybe<Scalars['Float']>;
  language?: InputMaybe<CampaignOrderCreatelanguageInput>;
  name: Scalars['String'];
  objectiveExistingCustomers?: InputMaybe<Scalars['Int']>;
  objectiveNewCustomers?: InputMaybe<Scalars['Int']>;
  pacingData?: InputMaybe<PacingDataObjectCreateOneWithoutCampaignOrderInput>;
  processorId?: InputMaybe<Scalars['String']>;
  prospectsKey?: InputMaybe<Scalars['String']>;
  region?: InputMaybe<CampaignOrderCreateregionInput>;
  reports?: InputMaybe<CampaignReportCreateManyWithoutCampaignOrderInput>;
  repullVWI?: InputMaybe<Scalars['Boolean']>;
  requestorId?: InputMaybe<Scalars['String']>;
  retargetDayCap?: InputMaybe<Scalars['Int']>;
  retargetTotalCap?: InputMaybe<Scalars['Int']>;
  salesforceId?: InputMaybe<Scalars['String']>;
  signUpCampaign?: InputMaybe<Scalars['Boolean']>;
  signUpConfig?: InputMaybe<SignUpConfigCreateOneWithoutCampaignOrdersInput>;
  startDate?: InputMaybe<Scalars['DateTime']>;
  status: CampaignStatus;
  tags?: InputMaybe<CampaignOrderCreatetagsInput>;
  targetAudiences?: InputMaybe<AudienceCreateManyInput>;
  targetingCriteria?: InputMaybe<Scalars['String']>;
  transactionTarget?: InputMaybe<Scalars['String']>;
  transactionsConfig?: InputMaybe<TransactionsConfigCreateOneWithoutCampaignOrdersInput>;
  transactionsKey?: InputMaybe<Scalars['String']>;
  type?: InputMaybe<CampaignType>;
  version?: InputMaybe<Scalars['Float']>;
};

export type CampaignOrderCreateWithoutPacingDataInput = {
  adTags?: InputMaybe<AdTagCreateManyWithoutCampaignOrderInput>;
  adUnits?: InputMaybe<AdUnitCreateManyWithoutCampaignOrderInput>;
  advertiser?: InputMaybe<OrgCreateOneWithoutAdvertiserCampaignOrdersInput>;
  advertiserName?: InputMaybe<Scalars['String']>;
  age?: InputMaybe<CampaignOrderCreateageInput>;
  aggregateData?: InputMaybe<AggregateDataObjectCreateOneWithoutCampaignOrderInput>;
  attributionAudiences?: InputMaybe<AudienceCreateManyInput>;
  attributionTargets?: InputMaybe<GeoTargetCreateManyInput>;
  attributionWindow?: InputMaybe<Scalars['Int']>;
  awarenessCampaign?: InputMaybe<Scalars['Boolean']>;
  brands?: InputMaybe<BrandCreateManyWithoutCampaignOrderInput>;
  budget?: InputMaybe<Scalars['Float']>;
  campaignChecklistProcess?: InputMaybe<CampaignChecklistCreateOneWithoutCampaignOrdersInput>;
  campaigns?: InputMaybe<CampaignCreateManyWithoutCampaignOrderInput>;
  category?: InputMaybe<CampaignOrderCreatecategoryInput>;
  changeLog?: InputMaybe<ChangeCreateManyWithoutCampaignOrderInput>;
  cpm?: InputMaybe<Scalars['Float']>;
  description?: InputMaybe<Scalars['String']>;
  devices?: InputMaybe<CampaignOrderCreatedevicesInput>;
  displayReportDateUnits?: InputMaybe<DisplayReportDateUnitCreateManyInput>;
  endDate?: InputMaybe<Scalars['DateTime']>;
  geoTargets?: InputMaybe<GeoTargetCreateManyWithoutCampaignOrderInput>;
  income?: InputMaybe<CampaignOrderCreateincomeInput>;
  isEditCampaign?: InputMaybe<Scalars['Boolean']>;
  isMonitored?: InputMaybe<Scalars['Boolean']>;
  isRegulated?: InputMaybe<Scalars['Boolean']>;
  isRequestChange?: InputMaybe<Scalars['String']>;
  kpi: Kpi;
  kpiGoal?: InputMaybe<Scalars['Float']>;
  language?: InputMaybe<CampaignOrderCreatelanguageInput>;
  name: Scalars['String'];
  objectiveExistingCustomers?: InputMaybe<Scalars['Int']>;
  objectiveNewCustomers?: InputMaybe<Scalars['Int']>;
  orgs?: InputMaybe<OrgCreateManyWithoutCampaignOrdersInput>;
  processorId?: InputMaybe<Scalars['String']>;
  prospectsKey?: InputMaybe<Scalars['String']>;
  region?: InputMaybe<CampaignOrderCreateregionInput>;
  reports?: InputMaybe<CampaignReportCreateManyWithoutCampaignOrderInput>;
  repullVWI?: InputMaybe<Scalars['Boolean']>;
  requestorId?: InputMaybe<Scalars['String']>;
  retargetDayCap?: InputMaybe<Scalars['Int']>;
  retargetTotalCap?: InputMaybe<Scalars['Int']>;
  salesforceId?: InputMaybe<Scalars['String']>;
  signUpCampaign?: InputMaybe<Scalars['Boolean']>;
  signUpConfig?: InputMaybe<SignUpConfigCreateOneWithoutCampaignOrdersInput>;
  startDate?: InputMaybe<Scalars['DateTime']>;
  status: CampaignStatus;
  tags?: InputMaybe<CampaignOrderCreatetagsInput>;
  targetAudiences?: InputMaybe<AudienceCreateManyInput>;
  targetingCriteria?: InputMaybe<Scalars['String']>;
  transactionTarget?: InputMaybe<Scalars['String']>;
  transactionsConfig?: InputMaybe<TransactionsConfigCreateOneWithoutCampaignOrdersInput>;
  transactionsKey?: InputMaybe<Scalars['String']>;
  type?: InputMaybe<CampaignType>;
  version?: InputMaybe<Scalars['Float']>;
};

export type CampaignOrderCreateWithoutReportsInput = {
  adTags?: InputMaybe<AdTagCreateManyWithoutCampaignOrderInput>;
  adUnits?: InputMaybe<AdUnitCreateManyWithoutCampaignOrderInput>;
  advertiser?: InputMaybe<OrgCreateOneWithoutAdvertiserCampaignOrdersInput>;
  advertiserName?: InputMaybe<Scalars['String']>;
  age?: InputMaybe<CampaignOrderCreateageInput>;
  aggregateData?: InputMaybe<AggregateDataObjectCreateOneWithoutCampaignOrderInput>;
  attributionAudiences?: InputMaybe<AudienceCreateManyInput>;
  attributionTargets?: InputMaybe<GeoTargetCreateManyInput>;
  attributionWindow?: InputMaybe<Scalars['Int']>;
  awarenessCampaign?: InputMaybe<Scalars['Boolean']>;
  brands?: InputMaybe<BrandCreateManyWithoutCampaignOrderInput>;
  budget?: InputMaybe<Scalars['Float']>;
  campaignChecklistProcess?: InputMaybe<CampaignChecklistCreateOneWithoutCampaignOrdersInput>;
  campaigns?: InputMaybe<CampaignCreateManyWithoutCampaignOrderInput>;
  category?: InputMaybe<CampaignOrderCreatecategoryInput>;
  changeLog?: InputMaybe<ChangeCreateManyWithoutCampaignOrderInput>;
  cpm?: InputMaybe<Scalars['Float']>;
  description?: InputMaybe<Scalars['String']>;
  devices?: InputMaybe<CampaignOrderCreatedevicesInput>;
  displayReportDateUnits?: InputMaybe<DisplayReportDateUnitCreateManyInput>;
  endDate?: InputMaybe<Scalars['DateTime']>;
  geoTargets?: InputMaybe<GeoTargetCreateManyWithoutCampaignOrderInput>;
  income?: InputMaybe<CampaignOrderCreateincomeInput>;
  isEditCampaign?: InputMaybe<Scalars['Boolean']>;
  isMonitored?: InputMaybe<Scalars['Boolean']>;
  isRegulated?: InputMaybe<Scalars['Boolean']>;
  isRequestChange?: InputMaybe<Scalars['String']>;
  kpi: Kpi;
  kpiGoal?: InputMaybe<Scalars['Float']>;
  language?: InputMaybe<CampaignOrderCreatelanguageInput>;
  name: Scalars['String'];
  objectiveExistingCustomers?: InputMaybe<Scalars['Int']>;
  objectiveNewCustomers?: InputMaybe<Scalars['Int']>;
  orgs?: InputMaybe<OrgCreateManyWithoutCampaignOrdersInput>;
  pacingData?: InputMaybe<PacingDataObjectCreateOneWithoutCampaignOrderInput>;
  processorId?: InputMaybe<Scalars['String']>;
  prospectsKey?: InputMaybe<Scalars['String']>;
  region?: InputMaybe<CampaignOrderCreateregionInput>;
  repullVWI?: InputMaybe<Scalars['Boolean']>;
  requestorId?: InputMaybe<Scalars['String']>;
  retargetDayCap?: InputMaybe<Scalars['Int']>;
  retargetTotalCap?: InputMaybe<Scalars['Int']>;
  salesforceId?: InputMaybe<Scalars['String']>;
  signUpCampaign?: InputMaybe<Scalars['Boolean']>;
  signUpConfig?: InputMaybe<SignUpConfigCreateOneWithoutCampaignOrdersInput>;
  startDate?: InputMaybe<Scalars['DateTime']>;
  status: CampaignStatus;
  tags?: InputMaybe<CampaignOrderCreatetagsInput>;
  targetAudiences?: InputMaybe<AudienceCreateManyInput>;
  targetingCriteria?: InputMaybe<Scalars['String']>;
  transactionTarget?: InputMaybe<Scalars['String']>;
  transactionsConfig?: InputMaybe<TransactionsConfigCreateOneWithoutCampaignOrdersInput>;
  transactionsKey?: InputMaybe<Scalars['String']>;
  type?: InputMaybe<CampaignType>;
  version?: InputMaybe<Scalars['Float']>;
};

export type CampaignOrderCreateWithoutTransactionsConfigInput = {
  adTags?: InputMaybe<AdTagCreateManyWithoutCampaignOrderInput>;
  adUnits?: InputMaybe<AdUnitCreateManyWithoutCampaignOrderInput>;
  advertiser?: InputMaybe<OrgCreateOneWithoutAdvertiserCampaignOrdersInput>;
  advertiserName?: InputMaybe<Scalars['String']>;
  age?: InputMaybe<CampaignOrderCreateageInput>;
  aggregateData?: InputMaybe<AggregateDataObjectCreateOneWithoutCampaignOrderInput>;
  attributionAudiences?: InputMaybe<AudienceCreateManyInput>;
  attributionTargets?: InputMaybe<GeoTargetCreateManyInput>;
  attributionWindow?: InputMaybe<Scalars['Int']>;
  awarenessCampaign?: InputMaybe<Scalars['Boolean']>;
  brands?: InputMaybe<BrandCreateManyWithoutCampaignOrderInput>;
  budget?: InputMaybe<Scalars['Float']>;
  campaignChecklistProcess?: InputMaybe<CampaignChecklistCreateOneWithoutCampaignOrdersInput>;
  campaigns?: InputMaybe<CampaignCreateManyWithoutCampaignOrderInput>;
  category?: InputMaybe<CampaignOrderCreatecategoryInput>;
  changeLog?: InputMaybe<ChangeCreateManyWithoutCampaignOrderInput>;
  cpm?: InputMaybe<Scalars['Float']>;
  description?: InputMaybe<Scalars['String']>;
  devices?: InputMaybe<CampaignOrderCreatedevicesInput>;
  displayReportDateUnits?: InputMaybe<DisplayReportDateUnitCreateManyInput>;
  endDate?: InputMaybe<Scalars['DateTime']>;
  geoTargets?: InputMaybe<GeoTargetCreateManyWithoutCampaignOrderInput>;
  income?: InputMaybe<CampaignOrderCreateincomeInput>;
  isEditCampaign?: InputMaybe<Scalars['Boolean']>;
  isMonitored?: InputMaybe<Scalars['Boolean']>;
  isRegulated?: InputMaybe<Scalars['Boolean']>;
  isRequestChange?: InputMaybe<Scalars['String']>;
  kpi: Kpi;
  kpiGoal?: InputMaybe<Scalars['Float']>;
  language?: InputMaybe<CampaignOrderCreatelanguageInput>;
  name: Scalars['String'];
  objectiveExistingCustomers?: InputMaybe<Scalars['Int']>;
  objectiveNewCustomers?: InputMaybe<Scalars['Int']>;
  orgs?: InputMaybe<OrgCreateManyWithoutCampaignOrdersInput>;
  pacingData?: InputMaybe<PacingDataObjectCreateOneWithoutCampaignOrderInput>;
  processorId?: InputMaybe<Scalars['String']>;
  prospectsKey?: InputMaybe<Scalars['String']>;
  region?: InputMaybe<CampaignOrderCreateregionInput>;
  reports?: InputMaybe<CampaignReportCreateManyWithoutCampaignOrderInput>;
  repullVWI?: InputMaybe<Scalars['Boolean']>;
  requestorId?: InputMaybe<Scalars['String']>;
  retargetDayCap?: InputMaybe<Scalars['Int']>;
  retargetTotalCap?: InputMaybe<Scalars['Int']>;
  salesforceId?: InputMaybe<Scalars['String']>;
  signUpCampaign?: InputMaybe<Scalars['Boolean']>;
  signUpConfig?: InputMaybe<SignUpConfigCreateOneWithoutCampaignOrdersInput>;
  startDate?: InputMaybe<Scalars['DateTime']>;
  status: CampaignStatus;
  tags?: InputMaybe<CampaignOrderCreatetagsInput>;
  targetAudiences?: InputMaybe<AudienceCreateManyInput>;
  targetingCriteria?: InputMaybe<Scalars['String']>;
  transactionTarget?: InputMaybe<Scalars['String']>;
  transactionsKey?: InputMaybe<Scalars['String']>;
  type?: InputMaybe<CampaignType>;
  version?: InputMaybe<Scalars['Float']>;
};

export type CampaignOrderCreateageInput = {
  set?: InputMaybe<Array<Scalars['String']>>;
};

export type CampaignOrderCreatecategoryInput = {
  set?: InputMaybe<Array<Scalars['String']>>;
};

export type CampaignOrderCreatedevicesInput = {
  set?: InputMaybe<Array<DeviceType>>;
};

export type CampaignOrderCreateincomeInput = {
  set?: InputMaybe<Array<Scalars['String']>>;
};

export type CampaignOrderCreatelanguageInput = {
  set?: InputMaybe<Array<Language>>;
};

export type CampaignOrderCreateregionInput = {
  set?: InputMaybe<Array<Scalars['String']>>;
};

export type CampaignOrderCreatetagsInput = {
  set?: InputMaybe<Array<Scalars['String']>>;
};

/** An edge in a connection. */
export type CampaignOrderEdge = {
  __typename?: 'CampaignOrderEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: CampaignOrder;
};

export enum CampaignOrderOrderByInput {
  AdvertiserNameAsc = 'advertiserName_ASC',
  AdvertiserNameDesc = 'advertiserName_DESC',
  AttributionWindowAsc = 'attributionWindow_ASC',
  AttributionWindowDesc = 'attributionWindow_DESC',
  AwarenessCampaignAsc = 'awarenessCampaign_ASC',
  AwarenessCampaignDesc = 'awarenessCampaign_DESC',
  BudgetAsc = 'budget_ASC',
  BudgetDesc = 'budget_DESC',
  CpmAsc = 'cpm_ASC',
  CpmDesc = 'cpm_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DescriptionAsc = 'description_ASC',
  DescriptionDesc = 'description_DESC',
  EndDateAsc = 'endDate_ASC',
  EndDateDesc = 'endDate_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  IsEditCampaignAsc = 'isEditCampaign_ASC',
  IsEditCampaignDesc = 'isEditCampaign_DESC',
  IsMonitoredAsc = 'isMonitored_ASC',
  IsMonitoredDesc = 'isMonitored_DESC',
  IsRegulatedAsc = 'isRegulated_ASC',
  IsRegulatedDesc = 'isRegulated_DESC',
  IsRequestChangeAsc = 'isRequestChange_ASC',
  IsRequestChangeDesc = 'isRequestChange_DESC',
  KpiGoalAsc = 'kpiGoal_ASC',
  KpiGoalDesc = 'kpiGoal_DESC',
  KpiAsc = 'kpi_ASC',
  KpiDesc = 'kpi_DESC',
  NameAsc = 'name_ASC',
  NameDesc = 'name_DESC',
  ObjectiveExistingCustomersAsc = 'objectiveExistingCustomers_ASC',
  ObjectiveExistingCustomersDesc = 'objectiveExistingCustomers_DESC',
  ObjectiveNewCustomersAsc = 'objectiveNewCustomers_ASC',
  ObjectiveNewCustomersDesc = 'objectiveNewCustomers_DESC',
  ProcessorIdAsc = 'processorId_ASC',
  ProcessorIdDesc = 'processorId_DESC',
  ProspectsKeyAsc = 'prospectsKey_ASC',
  ProspectsKeyDesc = 'prospectsKey_DESC',
  RepullVwiAsc = 'repullVWI_ASC',
  RepullVwiDesc = 'repullVWI_DESC',
  RequestorIdAsc = 'requestorId_ASC',
  RequestorIdDesc = 'requestorId_DESC',
  RetargetDayCapAsc = 'retargetDayCap_ASC',
  RetargetDayCapDesc = 'retargetDayCap_DESC',
  RetargetTotalCapAsc = 'retargetTotalCap_ASC',
  RetargetTotalCapDesc = 'retargetTotalCap_DESC',
  SalesforceIdAsc = 'salesforceId_ASC',
  SalesforceIdDesc = 'salesforceId_DESC',
  SignUpCampaignAsc = 'signUpCampaign_ASC',
  SignUpCampaignDesc = 'signUpCampaign_DESC',
  StartDateAsc = 'startDate_ASC',
  StartDateDesc = 'startDate_DESC',
  StatusAsc = 'status_ASC',
  StatusDesc = 'status_DESC',
  TargetingCriteriaAsc = 'targetingCriteria_ASC',
  TargetingCriteriaDesc = 'targetingCriteria_DESC',
  TransactionTargetAsc = 'transactionTarget_ASC',
  TransactionTargetDesc = 'transactionTarget_DESC',
  TransactionsKeyAsc = 'transactionsKey_ASC',
  TransactionsKeyDesc = 'transactionsKey_DESC',
  TypeAsc = 'type_ASC',
  TypeDesc = 'type_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  VersionAsc = 'version_ASC',
  VersionDesc = 'version_DESC'
}

export type CampaignOrderPreviousValues = {
  __typename?: 'CampaignOrderPreviousValues';
  advertiserName?: Maybe<Scalars['String']>;
  age: Array<Scalars['String']>;
  attributionWindow?: Maybe<Scalars['Int']>;
  awarenessCampaign?: Maybe<Scalars['Boolean']>;
  budget?: Maybe<Scalars['Float']>;
  category: Array<Scalars['String']>;
  cpm?: Maybe<Scalars['Float']>;
  createdAt: Scalars['DateTime'];
  description?: Maybe<Scalars['String']>;
  devices: Array<DeviceType>;
  endDate?: Maybe<Scalars['DateTime']>;
  id: Scalars['ID'];
  income: Array<Scalars['String']>;
  isEditCampaign?: Maybe<Scalars['Boolean']>;
  isMonitored?: Maybe<Scalars['Boolean']>;
  isRegulated?: Maybe<Scalars['Boolean']>;
  isRequestChange?: Maybe<Scalars['String']>;
  kpi: Kpi;
  kpiGoal?: Maybe<Scalars['Float']>;
  language: Array<Language>;
  name: Scalars['String'];
  objectiveExistingCustomers?: Maybe<Scalars['Int']>;
  objectiveNewCustomers?: Maybe<Scalars['Int']>;
  processorId?: Maybe<Scalars['String']>;
  prospectsKey?: Maybe<Scalars['String']>;
  region: Array<Scalars['String']>;
  repullVWI?: Maybe<Scalars['Boolean']>;
  requestorId?: Maybe<Scalars['String']>;
  retargetDayCap?: Maybe<Scalars['Int']>;
  retargetTotalCap?: Maybe<Scalars['Int']>;
  salesforceId?: Maybe<Scalars['String']>;
  signUpCampaign?: Maybe<Scalars['Boolean']>;
  startDate?: Maybe<Scalars['DateTime']>;
  status: CampaignStatus;
  tags: Array<Scalars['String']>;
  targetingCriteria?: Maybe<Scalars['String']>;
  transactionTarget?: Maybe<Scalars['String']>;
  transactionsKey?: Maybe<Scalars['String']>;
  type?: Maybe<CampaignType>;
  updatedAt: Scalars['DateTime'];
  version?: Maybe<Scalars['Float']>;
};

export type CampaignOrderSubscriptionPayload = {
  __typename?: 'CampaignOrderSubscriptionPayload';
  mutation: MutationType;
  node?: Maybe<CampaignOrder>;
  previousValues?: Maybe<CampaignOrderPreviousValues>;
  updatedFields?: Maybe<Array<Scalars['String']>>;
};

export type CampaignOrderSubscriptionWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<CampaignOrderSubscriptionWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<CampaignOrderSubscriptionWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<CampaignOrderSubscriptionWhereInput>>;
  /** The subscription event gets dispatched when it's listed in mutation_in */
  mutation_in?: InputMaybe<Array<MutationType>>;
  node?: InputMaybe<CampaignOrderWhereInput>;
  /** The subscription event gets only dispatched when one of the updated fields names is included in this list */
  updatedFields_contains?: InputMaybe<Scalars['String']>;
  /** The subscription event gets only dispatched when all of the field names included in this list have been updated */
  updatedFields_contains_every?: InputMaybe<Array<Scalars['String']>>;
  /** The subscription event gets only dispatched when some of the field names included in this list have been updated */
  updatedFields_contains_some?: InputMaybe<Array<Scalars['String']>>;
};

export type CampaignOrderUpdateDataInput = {
  adTags?: InputMaybe<AdTagUpdateManyWithoutCampaignOrderInput>;
  adUnits?: InputMaybe<AdUnitUpdateManyWithoutCampaignOrderInput>;
  advertiser?: InputMaybe<OrgUpdateOneWithoutAdvertiserCampaignOrdersInput>;
  advertiserName?: InputMaybe<Scalars['String']>;
  age?: InputMaybe<CampaignOrderUpdateageInput>;
  aggregateData?: InputMaybe<AggregateDataObjectUpdateOneWithoutCampaignOrderInput>;
  attributionAudiences?: InputMaybe<AudienceUpdateManyInput>;
  attributionTargets?: InputMaybe<GeoTargetUpdateManyInput>;
  attributionWindow?: InputMaybe<Scalars['Int']>;
  awarenessCampaign?: InputMaybe<Scalars['Boolean']>;
  brands?: InputMaybe<BrandUpdateManyWithoutCampaignOrderInput>;
  budget?: InputMaybe<Scalars['Float']>;
  campaignChecklistProcess?: InputMaybe<CampaignChecklistUpdateOneWithoutCampaignOrdersInput>;
  campaigns?: InputMaybe<CampaignUpdateManyWithoutCampaignOrderInput>;
  category?: InputMaybe<CampaignOrderUpdatecategoryInput>;
  changeLog?: InputMaybe<ChangeUpdateManyWithoutCampaignOrderInput>;
  cpm?: InputMaybe<Scalars['Float']>;
  description?: InputMaybe<Scalars['String']>;
  devices?: InputMaybe<CampaignOrderUpdatedevicesInput>;
  displayReportDateUnits?: InputMaybe<DisplayReportDateUnitUpdateManyInput>;
  endDate?: InputMaybe<Scalars['DateTime']>;
  geoTargets?: InputMaybe<GeoTargetUpdateManyWithoutCampaignOrderInput>;
  income?: InputMaybe<CampaignOrderUpdateincomeInput>;
  isEditCampaign?: InputMaybe<Scalars['Boolean']>;
  isMonitored?: InputMaybe<Scalars['Boolean']>;
  isRegulated?: InputMaybe<Scalars['Boolean']>;
  isRequestChange?: InputMaybe<Scalars['String']>;
  kpi?: InputMaybe<Kpi>;
  kpiGoal?: InputMaybe<Scalars['Float']>;
  language?: InputMaybe<CampaignOrderUpdatelanguageInput>;
  name?: InputMaybe<Scalars['String']>;
  objectiveExistingCustomers?: InputMaybe<Scalars['Int']>;
  objectiveNewCustomers?: InputMaybe<Scalars['Int']>;
  orgs?: InputMaybe<OrgUpdateManyWithoutCampaignOrdersInput>;
  pacingData?: InputMaybe<PacingDataObjectUpdateOneWithoutCampaignOrderInput>;
  processorId?: InputMaybe<Scalars['String']>;
  prospectsKey?: InputMaybe<Scalars['String']>;
  region?: InputMaybe<CampaignOrderUpdateregionInput>;
  reports?: InputMaybe<CampaignReportUpdateManyWithoutCampaignOrderInput>;
  repullVWI?: InputMaybe<Scalars['Boolean']>;
  requestorId?: InputMaybe<Scalars['String']>;
  retargetDayCap?: InputMaybe<Scalars['Int']>;
  retargetTotalCap?: InputMaybe<Scalars['Int']>;
  salesforceId?: InputMaybe<Scalars['String']>;
  signUpCampaign?: InputMaybe<Scalars['Boolean']>;
  signUpConfig?: InputMaybe<SignUpConfigUpdateOneWithoutCampaignOrdersInput>;
  startDate?: InputMaybe<Scalars['DateTime']>;
  status?: InputMaybe<CampaignStatus>;
  tags?: InputMaybe<CampaignOrderUpdatetagsInput>;
  targetAudiences?: InputMaybe<AudienceUpdateManyInput>;
  targetingCriteria?: InputMaybe<Scalars['String']>;
  transactionTarget?: InputMaybe<Scalars['String']>;
  transactionsConfig?: InputMaybe<TransactionsConfigUpdateOneWithoutCampaignOrdersInput>;
  transactionsKey?: InputMaybe<Scalars['String']>;
  type?: InputMaybe<CampaignType>;
  version?: InputMaybe<Scalars['Float']>;
};

export type CampaignOrderUpdateInput = {
  adTags?: InputMaybe<AdTagUpdateManyWithoutCampaignOrderInput>;
  adUnits?: InputMaybe<AdUnitUpdateManyWithoutCampaignOrderInput>;
  advertiser?: InputMaybe<OrgUpdateOneWithoutAdvertiserCampaignOrdersInput>;
  advertiserName?: InputMaybe<Scalars['String']>;
  age?: InputMaybe<CampaignOrderUpdateageInput>;
  aggregateData?: InputMaybe<AggregateDataObjectUpdateOneWithoutCampaignOrderInput>;
  attributionAudiences?: InputMaybe<AudienceUpdateManyInput>;
  attributionTargets?: InputMaybe<GeoTargetUpdateManyInput>;
  attributionWindow?: InputMaybe<Scalars['Int']>;
  awarenessCampaign?: InputMaybe<Scalars['Boolean']>;
  brands?: InputMaybe<BrandUpdateManyWithoutCampaignOrderInput>;
  budget?: InputMaybe<Scalars['Float']>;
  campaignChecklistProcess?: InputMaybe<CampaignChecklistUpdateOneWithoutCampaignOrdersInput>;
  campaigns?: InputMaybe<CampaignUpdateManyWithoutCampaignOrderInput>;
  category?: InputMaybe<CampaignOrderUpdatecategoryInput>;
  changeLog?: InputMaybe<ChangeUpdateManyWithoutCampaignOrderInput>;
  cpm?: InputMaybe<Scalars['Float']>;
  description?: InputMaybe<Scalars['String']>;
  devices?: InputMaybe<CampaignOrderUpdatedevicesInput>;
  displayReportDateUnits?: InputMaybe<DisplayReportDateUnitUpdateManyInput>;
  endDate?: InputMaybe<Scalars['DateTime']>;
  geoTargets?: InputMaybe<GeoTargetUpdateManyWithoutCampaignOrderInput>;
  income?: InputMaybe<CampaignOrderUpdateincomeInput>;
  isEditCampaign?: InputMaybe<Scalars['Boolean']>;
  isMonitored?: InputMaybe<Scalars['Boolean']>;
  isRegulated?: InputMaybe<Scalars['Boolean']>;
  isRequestChange?: InputMaybe<Scalars['String']>;
  kpi?: InputMaybe<Kpi>;
  kpiGoal?: InputMaybe<Scalars['Float']>;
  language?: InputMaybe<CampaignOrderUpdatelanguageInput>;
  name?: InputMaybe<Scalars['String']>;
  objectiveExistingCustomers?: InputMaybe<Scalars['Int']>;
  objectiveNewCustomers?: InputMaybe<Scalars['Int']>;
  orgs?: InputMaybe<OrgUpdateManyWithoutCampaignOrdersInput>;
  pacingData?: InputMaybe<PacingDataObjectUpdateOneWithoutCampaignOrderInput>;
  processorId?: InputMaybe<Scalars['String']>;
  prospectsKey?: InputMaybe<Scalars['String']>;
  region?: InputMaybe<CampaignOrderUpdateregionInput>;
  reports?: InputMaybe<CampaignReportUpdateManyWithoutCampaignOrderInput>;
  repullVWI?: InputMaybe<Scalars['Boolean']>;
  requestorId?: InputMaybe<Scalars['String']>;
  retargetDayCap?: InputMaybe<Scalars['Int']>;
  retargetTotalCap?: InputMaybe<Scalars['Int']>;
  salesforceId?: InputMaybe<Scalars['String']>;
  signUpCampaign?: InputMaybe<Scalars['Boolean']>;
  signUpConfig?: InputMaybe<SignUpConfigUpdateOneWithoutCampaignOrdersInput>;
  startDate?: InputMaybe<Scalars['DateTime']>;
  status?: InputMaybe<CampaignStatus>;
  tags?: InputMaybe<CampaignOrderUpdatetagsInput>;
  targetAudiences?: InputMaybe<AudienceUpdateManyInput>;
  targetingCriteria?: InputMaybe<Scalars['String']>;
  transactionTarget?: InputMaybe<Scalars['String']>;
  transactionsConfig?: InputMaybe<TransactionsConfigUpdateOneWithoutCampaignOrdersInput>;
  transactionsKey?: InputMaybe<Scalars['String']>;
  type?: InputMaybe<CampaignType>;
  version?: InputMaybe<Scalars['Float']>;
};

export type CampaignOrderUpdateManyWithoutAdvertiserInput = {
  connect?: InputMaybe<Array<CampaignOrderWhereUniqueInput>>;
  create?: InputMaybe<Array<CampaignOrderCreateWithoutAdvertiserInput>>;
  delete?: InputMaybe<Array<CampaignOrderWhereUniqueInput>>;
  disconnect?: InputMaybe<Array<CampaignOrderWhereUniqueInput>>;
  update?: InputMaybe<Array<CampaignOrderUpdateWithWhereUniqueWithoutAdvertiserInput>>;
  upsert?: InputMaybe<Array<CampaignOrderUpsertWithWhereUniqueWithoutAdvertiserInput>>;
};

export type CampaignOrderUpdateManyWithoutOrgsInput = {
  connect?: InputMaybe<Array<CampaignOrderWhereUniqueInput>>;
  create?: InputMaybe<Array<CampaignOrderCreateWithoutOrgsInput>>;
  delete?: InputMaybe<Array<CampaignOrderWhereUniqueInput>>;
  disconnect?: InputMaybe<Array<CampaignOrderWhereUniqueInput>>;
  update?: InputMaybe<Array<CampaignOrderUpdateWithWhereUniqueWithoutOrgsInput>>;
  upsert?: InputMaybe<Array<CampaignOrderUpsertWithWhereUniqueWithoutOrgsInput>>;
};

export type CampaignOrderUpdateManyWithoutTransactionsConfigInput = {
  connect?: InputMaybe<Array<CampaignOrderWhereUniqueInput>>;
  create?: InputMaybe<Array<CampaignOrderCreateWithoutTransactionsConfigInput>>;
  delete?: InputMaybe<Array<CampaignOrderWhereUniqueInput>>;
  disconnect?: InputMaybe<Array<CampaignOrderWhereUniqueInput>>;
  update?: InputMaybe<Array<CampaignOrderUpdateWithWhereUniqueWithoutTransactionsConfigInput>>;
  upsert?: InputMaybe<Array<CampaignOrderUpsertWithWhereUniqueWithoutTransactionsConfigInput>>;
};

export type CampaignOrderUpdateOneInput = {
  connect?: InputMaybe<CampaignOrderWhereUniqueInput>;
  create?: InputMaybe<CampaignOrderCreateInput>;
  delete?: InputMaybe<Scalars['Boolean']>;
  disconnect?: InputMaybe<Scalars['Boolean']>;
  update?: InputMaybe<CampaignOrderUpdateDataInput>;
  upsert?: InputMaybe<CampaignOrderUpsertNestedInput>;
};

export type CampaignOrderUpdateOneWithoutAdTagsInput = {
  connect?: InputMaybe<CampaignOrderWhereUniqueInput>;
  create?: InputMaybe<CampaignOrderCreateWithoutAdTagsInput>;
  delete?: InputMaybe<Scalars['Boolean']>;
  disconnect?: InputMaybe<Scalars['Boolean']>;
  update?: InputMaybe<CampaignOrderUpdateWithoutAdTagsDataInput>;
  upsert?: InputMaybe<CampaignOrderUpsertWithoutAdTagsInput>;
};

export type CampaignOrderUpdateOneWithoutAdUnitsInput = {
  connect?: InputMaybe<CampaignOrderWhereUniqueInput>;
  create?: InputMaybe<CampaignOrderCreateWithoutAdUnitsInput>;
  delete?: InputMaybe<Scalars['Boolean']>;
  disconnect?: InputMaybe<Scalars['Boolean']>;
  update?: InputMaybe<CampaignOrderUpdateWithoutAdUnitsDataInput>;
  upsert?: InputMaybe<CampaignOrderUpsertWithoutAdUnitsInput>;
};

export type CampaignOrderUpdateOneWithoutAggregateDataInput = {
  connect?: InputMaybe<CampaignOrderWhereUniqueInput>;
  create?: InputMaybe<CampaignOrderCreateWithoutAggregateDataInput>;
  delete?: InputMaybe<Scalars['Boolean']>;
  disconnect?: InputMaybe<Scalars['Boolean']>;
  update?: InputMaybe<CampaignOrderUpdateWithoutAggregateDataDataInput>;
  upsert?: InputMaybe<CampaignOrderUpsertWithoutAggregateDataInput>;
};

export type CampaignOrderUpdateOneWithoutBrandsInput = {
  connect?: InputMaybe<CampaignOrderWhereUniqueInput>;
  create?: InputMaybe<CampaignOrderCreateWithoutBrandsInput>;
  delete?: InputMaybe<Scalars['Boolean']>;
  disconnect?: InputMaybe<Scalars['Boolean']>;
  update?: InputMaybe<CampaignOrderUpdateWithoutBrandsDataInput>;
  upsert?: InputMaybe<CampaignOrderUpsertWithoutBrandsInput>;
};

export type CampaignOrderUpdateOneWithoutCampaignsInput = {
  connect?: InputMaybe<CampaignOrderWhereUniqueInput>;
  create?: InputMaybe<CampaignOrderCreateWithoutCampaignsInput>;
  delete?: InputMaybe<Scalars['Boolean']>;
  disconnect?: InputMaybe<Scalars['Boolean']>;
  update?: InputMaybe<CampaignOrderUpdateWithoutCampaignsDataInput>;
  upsert?: InputMaybe<CampaignOrderUpsertWithoutCampaignsInput>;
};

export type CampaignOrderUpdateOneWithoutChangeLogInput = {
  connect?: InputMaybe<CampaignOrderWhereUniqueInput>;
  create?: InputMaybe<CampaignOrderCreateWithoutChangeLogInput>;
  delete?: InputMaybe<Scalars['Boolean']>;
  disconnect?: InputMaybe<Scalars['Boolean']>;
  update?: InputMaybe<CampaignOrderUpdateWithoutChangeLogDataInput>;
  upsert?: InputMaybe<CampaignOrderUpsertWithoutChangeLogInput>;
};

export type CampaignOrderUpdateOneWithoutGeoTargetsInput = {
  connect?: InputMaybe<CampaignOrderWhereUniqueInput>;
  create?: InputMaybe<CampaignOrderCreateWithoutGeoTargetsInput>;
  delete?: InputMaybe<Scalars['Boolean']>;
  disconnect?: InputMaybe<Scalars['Boolean']>;
  update?: InputMaybe<CampaignOrderUpdateWithoutGeoTargetsDataInput>;
  upsert?: InputMaybe<CampaignOrderUpsertWithoutGeoTargetsInput>;
};

export type CampaignOrderUpdateOneWithoutPacingDataInput = {
  connect?: InputMaybe<CampaignOrderWhereUniqueInput>;
  create?: InputMaybe<CampaignOrderCreateWithoutPacingDataInput>;
  delete?: InputMaybe<Scalars['Boolean']>;
  disconnect?: InputMaybe<Scalars['Boolean']>;
  update?: InputMaybe<CampaignOrderUpdateWithoutPacingDataDataInput>;
  upsert?: InputMaybe<CampaignOrderUpsertWithoutPacingDataInput>;
};

export type CampaignOrderUpdateOneWithoutReportsInput = {
  connect?: InputMaybe<CampaignOrderWhereUniqueInput>;
  create?: InputMaybe<CampaignOrderCreateWithoutReportsInput>;
  delete?: InputMaybe<Scalars['Boolean']>;
  disconnect?: InputMaybe<Scalars['Boolean']>;
  update?: InputMaybe<CampaignOrderUpdateWithoutReportsDataInput>;
  upsert?: InputMaybe<CampaignOrderUpsertWithoutReportsInput>;
};

export type CampaignOrderUpdateStatusInput = {
  featureID?: InputMaybe<Scalars['String']>;
  message?: InputMaybe<Scalars['String']>;
  status: CampaignStatus;
  type?: InputMaybe<Feature>;
};

export type CampaignOrderUpdateWithWhereUniqueWithoutAdvertiserInput = {
  data: CampaignOrderUpdateWithoutAdvertiserDataInput;
  where: CampaignOrderWhereUniqueInput;
};

export type CampaignOrderUpdateWithWhereUniqueWithoutOrgsInput = {
  data: CampaignOrderUpdateWithoutOrgsDataInput;
  where: CampaignOrderWhereUniqueInput;
};

export type CampaignOrderUpdateWithWhereUniqueWithoutTransactionsConfigInput = {
  data: CampaignOrderUpdateWithoutTransactionsConfigDataInput;
  where: CampaignOrderWhereUniqueInput;
};

export type CampaignOrderUpdateWithoutAdTagsDataInput = {
  adUnits?: InputMaybe<AdUnitUpdateManyWithoutCampaignOrderInput>;
  advertiser?: InputMaybe<OrgUpdateOneWithoutAdvertiserCampaignOrdersInput>;
  advertiserName?: InputMaybe<Scalars['String']>;
  age?: InputMaybe<CampaignOrderUpdateageInput>;
  aggregateData?: InputMaybe<AggregateDataObjectUpdateOneWithoutCampaignOrderInput>;
  attributionAudiences?: InputMaybe<AudienceUpdateManyInput>;
  attributionTargets?: InputMaybe<GeoTargetUpdateManyInput>;
  attributionWindow?: InputMaybe<Scalars['Int']>;
  awarenessCampaign?: InputMaybe<Scalars['Boolean']>;
  brands?: InputMaybe<BrandUpdateManyWithoutCampaignOrderInput>;
  budget?: InputMaybe<Scalars['Float']>;
  campaignChecklistProcess?: InputMaybe<CampaignChecklistUpdateOneWithoutCampaignOrdersInput>;
  campaigns?: InputMaybe<CampaignUpdateManyWithoutCampaignOrderInput>;
  category?: InputMaybe<CampaignOrderUpdatecategoryInput>;
  changeLog?: InputMaybe<ChangeUpdateManyWithoutCampaignOrderInput>;
  cpm?: InputMaybe<Scalars['Float']>;
  description?: InputMaybe<Scalars['String']>;
  devices?: InputMaybe<CampaignOrderUpdatedevicesInput>;
  displayReportDateUnits?: InputMaybe<DisplayReportDateUnitUpdateManyInput>;
  endDate?: InputMaybe<Scalars['DateTime']>;
  geoTargets?: InputMaybe<GeoTargetUpdateManyWithoutCampaignOrderInput>;
  income?: InputMaybe<CampaignOrderUpdateincomeInput>;
  isEditCampaign?: InputMaybe<Scalars['Boolean']>;
  isMonitored?: InputMaybe<Scalars['Boolean']>;
  isRegulated?: InputMaybe<Scalars['Boolean']>;
  isRequestChange?: InputMaybe<Scalars['String']>;
  kpi?: InputMaybe<Kpi>;
  kpiGoal?: InputMaybe<Scalars['Float']>;
  language?: InputMaybe<CampaignOrderUpdatelanguageInput>;
  name?: InputMaybe<Scalars['String']>;
  objectiveExistingCustomers?: InputMaybe<Scalars['Int']>;
  objectiveNewCustomers?: InputMaybe<Scalars['Int']>;
  orgs?: InputMaybe<OrgUpdateManyWithoutCampaignOrdersInput>;
  pacingData?: InputMaybe<PacingDataObjectUpdateOneWithoutCampaignOrderInput>;
  processorId?: InputMaybe<Scalars['String']>;
  prospectsKey?: InputMaybe<Scalars['String']>;
  region?: InputMaybe<CampaignOrderUpdateregionInput>;
  reports?: InputMaybe<CampaignReportUpdateManyWithoutCampaignOrderInput>;
  repullVWI?: InputMaybe<Scalars['Boolean']>;
  requestorId?: InputMaybe<Scalars['String']>;
  retargetDayCap?: InputMaybe<Scalars['Int']>;
  retargetTotalCap?: InputMaybe<Scalars['Int']>;
  salesforceId?: InputMaybe<Scalars['String']>;
  signUpCampaign?: InputMaybe<Scalars['Boolean']>;
  signUpConfig?: InputMaybe<SignUpConfigUpdateOneWithoutCampaignOrdersInput>;
  startDate?: InputMaybe<Scalars['DateTime']>;
  status?: InputMaybe<CampaignStatus>;
  tags?: InputMaybe<CampaignOrderUpdatetagsInput>;
  targetAudiences?: InputMaybe<AudienceUpdateManyInput>;
  targetingCriteria?: InputMaybe<Scalars['String']>;
  transactionTarget?: InputMaybe<Scalars['String']>;
  transactionsConfig?: InputMaybe<TransactionsConfigUpdateOneWithoutCampaignOrdersInput>;
  transactionsKey?: InputMaybe<Scalars['String']>;
  type?: InputMaybe<CampaignType>;
  version?: InputMaybe<Scalars['Float']>;
};

export type CampaignOrderUpdateWithoutAdUnitsDataInput = {
  adTags?: InputMaybe<AdTagUpdateManyWithoutCampaignOrderInput>;
  advertiser?: InputMaybe<OrgUpdateOneWithoutAdvertiserCampaignOrdersInput>;
  advertiserName?: InputMaybe<Scalars['String']>;
  age?: InputMaybe<CampaignOrderUpdateageInput>;
  aggregateData?: InputMaybe<AggregateDataObjectUpdateOneWithoutCampaignOrderInput>;
  attributionAudiences?: InputMaybe<AudienceUpdateManyInput>;
  attributionTargets?: InputMaybe<GeoTargetUpdateManyInput>;
  attributionWindow?: InputMaybe<Scalars['Int']>;
  awarenessCampaign?: InputMaybe<Scalars['Boolean']>;
  brands?: InputMaybe<BrandUpdateManyWithoutCampaignOrderInput>;
  budget?: InputMaybe<Scalars['Float']>;
  campaignChecklistProcess?: InputMaybe<CampaignChecklistUpdateOneWithoutCampaignOrdersInput>;
  campaigns?: InputMaybe<CampaignUpdateManyWithoutCampaignOrderInput>;
  category?: InputMaybe<CampaignOrderUpdatecategoryInput>;
  changeLog?: InputMaybe<ChangeUpdateManyWithoutCampaignOrderInput>;
  cpm?: InputMaybe<Scalars['Float']>;
  description?: InputMaybe<Scalars['String']>;
  devices?: InputMaybe<CampaignOrderUpdatedevicesInput>;
  displayReportDateUnits?: InputMaybe<DisplayReportDateUnitUpdateManyInput>;
  endDate?: InputMaybe<Scalars['DateTime']>;
  geoTargets?: InputMaybe<GeoTargetUpdateManyWithoutCampaignOrderInput>;
  income?: InputMaybe<CampaignOrderUpdateincomeInput>;
  isEditCampaign?: InputMaybe<Scalars['Boolean']>;
  isMonitored?: InputMaybe<Scalars['Boolean']>;
  isRegulated?: InputMaybe<Scalars['Boolean']>;
  isRequestChange?: InputMaybe<Scalars['String']>;
  kpi?: InputMaybe<Kpi>;
  kpiGoal?: InputMaybe<Scalars['Float']>;
  language?: InputMaybe<CampaignOrderUpdatelanguageInput>;
  name?: InputMaybe<Scalars['String']>;
  objectiveExistingCustomers?: InputMaybe<Scalars['Int']>;
  objectiveNewCustomers?: InputMaybe<Scalars['Int']>;
  orgs?: InputMaybe<OrgUpdateManyWithoutCampaignOrdersInput>;
  pacingData?: InputMaybe<PacingDataObjectUpdateOneWithoutCampaignOrderInput>;
  processorId?: InputMaybe<Scalars['String']>;
  prospectsKey?: InputMaybe<Scalars['String']>;
  region?: InputMaybe<CampaignOrderUpdateregionInput>;
  reports?: InputMaybe<CampaignReportUpdateManyWithoutCampaignOrderInput>;
  repullVWI?: InputMaybe<Scalars['Boolean']>;
  requestorId?: InputMaybe<Scalars['String']>;
  retargetDayCap?: InputMaybe<Scalars['Int']>;
  retargetTotalCap?: InputMaybe<Scalars['Int']>;
  salesforceId?: InputMaybe<Scalars['String']>;
  signUpCampaign?: InputMaybe<Scalars['Boolean']>;
  signUpConfig?: InputMaybe<SignUpConfigUpdateOneWithoutCampaignOrdersInput>;
  startDate?: InputMaybe<Scalars['DateTime']>;
  status?: InputMaybe<CampaignStatus>;
  tags?: InputMaybe<CampaignOrderUpdatetagsInput>;
  targetAudiences?: InputMaybe<AudienceUpdateManyInput>;
  targetingCriteria?: InputMaybe<Scalars['String']>;
  transactionTarget?: InputMaybe<Scalars['String']>;
  transactionsConfig?: InputMaybe<TransactionsConfigUpdateOneWithoutCampaignOrdersInput>;
  transactionsKey?: InputMaybe<Scalars['String']>;
  type?: InputMaybe<CampaignType>;
  version?: InputMaybe<Scalars['Float']>;
};

export type CampaignOrderUpdateWithoutAdvertiserDataInput = {
  adTags?: InputMaybe<AdTagUpdateManyWithoutCampaignOrderInput>;
  adUnits?: InputMaybe<AdUnitUpdateManyWithoutCampaignOrderInput>;
  advertiserName?: InputMaybe<Scalars['String']>;
  age?: InputMaybe<CampaignOrderUpdateageInput>;
  aggregateData?: InputMaybe<AggregateDataObjectUpdateOneWithoutCampaignOrderInput>;
  attributionAudiences?: InputMaybe<AudienceUpdateManyInput>;
  attributionTargets?: InputMaybe<GeoTargetUpdateManyInput>;
  attributionWindow?: InputMaybe<Scalars['Int']>;
  awarenessCampaign?: InputMaybe<Scalars['Boolean']>;
  brands?: InputMaybe<BrandUpdateManyWithoutCampaignOrderInput>;
  budget?: InputMaybe<Scalars['Float']>;
  campaignChecklistProcess?: InputMaybe<CampaignChecklistUpdateOneWithoutCampaignOrdersInput>;
  campaigns?: InputMaybe<CampaignUpdateManyWithoutCampaignOrderInput>;
  category?: InputMaybe<CampaignOrderUpdatecategoryInput>;
  changeLog?: InputMaybe<ChangeUpdateManyWithoutCampaignOrderInput>;
  cpm?: InputMaybe<Scalars['Float']>;
  description?: InputMaybe<Scalars['String']>;
  devices?: InputMaybe<CampaignOrderUpdatedevicesInput>;
  displayReportDateUnits?: InputMaybe<DisplayReportDateUnitUpdateManyInput>;
  endDate?: InputMaybe<Scalars['DateTime']>;
  geoTargets?: InputMaybe<GeoTargetUpdateManyWithoutCampaignOrderInput>;
  income?: InputMaybe<CampaignOrderUpdateincomeInput>;
  isEditCampaign?: InputMaybe<Scalars['Boolean']>;
  isMonitored?: InputMaybe<Scalars['Boolean']>;
  isRegulated?: InputMaybe<Scalars['Boolean']>;
  isRequestChange?: InputMaybe<Scalars['String']>;
  kpi?: InputMaybe<Kpi>;
  kpiGoal?: InputMaybe<Scalars['Float']>;
  language?: InputMaybe<CampaignOrderUpdatelanguageInput>;
  name?: InputMaybe<Scalars['String']>;
  objectiveExistingCustomers?: InputMaybe<Scalars['Int']>;
  objectiveNewCustomers?: InputMaybe<Scalars['Int']>;
  orgs?: InputMaybe<OrgUpdateManyWithoutCampaignOrdersInput>;
  pacingData?: InputMaybe<PacingDataObjectUpdateOneWithoutCampaignOrderInput>;
  processorId?: InputMaybe<Scalars['String']>;
  prospectsKey?: InputMaybe<Scalars['String']>;
  region?: InputMaybe<CampaignOrderUpdateregionInput>;
  reports?: InputMaybe<CampaignReportUpdateManyWithoutCampaignOrderInput>;
  repullVWI?: InputMaybe<Scalars['Boolean']>;
  requestorId?: InputMaybe<Scalars['String']>;
  retargetDayCap?: InputMaybe<Scalars['Int']>;
  retargetTotalCap?: InputMaybe<Scalars['Int']>;
  salesforceId?: InputMaybe<Scalars['String']>;
  signUpCampaign?: InputMaybe<Scalars['Boolean']>;
  signUpConfig?: InputMaybe<SignUpConfigUpdateOneWithoutCampaignOrdersInput>;
  startDate?: InputMaybe<Scalars['DateTime']>;
  status?: InputMaybe<CampaignStatus>;
  tags?: InputMaybe<CampaignOrderUpdatetagsInput>;
  targetAudiences?: InputMaybe<AudienceUpdateManyInput>;
  targetingCriteria?: InputMaybe<Scalars['String']>;
  transactionTarget?: InputMaybe<Scalars['String']>;
  transactionsConfig?: InputMaybe<TransactionsConfigUpdateOneWithoutCampaignOrdersInput>;
  transactionsKey?: InputMaybe<Scalars['String']>;
  type?: InputMaybe<CampaignType>;
  version?: InputMaybe<Scalars['Float']>;
};

export type CampaignOrderUpdateWithoutAggregateDataDataInput = {
  adTags?: InputMaybe<AdTagUpdateManyWithoutCampaignOrderInput>;
  adUnits?: InputMaybe<AdUnitUpdateManyWithoutCampaignOrderInput>;
  advertiser?: InputMaybe<OrgUpdateOneWithoutAdvertiserCampaignOrdersInput>;
  advertiserName?: InputMaybe<Scalars['String']>;
  age?: InputMaybe<CampaignOrderUpdateageInput>;
  attributionAudiences?: InputMaybe<AudienceUpdateManyInput>;
  attributionTargets?: InputMaybe<GeoTargetUpdateManyInput>;
  attributionWindow?: InputMaybe<Scalars['Int']>;
  awarenessCampaign?: InputMaybe<Scalars['Boolean']>;
  brands?: InputMaybe<BrandUpdateManyWithoutCampaignOrderInput>;
  budget?: InputMaybe<Scalars['Float']>;
  campaignChecklistProcess?: InputMaybe<CampaignChecklistUpdateOneWithoutCampaignOrdersInput>;
  campaigns?: InputMaybe<CampaignUpdateManyWithoutCampaignOrderInput>;
  category?: InputMaybe<CampaignOrderUpdatecategoryInput>;
  changeLog?: InputMaybe<ChangeUpdateManyWithoutCampaignOrderInput>;
  cpm?: InputMaybe<Scalars['Float']>;
  description?: InputMaybe<Scalars['String']>;
  devices?: InputMaybe<CampaignOrderUpdatedevicesInput>;
  displayReportDateUnits?: InputMaybe<DisplayReportDateUnitUpdateManyInput>;
  endDate?: InputMaybe<Scalars['DateTime']>;
  geoTargets?: InputMaybe<GeoTargetUpdateManyWithoutCampaignOrderInput>;
  income?: InputMaybe<CampaignOrderUpdateincomeInput>;
  isEditCampaign?: InputMaybe<Scalars['Boolean']>;
  isMonitored?: InputMaybe<Scalars['Boolean']>;
  isRegulated?: InputMaybe<Scalars['Boolean']>;
  isRequestChange?: InputMaybe<Scalars['String']>;
  kpi?: InputMaybe<Kpi>;
  kpiGoal?: InputMaybe<Scalars['Float']>;
  language?: InputMaybe<CampaignOrderUpdatelanguageInput>;
  name?: InputMaybe<Scalars['String']>;
  objectiveExistingCustomers?: InputMaybe<Scalars['Int']>;
  objectiveNewCustomers?: InputMaybe<Scalars['Int']>;
  orgs?: InputMaybe<OrgUpdateManyWithoutCampaignOrdersInput>;
  pacingData?: InputMaybe<PacingDataObjectUpdateOneWithoutCampaignOrderInput>;
  processorId?: InputMaybe<Scalars['String']>;
  prospectsKey?: InputMaybe<Scalars['String']>;
  region?: InputMaybe<CampaignOrderUpdateregionInput>;
  reports?: InputMaybe<CampaignReportUpdateManyWithoutCampaignOrderInput>;
  repullVWI?: InputMaybe<Scalars['Boolean']>;
  requestorId?: InputMaybe<Scalars['String']>;
  retargetDayCap?: InputMaybe<Scalars['Int']>;
  retargetTotalCap?: InputMaybe<Scalars['Int']>;
  salesforceId?: InputMaybe<Scalars['String']>;
  signUpCampaign?: InputMaybe<Scalars['Boolean']>;
  signUpConfig?: InputMaybe<SignUpConfigUpdateOneWithoutCampaignOrdersInput>;
  startDate?: InputMaybe<Scalars['DateTime']>;
  status?: InputMaybe<CampaignStatus>;
  tags?: InputMaybe<CampaignOrderUpdatetagsInput>;
  targetAudiences?: InputMaybe<AudienceUpdateManyInput>;
  targetingCriteria?: InputMaybe<Scalars['String']>;
  transactionTarget?: InputMaybe<Scalars['String']>;
  transactionsConfig?: InputMaybe<TransactionsConfigUpdateOneWithoutCampaignOrdersInput>;
  transactionsKey?: InputMaybe<Scalars['String']>;
  type?: InputMaybe<CampaignType>;
  version?: InputMaybe<Scalars['Float']>;
};

export type CampaignOrderUpdateWithoutBrandsDataInput = {
  adTags?: InputMaybe<AdTagUpdateManyWithoutCampaignOrderInput>;
  adUnits?: InputMaybe<AdUnitUpdateManyWithoutCampaignOrderInput>;
  advertiser?: InputMaybe<OrgUpdateOneWithoutAdvertiserCampaignOrdersInput>;
  advertiserName?: InputMaybe<Scalars['String']>;
  age?: InputMaybe<CampaignOrderUpdateageInput>;
  aggregateData?: InputMaybe<AggregateDataObjectUpdateOneWithoutCampaignOrderInput>;
  attributionAudiences?: InputMaybe<AudienceUpdateManyInput>;
  attributionTargets?: InputMaybe<GeoTargetUpdateManyInput>;
  attributionWindow?: InputMaybe<Scalars['Int']>;
  awarenessCampaign?: InputMaybe<Scalars['Boolean']>;
  budget?: InputMaybe<Scalars['Float']>;
  campaignChecklistProcess?: InputMaybe<CampaignChecklistUpdateOneWithoutCampaignOrdersInput>;
  campaigns?: InputMaybe<CampaignUpdateManyWithoutCampaignOrderInput>;
  category?: InputMaybe<CampaignOrderUpdatecategoryInput>;
  changeLog?: InputMaybe<ChangeUpdateManyWithoutCampaignOrderInput>;
  cpm?: InputMaybe<Scalars['Float']>;
  description?: InputMaybe<Scalars['String']>;
  devices?: InputMaybe<CampaignOrderUpdatedevicesInput>;
  displayReportDateUnits?: InputMaybe<DisplayReportDateUnitUpdateManyInput>;
  endDate?: InputMaybe<Scalars['DateTime']>;
  geoTargets?: InputMaybe<GeoTargetUpdateManyWithoutCampaignOrderInput>;
  income?: InputMaybe<CampaignOrderUpdateincomeInput>;
  isEditCampaign?: InputMaybe<Scalars['Boolean']>;
  isMonitored?: InputMaybe<Scalars['Boolean']>;
  isRegulated?: InputMaybe<Scalars['Boolean']>;
  isRequestChange?: InputMaybe<Scalars['String']>;
  kpi?: InputMaybe<Kpi>;
  kpiGoal?: InputMaybe<Scalars['Float']>;
  language?: InputMaybe<CampaignOrderUpdatelanguageInput>;
  name?: InputMaybe<Scalars['String']>;
  objectiveExistingCustomers?: InputMaybe<Scalars['Int']>;
  objectiveNewCustomers?: InputMaybe<Scalars['Int']>;
  orgs?: InputMaybe<OrgUpdateManyWithoutCampaignOrdersInput>;
  pacingData?: InputMaybe<PacingDataObjectUpdateOneWithoutCampaignOrderInput>;
  processorId?: InputMaybe<Scalars['String']>;
  prospectsKey?: InputMaybe<Scalars['String']>;
  region?: InputMaybe<CampaignOrderUpdateregionInput>;
  reports?: InputMaybe<CampaignReportUpdateManyWithoutCampaignOrderInput>;
  repullVWI?: InputMaybe<Scalars['Boolean']>;
  requestorId?: InputMaybe<Scalars['String']>;
  retargetDayCap?: InputMaybe<Scalars['Int']>;
  retargetTotalCap?: InputMaybe<Scalars['Int']>;
  salesforceId?: InputMaybe<Scalars['String']>;
  signUpCampaign?: InputMaybe<Scalars['Boolean']>;
  signUpConfig?: InputMaybe<SignUpConfigUpdateOneWithoutCampaignOrdersInput>;
  startDate?: InputMaybe<Scalars['DateTime']>;
  status?: InputMaybe<CampaignStatus>;
  tags?: InputMaybe<CampaignOrderUpdatetagsInput>;
  targetAudiences?: InputMaybe<AudienceUpdateManyInput>;
  targetingCriteria?: InputMaybe<Scalars['String']>;
  transactionTarget?: InputMaybe<Scalars['String']>;
  transactionsConfig?: InputMaybe<TransactionsConfigUpdateOneWithoutCampaignOrdersInput>;
  transactionsKey?: InputMaybe<Scalars['String']>;
  type?: InputMaybe<CampaignType>;
  version?: InputMaybe<Scalars['Float']>;
};

export type CampaignOrderUpdateWithoutCampaignsDataInput = {
  adTags?: InputMaybe<AdTagUpdateManyWithoutCampaignOrderInput>;
  adUnits?: InputMaybe<AdUnitUpdateManyWithoutCampaignOrderInput>;
  advertiser?: InputMaybe<OrgUpdateOneWithoutAdvertiserCampaignOrdersInput>;
  advertiserName?: InputMaybe<Scalars['String']>;
  age?: InputMaybe<CampaignOrderUpdateageInput>;
  aggregateData?: InputMaybe<AggregateDataObjectUpdateOneWithoutCampaignOrderInput>;
  attributionAudiences?: InputMaybe<AudienceUpdateManyInput>;
  attributionTargets?: InputMaybe<GeoTargetUpdateManyInput>;
  attributionWindow?: InputMaybe<Scalars['Int']>;
  awarenessCampaign?: InputMaybe<Scalars['Boolean']>;
  brands?: InputMaybe<BrandUpdateManyWithoutCampaignOrderInput>;
  budget?: InputMaybe<Scalars['Float']>;
  campaignChecklistProcess?: InputMaybe<CampaignChecklistUpdateOneWithoutCampaignOrdersInput>;
  category?: InputMaybe<CampaignOrderUpdatecategoryInput>;
  changeLog?: InputMaybe<ChangeUpdateManyWithoutCampaignOrderInput>;
  cpm?: InputMaybe<Scalars['Float']>;
  description?: InputMaybe<Scalars['String']>;
  devices?: InputMaybe<CampaignOrderUpdatedevicesInput>;
  displayReportDateUnits?: InputMaybe<DisplayReportDateUnitUpdateManyInput>;
  endDate?: InputMaybe<Scalars['DateTime']>;
  geoTargets?: InputMaybe<GeoTargetUpdateManyWithoutCampaignOrderInput>;
  income?: InputMaybe<CampaignOrderUpdateincomeInput>;
  isEditCampaign?: InputMaybe<Scalars['Boolean']>;
  isMonitored?: InputMaybe<Scalars['Boolean']>;
  isRegulated?: InputMaybe<Scalars['Boolean']>;
  isRequestChange?: InputMaybe<Scalars['String']>;
  kpi?: InputMaybe<Kpi>;
  kpiGoal?: InputMaybe<Scalars['Float']>;
  language?: InputMaybe<CampaignOrderUpdatelanguageInput>;
  name?: InputMaybe<Scalars['String']>;
  objectiveExistingCustomers?: InputMaybe<Scalars['Int']>;
  objectiveNewCustomers?: InputMaybe<Scalars['Int']>;
  orgs?: InputMaybe<OrgUpdateManyWithoutCampaignOrdersInput>;
  pacingData?: InputMaybe<PacingDataObjectUpdateOneWithoutCampaignOrderInput>;
  processorId?: InputMaybe<Scalars['String']>;
  prospectsKey?: InputMaybe<Scalars['String']>;
  region?: InputMaybe<CampaignOrderUpdateregionInput>;
  reports?: InputMaybe<CampaignReportUpdateManyWithoutCampaignOrderInput>;
  repullVWI?: InputMaybe<Scalars['Boolean']>;
  requestorId?: InputMaybe<Scalars['String']>;
  retargetDayCap?: InputMaybe<Scalars['Int']>;
  retargetTotalCap?: InputMaybe<Scalars['Int']>;
  salesforceId?: InputMaybe<Scalars['String']>;
  signUpCampaign?: InputMaybe<Scalars['Boolean']>;
  signUpConfig?: InputMaybe<SignUpConfigUpdateOneWithoutCampaignOrdersInput>;
  startDate?: InputMaybe<Scalars['DateTime']>;
  status?: InputMaybe<CampaignStatus>;
  tags?: InputMaybe<CampaignOrderUpdatetagsInput>;
  targetAudiences?: InputMaybe<AudienceUpdateManyInput>;
  targetingCriteria?: InputMaybe<Scalars['String']>;
  transactionTarget?: InputMaybe<Scalars['String']>;
  transactionsConfig?: InputMaybe<TransactionsConfigUpdateOneWithoutCampaignOrdersInput>;
  transactionsKey?: InputMaybe<Scalars['String']>;
  type?: InputMaybe<CampaignType>;
  version?: InputMaybe<Scalars['Float']>;
};

export type CampaignOrderUpdateWithoutChangeLogDataInput = {
  adTags?: InputMaybe<AdTagUpdateManyWithoutCampaignOrderInput>;
  adUnits?: InputMaybe<AdUnitUpdateManyWithoutCampaignOrderInput>;
  advertiser?: InputMaybe<OrgUpdateOneWithoutAdvertiserCampaignOrdersInput>;
  advertiserName?: InputMaybe<Scalars['String']>;
  age?: InputMaybe<CampaignOrderUpdateageInput>;
  aggregateData?: InputMaybe<AggregateDataObjectUpdateOneWithoutCampaignOrderInput>;
  attributionAudiences?: InputMaybe<AudienceUpdateManyInput>;
  attributionTargets?: InputMaybe<GeoTargetUpdateManyInput>;
  attributionWindow?: InputMaybe<Scalars['Int']>;
  awarenessCampaign?: InputMaybe<Scalars['Boolean']>;
  brands?: InputMaybe<BrandUpdateManyWithoutCampaignOrderInput>;
  budget?: InputMaybe<Scalars['Float']>;
  campaignChecklistProcess?: InputMaybe<CampaignChecklistUpdateOneWithoutCampaignOrdersInput>;
  campaigns?: InputMaybe<CampaignUpdateManyWithoutCampaignOrderInput>;
  category?: InputMaybe<CampaignOrderUpdatecategoryInput>;
  cpm?: InputMaybe<Scalars['Float']>;
  description?: InputMaybe<Scalars['String']>;
  devices?: InputMaybe<CampaignOrderUpdatedevicesInput>;
  displayReportDateUnits?: InputMaybe<DisplayReportDateUnitUpdateManyInput>;
  endDate?: InputMaybe<Scalars['DateTime']>;
  geoTargets?: InputMaybe<GeoTargetUpdateManyWithoutCampaignOrderInput>;
  income?: InputMaybe<CampaignOrderUpdateincomeInput>;
  isEditCampaign?: InputMaybe<Scalars['Boolean']>;
  isMonitored?: InputMaybe<Scalars['Boolean']>;
  isRegulated?: InputMaybe<Scalars['Boolean']>;
  isRequestChange?: InputMaybe<Scalars['String']>;
  kpi?: InputMaybe<Kpi>;
  kpiGoal?: InputMaybe<Scalars['Float']>;
  language?: InputMaybe<CampaignOrderUpdatelanguageInput>;
  name?: InputMaybe<Scalars['String']>;
  objectiveExistingCustomers?: InputMaybe<Scalars['Int']>;
  objectiveNewCustomers?: InputMaybe<Scalars['Int']>;
  orgs?: InputMaybe<OrgUpdateManyWithoutCampaignOrdersInput>;
  pacingData?: InputMaybe<PacingDataObjectUpdateOneWithoutCampaignOrderInput>;
  processorId?: InputMaybe<Scalars['String']>;
  prospectsKey?: InputMaybe<Scalars['String']>;
  region?: InputMaybe<CampaignOrderUpdateregionInput>;
  reports?: InputMaybe<CampaignReportUpdateManyWithoutCampaignOrderInput>;
  repullVWI?: InputMaybe<Scalars['Boolean']>;
  requestorId?: InputMaybe<Scalars['String']>;
  retargetDayCap?: InputMaybe<Scalars['Int']>;
  retargetTotalCap?: InputMaybe<Scalars['Int']>;
  salesforceId?: InputMaybe<Scalars['String']>;
  signUpCampaign?: InputMaybe<Scalars['Boolean']>;
  signUpConfig?: InputMaybe<SignUpConfigUpdateOneWithoutCampaignOrdersInput>;
  startDate?: InputMaybe<Scalars['DateTime']>;
  status?: InputMaybe<CampaignStatus>;
  tags?: InputMaybe<CampaignOrderUpdatetagsInput>;
  targetAudiences?: InputMaybe<AudienceUpdateManyInput>;
  targetingCriteria?: InputMaybe<Scalars['String']>;
  transactionTarget?: InputMaybe<Scalars['String']>;
  transactionsConfig?: InputMaybe<TransactionsConfigUpdateOneWithoutCampaignOrdersInput>;
  transactionsKey?: InputMaybe<Scalars['String']>;
  type?: InputMaybe<CampaignType>;
  version?: InputMaybe<Scalars['Float']>;
};

export type CampaignOrderUpdateWithoutGeoTargetsDataInput = {
  adTags?: InputMaybe<AdTagUpdateManyWithoutCampaignOrderInput>;
  adUnits?: InputMaybe<AdUnitUpdateManyWithoutCampaignOrderInput>;
  advertiser?: InputMaybe<OrgUpdateOneWithoutAdvertiserCampaignOrdersInput>;
  advertiserName?: InputMaybe<Scalars['String']>;
  age?: InputMaybe<CampaignOrderUpdateageInput>;
  aggregateData?: InputMaybe<AggregateDataObjectUpdateOneWithoutCampaignOrderInput>;
  attributionAudiences?: InputMaybe<AudienceUpdateManyInput>;
  attributionTargets?: InputMaybe<GeoTargetUpdateManyInput>;
  attributionWindow?: InputMaybe<Scalars['Int']>;
  awarenessCampaign?: InputMaybe<Scalars['Boolean']>;
  brands?: InputMaybe<BrandUpdateManyWithoutCampaignOrderInput>;
  budget?: InputMaybe<Scalars['Float']>;
  campaignChecklistProcess?: InputMaybe<CampaignChecklistUpdateOneWithoutCampaignOrdersInput>;
  campaigns?: InputMaybe<CampaignUpdateManyWithoutCampaignOrderInput>;
  category?: InputMaybe<CampaignOrderUpdatecategoryInput>;
  changeLog?: InputMaybe<ChangeUpdateManyWithoutCampaignOrderInput>;
  cpm?: InputMaybe<Scalars['Float']>;
  description?: InputMaybe<Scalars['String']>;
  devices?: InputMaybe<CampaignOrderUpdatedevicesInput>;
  displayReportDateUnits?: InputMaybe<DisplayReportDateUnitUpdateManyInput>;
  endDate?: InputMaybe<Scalars['DateTime']>;
  income?: InputMaybe<CampaignOrderUpdateincomeInput>;
  isEditCampaign?: InputMaybe<Scalars['Boolean']>;
  isMonitored?: InputMaybe<Scalars['Boolean']>;
  isRegulated?: InputMaybe<Scalars['Boolean']>;
  isRequestChange?: InputMaybe<Scalars['String']>;
  kpi?: InputMaybe<Kpi>;
  kpiGoal?: InputMaybe<Scalars['Float']>;
  language?: InputMaybe<CampaignOrderUpdatelanguageInput>;
  name?: InputMaybe<Scalars['String']>;
  objectiveExistingCustomers?: InputMaybe<Scalars['Int']>;
  objectiveNewCustomers?: InputMaybe<Scalars['Int']>;
  orgs?: InputMaybe<OrgUpdateManyWithoutCampaignOrdersInput>;
  pacingData?: InputMaybe<PacingDataObjectUpdateOneWithoutCampaignOrderInput>;
  processorId?: InputMaybe<Scalars['String']>;
  prospectsKey?: InputMaybe<Scalars['String']>;
  region?: InputMaybe<CampaignOrderUpdateregionInput>;
  reports?: InputMaybe<CampaignReportUpdateManyWithoutCampaignOrderInput>;
  repullVWI?: InputMaybe<Scalars['Boolean']>;
  requestorId?: InputMaybe<Scalars['String']>;
  retargetDayCap?: InputMaybe<Scalars['Int']>;
  retargetTotalCap?: InputMaybe<Scalars['Int']>;
  salesforceId?: InputMaybe<Scalars['String']>;
  signUpCampaign?: InputMaybe<Scalars['Boolean']>;
  signUpConfig?: InputMaybe<SignUpConfigUpdateOneWithoutCampaignOrdersInput>;
  startDate?: InputMaybe<Scalars['DateTime']>;
  status?: InputMaybe<CampaignStatus>;
  tags?: InputMaybe<CampaignOrderUpdatetagsInput>;
  targetAudiences?: InputMaybe<AudienceUpdateManyInput>;
  targetingCriteria?: InputMaybe<Scalars['String']>;
  transactionTarget?: InputMaybe<Scalars['String']>;
  transactionsConfig?: InputMaybe<TransactionsConfigUpdateOneWithoutCampaignOrdersInput>;
  transactionsKey?: InputMaybe<Scalars['String']>;
  type?: InputMaybe<CampaignType>;
  version?: InputMaybe<Scalars['Float']>;
};

export type CampaignOrderUpdateWithoutOrgsDataInput = {
  adTags?: InputMaybe<AdTagUpdateManyWithoutCampaignOrderInput>;
  adUnits?: InputMaybe<AdUnitUpdateManyWithoutCampaignOrderInput>;
  advertiser?: InputMaybe<OrgUpdateOneWithoutAdvertiserCampaignOrdersInput>;
  advertiserName?: InputMaybe<Scalars['String']>;
  age?: InputMaybe<CampaignOrderUpdateageInput>;
  aggregateData?: InputMaybe<AggregateDataObjectUpdateOneWithoutCampaignOrderInput>;
  attributionAudiences?: InputMaybe<AudienceUpdateManyInput>;
  attributionTargets?: InputMaybe<GeoTargetUpdateManyInput>;
  attributionWindow?: InputMaybe<Scalars['Int']>;
  awarenessCampaign?: InputMaybe<Scalars['Boolean']>;
  brands?: InputMaybe<BrandUpdateManyWithoutCampaignOrderInput>;
  budget?: InputMaybe<Scalars['Float']>;
  campaignChecklistProcess?: InputMaybe<CampaignChecklistUpdateOneWithoutCampaignOrdersInput>;
  campaigns?: InputMaybe<CampaignUpdateManyWithoutCampaignOrderInput>;
  category?: InputMaybe<CampaignOrderUpdatecategoryInput>;
  changeLog?: InputMaybe<ChangeUpdateManyWithoutCampaignOrderInput>;
  cpm?: InputMaybe<Scalars['Float']>;
  description?: InputMaybe<Scalars['String']>;
  devices?: InputMaybe<CampaignOrderUpdatedevicesInput>;
  displayReportDateUnits?: InputMaybe<DisplayReportDateUnitUpdateManyInput>;
  endDate?: InputMaybe<Scalars['DateTime']>;
  geoTargets?: InputMaybe<GeoTargetUpdateManyWithoutCampaignOrderInput>;
  income?: InputMaybe<CampaignOrderUpdateincomeInput>;
  isEditCampaign?: InputMaybe<Scalars['Boolean']>;
  isMonitored?: InputMaybe<Scalars['Boolean']>;
  isRegulated?: InputMaybe<Scalars['Boolean']>;
  isRequestChange?: InputMaybe<Scalars['String']>;
  kpi?: InputMaybe<Kpi>;
  kpiGoal?: InputMaybe<Scalars['Float']>;
  language?: InputMaybe<CampaignOrderUpdatelanguageInput>;
  name?: InputMaybe<Scalars['String']>;
  objectiveExistingCustomers?: InputMaybe<Scalars['Int']>;
  objectiveNewCustomers?: InputMaybe<Scalars['Int']>;
  pacingData?: InputMaybe<PacingDataObjectUpdateOneWithoutCampaignOrderInput>;
  processorId?: InputMaybe<Scalars['String']>;
  prospectsKey?: InputMaybe<Scalars['String']>;
  region?: InputMaybe<CampaignOrderUpdateregionInput>;
  reports?: InputMaybe<CampaignReportUpdateManyWithoutCampaignOrderInput>;
  repullVWI?: InputMaybe<Scalars['Boolean']>;
  requestorId?: InputMaybe<Scalars['String']>;
  retargetDayCap?: InputMaybe<Scalars['Int']>;
  retargetTotalCap?: InputMaybe<Scalars['Int']>;
  salesforceId?: InputMaybe<Scalars['String']>;
  signUpCampaign?: InputMaybe<Scalars['Boolean']>;
  signUpConfig?: InputMaybe<SignUpConfigUpdateOneWithoutCampaignOrdersInput>;
  startDate?: InputMaybe<Scalars['DateTime']>;
  status?: InputMaybe<CampaignStatus>;
  tags?: InputMaybe<CampaignOrderUpdatetagsInput>;
  targetAudiences?: InputMaybe<AudienceUpdateManyInput>;
  targetingCriteria?: InputMaybe<Scalars['String']>;
  transactionTarget?: InputMaybe<Scalars['String']>;
  transactionsConfig?: InputMaybe<TransactionsConfigUpdateOneWithoutCampaignOrdersInput>;
  transactionsKey?: InputMaybe<Scalars['String']>;
  type?: InputMaybe<CampaignType>;
  version?: InputMaybe<Scalars['Float']>;
};

export type CampaignOrderUpdateWithoutPacingDataDataInput = {
  adTags?: InputMaybe<AdTagUpdateManyWithoutCampaignOrderInput>;
  adUnits?: InputMaybe<AdUnitUpdateManyWithoutCampaignOrderInput>;
  advertiser?: InputMaybe<OrgUpdateOneWithoutAdvertiserCampaignOrdersInput>;
  advertiserName?: InputMaybe<Scalars['String']>;
  age?: InputMaybe<CampaignOrderUpdateageInput>;
  aggregateData?: InputMaybe<AggregateDataObjectUpdateOneWithoutCampaignOrderInput>;
  attributionAudiences?: InputMaybe<AudienceUpdateManyInput>;
  attributionTargets?: InputMaybe<GeoTargetUpdateManyInput>;
  attributionWindow?: InputMaybe<Scalars['Int']>;
  awarenessCampaign?: InputMaybe<Scalars['Boolean']>;
  brands?: InputMaybe<BrandUpdateManyWithoutCampaignOrderInput>;
  budget?: InputMaybe<Scalars['Float']>;
  campaignChecklistProcess?: InputMaybe<CampaignChecklistUpdateOneWithoutCampaignOrdersInput>;
  campaigns?: InputMaybe<CampaignUpdateManyWithoutCampaignOrderInput>;
  category?: InputMaybe<CampaignOrderUpdatecategoryInput>;
  changeLog?: InputMaybe<ChangeUpdateManyWithoutCampaignOrderInput>;
  cpm?: InputMaybe<Scalars['Float']>;
  description?: InputMaybe<Scalars['String']>;
  devices?: InputMaybe<CampaignOrderUpdatedevicesInput>;
  displayReportDateUnits?: InputMaybe<DisplayReportDateUnitUpdateManyInput>;
  endDate?: InputMaybe<Scalars['DateTime']>;
  geoTargets?: InputMaybe<GeoTargetUpdateManyWithoutCampaignOrderInput>;
  income?: InputMaybe<CampaignOrderUpdateincomeInput>;
  isEditCampaign?: InputMaybe<Scalars['Boolean']>;
  isMonitored?: InputMaybe<Scalars['Boolean']>;
  isRegulated?: InputMaybe<Scalars['Boolean']>;
  isRequestChange?: InputMaybe<Scalars['String']>;
  kpi?: InputMaybe<Kpi>;
  kpiGoal?: InputMaybe<Scalars['Float']>;
  language?: InputMaybe<CampaignOrderUpdatelanguageInput>;
  name?: InputMaybe<Scalars['String']>;
  objectiveExistingCustomers?: InputMaybe<Scalars['Int']>;
  objectiveNewCustomers?: InputMaybe<Scalars['Int']>;
  orgs?: InputMaybe<OrgUpdateManyWithoutCampaignOrdersInput>;
  processorId?: InputMaybe<Scalars['String']>;
  prospectsKey?: InputMaybe<Scalars['String']>;
  region?: InputMaybe<CampaignOrderUpdateregionInput>;
  reports?: InputMaybe<CampaignReportUpdateManyWithoutCampaignOrderInput>;
  repullVWI?: InputMaybe<Scalars['Boolean']>;
  requestorId?: InputMaybe<Scalars['String']>;
  retargetDayCap?: InputMaybe<Scalars['Int']>;
  retargetTotalCap?: InputMaybe<Scalars['Int']>;
  salesforceId?: InputMaybe<Scalars['String']>;
  signUpCampaign?: InputMaybe<Scalars['Boolean']>;
  signUpConfig?: InputMaybe<SignUpConfigUpdateOneWithoutCampaignOrdersInput>;
  startDate?: InputMaybe<Scalars['DateTime']>;
  status?: InputMaybe<CampaignStatus>;
  tags?: InputMaybe<CampaignOrderUpdatetagsInput>;
  targetAudiences?: InputMaybe<AudienceUpdateManyInput>;
  targetingCriteria?: InputMaybe<Scalars['String']>;
  transactionTarget?: InputMaybe<Scalars['String']>;
  transactionsConfig?: InputMaybe<TransactionsConfigUpdateOneWithoutCampaignOrdersInput>;
  transactionsKey?: InputMaybe<Scalars['String']>;
  type?: InputMaybe<CampaignType>;
  version?: InputMaybe<Scalars['Float']>;
};

export type CampaignOrderUpdateWithoutReportsDataInput = {
  adTags?: InputMaybe<AdTagUpdateManyWithoutCampaignOrderInput>;
  adUnits?: InputMaybe<AdUnitUpdateManyWithoutCampaignOrderInput>;
  advertiser?: InputMaybe<OrgUpdateOneWithoutAdvertiserCampaignOrdersInput>;
  advertiserName?: InputMaybe<Scalars['String']>;
  age?: InputMaybe<CampaignOrderUpdateageInput>;
  aggregateData?: InputMaybe<AggregateDataObjectUpdateOneWithoutCampaignOrderInput>;
  attributionAudiences?: InputMaybe<AudienceUpdateManyInput>;
  attributionTargets?: InputMaybe<GeoTargetUpdateManyInput>;
  attributionWindow?: InputMaybe<Scalars['Int']>;
  awarenessCampaign?: InputMaybe<Scalars['Boolean']>;
  brands?: InputMaybe<BrandUpdateManyWithoutCampaignOrderInput>;
  budget?: InputMaybe<Scalars['Float']>;
  campaignChecklistProcess?: InputMaybe<CampaignChecklistUpdateOneWithoutCampaignOrdersInput>;
  campaigns?: InputMaybe<CampaignUpdateManyWithoutCampaignOrderInput>;
  category?: InputMaybe<CampaignOrderUpdatecategoryInput>;
  changeLog?: InputMaybe<ChangeUpdateManyWithoutCampaignOrderInput>;
  cpm?: InputMaybe<Scalars['Float']>;
  description?: InputMaybe<Scalars['String']>;
  devices?: InputMaybe<CampaignOrderUpdatedevicesInput>;
  displayReportDateUnits?: InputMaybe<DisplayReportDateUnitUpdateManyInput>;
  endDate?: InputMaybe<Scalars['DateTime']>;
  geoTargets?: InputMaybe<GeoTargetUpdateManyWithoutCampaignOrderInput>;
  income?: InputMaybe<CampaignOrderUpdateincomeInput>;
  isEditCampaign?: InputMaybe<Scalars['Boolean']>;
  isMonitored?: InputMaybe<Scalars['Boolean']>;
  isRegulated?: InputMaybe<Scalars['Boolean']>;
  isRequestChange?: InputMaybe<Scalars['String']>;
  kpi?: InputMaybe<Kpi>;
  kpiGoal?: InputMaybe<Scalars['Float']>;
  language?: InputMaybe<CampaignOrderUpdatelanguageInput>;
  name?: InputMaybe<Scalars['String']>;
  objectiveExistingCustomers?: InputMaybe<Scalars['Int']>;
  objectiveNewCustomers?: InputMaybe<Scalars['Int']>;
  orgs?: InputMaybe<OrgUpdateManyWithoutCampaignOrdersInput>;
  pacingData?: InputMaybe<PacingDataObjectUpdateOneWithoutCampaignOrderInput>;
  processorId?: InputMaybe<Scalars['String']>;
  prospectsKey?: InputMaybe<Scalars['String']>;
  region?: InputMaybe<CampaignOrderUpdateregionInput>;
  repullVWI?: InputMaybe<Scalars['Boolean']>;
  requestorId?: InputMaybe<Scalars['String']>;
  retargetDayCap?: InputMaybe<Scalars['Int']>;
  retargetTotalCap?: InputMaybe<Scalars['Int']>;
  salesforceId?: InputMaybe<Scalars['String']>;
  signUpCampaign?: InputMaybe<Scalars['Boolean']>;
  signUpConfig?: InputMaybe<SignUpConfigUpdateOneWithoutCampaignOrdersInput>;
  startDate?: InputMaybe<Scalars['DateTime']>;
  status?: InputMaybe<CampaignStatus>;
  tags?: InputMaybe<CampaignOrderUpdatetagsInput>;
  targetAudiences?: InputMaybe<AudienceUpdateManyInput>;
  targetingCriteria?: InputMaybe<Scalars['String']>;
  transactionTarget?: InputMaybe<Scalars['String']>;
  transactionsConfig?: InputMaybe<TransactionsConfigUpdateOneWithoutCampaignOrdersInput>;
  transactionsKey?: InputMaybe<Scalars['String']>;
  type?: InputMaybe<CampaignType>;
  version?: InputMaybe<Scalars['Float']>;
};

export type CampaignOrderUpdateWithoutTransactionsConfigDataInput = {
  adTags?: InputMaybe<AdTagUpdateManyWithoutCampaignOrderInput>;
  adUnits?: InputMaybe<AdUnitUpdateManyWithoutCampaignOrderInput>;
  advertiser?: InputMaybe<OrgUpdateOneWithoutAdvertiserCampaignOrdersInput>;
  advertiserName?: InputMaybe<Scalars['String']>;
  age?: InputMaybe<CampaignOrderUpdateageInput>;
  aggregateData?: InputMaybe<AggregateDataObjectUpdateOneWithoutCampaignOrderInput>;
  attributionAudiences?: InputMaybe<AudienceUpdateManyInput>;
  attributionTargets?: InputMaybe<GeoTargetUpdateManyInput>;
  attributionWindow?: InputMaybe<Scalars['Int']>;
  awarenessCampaign?: InputMaybe<Scalars['Boolean']>;
  brands?: InputMaybe<BrandUpdateManyWithoutCampaignOrderInput>;
  budget?: InputMaybe<Scalars['Float']>;
  campaignChecklistProcess?: InputMaybe<CampaignChecklistUpdateOneWithoutCampaignOrdersInput>;
  campaigns?: InputMaybe<CampaignUpdateManyWithoutCampaignOrderInput>;
  category?: InputMaybe<CampaignOrderUpdatecategoryInput>;
  changeLog?: InputMaybe<ChangeUpdateManyWithoutCampaignOrderInput>;
  cpm?: InputMaybe<Scalars['Float']>;
  description?: InputMaybe<Scalars['String']>;
  devices?: InputMaybe<CampaignOrderUpdatedevicesInput>;
  displayReportDateUnits?: InputMaybe<DisplayReportDateUnitUpdateManyInput>;
  endDate?: InputMaybe<Scalars['DateTime']>;
  geoTargets?: InputMaybe<GeoTargetUpdateManyWithoutCampaignOrderInput>;
  income?: InputMaybe<CampaignOrderUpdateincomeInput>;
  isEditCampaign?: InputMaybe<Scalars['Boolean']>;
  isMonitored?: InputMaybe<Scalars['Boolean']>;
  isRegulated?: InputMaybe<Scalars['Boolean']>;
  isRequestChange?: InputMaybe<Scalars['String']>;
  kpi?: InputMaybe<Kpi>;
  kpiGoal?: InputMaybe<Scalars['Float']>;
  language?: InputMaybe<CampaignOrderUpdatelanguageInput>;
  name?: InputMaybe<Scalars['String']>;
  objectiveExistingCustomers?: InputMaybe<Scalars['Int']>;
  objectiveNewCustomers?: InputMaybe<Scalars['Int']>;
  orgs?: InputMaybe<OrgUpdateManyWithoutCampaignOrdersInput>;
  pacingData?: InputMaybe<PacingDataObjectUpdateOneWithoutCampaignOrderInput>;
  processorId?: InputMaybe<Scalars['String']>;
  prospectsKey?: InputMaybe<Scalars['String']>;
  region?: InputMaybe<CampaignOrderUpdateregionInput>;
  reports?: InputMaybe<CampaignReportUpdateManyWithoutCampaignOrderInput>;
  repullVWI?: InputMaybe<Scalars['Boolean']>;
  requestorId?: InputMaybe<Scalars['String']>;
  retargetDayCap?: InputMaybe<Scalars['Int']>;
  retargetTotalCap?: InputMaybe<Scalars['Int']>;
  salesforceId?: InputMaybe<Scalars['String']>;
  signUpCampaign?: InputMaybe<Scalars['Boolean']>;
  signUpConfig?: InputMaybe<SignUpConfigUpdateOneWithoutCampaignOrdersInput>;
  startDate?: InputMaybe<Scalars['DateTime']>;
  status?: InputMaybe<CampaignStatus>;
  tags?: InputMaybe<CampaignOrderUpdatetagsInput>;
  targetAudiences?: InputMaybe<AudienceUpdateManyInput>;
  targetingCriteria?: InputMaybe<Scalars['String']>;
  transactionTarget?: InputMaybe<Scalars['String']>;
  transactionsKey?: InputMaybe<Scalars['String']>;
  type?: InputMaybe<CampaignType>;
  version?: InputMaybe<Scalars['Float']>;
};

export type CampaignOrderUpdateageInput = {
  set?: InputMaybe<Array<Scalars['String']>>;
};

export type CampaignOrderUpdatecategoryInput = {
  set?: InputMaybe<Array<Scalars['String']>>;
};

export type CampaignOrderUpdatedevicesInput = {
  set?: InputMaybe<Array<DeviceType>>;
};

export type CampaignOrderUpdateincomeInput = {
  set?: InputMaybe<Array<Scalars['String']>>;
};

export type CampaignOrderUpdatelanguageInput = {
  set?: InputMaybe<Array<Language>>;
};

export type CampaignOrderUpdateregionInput = {
  set?: InputMaybe<Array<Scalars['String']>>;
};

export type CampaignOrderUpdatetagsInput = {
  set?: InputMaybe<Array<Scalars['String']>>;
};

export type CampaignOrderUpsertNestedInput = {
  create: CampaignOrderCreateInput;
  update: CampaignOrderUpdateDataInput;
};

export type CampaignOrderUpsertWithWhereUniqueWithoutAdvertiserInput = {
  create: CampaignOrderCreateWithoutAdvertiserInput;
  update: CampaignOrderUpdateWithoutAdvertiserDataInput;
  where: CampaignOrderWhereUniqueInput;
};

export type CampaignOrderUpsertWithWhereUniqueWithoutOrgsInput = {
  create: CampaignOrderCreateWithoutOrgsInput;
  update: CampaignOrderUpdateWithoutOrgsDataInput;
  where: CampaignOrderWhereUniqueInput;
};

export type CampaignOrderUpsertWithWhereUniqueWithoutTransactionsConfigInput = {
  create: CampaignOrderCreateWithoutTransactionsConfigInput;
  update: CampaignOrderUpdateWithoutTransactionsConfigDataInput;
  where: CampaignOrderWhereUniqueInput;
};

export type CampaignOrderUpsertWithoutAdTagsInput = {
  create: CampaignOrderCreateWithoutAdTagsInput;
  update: CampaignOrderUpdateWithoutAdTagsDataInput;
};

export type CampaignOrderUpsertWithoutAdUnitsInput = {
  create: CampaignOrderCreateWithoutAdUnitsInput;
  update: CampaignOrderUpdateWithoutAdUnitsDataInput;
};

export type CampaignOrderUpsertWithoutAggregateDataInput = {
  create: CampaignOrderCreateWithoutAggregateDataInput;
  update: CampaignOrderUpdateWithoutAggregateDataDataInput;
};

export type CampaignOrderUpsertWithoutBrandsInput = {
  create: CampaignOrderCreateWithoutBrandsInput;
  update: CampaignOrderUpdateWithoutBrandsDataInput;
};

export type CampaignOrderUpsertWithoutCampaignsInput = {
  create: CampaignOrderCreateWithoutCampaignsInput;
  update: CampaignOrderUpdateWithoutCampaignsDataInput;
};

export type CampaignOrderUpsertWithoutChangeLogInput = {
  create: CampaignOrderCreateWithoutChangeLogInput;
  update: CampaignOrderUpdateWithoutChangeLogDataInput;
};

export type CampaignOrderUpsertWithoutGeoTargetsInput = {
  create: CampaignOrderCreateWithoutGeoTargetsInput;
  update: CampaignOrderUpdateWithoutGeoTargetsDataInput;
};

export type CampaignOrderUpsertWithoutPacingDataInput = {
  create: CampaignOrderCreateWithoutPacingDataInput;
  update: CampaignOrderUpdateWithoutPacingDataDataInput;
};

export type CampaignOrderUpsertWithoutReportsInput = {
  create: CampaignOrderCreateWithoutReportsInput;
  update: CampaignOrderUpdateWithoutReportsDataInput;
};

export type CampaignOrderWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<CampaignOrderWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<CampaignOrderWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<CampaignOrderWhereInput>>;
  adTags_every?: InputMaybe<AdTagWhereInput>;
  adTags_none?: InputMaybe<AdTagWhereInput>;
  adTags_some?: InputMaybe<AdTagWhereInput>;
  adUnits_every?: InputMaybe<AdUnitWhereInput>;
  adUnits_none?: InputMaybe<AdUnitWhereInput>;
  adUnits_some?: InputMaybe<AdUnitWhereInput>;
  advertiser?: InputMaybe<OrgWhereInput>;
  advertiserName?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  advertiserName_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  advertiserName_ends_with?: InputMaybe<Scalars['String']>;
  /** All values greater than the given value. */
  advertiserName_gt?: InputMaybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  advertiserName_gte?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  advertiserName_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  advertiserName_lt?: InputMaybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  advertiserName_lte?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  advertiserName_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  advertiserName_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string. */
  advertiserName_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  advertiserName_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  advertiserName_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  advertiserName_starts_with?: InputMaybe<Scalars['String']>;
  aggregateData?: InputMaybe<AggregateDataObjectWhereInput>;
  attributionAudiences_every?: InputMaybe<AudienceWhereInput>;
  attributionAudiences_none?: InputMaybe<AudienceWhereInput>;
  attributionAudiences_some?: InputMaybe<AudienceWhereInput>;
  attributionTargets_every?: InputMaybe<GeoTargetWhereInput>;
  attributionTargets_none?: InputMaybe<GeoTargetWhereInput>;
  attributionTargets_some?: InputMaybe<GeoTargetWhereInput>;
  attributionWindow?: InputMaybe<Scalars['Int']>;
  /** All values greater than the given value. */
  attributionWindow_gt?: InputMaybe<Scalars['Int']>;
  /** All values greater than or equal the given value. */
  attributionWindow_gte?: InputMaybe<Scalars['Int']>;
  /** All values that are contained in given list. */
  attributionWindow_in?: InputMaybe<Array<Scalars['Int']>>;
  /** All values less than the given value. */
  attributionWindow_lt?: InputMaybe<Scalars['Int']>;
  /** All values less than or equal the given value. */
  attributionWindow_lte?: InputMaybe<Scalars['Int']>;
  /** All values that are not equal to given value. */
  attributionWindow_not?: InputMaybe<Scalars['Int']>;
  /** All values that are not contained in given list. */
  attributionWindow_not_in?: InputMaybe<Array<Scalars['Int']>>;
  awarenessCampaign?: InputMaybe<Scalars['Boolean']>;
  /** All values that are not equal to given value. */
  awarenessCampaign_not?: InputMaybe<Scalars['Boolean']>;
  brands_every?: InputMaybe<BrandWhereInput>;
  brands_none?: InputMaybe<BrandWhereInput>;
  brands_some?: InputMaybe<BrandWhereInput>;
  budget?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  budget_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  budget_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  budget_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  budget_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  budget_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  budget_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  budget_not_in?: InputMaybe<Array<Scalars['Float']>>;
  campaignChecklistProcess?: InputMaybe<CampaignChecklistWhereInput>;
  campaigns_every?: InputMaybe<CampaignWhereInput>;
  campaigns_none?: InputMaybe<CampaignWhereInput>;
  campaigns_some?: InputMaybe<CampaignWhereInput>;
  changeLog_every?: InputMaybe<ChangeWhereInput>;
  changeLog_none?: InputMaybe<ChangeWhereInput>;
  changeLog_some?: InputMaybe<ChangeWhereInput>;
  cpm?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  cpm_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  cpm_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  cpm_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  cpm_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  cpm_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  cpm_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  cpm_not_in?: InputMaybe<Array<Scalars['Float']>>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  description?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  description_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  description_ends_with?: InputMaybe<Scalars['String']>;
  /** All values greater than the given value. */
  description_gt?: InputMaybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  description_gte?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  description_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  description_lt?: InputMaybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  description_lte?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  description_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  description_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string. */
  description_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  description_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  description_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  description_starts_with?: InputMaybe<Scalars['String']>;
  displayReportDateUnits_every?: InputMaybe<DisplayReportDateUnitWhereInput>;
  displayReportDateUnits_none?: InputMaybe<DisplayReportDateUnitWhereInput>;
  displayReportDateUnits_some?: InputMaybe<DisplayReportDateUnitWhereInput>;
  endDate?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  endDate_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  endDate_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  endDate_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  endDate_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  endDate_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  endDate_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  endDate_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  geoTargets_every?: InputMaybe<GeoTargetWhereInput>;
  geoTargets_none?: InputMaybe<GeoTargetWhereInput>;
  geoTargets_some?: InputMaybe<GeoTargetWhereInput>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: InputMaybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: InputMaybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: InputMaybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  isEditCampaign?: InputMaybe<Scalars['Boolean']>;
  /** All values that are not equal to given value. */
  isEditCampaign_not?: InputMaybe<Scalars['Boolean']>;
  isMonitored?: InputMaybe<Scalars['Boolean']>;
  /** All values that are not equal to given value. */
  isMonitored_not?: InputMaybe<Scalars['Boolean']>;
  isRegulated?: InputMaybe<Scalars['Boolean']>;
  /** All values that are not equal to given value. */
  isRegulated_not?: InputMaybe<Scalars['Boolean']>;
  isRequestChange?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  isRequestChange_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  isRequestChange_ends_with?: InputMaybe<Scalars['String']>;
  /** All values greater than the given value. */
  isRequestChange_gt?: InputMaybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  isRequestChange_gte?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  isRequestChange_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  isRequestChange_lt?: InputMaybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  isRequestChange_lte?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  isRequestChange_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  isRequestChange_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string. */
  isRequestChange_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  isRequestChange_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  isRequestChange_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  isRequestChange_starts_with?: InputMaybe<Scalars['String']>;
  kpi?: InputMaybe<Kpi>;
  kpiGoal?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  kpiGoal_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  kpiGoal_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  kpiGoal_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  kpiGoal_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  kpiGoal_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  kpiGoal_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  kpiGoal_not_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values that are contained in given list. */
  kpi_in?: InputMaybe<Array<Kpi>>;
  /** All values that are not equal to given value. */
  kpi_not?: InputMaybe<Kpi>;
  /** All values that are not contained in given list. */
  kpi_not_in?: InputMaybe<Array<Kpi>>;
  name?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  name_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  name_ends_with?: InputMaybe<Scalars['String']>;
  /** All values greater than the given value. */
  name_gt?: InputMaybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  name_gte?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  name_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  name_lt?: InputMaybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  name_lte?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  name_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  name_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string. */
  name_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  name_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  name_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  name_starts_with?: InputMaybe<Scalars['String']>;
  objectiveExistingCustomers?: InputMaybe<Scalars['Int']>;
  /** All values greater than the given value. */
  objectiveExistingCustomers_gt?: InputMaybe<Scalars['Int']>;
  /** All values greater than or equal the given value. */
  objectiveExistingCustomers_gte?: InputMaybe<Scalars['Int']>;
  /** All values that are contained in given list. */
  objectiveExistingCustomers_in?: InputMaybe<Array<Scalars['Int']>>;
  /** All values less than the given value. */
  objectiveExistingCustomers_lt?: InputMaybe<Scalars['Int']>;
  /** All values less than or equal the given value. */
  objectiveExistingCustomers_lte?: InputMaybe<Scalars['Int']>;
  /** All values that are not equal to given value. */
  objectiveExistingCustomers_not?: InputMaybe<Scalars['Int']>;
  /** All values that are not contained in given list. */
  objectiveExistingCustomers_not_in?: InputMaybe<Array<Scalars['Int']>>;
  objectiveNewCustomers?: InputMaybe<Scalars['Int']>;
  /** All values greater than the given value. */
  objectiveNewCustomers_gt?: InputMaybe<Scalars['Int']>;
  /** All values greater than or equal the given value. */
  objectiveNewCustomers_gte?: InputMaybe<Scalars['Int']>;
  /** All values that are contained in given list. */
  objectiveNewCustomers_in?: InputMaybe<Array<Scalars['Int']>>;
  /** All values less than the given value. */
  objectiveNewCustomers_lt?: InputMaybe<Scalars['Int']>;
  /** All values less than or equal the given value. */
  objectiveNewCustomers_lte?: InputMaybe<Scalars['Int']>;
  /** All values that are not equal to given value. */
  objectiveNewCustomers_not?: InputMaybe<Scalars['Int']>;
  /** All values that are not contained in given list. */
  objectiveNewCustomers_not_in?: InputMaybe<Array<Scalars['Int']>>;
  orgs_every?: InputMaybe<OrgWhereInput>;
  orgs_none?: InputMaybe<OrgWhereInput>;
  orgs_some?: InputMaybe<OrgWhereInput>;
  pacingData?: InputMaybe<PacingDataObjectWhereInput>;
  processorId?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  processorId_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  processorId_ends_with?: InputMaybe<Scalars['String']>;
  /** All values greater than the given value. */
  processorId_gt?: InputMaybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  processorId_gte?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  processorId_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  processorId_lt?: InputMaybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  processorId_lte?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  processorId_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  processorId_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string. */
  processorId_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  processorId_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  processorId_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  processorId_starts_with?: InputMaybe<Scalars['String']>;
  prospectsKey?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  prospectsKey_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  prospectsKey_ends_with?: InputMaybe<Scalars['String']>;
  /** All values greater than the given value. */
  prospectsKey_gt?: InputMaybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  prospectsKey_gte?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  prospectsKey_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  prospectsKey_lt?: InputMaybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  prospectsKey_lte?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  prospectsKey_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  prospectsKey_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string. */
  prospectsKey_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  prospectsKey_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  prospectsKey_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  prospectsKey_starts_with?: InputMaybe<Scalars['String']>;
  reports_every?: InputMaybe<CampaignReportWhereInput>;
  reports_none?: InputMaybe<CampaignReportWhereInput>;
  reports_some?: InputMaybe<CampaignReportWhereInput>;
  repullVWI?: InputMaybe<Scalars['Boolean']>;
  /** All values that are not equal to given value. */
  repullVWI_not?: InputMaybe<Scalars['Boolean']>;
  requestorId?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  requestorId_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  requestorId_ends_with?: InputMaybe<Scalars['String']>;
  /** All values greater than the given value. */
  requestorId_gt?: InputMaybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  requestorId_gte?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  requestorId_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  requestorId_lt?: InputMaybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  requestorId_lte?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  requestorId_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  requestorId_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string. */
  requestorId_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  requestorId_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  requestorId_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  requestorId_starts_with?: InputMaybe<Scalars['String']>;
  retargetDayCap?: InputMaybe<Scalars['Int']>;
  /** All values greater than the given value. */
  retargetDayCap_gt?: InputMaybe<Scalars['Int']>;
  /** All values greater than or equal the given value. */
  retargetDayCap_gte?: InputMaybe<Scalars['Int']>;
  /** All values that are contained in given list. */
  retargetDayCap_in?: InputMaybe<Array<Scalars['Int']>>;
  /** All values less than the given value. */
  retargetDayCap_lt?: InputMaybe<Scalars['Int']>;
  /** All values less than or equal the given value. */
  retargetDayCap_lte?: InputMaybe<Scalars['Int']>;
  /** All values that are not equal to given value. */
  retargetDayCap_not?: InputMaybe<Scalars['Int']>;
  /** All values that are not contained in given list. */
  retargetDayCap_not_in?: InputMaybe<Array<Scalars['Int']>>;
  retargetTotalCap?: InputMaybe<Scalars['Int']>;
  /** All values greater than the given value. */
  retargetTotalCap_gt?: InputMaybe<Scalars['Int']>;
  /** All values greater than or equal the given value. */
  retargetTotalCap_gte?: InputMaybe<Scalars['Int']>;
  /** All values that are contained in given list. */
  retargetTotalCap_in?: InputMaybe<Array<Scalars['Int']>>;
  /** All values less than the given value. */
  retargetTotalCap_lt?: InputMaybe<Scalars['Int']>;
  /** All values less than or equal the given value. */
  retargetTotalCap_lte?: InputMaybe<Scalars['Int']>;
  /** All values that are not equal to given value. */
  retargetTotalCap_not?: InputMaybe<Scalars['Int']>;
  /** All values that are not contained in given list. */
  retargetTotalCap_not_in?: InputMaybe<Array<Scalars['Int']>>;
  salesforceId?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  salesforceId_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  salesforceId_ends_with?: InputMaybe<Scalars['String']>;
  /** All values greater than the given value. */
  salesforceId_gt?: InputMaybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  salesforceId_gte?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  salesforceId_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  salesforceId_lt?: InputMaybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  salesforceId_lte?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  salesforceId_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  salesforceId_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string. */
  salesforceId_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  salesforceId_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  salesforceId_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  salesforceId_starts_with?: InputMaybe<Scalars['String']>;
  signUpCampaign?: InputMaybe<Scalars['Boolean']>;
  /** All values that are not equal to given value. */
  signUpCampaign_not?: InputMaybe<Scalars['Boolean']>;
  signUpConfig?: InputMaybe<SignUpConfigWhereInput>;
  startDate?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  startDate_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  startDate_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  startDate_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  startDate_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  startDate_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  startDate_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  startDate_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  status?: InputMaybe<CampaignStatus>;
  /** All values that are contained in given list. */
  status_in?: InputMaybe<Array<CampaignStatus>>;
  /** All values that are not equal to given value. */
  status_not?: InputMaybe<CampaignStatus>;
  /** All values that are not contained in given list. */
  status_not_in?: InputMaybe<Array<CampaignStatus>>;
  targetAudiences_every?: InputMaybe<AudienceWhereInput>;
  targetAudiences_none?: InputMaybe<AudienceWhereInput>;
  targetAudiences_some?: InputMaybe<AudienceWhereInput>;
  targetingCriteria?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  targetingCriteria_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  targetingCriteria_ends_with?: InputMaybe<Scalars['String']>;
  /** All values greater than the given value. */
  targetingCriteria_gt?: InputMaybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  targetingCriteria_gte?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  targetingCriteria_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  targetingCriteria_lt?: InputMaybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  targetingCriteria_lte?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  targetingCriteria_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  targetingCriteria_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string. */
  targetingCriteria_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  targetingCriteria_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  targetingCriteria_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  targetingCriteria_starts_with?: InputMaybe<Scalars['String']>;
  transactionTarget?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  transactionTarget_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  transactionTarget_ends_with?: InputMaybe<Scalars['String']>;
  /** All values greater than the given value. */
  transactionTarget_gt?: InputMaybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  transactionTarget_gte?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  transactionTarget_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  transactionTarget_lt?: InputMaybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  transactionTarget_lte?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  transactionTarget_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  transactionTarget_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string. */
  transactionTarget_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  transactionTarget_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  transactionTarget_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  transactionTarget_starts_with?: InputMaybe<Scalars['String']>;
  transactionsConfig?: InputMaybe<TransactionsConfigWhereInput>;
  transactionsKey?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  transactionsKey_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  transactionsKey_ends_with?: InputMaybe<Scalars['String']>;
  /** All values greater than the given value. */
  transactionsKey_gt?: InputMaybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  transactionsKey_gte?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  transactionsKey_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  transactionsKey_lt?: InputMaybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  transactionsKey_lte?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  transactionsKey_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  transactionsKey_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string. */
  transactionsKey_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  transactionsKey_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  transactionsKey_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  transactionsKey_starts_with?: InputMaybe<Scalars['String']>;
  type?: InputMaybe<CampaignType>;
  /** All values that are contained in given list. */
  type_in?: InputMaybe<Array<CampaignType>>;
  /** All values that are not equal to given value. */
  type_not?: InputMaybe<CampaignType>;
  /** All values that are not contained in given list. */
  type_not_in?: InputMaybe<Array<CampaignType>>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  version?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  version_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  version_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  version_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  version_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  version_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  version_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  version_not_in?: InputMaybe<Array<Scalars['Float']>>;
};

export type CampaignOrderWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
  name?: InputMaybe<Scalars['String']>;
};

export type CampaignPreviousValues = {
  __typename?: 'CampaignPreviousValues';
  adProviderId?: Maybe<Scalars['String']>;
  budgetByDay?: Maybe<Scalars['Float']>;
  budgetTotal?: Maybe<Scalars['Float']>;
  clientOrg?: Maybe<Scalars['String']>;
  cpm?: Maybe<Scalars['Float']>;
  createdAt: Scalars['DateTime'];
  data?: Maybe<Scalars['Json']>;
  demandSidePlatform?: Maybe<DemandSidePlatform>;
  endDate?: Maybe<Scalars['DateTime']>;
  forwardingNumber?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  logsKey?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  originalEndDate?: Maybe<Scalars['DateTime']>;
  originalStartDate?: Maybe<Scalars['DateTime']>;
  phoneNumber?: Maybe<Scalars['String']>;
  rawCost?: Maybe<Scalars['Float']>;
  startDate?: Maybe<Scalars['DateTime']>;
  updatedAt: Scalars['DateTime'];
};

export type CampaignReport = Node & {
  __typename?: 'CampaignReport';
  audience?: Maybe<Audience>;
  campaign?: Maybe<Campaign>;
  campaignOrder?: Maybe<CampaignOrder>;
  createdAt: Scalars['DateTime'];
  eventsTargetSegment?: Maybe<EventsTarget>;
  id: Scalars['ID'];
  key: Scalars['String'];
  reportName: Scalars['String'];
  repull?: Maybe<Scalars['Boolean']>;
  segment?: Maybe<GeoTarget>;
  type: ReportType;
};

/** A connection to a list of items. */
export type CampaignReportConnection = {
  __typename?: 'CampaignReportConnection';
  aggregate: AggregateCampaignReport;
  /** A list of edges. */
  edges: Array<Maybe<CampaignReportEdge>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type CampaignReportCreateManyWithoutAudienceInput = {
  connect?: InputMaybe<Array<CampaignReportWhereUniqueInput>>;
  create?: InputMaybe<Array<CampaignReportCreateWithoutAudienceInput>>;
};

export type CampaignReportCreateManyWithoutCampaignInput = {
  connect?: InputMaybe<Array<CampaignReportWhereUniqueInput>>;
  create?: InputMaybe<Array<CampaignReportCreateWithoutCampaignInput>>;
};

export type CampaignReportCreateManyWithoutCampaignOrderInput = {
  connect?: InputMaybe<Array<CampaignReportWhereUniqueInput>>;
  create?: InputMaybe<Array<CampaignReportCreateWithoutCampaignOrderInput>>;
};

export type CampaignReportCreateManyWithoutEventsTargetSegmentInput = {
  connect?: InputMaybe<Array<CampaignReportWhereUniqueInput>>;
  create?: InputMaybe<Array<CampaignReportCreateWithoutEventsTargetSegmentInput>>;
};

export type CampaignReportCreateManyWithoutSegmentInput = {
  connect?: InputMaybe<Array<CampaignReportWhereUniqueInput>>;
  create?: InputMaybe<Array<CampaignReportCreateWithoutSegmentInput>>;
};

export type CampaignReportCreateWithoutAudienceInput = {
  campaign?: InputMaybe<CampaignCreateOneWithoutReportsInput>;
  campaignOrder?: InputMaybe<CampaignOrderCreateOneWithoutReportsInput>;
  eventsTargetSegment?: InputMaybe<EventsTargetCreateOneWithoutReportsInput>;
  key: Scalars['String'];
  reportName: Scalars['String'];
  repull?: InputMaybe<Scalars['Boolean']>;
  segment?: InputMaybe<GeoTargetCreateOneWithoutReportsInput>;
  type: ReportType;
};

export type CampaignReportCreateWithoutCampaignInput = {
  audience?: InputMaybe<AudienceCreateOneWithoutReportsInput>;
  campaignOrder?: InputMaybe<CampaignOrderCreateOneWithoutReportsInput>;
  eventsTargetSegment?: InputMaybe<EventsTargetCreateOneWithoutReportsInput>;
  key: Scalars['String'];
  reportName: Scalars['String'];
  repull?: InputMaybe<Scalars['Boolean']>;
  segment?: InputMaybe<GeoTargetCreateOneWithoutReportsInput>;
  type: ReportType;
};

export type CampaignReportCreateWithoutCampaignOrderInput = {
  audience?: InputMaybe<AudienceCreateOneWithoutReportsInput>;
  campaign?: InputMaybe<CampaignCreateOneWithoutReportsInput>;
  eventsTargetSegment?: InputMaybe<EventsTargetCreateOneWithoutReportsInput>;
  key: Scalars['String'];
  reportName: Scalars['String'];
  repull?: InputMaybe<Scalars['Boolean']>;
  segment?: InputMaybe<GeoTargetCreateOneWithoutReportsInput>;
  type: ReportType;
};

export type CampaignReportCreateWithoutEventsTargetSegmentInput = {
  audience?: InputMaybe<AudienceCreateOneWithoutReportsInput>;
  campaign?: InputMaybe<CampaignCreateOneWithoutReportsInput>;
  campaignOrder?: InputMaybe<CampaignOrderCreateOneWithoutReportsInput>;
  key: Scalars['String'];
  reportName: Scalars['String'];
  repull?: InputMaybe<Scalars['Boolean']>;
  segment?: InputMaybe<GeoTargetCreateOneWithoutReportsInput>;
  type: ReportType;
};

export type CampaignReportCreateWithoutSegmentInput = {
  audience?: InputMaybe<AudienceCreateOneWithoutReportsInput>;
  campaign?: InputMaybe<CampaignCreateOneWithoutReportsInput>;
  campaignOrder?: InputMaybe<CampaignOrderCreateOneWithoutReportsInput>;
  eventsTargetSegment?: InputMaybe<EventsTargetCreateOneWithoutReportsInput>;
  key: Scalars['String'];
  reportName: Scalars['String'];
  repull?: InputMaybe<Scalars['Boolean']>;
  type: ReportType;
};

/** An edge in a connection. */
export type CampaignReportEdge = {
  __typename?: 'CampaignReportEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: CampaignReport;
};

export enum CampaignReportOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  KeyAsc = 'key_ASC',
  KeyDesc = 'key_DESC',
  ReportNameAsc = 'reportName_ASC',
  ReportNameDesc = 'reportName_DESC',
  RepullAsc = 'repull_ASC',
  RepullDesc = 'repull_DESC',
  TypeAsc = 'type_ASC',
  TypeDesc = 'type_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC'
}

export type CampaignReportSignedUrl = {
  __typename?: 'CampaignReportSignedURL';
  error?: Maybe<Scalars['String']>;
  expiresAt: Scalars['String'];
  url: Scalars['String'];
};

export type CampaignReportUpdateManyWithoutAudienceInput = {
  connect?: InputMaybe<Array<CampaignReportWhereUniqueInput>>;
  create?: InputMaybe<Array<CampaignReportCreateWithoutAudienceInput>>;
  delete?: InputMaybe<Array<CampaignReportWhereUniqueInput>>;
  disconnect?: InputMaybe<Array<CampaignReportWhereUniqueInput>>;
  update?: InputMaybe<Array<CampaignReportUpdateWithWhereUniqueWithoutAudienceInput>>;
  upsert?: InputMaybe<Array<CampaignReportUpsertWithWhereUniqueWithoutAudienceInput>>;
};

export type CampaignReportUpdateManyWithoutCampaignInput = {
  connect?: InputMaybe<Array<CampaignReportWhereUniqueInput>>;
  create?: InputMaybe<Array<CampaignReportCreateWithoutCampaignInput>>;
  delete?: InputMaybe<Array<CampaignReportWhereUniqueInput>>;
  disconnect?: InputMaybe<Array<CampaignReportWhereUniqueInput>>;
  update?: InputMaybe<Array<CampaignReportUpdateWithWhereUniqueWithoutCampaignInput>>;
  upsert?: InputMaybe<Array<CampaignReportUpsertWithWhereUniqueWithoutCampaignInput>>;
};

export type CampaignReportUpdateManyWithoutCampaignOrderInput = {
  connect?: InputMaybe<Array<CampaignReportWhereUniqueInput>>;
  create?: InputMaybe<Array<CampaignReportCreateWithoutCampaignOrderInput>>;
  delete?: InputMaybe<Array<CampaignReportWhereUniqueInput>>;
  disconnect?: InputMaybe<Array<CampaignReportWhereUniqueInput>>;
  update?: InputMaybe<Array<CampaignReportUpdateWithWhereUniqueWithoutCampaignOrderInput>>;
  upsert?: InputMaybe<Array<CampaignReportUpsertWithWhereUniqueWithoutCampaignOrderInput>>;
};

export type CampaignReportUpdateManyWithoutEventsTargetSegmentInput = {
  connect?: InputMaybe<Array<CampaignReportWhereUniqueInput>>;
  create?: InputMaybe<Array<CampaignReportCreateWithoutEventsTargetSegmentInput>>;
  delete?: InputMaybe<Array<CampaignReportWhereUniqueInput>>;
  disconnect?: InputMaybe<Array<CampaignReportWhereUniqueInput>>;
  update?: InputMaybe<Array<CampaignReportUpdateWithWhereUniqueWithoutEventsTargetSegmentInput>>;
  upsert?: InputMaybe<Array<CampaignReportUpsertWithWhereUniqueWithoutEventsTargetSegmentInput>>;
};

export type CampaignReportUpdateManyWithoutSegmentInput = {
  connect?: InputMaybe<Array<CampaignReportWhereUniqueInput>>;
  create?: InputMaybe<Array<CampaignReportCreateWithoutSegmentInput>>;
  delete?: InputMaybe<Array<CampaignReportWhereUniqueInput>>;
  disconnect?: InputMaybe<Array<CampaignReportWhereUniqueInput>>;
  update?: InputMaybe<Array<CampaignReportUpdateWithWhereUniqueWithoutSegmentInput>>;
  upsert?: InputMaybe<Array<CampaignReportUpsertWithWhereUniqueWithoutSegmentInput>>;
};

export type CampaignReportUpdateWithWhereUniqueWithoutAudienceInput = {
  data: CampaignReportUpdateWithoutAudienceDataInput;
  where: CampaignReportWhereUniqueInput;
};

export type CampaignReportUpdateWithWhereUniqueWithoutCampaignInput = {
  data: CampaignReportUpdateWithoutCampaignDataInput;
  where: CampaignReportWhereUniqueInput;
};

export type CampaignReportUpdateWithWhereUniqueWithoutCampaignOrderInput = {
  data: CampaignReportUpdateWithoutCampaignOrderDataInput;
  where: CampaignReportWhereUniqueInput;
};

export type CampaignReportUpdateWithWhereUniqueWithoutEventsTargetSegmentInput = {
  data: CampaignReportUpdateWithoutEventsTargetSegmentDataInput;
  where: CampaignReportWhereUniqueInput;
};

export type CampaignReportUpdateWithWhereUniqueWithoutSegmentInput = {
  data: CampaignReportUpdateWithoutSegmentDataInput;
  where: CampaignReportWhereUniqueInput;
};

export type CampaignReportUpdateWithoutAudienceDataInput = {
  campaign?: InputMaybe<CampaignUpdateOneWithoutReportsInput>;
  campaignOrder?: InputMaybe<CampaignOrderUpdateOneWithoutReportsInput>;
  eventsTargetSegment?: InputMaybe<EventsTargetUpdateOneWithoutReportsInput>;
  key?: InputMaybe<Scalars['String']>;
  reportName?: InputMaybe<Scalars['String']>;
  repull?: InputMaybe<Scalars['Boolean']>;
  segment?: InputMaybe<GeoTargetUpdateOneWithoutReportsInput>;
  type?: InputMaybe<ReportType>;
};

export type CampaignReportUpdateWithoutCampaignDataInput = {
  audience?: InputMaybe<AudienceUpdateOneWithoutReportsInput>;
  campaignOrder?: InputMaybe<CampaignOrderUpdateOneWithoutReportsInput>;
  eventsTargetSegment?: InputMaybe<EventsTargetUpdateOneWithoutReportsInput>;
  key?: InputMaybe<Scalars['String']>;
  reportName?: InputMaybe<Scalars['String']>;
  repull?: InputMaybe<Scalars['Boolean']>;
  segment?: InputMaybe<GeoTargetUpdateOneWithoutReportsInput>;
  type?: InputMaybe<ReportType>;
};

export type CampaignReportUpdateWithoutCampaignOrderDataInput = {
  audience?: InputMaybe<AudienceUpdateOneWithoutReportsInput>;
  campaign?: InputMaybe<CampaignUpdateOneWithoutReportsInput>;
  eventsTargetSegment?: InputMaybe<EventsTargetUpdateOneWithoutReportsInput>;
  key?: InputMaybe<Scalars['String']>;
  reportName?: InputMaybe<Scalars['String']>;
  repull?: InputMaybe<Scalars['Boolean']>;
  segment?: InputMaybe<GeoTargetUpdateOneWithoutReportsInput>;
  type?: InputMaybe<ReportType>;
};

export type CampaignReportUpdateWithoutEventsTargetSegmentDataInput = {
  audience?: InputMaybe<AudienceUpdateOneWithoutReportsInput>;
  campaign?: InputMaybe<CampaignUpdateOneWithoutReportsInput>;
  campaignOrder?: InputMaybe<CampaignOrderUpdateOneWithoutReportsInput>;
  key?: InputMaybe<Scalars['String']>;
  reportName?: InputMaybe<Scalars['String']>;
  repull?: InputMaybe<Scalars['Boolean']>;
  segment?: InputMaybe<GeoTargetUpdateOneWithoutReportsInput>;
  type?: InputMaybe<ReportType>;
};

export type CampaignReportUpdateWithoutSegmentDataInput = {
  audience?: InputMaybe<AudienceUpdateOneWithoutReportsInput>;
  campaign?: InputMaybe<CampaignUpdateOneWithoutReportsInput>;
  campaignOrder?: InputMaybe<CampaignOrderUpdateOneWithoutReportsInput>;
  eventsTargetSegment?: InputMaybe<EventsTargetUpdateOneWithoutReportsInput>;
  key?: InputMaybe<Scalars['String']>;
  reportName?: InputMaybe<Scalars['String']>;
  repull?: InputMaybe<Scalars['Boolean']>;
  type?: InputMaybe<ReportType>;
};

export type CampaignReportUpsertWithWhereUniqueWithoutAudienceInput = {
  create: CampaignReportCreateWithoutAudienceInput;
  update: CampaignReportUpdateWithoutAudienceDataInput;
  where: CampaignReportWhereUniqueInput;
};

export type CampaignReportUpsertWithWhereUniqueWithoutCampaignInput = {
  create: CampaignReportCreateWithoutCampaignInput;
  update: CampaignReportUpdateWithoutCampaignDataInput;
  where: CampaignReportWhereUniqueInput;
};

export type CampaignReportUpsertWithWhereUniqueWithoutCampaignOrderInput = {
  create: CampaignReportCreateWithoutCampaignOrderInput;
  update: CampaignReportUpdateWithoutCampaignOrderDataInput;
  where: CampaignReportWhereUniqueInput;
};

export type CampaignReportUpsertWithWhereUniqueWithoutEventsTargetSegmentInput = {
  create: CampaignReportCreateWithoutEventsTargetSegmentInput;
  update: CampaignReportUpdateWithoutEventsTargetSegmentDataInput;
  where: CampaignReportWhereUniqueInput;
};

export type CampaignReportUpsertWithWhereUniqueWithoutSegmentInput = {
  create: CampaignReportCreateWithoutSegmentInput;
  update: CampaignReportUpdateWithoutSegmentDataInput;
  where: CampaignReportWhereUniqueInput;
};

export type CampaignReportWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<CampaignReportWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<CampaignReportWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<CampaignReportWhereInput>>;
  audience?: InputMaybe<AudienceWhereInput>;
  campaign?: InputMaybe<CampaignWhereInput>;
  campaignOrder?: InputMaybe<CampaignOrderWhereInput>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  eventsTargetSegment?: InputMaybe<EventsTargetWhereInput>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: InputMaybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: InputMaybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: InputMaybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  key?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  key_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  key_ends_with?: InputMaybe<Scalars['String']>;
  /** All values greater than the given value. */
  key_gt?: InputMaybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  key_gte?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  key_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  key_lt?: InputMaybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  key_lte?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  key_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  key_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string. */
  key_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  key_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  key_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  key_starts_with?: InputMaybe<Scalars['String']>;
  reportName?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  reportName_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  reportName_ends_with?: InputMaybe<Scalars['String']>;
  /** All values greater than the given value. */
  reportName_gt?: InputMaybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  reportName_gte?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  reportName_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  reportName_lt?: InputMaybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  reportName_lte?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  reportName_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  reportName_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string. */
  reportName_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  reportName_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  reportName_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  reportName_starts_with?: InputMaybe<Scalars['String']>;
  repull?: InputMaybe<Scalars['Boolean']>;
  /** All values that are not equal to given value. */
  repull_not?: InputMaybe<Scalars['Boolean']>;
  segment?: InputMaybe<GeoTargetWhereInput>;
  type?: InputMaybe<ReportType>;
  /** All values that are contained in given list. */
  type_in?: InputMaybe<Array<ReportType>>;
  /** All values that are not equal to given value. */
  type_not?: InputMaybe<ReportType>;
  /** All values that are not contained in given list. */
  type_not_in?: InputMaybe<Array<ReportType>>;
};

export type CampaignReportWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
  key?: InputMaybe<Scalars['String']>;
};

export enum CampaignStatus {
  Approved = 'APPROVED',
  Draft = 'DRAFT',
  Live = 'LIVE',
  Past = 'PAST',
  Paused = 'PAUSED',
  Pending = 'PENDING',
  PendingClient = 'PENDING_CLIENT'
}

export type CampaignSubscriptionPayload = {
  __typename?: 'CampaignSubscriptionPayload';
  mutation: MutationType;
  node?: Maybe<Campaign>;
  previousValues?: Maybe<CampaignPreviousValues>;
  updatedFields?: Maybe<Array<Scalars['String']>>;
};

export type CampaignSubscriptionWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<CampaignSubscriptionWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<CampaignSubscriptionWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<CampaignSubscriptionWhereInput>>;
  /** The subscription event gets dispatched when it's listed in mutation_in */
  mutation_in?: InputMaybe<Array<MutationType>>;
  node?: InputMaybe<CampaignWhereInput>;
  /** The subscription event gets only dispatched when one of the updated fields names is included in this list */
  updatedFields_contains?: InputMaybe<Scalars['String']>;
  /** The subscription event gets only dispatched when all of the field names included in this list have been updated */
  updatedFields_contains_every?: InputMaybe<Array<Scalars['String']>>;
  /** The subscription event gets only dispatched when some of the field names included in this list have been updated */
  updatedFields_contains_some?: InputMaybe<Array<Scalars['String']>>;
};

export enum CampaignType {
  Cpc = 'CPC',
  Display = 'DISPLAY',
  Dooh = 'DOOH',
  Loyalty = 'LOYALTY',
  Ooh = 'OOH',
  Social = 'SOCIAL'
}

export type CampaignUpdateInput = {
  adProviderId?: InputMaybe<Scalars['String']>;
  aggregateData?: InputMaybe<AggregateDataObjectUpdateOneWithoutCampaignInput>;
  budgetByDay?: InputMaybe<Scalars['Float']>;
  budgetTotal?: InputMaybe<Scalars['Float']>;
  callEvents?: InputMaybe<CallEventUpdateManyWithoutCampaignInput>;
  campaignOrder?: InputMaybe<CampaignOrderUpdateOneWithoutCampaignsInput>;
  campaignPacingData?: InputMaybe<PacingDataObjectUpdateOneWithoutCampaignInput>;
  clientOrg?: InputMaybe<Scalars['String']>;
  cpm?: InputMaybe<Scalars['Float']>;
  data?: InputMaybe<Scalars['Json']>;
  demandSidePlatform?: InputMaybe<DemandSidePlatform>;
  endDate?: InputMaybe<Scalars['DateTime']>;
  forwardingNumber?: InputMaybe<Scalars['String']>;
  googleAnalyticsMetaData?: InputMaybe<GoogleAnalyticsUpdateOneWithoutCampaignsInput>;
  lineItems?: InputMaybe<LineItemUpdateManyWithoutCampaignInput>;
  logsKey?: InputMaybe<Scalars['String']>;
  name?: InputMaybe<Scalars['String']>;
  orgs?: InputMaybe<OrgUpdateManyWithoutCampaignsInput>;
  originalEndDate?: InputMaybe<Scalars['DateTime']>;
  originalStartDate?: InputMaybe<Scalars['DateTime']>;
  phoneNumber?: InputMaybe<Scalars['String']>;
  rawCost?: InputMaybe<Scalars['Float']>;
  reports?: InputMaybe<CampaignReportUpdateManyWithoutCampaignInput>;
  startDate?: InputMaybe<Scalars['DateTime']>;
};

export type CampaignUpdateManyWithoutCampaignOrderInput = {
  connect?: InputMaybe<Array<CampaignWhereUniqueInput>>;
  create?: InputMaybe<Array<CampaignCreateWithoutCampaignOrderInput>>;
  delete?: InputMaybe<Array<CampaignWhereUniqueInput>>;
  disconnect?: InputMaybe<Array<CampaignWhereUniqueInput>>;
  update?: InputMaybe<Array<CampaignUpdateWithWhereUniqueWithoutCampaignOrderInput>>;
  upsert?: InputMaybe<Array<CampaignUpsertWithWhereUniqueWithoutCampaignOrderInput>>;
};

export type CampaignUpdateManyWithoutGoogleAnalyticsMetaDataInput = {
  connect?: InputMaybe<Array<CampaignWhereUniqueInput>>;
  create?: InputMaybe<Array<CampaignCreateWithoutGoogleAnalyticsMetaDataInput>>;
  delete?: InputMaybe<Array<CampaignWhereUniqueInput>>;
  disconnect?: InputMaybe<Array<CampaignWhereUniqueInput>>;
  update?: InputMaybe<Array<CampaignUpdateWithWhereUniqueWithoutGoogleAnalyticsMetaDataInput>>;
  upsert?: InputMaybe<Array<CampaignUpsertWithWhereUniqueWithoutGoogleAnalyticsMetaDataInput>>;
};

export type CampaignUpdateManyWithoutOrgsInput = {
  connect?: InputMaybe<Array<CampaignWhereUniqueInput>>;
  create?: InputMaybe<Array<CampaignCreateWithoutOrgsInput>>;
  delete?: InputMaybe<Array<CampaignWhereUniqueInput>>;
  disconnect?: InputMaybe<Array<CampaignWhereUniqueInput>>;
  update?: InputMaybe<Array<CampaignUpdateWithWhereUniqueWithoutOrgsInput>>;
  upsert?: InputMaybe<Array<CampaignUpsertWithWhereUniqueWithoutOrgsInput>>;
};

export type CampaignUpdateOneWithoutAggregateDataInput = {
  connect?: InputMaybe<CampaignWhereUniqueInput>;
  create?: InputMaybe<CampaignCreateWithoutAggregateDataInput>;
  delete?: InputMaybe<Scalars['Boolean']>;
  disconnect?: InputMaybe<Scalars['Boolean']>;
  update?: InputMaybe<CampaignUpdateWithoutAggregateDataDataInput>;
  upsert?: InputMaybe<CampaignUpsertWithoutAggregateDataInput>;
};

export type CampaignUpdateOneWithoutCampaignPacingDataInput = {
  connect?: InputMaybe<CampaignWhereUniqueInput>;
  create?: InputMaybe<CampaignCreateWithoutCampaignPacingDataInput>;
  delete?: InputMaybe<Scalars['Boolean']>;
  disconnect?: InputMaybe<Scalars['Boolean']>;
  update?: InputMaybe<CampaignUpdateWithoutCampaignPacingDataDataInput>;
  upsert?: InputMaybe<CampaignUpsertWithoutCampaignPacingDataInput>;
};

export type CampaignUpdateOneWithoutLineItemsInput = {
  connect?: InputMaybe<CampaignWhereUniqueInput>;
  create?: InputMaybe<CampaignCreateWithoutLineItemsInput>;
  delete?: InputMaybe<Scalars['Boolean']>;
  disconnect?: InputMaybe<Scalars['Boolean']>;
  update?: InputMaybe<CampaignUpdateWithoutLineItemsDataInput>;
  upsert?: InputMaybe<CampaignUpsertWithoutLineItemsInput>;
};

export type CampaignUpdateOneWithoutReportsInput = {
  connect?: InputMaybe<CampaignWhereUniqueInput>;
  create?: InputMaybe<CampaignCreateWithoutReportsInput>;
  delete?: InputMaybe<Scalars['Boolean']>;
  disconnect?: InputMaybe<Scalars['Boolean']>;
  update?: InputMaybe<CampaignUpdateWithoutReportsDataInput>;
  upsert?: InputMaybe<CampaignUpsertWithoutReportsInput>;
};

export type CampaignUpdateWithWhereUniqueWithoutCampaignOrderInput = {
  data: CampaignUpdateWithoutCampaignOrderDataInput;
  where: CampaignWhereUniqueInput;
};

export type CampaignUpdateWithWhereUniqueWithoutGoogleAnalyticsMetaDataInput = {
  data: CampaignUpdateWithoutGoogleAnalyticsMetaDataDataInput;
  where: CampaignWhereUniqueInput;
};

export type CampaignUpdateWithWhereUniqueWithoutOrgsInput = {
  data: CampaignUpdateWithoutOrgsDataInput;
  where: CampaignWhereUniqueInput;
};

export type CampaignUpdateWithoutAggregateDataDataInput = {
  adProviderId?: InputMaybe<Scalars['String']>;
  budgetByDay?: InputMaybe<Scalars['Float']>;
  budgetTotal?: InputMaybe<Scalars['Float']>;
  callEvents?: InputMaybe<CallEventUpdateManyWithoutCampaignInput>;
  campaignOrder?: InputMaybe<CampaignOrderUpdateOneWithoutCampaignsInput>;
  campaignPacingData?: InputMaybe<PacingDataObjectUpdateOneWithoutCampaignInput>;
  clientOrg?: InputMaybe<Scalars['String']>;
  cpm?: InputMaybe<Scalars['Float']>;
  data?: InputMaybe<Scalars['Json']>;
  demandSidePlatform?: InputMaybe<DemandSidePlatform>;
  endDate?: InputMaybe<Scalars['DateTime']>;
  forwardingNumber?: InputMaybe<Scalars['String']>;
  googleAnalyticsMetaData?: InputMaybe<GoogleAnalyticsUpdateOneWithoutCampaignsInput>;
  lineItems?: InputMaybe<LineItemUpdateManyWithoutCampaignInput>;
  logsKey?: InputMaybe<Scalars['String']>;
  name?: InputMaybe<Scalars['String']>;
  orgs?: InputMaybe<OrgUpdateManyWithoutCampaignsInput>;
  originalEndDate?: InputMaybe<Scalars['DateTime']>;
  originalStartDate?: InputMaybe<Scalars['DateTime']>;
  phoneNumber?: InputMaybe<Scalars['String']>;
  rawCost?: InputMaybe<Scalars['Float']>;
  reports?: InputMaybe<CampaignReportUpdateManyWithoutCampaignInput>;
  startDate?: InputMaybe<Scalars['DateTime']>;
};

export type CampaignUpdateWithoutCampaignOrderDataInput = {
  adProviderId?: InputMaybe<Scalars['String']>;
  aggregateData?: InputMaybe<AggregateDataObjectUpdateOneWithoutCampaignInput>;
  budgetByDay?: InputMaybe<Scalars['Float']>;
  budgetTotal?: InputMaybe<Scalars['Float']>;
  callEvents?: InputMaybe<CallEventUpdateManyWithoutCampaignInput>;
  campaignPacingData?: InputMaybe<PacingDataObjectUpdateOneWithoutCampaignInput>;
  clientOrg?: InputMaybe<Scalars['String']>;
  cpm?: InputMaybe<Scalars['Float']>;
  data?: InputMaybe<Scalars['Json']>;
  demandSidePlatform?: InputMaybe<DemandSidePlatform>;
  endDate?: InputMaybe<Scalars['DateTime']>;
  forwardingNumber?: InputMaybe<Scalars['String']>;
  googleAnalyticsMetaData?: InputMaybe<GoogleAnalyticsUpdateOneWithoutCampaignsInput>;
  lineItems?: InputMaybe<LineItemUpdateManyWithoutCampaignInput>;
  logsKey?: InputMaybe<Scalars['String']>;
  name?: InputMaybe<Scalars['String']>;
  orgs?: InputMaybe<OrgUpdateManyWithoutCampaignsInput>;
  originalEndDate?: InputMaybe<Scalars['DateTime']>;
  originalStartDate?: InputMaybe<Scalars['DateTime']>;
  phoneNumber?: InputMaybe<Scalars['String']>;
  rawCost?: InputMaybe<Scalars['Float']>;
  reports?: InputMaybe<CampaignReportUpdateManyWithoutCampaignInput>;
  startDate?: InputMaybe<Scalars['DateTime']>;
};

export type CampaignUpdateWithoutCampaignPacingDataDataInput = {
  adProviderId?: InputMaybe<Scalars['String']>;
  aggregateData?: InputMaybe<AggregateDataObjectUpdateOneWithoutCampaignInput>;
  budgetByDay?: InputMaybe<Scalars['Float']>;
  budgetTotal?: InputMaybe<Scalars['Float']>;
  callEvents?: InputMaybe<CallEventUpdateManyWithoutCampaignInput>;
  campaignOrder?: InputMaybe<CampaignOrderUpdateOneWithoutCampaignsInput>;
  clientOrg?: InputMaybe<Scalars['String']>;
  cpm?: InputMaybe<Scalars['Float']>;
  data?: InputMaybe<Scalars['Json']>;
  demandSidePlatform?: InputMaybe<DemandSidePlatform>;
  endDate?: InputMaybe<Scalars['DateTime']>;
  forwardingNumber?: InputMaybe<Scalars['String']>;
  googleAnalyticsMetaData?: InputMaybe<GoogleAnalyticsUpdateOneWithoutCampaignsInput>;
  lineItems?: InputMaybe<LineItemUpdateManyWithoutCampaignInput>;
  logsKey?: InputMaybe<Scalars['String']>;
  name?: InputMaybe<Scalars['String']>;
  orgs?: InputMaybe<OrgUpdateManyWithoutCampaignsInput>;
  originalEndDate?: InputMaybe<Scalars['DateTime']>;
  originalStartDate?: InputMaybe<Scalars['DateTime']>;
  phoneNumber?: InputMaybe<Scalars['String']>;
  rawCost?: InputMaybe<Scalars['Float']>;
  reports?: InputMaybe<CampaignReportUpdateManyWithoutCampaignInput>;
  startDate?: InputMaybe<Scalars['DateTime']>;
};

export type CampaignUpdateWithoutGoogleAnalyticsMetaDataDataInput = {
  adProviderId?: InputMaybe<Scalars['String']>;
  aggregateData?: InputMaybe<AggregateDataObjectUpdateOneWithoutCampaignInput>;
  budgetByDay?: InputMaybe<Scalars['Float']>;
  budgetTotal?: InputMaybe<Scalars['Float']>;
  callEvents?: InputMaybe<CallEventUpdateManyWithoutCampaignInput>;
  campaignOrder?: InputMaybe<CampaignOrderUpdateOneWithoutCampaignsInput>;
  campaignPacingData?: InputMaybe<PacingDataObjectUpdateOneWithoutCampaignInput>;
  clientOrg?: InputMaybe<Scalars['String']>;
  cpm?: InputMaybe<Scalars['Float']>;
  data?: InputMaybe<Scalars['Json']>;
  demandSidePlatform?: InputMaybe<DemandSidePlatform>;
  endDate?: InputMaybe<Scalars['DateTime']>;
  forwardingNumber?: InputMaybe<Scalars['String']>;
  lineItems?: InputMaybe<LineItemUpdateManyWithoutCampaignInput>;
  logsKey?: InputMaybe<Scalars['String']>;
  name?: InputMaybe<Scalars['String']>;
  orgs?: InputMaybe<OrgUpdateManyWithoutCampaignsInput>;
  originalEndDate?: InputMaybe<Scalars['DateTime']>;
  originalStartDate?: InputMaybe<Scalars['DateTime']>;
  phoneNumber?: InputMaybe<Scalars['String']>;
  rawCost?: InputMaybe<Scalars['Float']>;
  reports?: InputMaybe<CampaignReportUpdateManyWithoutCampaignInput>;
  startDate?: InputMaybe<Scalars['DateTime']>;
};

export type CampaignUpdateWithoutLineItemsDataInput = {
  adProviderId?: InputMaybe<Scalars['String']>;
  aggregateData?: InputMaybe<AggregateDataObjectUpdateOneWithoutCampaignInput>;
  budgetByDay?: InputMaybe<Scalars['Float']>;
  budgetTotal?: InputMaybe<Scalars['Float']>;
  callEvents?: InputMaybe<CallEventUpdateManyWithoutCampaignInput>;
  campaignOrder?: InputMaybe<CampaignOrderUpdateOneWithoutCampaignsInput>;
  campaignPacingData?: InputMaybe<PacingDataObjectUpdateOneWithoutCampaignInput>;
  clientOrg?: InputMaybe<Scalars['String']>;
  cpm?: InputMaybe<Scalars['Float']>;
  data?: InputMaybe<Scalars['Json']>;
  demandSidePlatform?: InputMaybe<DemandSidePlatform>;
  endDate?: InputMaybe<Scalars['DateTime']>;
  forwardingNumber?: InputMaybe<Scalars['String']>;
  googleAnalyticsMetaData?: InputMaybe<GoogleAnalyticsUpdateOneWithoutCampaignsInput>;
  logsKey?: InputMaybe<Scalars['String']>;
  name?: InputMaybe<Scalars['String']>;
  orgs?: InputMaybe<OrgUpdateManyWithoutCampaignsInput>;
  originalEndDate?: InputMaybe<Scalars['DateTime']>;
  originalStartDate?: InputMaybe<Scalars['DateTime']>;
  phoneNumber?: InputMaybe<Scalars['String']>;
  rawCost?: InputMaybe<Scalars['Float']>;
  reports?: InputMaybe<CampaignReportUpdateManyWithoutCampaignInput>;
  startDate?: InputMaybe<Scalars['DateTime']>;
};

export type CampaignUpdateWithoutOrgsDataInput = {
  adProviderId?: InputMaybe<Scalars['String']>;
  aggregateData?: InputMaybe<AggregateDataObjectUpdateOneWithoutCampaignInput>;
  budgetByDay?: InputMaybe<Scalars['Float']>;
  budgetTotal?: InputMaybe<Scalars['Float']>;
  callEvents?: InputMaybe<CallEventUpdateManyWithoutCampaignInput>;
  campaignOrder?: InputMaybe<CampaignOrderUpdateOneWithoutCampaignsInput>;
  campaignPacingData?: InputMaybe<PacingDataObjectUpdateOneWithoutCampaignInput>;
  clientOrg?: InputMaybe<Scalars['String']>;
  cpm?: InputMaybe<Scalars['Float']>;
  data?: InputMaybe<Scalars['Json']>;
  demandSidePlatform?: InputMaybe<DemandSidePlatform>;
  endDate?: InputMaybe<Scalars['DateTime']>;
  forwardingNumber?: InputMaybe<Scalars['String']>;
  googleAnalyticsMetaData?: InputMaybe<GoogleAnalyticsUpdateOneWithoutCampaignsInput>;
  lineItems?: InputMaybe<LineItemUpdateManyWithoutCampaignInput>;
  logsKey?: InputMaybe<Scalars['String']>;
  name?: InputMaybe<Scalars['String']>;
  originalEndDate?: InputMaybe<Scalars['DateTime']>;
  originalStartDate?: InputMaybe<Scalars['DateTime']>;
  phoneNumber?: InputMaybe<Scalars['String']>;
  rawCost?: InputMaybe<Scalars['Float']>;
  reports?: InputMaybe<CampaignReportUpdateManyWithoutCampaignInput>;
  startDate?: InputMaybe<Scalars['DateTime']>;
};

export type CampaignUpdateWithoutReportsDataInput = {
  adProviderId?: InputMaybe<Scalars['String']>;
  aggregateData?: InputMaybe<AggregateDataObjectUpdateOneWithoutCampaignInput>;
  budgetByDay?: InputMaybe<Scalars['Float']>;
  budgetTotal?: InputMaybe<Scalars['Float']>;
  callEvents?: InputMaybe<CallEventUpdateManyWithoutCampaignInput>;
  campaignOrder?: InputMaybe<CampaignOrderUpdateOneWithoutCampaignsInput>;
  campaignPacingData?: InputMaybe<PacingDataObjectUpdateOneWithoutCampaignInput>;
  clientOrg?: InputMaybe<Scalars['String']>;
  cpm?: InputMaybe<Scalars['Float']>;
  data?: InputMaybe<Scalars['Json']>;
  demandSidePlatform?: InputMaybe<DemandSidePlatform>;
  endDate?: InputMaybe<Scalars['DateTime']>;
  forwardingNumber?: InputMaybe<Scalars['String']>;
  googleAnalyticsMetaData?: InputMaybe<GoogleAnalyticsUpdateOneWithoutCampaignsInput>;
  lineItems?: InputMaybe<LineItemUpdateManyWithoutCampaignInput>;
  logsKey?: InputMaybe<Scalars['String']>;
  name?: InputMaybe<Scalars['String']>;
  orgs?: InputMaybe<OrgUpdateManyWithoutCampaignsInput>;
  originalEndDate?: InputMaybe<Scalars['DateTime']>;
  originalStartDate?: InputMaybe<Scalars['DateTime']>;
  phoneNumber?: InputMaybe<Scalars['String']>;
  rawCost?: InputMaybe<Scalars['Float']>;
  startDate?: InputMaybe<Scalars['DateTime']>;
};

export type CampaignUpsertWithWhereUniqueWithoutCampaignOrderInput = {
  create: CampaignCreateWithoutCampaignOrderInput;
  update: CampaignUpdateWithoutCampaignOrderDataInput;
  where: CampaignWhereUniqueInput;
};

export type CampaignUpsertWithWhereUniqueWithoutGoogleAnalyticsMetaDataInput = {
  create: CampaignCreateWithoutGoogleAnalyticsMetaDataInput;
  update: CampaignUpdateWithoutGoogleAnalyticsMetaDataDataInput;
  where: CampaignWhereUniqueInput;
};

export type CampaignUpsertWithWhereUniqueWithoutOrgsInput = {
  create: CampaignCreateWithoutOrgsInput;
  update: CampaignUpdateWithoutOrgsDataInput;
  where: CampaignWhereUniqueInput;
};

export type CampaignUpsertWithoutAggregateDataInput = {
  create: CampaignCreateWithoutAggregateDataInput;
  update: CampaignUpdateWithoutAggregateDataDataInput;
};

export type CampaignUpsertWithoutCampaignPacingDataInput = {
  create: CampaignCreateWithoutCampaignPacingDataInput;
  update: CampaignUpdateWithoutCampaignPacingDataDataInput;
};

export type CampaignUpsertWithoutLineItemsInput = {
  create: CampaignCreateWithoutLineItemsInput;
  update: CampaignUpdateWithoutLineItemsDataInput;
};

export type CampaignUpsertWithoutReportsInput = {
  create: CampaignCreateWithoutReportsInput;
  update: CampaignUpdateWithoutReportsDataInput;
};

export type CampaignWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<CampaignWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<CampaignWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<CampaignWhereInput>>;
  adProviderId?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  adProviderId_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  adProviderId_ends_with?: InputMaybe<Scalars['String']>;
  /** All values greater than the given value. */
  adProviderId_gt?: InputMaybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  adProviderId_gte?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  adProviderId_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  adProviderId_lt?: InputMaybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  adProviderId_lte?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  adProviderId_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  adProviderId_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string. */
  adProviderId_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  adProviderId_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  adProviderId_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  adProviderId_starts_with?: InputMaybe<Scalars['String']>;
  aggregateData?: InputMaybe<AggregateDataObjectWhereInput>;
  budgetByDay?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  budgetByDay_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  budgetByDay_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  budgetByDay_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  budgetByDay_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  budgetByDay_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  budgetByDay_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  budgetByDay_not_in?: InputMaybe<Array<Scalars['Float']>>;
  budgetTotal?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  budgetTotal_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  budgetTotal_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  budgetTotal_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  budgetTotal_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  budgetTotal_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  budgetTotal_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  budgetTotal_not_in?: InputMaybe<Array<Scalars['Float']>>;
  callEvents_every?: InputMaybe<CallEventWhereInput>;
  callEvents_none?: InputMaybe<CallEventWhereInput>;
  callEvents_some?: InputMaybe<CallEventWhereInput>;
  campaignOrder?: InputMaybe<CampaignOrderWhereInput>;
  campaignPacingData?: InputMaybe<PacingDataObjectWhereInput>;
  clientOrg?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  clientOrg_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  clientOrg_ends_with?: InputMaybe<Scalars['String']>;
  /** All values greater than the given value. */
  clientOrg_gt?: InputMaybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  clientOrg_gte?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  clientOrg_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  clientOrg_lt?: InputMaybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  clientOrg_lte?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  clientOrg_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  clientOrg_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string. */
  clientOrg_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  clientOrg_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  clientOrg_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  clientOrg_starts_with?: InputMaybe<Scalars['String']>;
  cpm?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  cpm_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  cpm_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  cpm_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  cpm_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  cpm_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  cpm_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  cpm_not_in?: InputMaybe<Array<Scalars['Float']>>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  demandSidePlatform?: InputMaybe<DemandSidePlatform>;
  /** All values that are contained in given list. */
  demandSidePlatform_in?: InputMaybe<Array<DemandSidePlatform>>;
  /** All values that are not equal to given value. */
  demandSidePlatform_not?: InputMaybe<DemandSidePlatform>;
  /** All values that are not contained in given list. */
  demandSidePlatform_not_in?: InputMaybe<Array<DemandSidePlatform>>;
  endDate?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  endDate_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  endDate_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  endDate_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  endDate_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  endDate_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  endDate_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  endDate_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  forwardingNumber?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  forwardingNumber_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  forwardingNumber_ends_with?: InputMaybe<Scalars['String']>;
  /** All values greater than the given value. */
  forwardingNumber_gt?: InputMaybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  forwardingNumber_gte?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  forwardingNumber_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  forwardingNumber_lt?: InputMaybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  forwardingNumber_lte?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  forwardingNumber_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  forwardingNumber_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string. */
  forwardingNumber_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  forwardingNumber_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  forwardingNumber_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  forwardingNumber_starts_with?: InputMaybe<Scalars['String']>;
  googleAnalyticsMetaData?: InputMaybe<GoogleAnalyticsWhereInput>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: InputMaybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: InputMaybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: InputMaybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  lineItems_every?: InputMaybe<LineItemWhereInput>;
  lineItems_none?: InputMaybe<LineItemWhereInput>;
  lineItems_some?: InputMaybe<LineItemWhereInput>;
  logsKey?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  logsKey_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  logsKey_ends_with?: InputMaybe<Scalars['String']>;
  /** All values greater than the given value. */
  logsKey_gt?: InputMaybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  logsKey_gte?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  logsKey_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  logsKey_lt?: InputMaybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  logsKey_lte?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  logsKey_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  logsKey_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string. */
  logsKey_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  logsKey_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  logsKey_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  logsKey_starts_with?: InputMaybe<Scalars['String']>;
  name?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  name_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  name_ends_with?: InputMaybe<Scalars['String']>;
  /** All values greater than the given value. */
  name_gt?: InputMaybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  name_gte?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  name_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  name_lt?: InputMaybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  name_lte?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  name_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  name_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string. */
  name_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  name_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  name_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  name_starts_with?: InputMaybe<Scalars['String']>;
  orgs_every?: InputMaybe<OrgWhereInput>;
  orgs_none?: InputMaybe<OrgWhereInput>;
  orgs_some?: InputMaybe<OrgWhereInput>;
  originalEndDate?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  originalEndDate_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  originalEndDate_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  originalEndDate_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  originalEndDate_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  originalEndDate_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  originalEndDate_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  originalEndDate_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  originalStartDate?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  originalStartDate_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  originalStartDate_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  originalStartDate_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  originalStartDate_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  originalStartDate_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  originalStartDate_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  originalStartDate_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  phoneNumber?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  phoneNumber_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  phoneNumber_ends_with?: InputMaybe<Scalars['String']>;
  /** All values greater than the given value. */
  phoneNumber_gt?: InputMaybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  phoneNumber_gte?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  phoneNumber_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  phoneNumber_lt?: InputMaybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  phoneNumber_lte?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  phoneNumber_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  phoneNumber_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string. */
  phoneNumber_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  phoneNumber_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  phoneNumber_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  phoneNumber_starts_with?: InputMaybe<Scalars['String']>;
  rawCost?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  rawCost_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  rawCost_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  rawCost_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  rawCost_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  rawCost_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  rawCost_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  rawCost_not_in?: InputMaybe<Array<Scalars['Float']>>;
  reports_every?: InputMaybe<CampaignReportWhereInput>;
  reports_none?: InputMaybe<CampaignReportWhereInput>;
  reports_some?: InputMaybe<CampaignReportWhereInput>;
  startDate?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  startDate_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  startDate_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  startDate_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  startDate_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  startDate_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  startDate_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  startDate_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
};

export type CampaignWhereUniqueInput = {
  adProviderId?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  phoneNumber?: InputMaybe<Scalars['String']>;
};

export type Cannatype = Node & {
  __typename?: 'Cannatype';
  createdAt: Scalars['DateTime'];
  id: Scalars['ID'];
  strainTypeEffects?: Maybe<StrainType>;
  taste?: Maybe<Taste>;
  updatedAt: Scalars['DateTime'];
  user?: Maybe<User>;
  wellnessEffect?: Maybe<WellnessEffect>;
};

export type CannatypeCreateManyWithoutStrainTypeEffectsInput = {
  connect?: InputMaybe<Array<CannatypeWhereUniqueInput>>;
  create?: InputMaybe<Array<CannatypeCreateWithoutStrainTypeEffectsInput>>;
};

export type CannatypeCreateManyWithoutTasteInput = {
  connect?: InputMaybe<Array<CannatypeWhereUniqueInput>>;
  create?: InputMaybe<Array<CannatypeCreateWithoutTasteInput>>;
};

export type CannatypeCreateManyWithoutWellnessEffectInput = {
  connect?: InputMaybe<Array<CannatypeWhereUniqueInput>>;
  create?: InputMaybe<Array<CannatypeCreateWithoutWellnessEffectInput>>;
};

export type CannatypeCreateOneWithoutUserInput = {
  connect?: InputMaybe<CannatypeWhereUniqueInput>;
  create?: InputMaybe<CannatypeCreateWithoutUserInput>;
};

export type CannatypeCreateWithoutStrainTypeEffectsInput = {
  taste?: InputMaybe<TasteCreateOneWithoutCannatypesInput>;
  user?: InputMaybe<UserCreateOneWithoutCannatypeInput>;
  wellnessEffect?: InputMaybe<WellnessEffectCreateOneWithoutCannatypesInput>;
};

export type CannatypeCreateWithoutTasteInput = {
  strainTypeEffects?: InputMaybe<StrainTypeCreateOneWithoutCannatypesInput>;
  user?: InputMaybe<UserCreateOneWithoutCannatypeInput>;
  wellnessEffect?: InputMaybe<WellnessEffectCreateOneWithoutCannatypesInput>;
};

export type CannatypeCreateWithoutUserInput = {
  strainTypeEffects?: InputMaybe<StrainTypeCreateOneWithoutCannatypesInput>;
  taste?: InputMaybe<TasteCreateOneWithoutCannatypesInput>;
  wellnessEffect?: InputMaybe<WellnessEffectCreateOneWithoutCannatypesInput>;
};

export type CannatypeCreateWithoutWellnessEffectInput = {
  strainTypeEffects?: InputMaybe<StrainTypeCreateOneWithoutCannatypesInput>;
  taste?: InputMaybe<TasteCreateOneWithoutCannatypesInput>;
  user?: InputMaybe<UserCreateOneWithoutCannatypeInput>;
};

export enum CannatypeOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC'
}

export type CannatypeUpdateInput = {
  strainTypeEffects?: InputMaybe<StrainTypeUpdateOneWithoutCannatypesInput>;
  taste?: InputMaybe<TasteUpdateOneWithoutCannatypesInput>;
  user?: InputMaybe<UserUpdateOneWithoutCannatypeInput>;
  wellnessEffect?: InputMaybe<WellnessEffectUpdateOneWithoutCannatypesInput>;
};

export type CannatypeUpdateManyWithoutStrainTypeEffectsInput = {
  connect?: InputMaybe<Array<CannatypeWhereUniqueInput>>;
  create?: InputMaybe<Array<CannatypeCreateWithoutStrainTypeEffectsInput>>;
  delete?: InputMaybe<Array<CannatypeWhereUniqueInput>>;
  disconnect?: InputMaybe<Array<CannatypeWhereUniqueInput>>;
  update?: InputMaybe<Array<CannatypeUpdateWithWhereUniqueWithoutStrainTypeEffectsInput>>;
  upsert?: InputMaybe<Array<CannatypeUpsertWithWhereUniqueWithoutStrainTypeEffectsInput>>;
};

export type CannatypeUpdateManyWithoutTasteInput = {
  connect?: InputMaybe<Array<CannatypeWhereUniqueInput>>;
  create?: InputMaybe<Array<CannatypeCreateWithoutTasteInput>>;
  delete?: InputMaybe<Array<CannatypeWhereUniqueInput>>;
  disconnect?: InputMaybe<Array<CannatypeWhereUniqueInput>>;
  update?: InputMaybe<Array<CannatypeUpdateWithWhereUniqueWithoutTasteInput>>;
  upsert?: InputMaybe<Array<CannatypeUpsertWithWhereUniqueWithoutTasteInput>>;
};

export type CannatypeUpdateManyWithoutWellnessEffectInput = {
  connect?: InputMaybe<Array<CannatypeWhereUniqueInput>>;
  create?: InputMaybe<Array<CannatypeCreateWithoutWellnessEffectInput>>;
  delete?: InputMaybe<Array<CannatypeWhereUniqueInput>>;
  disconnect?: InputMaybe<Array<CannatypeWhereUniqueInput>>;
  update?: InputMaybe<Array<CannatypeUpdateWithWhereUniqueWithoutWellnessEffectInput>>;
  upsert?: InputMaybe<Array<CannatypeUpsertWithWhereUniqueWithoutWellnessEffectInput>>;
};

export type CannatypeUpdateOneWithoutUserInput = {
  connect?: InputMaybe<CannatypeWhereUniqueInput>;
  create?: InputMaybe<CannatypeCreateWithoutUserInput>;
  delete?: InputMaybe<Scalars['Boolean']>;
  disconnect?: InputMaybe<Scalars['Boolean']>;
  update?: InputMaybe<CannatypeUpdateWithoutUserDataInput>;
  upsert?: InputMaybe<CannatypeUpsertWithoutUserInput>;
};

export type CannatypeUpdateWithWhereUniqueWithoutStrainTypeEffectsInput = {
  data: CannatypeUpdateWithoutStrainTypeEffectsDataInput;
  where: CannatypeWhereUniqueInput;
};

export type CannatypeUpdateWithWhereUniqueWithoutTasteInput = {
  data: CannatypeUpdateWithoutTasteDataInput;
  where: CannatypeWhereUniqueInput;
};

export type CannatypeUpdateWithWhereUniqueWithoutWellnessEffectInput = {
  data: CannatypeUpdateWithoutWellnessEffectDataInput;
  where: CannatypeWhereUniqueInput;
};

export type CannatypeUpdateWithoutStrainTypeEffectsDataInput = {
  taste?: InputMaybe<TasteUpdateOneWithoutCannatypesInput>;
  user?: InputMaybe<UserUpdateOneWithoutCannatypeInput>;
  wellnessEffect?: InputMaybe<WellnessEffectUpdateOneWithoutCannatypesInput>;
};

export type CannatypeUpdateWithoutTasteDataInput = {
  strainTypeEffects?: InputMaybe<StrainTypeUpdateOneWithoutCannatypesInput>;
  user?: InputMaybe<UserUpdateOneWithoutCannatypeInput>;
  wellnessEffect?: InputMaybe<WellnessEffectUpdateOneWithoutCannatypesInput>;
};

export type CannatypeUpdateWithoutUserDataInput = {
  strainTypeEffects?: InputMaybe<StrainTypeUpdateOneWithoutCannatypesInput>;
  taste?: InputMaybe<TasteUpdateOneWithoutCannatypesInput>;
  wellnessEffect?: InputMaybe<WellnessEffectUpdateOneWithoutCannatypesInput>;
};

export type CannatypeUpdateWithoutWellnessEffectDataInput = {
  strainTypeEffects?: InputMaybe<StrainTypeUpdateOneWithoutCannatypesInput>;
  taste?: InputMaybe<TasteUpdateOneWithoutCannatypesInput>;
  user?: InputMaybe<UserUpdateOneWithoutCannatypeInput>;
};

export type CannatypeUpsertWithWhereUniqueWithoutStrainTypeEffectsInput = {
  create: CannatypeCreateWithoutStrainTypeEffectsInput;
  update: CannatypeUpdateWithoutStrainTypeEffectsDataInput;
  where: CannatypeWhereUniqueInput;
};

export type CannatypeUpsertWithWhereUniqueWithoutTasteInput = {
  create: CannatypeCreateWithoutTasteInput;
  update: CannatypeUpdateWithoutTasteDataInput;
  where: CannatypeWhereUniqueInput;
};

export type CannatypeUpsertWithWhereUniqueWithoutWellnessEffectInput = {
  create: CannatypeCreateWithoutWellnessEffectInput;
  update: CannatypeUpdateWithoutWellnessEffectDataInput;
  where: CannatypeWhereUniqueInput;
};

export type CannatypeUpsertWithoutUserInput = {
  create: CannatypeCreateWithoutUserInput;
  update: CannatypeUpdateWithoutUserDataInput;
};

export type CannatypeWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<CannatypeWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<CannatypeWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<CannatypeWhereInput>>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: InputMaybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: InputMaybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: InputMaybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  strainTypeEffects?: InputMaybe<StrainTypeWhereInput>;
  taste?: InputMaybe<TasteWhereInput>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  user?: InputMaybe<UserWhereInput>;
  wellnessEffect?: InputMaybe<WellnessEffectWhereInput>;
};

export type CannatypeWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export enum CartProvider {
  Drupal = 'DRUPAL',
  Dutchie = 'DUTCHIE',
  Dutchiejs = 'DUTCHIEJS',
  Greenrush = 'GREENRUSH',
  Jane = 'JANE',
  Joomla = 'JOOMLA',
  Magento = 'MAGENTO',
  Meadow = 'MEADOW',
  Nocart = 'NOCART',
  Olla = 'OLLA',
  Shopify = 'SHOPIFY',
  Shopifyuniversal = 'SHOPIFYUNIVERSAL',
  Squarespace = 'SQUARESPACE',
  Thirdparty = 'THIRDPARTY',
  Treez = 'TREEZ',
  Tymber = 'TYMBER',
  Webjoint = 'WEBJOINT',
  Woocommerce = 'WOOCOMMERCE'
}

export type Catalog = Node & {
  __typename?: 'Catalog';
  catalogIdentifier?: Maybe<Scalars['String']>;
  catalogItems?: Maybe<Array<CatalogItem>>;
  catalogType?: Maybe<CatalogType>;
  createdAt: Scalars['DateTime'];
  id: Scalars['ID'];
  location: Location;
  name: Scalars['String'];
  products?: Maybe<Array<Product>>;
  updatedAt: Scalars['DateTime'];
};


export type CatalogCatalogItemsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<CatalogItemOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<CatalogItemWhereInput>;
};


export type CatalogProductsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ProductOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ProductWhereInput>;
};

export type CatalogCreateManyWithoutLocationInput = {
  connect?: InputMaybe<Array<CatalogWhereUniqueInput>>;
  create?: InputMaybe<Array<CatalogCreateWithoutLocationInput>>;
};

export type CatalogCreateOneWithoutCatalogItemsInput = {
  connect?: InputMaybe<CatalogWhereUniqueInput>;
  create?: InputMaybe<CatalogCreateWithoutCatalogItemsInput>;
};

export type CatalogCreateOneWithoutProductsInput = {
  connect?: InputMaybe<CatalogWhereUniqueInput>;
  create?: InputMaybe<CatalogCreateWithoutProductsInput>;
};

export type CatalogCreateWithoutCatalogItemsInput = {
  catalogIdentifier?: InputMaybe<Scalars['String']>;
  catalogType?: InputMaybe<CatalogType>;
  location: LocationCreateOneWithoutCatalogsInput;
  name: Scalars['String'];
  products?: InputMaybe<ProductCreateManyWithoutCatalogInput>;
};

export type CatalogCreateWithoutLocationInput = {
  catalogIdentifier?: InputMaybe<Scalars['String']>;
  catalogItems?: InputMaybe<CatalogItemCreateManyWithoutCatalogInput>;
  catalogType?: InputMaybe<CatalogType>;
  name: Scalars['String'];
  products?: InputMaybe<ProductCreateManyWithoutCatalogInput>;
};

export type CatalogCreateWithoutProductsInput = {
  catalogIdentifier?: InputMaybe<Scalars['String']>;
  catalogItems?: InputMaybe<CatalogItemCreateManyWithoutCatalogInput>;
  catalogType?: InputMaybe<CatalogType>;
  location: LocationCreateOneWithoutCatalogsInput;
  name: Scalars['String'];
};

export type CatalogItem = Node & {
  __typename?: 'CatalogItem';
  catalog?: Maybe<Catalog>;
  createdAt: Scalars['DateTime'];
  description?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  medias?: Maybe<Array<Media>>;
  name: Scalars['String'];
  partnerUpdated?: Maybe<Scalars['DateTime']>;
  price?: Maybe<Scalars['Float']>;
  product: Product;
  quantity?: Maybe<Scalars['Int']>;
  updatedAt: Scalars['DateTime'];
  weight?: Maybe<Scalars['Float']>;
};


export type CatalogItemMediasArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MediaOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<MediaWhereInput>;
};

export type CatalogItemCreateInput = {
  catalog?: InputMaybe<CatalogCreateOneWithoutCatalogItemsInput>;
  description?: InputMaybe<Scalars['String']>;
  medias?: InputMaybe<MediaCreateManyWithoutCatalogItemInput>;
  name: Scalars['String'];
  partnerUpdated?: InputMaybe<Scalars['DateTime']>;
  price?: InputMaybe<Scalars['Float']>;
  product: ProductCreateOneWithoutCatalogItemsInput;
  quantity?: InputMaybe<Scalars['Int']>;
  weight?: InputMaybe<Scalars['Float']>;
};

export type CatalogItemCreateManyInput = {
  connect?: InputMaybe<Array<CatalogItemWhereUniqueInput>>;
  create?: InputMaybe<Array<CatalogItemCreateInput>>;
};

export type CatalogItemCreateManyWithoutCatalogInput = {
  connect?: InputMaybe<Array<CatalogItemWhereUniqueInput>>;
  create?: InputMaybe<Array<CatalogItemCreateWithoutCatalogInput>>;
};

export type CatalogItemCreateManyWithoutProductInput = {
  connect?: InputMaybe<Array<CatalogItemWhereUniqueInput>>;
  create?: InputMaybe<Array<CatalogItemCreateWithoutProductInput>>;
};

export type CatalogItemCreateOneWithoutMediasInput = {
  connect?: InputMaybe<CatalogItemWhereUniqueInput>;
  create?: InputMaybe<CatalogItemCreateWithoutMediasInput>;
};

export type CatalogItemCreateWithoutCatalogInput = {
  description?: InputMaybe<Scalars['String']>;
  medias?: InputMaybe<MediaCreateManyWithoutCatalogItemInput>;
  name: Scalars['String'];
  partnerUpdated?: InputMaybe<Scalars['DateTime']>;
  price?: InputMaybe<Scalars['Float']>;
  product: ProductCreateOneWithoutCatalogItemsInput;
  quantity?: InputMaybe<Scalars['Int']>;
  weight?: InputMaybe<Scalars['Float']>;
};

export type CatalogItemCreateWithoutMediasInput = {
  catalog?: InputMaybe<CatalogCreateOneWithoutCatalogItemsInput>;
  description?: InputMaybe<Scalars['String']>;
  name: Scalars['String'];
  partnerUpdated?: InputMaybe<Scalars['DateTime']>;
  price?: InputMaybe<Scalars['Float']>;
  product: ProductCreateOneWithoutCatalogItemsInput;
  quantity?: InputMaybe<Scalars['Int']>;
  weight?: InputMaybe<Scalars['Float']>;
};

export type CatalogItemCreateWithoutProductInput = {
  catalog?: InputMaybe<CatalogCreateOneWithoutCatalogItemsInput>;
  description?: InputMaybe<Scalars['String']>;
  medias?: InputMaybe<MediaCreateManyWithoutCatalogItemInput>;
  name: Scalars['String'];
  partnerUpdated?: InputMaybe<Scalars['DateTime']>;
  price?: InputMaybe<Scalars['Float']>;
  quantity?: InputMaybe<Scalars['Int']>;
  weight?: InputMaybe<Scalars['Float']>;
};

export enum CatalogItemOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DescriptionAsc = 'description_ASC',
  DescriptionDesc = 'description_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  NameAsc = 'name_ASC',
  NameDesc = 'name_DESC',
  PartnerUpdatedAsc = 'partnerUpdated_ASC',
  PartnerUpdatedDesc = 'partnerUpdated_DESC',
  PriceAsc = 'price_ASC',
  PriceDesc = 'price_DESC',
  QuantityAsc = 'quantity_ASC',
  QuantityDesc = 'quantity_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  WeightAsc = 'weight_ASC',
  WeightDesc = 'weight_DESC'
}

export type CatalogItemUpdateDataInput = {
  catalog?: InputMaybe<CatalogUpdateOneWithoutCatalogItemsInput>;
  description?: InputMaybe<Scalars['String']>;
  medias?: InputMaybe<MediaUpdateManyWithoutCatalogItemInput>;
  name?: InputMaybe<Scalars['String']>;
  partnerUpdated?: InputMaybe<Scalars['DateTime']>;
  price?: InputMaybe<Scalars['Float']>;
  product?: InputMaybe<ProductUpdateOneRequiredWithoutCatalogItemsInput>;
  quantity?: InputMaybe<Scalars['Int']>;
  weight?: InputMaybe<Scalars['Float']>;
};

export type CatalogItemUpdateManyInput = {
  connect?: InputMaybe<Array<CatalogItemWhereUniqueInput>>;
  create?: InputMaybe<Array<CatalogItemCreateInput>>;
  delete?: InputMaybe<Array<CatalogItemWhereUniqueInput>>;
  disconnect?: InputMaybe<Array<CatalogItemWhereUniqueInput>>;
  update?: InputMaybe<Array<CatalogItemUpdateWithWhereUniqueNestedInput>>;
  upsert?: InputMaybe<Array<CatalogItemUpsertWithWhereUniqueNestedInput>>;
};

export type CatalogItemUpdateManyWithoutCatalogInput = {
  connect?: InputMaybe<Array<CatalogItemWhereUniqueInput>>;
  create?: InputMaybe<Array<CatalogItemCreateWithoutCatalogInput>>;
  delete?: InputMaybe<Array<CatalogItemWhereUniqueInput>>;
  disconnect?: InputMaybe<Array<CatalogItemWhereUniqueInput>>;
  update?: InputMaybe<Array<CatalogItemUpdateWithWhereUniqueWithoutCatalogInput>>;
  upsert?: InputMaybe<Array<CatalogItemUpsertWithWhereUniqueWithoutCatalogInput>>;
};

export type CatalogItemUpdateManyWithoutProductInput = {
  connect?: InputMaybe<Array<CatalogItemWhereUniqueInput>>;
  create?: InputMaybe<Array<CatalogItemCreateWithoutProductInput>>;
  delete?: InputMaybe<Array<CatalogItemWhereUniqueInput>>;
  disconnect?: InputMaybe<Array<CatalogItemWhereUniqueInput>>;
  update?: InputMaybe<Array<CatalogItemUpdateWithWhereUniqueWithoutProductInput>>;
  upsert?: InputMaybe<Array<CatalogItemUpsertWithWhereUniqueWithoutProductInput>>;
};

export type CatalogItemUpdateOneWithoutMediasInput = {
  connect?: InputMaybe<CatalogItemWhereUniqueInput>;
  create?: InputMaybe<CatalogItemCreateWithoutMediasInput>;
  delete?: InputMaybe<Scalars['Boolean']>;
  disconnect?: InputMaybe<Scalars['Boolean']>;
  update?: InputMaybe<CatalogItemUpdateWithoutMediasDataInput>;
  upsert?: InputMaybe<CatalogItemUpsertWithoutMediasInput>;
};

export type CatalogItemUpdateWithWhereUniqueNestedInput = {
  data: CatalogItemUpdateDataInput;
  where: CatalogItemWhereUniqueInput;
};

export type CatalogItemUpdateWithWhereUniqueWithoutCatalogInput = {
  data: CatalogItemUpdateWithoutCatalogDataInput;
  where: CatalogItemWhereUniqueInput;
};

export type CatalogItemUpdateWithWhereUniqueWithoutProductInput = {
  data: CatalogItemUpdateWithoutProductDataInput;
  where: CatalogItemWhereUniqueInput;
};

export type CatalogItemUpdateWithoutCatalogDataInput = {
  description?: InputMaybe<Scalars['String']>;
  medias?: InputMaybe<MediaUpdateManyWithoutCatalogItemInput>;
  name?: InputMaybe<Scalars['String']>;
  partnerUpdated?: InputMaybe<Scalars['DateTime']>;
  price?: InputMaybe<Scalars['Float']>;
  product?: InputMaybe<ProductUpdateOneRequiredWithoutCatalogItemsInput>;
  quantity?: InputMaybe<Scalars['Int']>;
  weight?: InputMaybe<Scalars['Float']>;
};

export type CatalogItemUpdateWithoutMediasDataInput = {
  catalog?: InputMaybe<CatalogUpdateOneWithoutCatalogItemsInput>;
  description?: InputMaybe<Scalars['String']>;
  name?: InputMaybe<Scalars['String']>;
  partnerUpdated?: InputMaybe<Scalars['DateTime']>;
  price?: InputMaybe<Scalars['Float']>;
  product?: InputMaybe<ProductUpdateOneRequiredWithoutCatalogItemsInput>;
  quantity?: InputMaybe<Scalars['Int']>;
  weight?: InputMaybe<Scalars['Float']>;
};

export type CatalogItemUpdateWithoutProductDataInput = {
  catalog?: InputMaybe<CatalogUpdateOneWithoutCatalogItemsInput>;
  description?: InputMaybe<Scalars['String']>;
  medias?: InputMaybe<MediaUpdateManyWithoutCatalogItemInput>;
  name?: InputMaybe<Scalars['String']>;
  partnerUpdated?: InputMaybe<Scalars['DateTime']>;
  price?: InputMaybe<Scalars['Float']>;
  quantity?: InputMaybe<Scalars['Int']>;
  weight?: InputMaybe<Scalars['Float']>;
};

export type CatalogItemUpsertWithWhereUniqueNestedInput = {
  create: CatalogItemCreateInput;
  update: CatalogItemUpdateDataInput;
  where: CatalogItemWhereUniqueInput;
};

export type CatalogItemUpsertWithWhereUniqueWithoutCatalogInput = {
  create: CatalogItemCreateWithoutCatalogInput;
  update: CatalogItemUpdateWithoutCatalogDataInput;
  where: CatalogItemWhereUniqueInput;
};

export type CatalogItemUpsertWithWhereUniqueWithoutProductInput = {
  create: CatalogItemCreateWithoutProductInput;
  update: CatalogItemUpdateWithoutProductDataInput;
  where: CatalogItemWhereUniqueInput;
};

export type CatalogItemUpsertWithoutMediasInput = {
  create: CatalogItemCreateWithoutMediasInput;
  update: CatalogItemUpdateWithoutMediasDataInput;
};

export type CatalogItemWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<CatalogItemWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<CatalogItemWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<CatalogItemWhereInput>>;
  catalog?: InputMaybe<CatalogWhereInput>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  description?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  description_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  description_ends_with?: InputMaybe<Scalars['String']>;
  /** All values greater than the given value. */
  description_gt?: InputMaybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  description_gte?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  description_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  description_lt?: InputMaybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  description_lte?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  description_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  description_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string. */
  description_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  description_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  description_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  description_starts_with?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: InputMaybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: InputMaybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: InputMaybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  medias_every?: InputMaybe<MediaWhereInput>;
  medias_none?: InputMaybe<MediaWhereInput>;
  medias_some?: InputMaybe<MediaWhereInput>;
  name?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  name_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  name_ends_with?: InputMaybe<Scalars['String']>;
  /** All values greater than the given value. */
  name_gt?: InputMaybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  name_gte?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  name_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  name_lt?: InputMaybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  name_lte?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  name_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  name_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string. */
  name_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  name_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  name_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  name_starts_with?: InputMaybe<Scalars['String']>;
  partnerUpdated?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  partnerUpdated_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  partnerUpdated_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  partnerUpdated_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  partnerUpdated_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  partnerUpdated_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  partnerUpdated_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  partnerUpdated_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  price?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  price_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  price_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  price_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  price_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  price_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  price_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  price_not_in?: InputMaybe<Array<Scalars['Float']>>;
  product?: InputMaybe<ProductWhereInput>;
  quantity?: InputMaybe<Scalars['Int']>;
  /** All values greater than the given value. */
  quantity_gt?: InputMaybe<Scalars['Int']>;
  /** All values greater than or equal the given value. */
  quantity_gte?: InputMaybe<Scalars['Int']>;
  /** All values that are contained in given list. */
  quantity_in?: InputMaybe<Array<Scalars['Int']>>;
  /** All values less than the given value. */
  quantity_lt?: InputMaybe<Scalars['Int']>;
  /** All values less than or equal the given value. */
  quantity_lte?: InputMaybe<Scalars['Int']>;
  /** All values that are not equal to given value. */
  quantity_not?: InputMaybe<Scalars['Int']>;
  /** All values that are not contained in given list. */
  quantity_not_in?: InputMaybe<Array<Scalars['Int']>>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  weight?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  weight_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  weight_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  weight_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  weight_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  weight_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  weight_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  weight_not_in?: InputMaybe<Array<Scalars['Float']>>;
};

export type CatalogItemWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export enum CatalogOrderByInput {
  CatalogIdentifierAsc = 'catalogIdentifier_ASC',
  CatalogIdentifierDesc = 'catalogIdentifier_DESC',
  CatalogTypeAsc = 'catalogType_ASC',
  CatalogTypeDesc = 'catalogType_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  NameAsc = 'name_ASC',
  NameDesc = 'name_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC'
}

export enum CatalogType {
  Dutchie = 'DUTCHIE',
  Iheartjane = 'IHEARTJANE',
  Manual = 'MANUAL',
  Treez = 'TREEZ',
  Weedmaps = 'WEEDMAPS',
  Zefyr = 'ZEFYR'
}

export type CatalogUpdateManyWithoutLocationInput = {
  connect?: InputMaybe<Array<CatalogWhereUniqueInput>>;
  create?: InputMaybe<Array<CatalogCreateWithoutLocationInput>>;
  delete?: InputMaybe<Array<CatalogWhereUniqueInput>>;
  disconnect?: InputMaybe<Array<CatalogWhereUniqueInput>>;
  update?: InputMaybe<Array<CatalogUpdateWithWhereUniqueWithoutLocationInput>>;
  upsert?: InputMaybe<Array<CatalogUpsertWithWhereUniqueWithoutLocationInput>>;
};

export type CatalogUpdateOneWithoutCatalogItemsInput = {
  connect?: InputMaybe<CatalogWhereUniqueInput>;
  create?: InputMaybe<CatalogCreateWithoutCatalogItemsInput>;
  delete?: InputMaybe<Scalars['Boolean']>;
  disconnect?: InputMaybe<Scalars['Boolean']>;
  update?: InputMaybe<CatalogUpdateWithoutCatalogItemsDataInput>;
  upsert?: InputMaybe<CatalogUpsertWithoutCatalogItemsInput>;
};

export type CatalogUpdateOneWithoutProductsInput = {
  connect?: InputMaybe<CatalogWhereUniqueInput>;
  create?: InputMaybe<CatalogCreateWithoutProductsInput>;
  delete?: InputMaybe<Scalars['Boolean']>;
  disconnect?: InputMaybe<Scalars['Boolean']>;
  update?: InputMaybe<CatalogUpdateWithoutProductsDataInput>;
  upsert?: InputMaybe<CatalogUpsertWithoutProductsInput>;
};

export type CatalogUpdateWithWhereUniqueWithoutLocationInput = {
  data: CatalogUpdateWithoutLocationDataInput;
  where: CatalogWhereUniqueInput;
};

export type CatalogUpdateWithoutCatalogItemsDataInput = {
  catalogIdentifier?: InputMaybe<Scalars['String']>;
  catalogType?: InputMaybe<CatalogType>;
  location?: InputMaybe<LocationUpdateOneRequiredWithoutCatalogsInput>;
  name?: InputMaybe<Scalars['String']>;
  products?: InputMaybe<ProductUpdateManyWithoutCatalogInput>;
};

export type CatalogUpdateWithoutLocationDataInput = {
  catalogIdentifier?: InputMaybe<Scalars['String']>;
  catalogItems?: InputMaybe<CatalogItemUpdateManyWithoutCatalogInput>;
  catalogType?: InputMaybe<CatalogType>;
  name?: InputMaybe<Scalars['String']>;
  products?: InputMaybe<ProductUpdateManyWithoutCatalogInput>;
};

export type CatalogUpdateWithoutProductsDataInput = {
  catalogIdentifier?: InputMaybe<Scalars['String']>;
  catalogItems?: InputMaybe<CatalogItemUpdateManyWithoutCatalogInput>;
  catalogType?: InputMaybe<CatalogType>;
  location?: InputMaybe<LocationUpdateOneRequiredWithoutCatalogsInput>;
  name?: InputMaybe<Scalars['String']>;
};

export type CatalogUpsertWithWhereUniqueWithoutLocationInput = {
  create: CatalogCreateWithoutLocationInput;
  update: CatalogUpdateWithoutLocationDataInput;
  where: CatalogWhereUniqueInput;
};

export type CatalogUpsertWithoutCatalogItemsInput = {
  create: CatalogCreateWithoutCatalogItemsInput;
  update: CatalogUpdateWithoutCatalogItemsDataInput;
};

export type CatalogUpsertWithoutProductsInput = {
  create: CatalogCreateWithoutProductsInput;
  update: CatalogUpdateWithoutProductsDataInput;
};

export type CatalogWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<CatalogWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<CatalogWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<CatalogWhereInput>>;
  catalogIdentifier?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  catalogIdentifier_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  catalogIdentifier_ends_with?: InputMaybe<Scalars['String']>;
  /** All values greater than the given value. */
  catalogIdentifier_gt?: InputMaybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  catalogIdentifier_gte?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  catalogIdentifier_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  catalogIdentifier_lt?: InputMaybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  catalogIdentifier_lte?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  catalogIdentifier_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  catalogIdentifier_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string. */
  catalogIdentifier_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  catalogIdentifier_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  catalogIdentifier_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  catalogIdentifier_starts_with?: InputMaybe<Scalars['String']>;
  catalogItems_every?: InputMaybe<CatalogItemWhereInput>;
  catalogItems_none?: InputMaybe<CatalogItemWhereInput>;
  catalogItems_some?: InputMaybe<CatalogItemWhereInput>;
  catalogType?: InputMaybe<CatalogType>;
  /** All values that are contained in given list. */
  catalogType_in?: InputMaybe<Array<CatalogType>>;
  /** All values that are not equal to given value. */
  catalogType_not?: InputMaybe<CatalogType>;
  /** All values that are not contained in given list. */
  catalogType_not_in?: InputMaybe<Array<CatalogType>>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: InputMaybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: InputMaybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: InputMaybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  location?: InputMaybe<LocationWhereInput>;
  name?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  name_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  name_ends_with?: InputMaybe<Scalars['String']>;
  /** All values greater than the given value. */
  name_gt?: InputMaybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  name_gte?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  name_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  name_lt?: InputMaybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  name_lte?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  name_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  name_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string. */
  name_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  name_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  name_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  name_starts_with?: InputMaybe<Scalars['String']>;
  products_every?: InputMaybe<ProductWhereInput>;
  products_none?: InputMaybe<ProductWhereInput>;
  products_some?: InputMaybe<ProductWhereInput>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
};

export type CatalogWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export enum Category {
  Beverage = 'BEVERAGE',
  Capsule = 'CAPSULE',
  Concentrate = 'CONCENTRATE',
  Cultivation = 'CULTIVATION',
  Edible = 'EDIBLE',
  Flower = 'FLOWER',
  Gear = 'GEAR',
  Grow = 'GROW',
  PreRoll = 'PRE_ROLL',
  TinctureSublingual = 'TINCTURE_SUBLINGUAL',
  Topical = 'TOPICAL',
  VaporPen = 'VAPOR_PEN'
}

export type Change = Node & {
  __typename?: 'Change';
  audience?: Maybe<Audience>;
  campaignOrder?: Maybe<CampaignOrder>;
  changedBy?: Maybe<User>;
  createdAt: Scalars['DateTime'];
  description: Scalars['String'];
  eventsTarget?: Maybe<EventsTarget>;
  geoTarget?: Maybe<GeoTarget>;
  id: Scalars['ID'];
  license?: Maybe<License>;
};

export type ChangeCreateManyWithoutAudienceInput = {
  connect?: InputMaybe<Array<ChangeWhereUniqueInput>>;
  create?: InputMaybe<Array<ChangeCreateWithoutAudienceInput>>;
};

export type ChangeCreateManyWithoutCampaignOrderInput = {
  connect?: InputMaybe<Array<ChangeWhereUniqueInput>>;
  create?: InputMaybe<Array<ChangeCreateWithoutCampaignOrderInput>>;
};

export type ChangeCreateManyWithoutChangedByInput = {
  connect?: InputMaybe<Array<ChangeWhereUniqueInput>>;
  create?: InputMaybe<Array<ChangeCreateWithoutChangedByInput>>;
};

export type ChangeCreateManyWithoutEventsTargetInput = {
  connect?: InputMaybe<Array<ChangeWhereUniqueInput>>;
  create?: InputMaybe<Array<ChangeCreateWithoutEventsTargetInput>>;
};

export type ChangeCreateManyWithoutGeoTargetInput = {
  connect?: InputMaybe<Array<ChangeWhereUniqueInput>>;
  create?: InputMaybe<Array<ChangeCreateWithoutGeoTargetInput>>;
};

export type ChangeCreateManyWithoutLicenseInput = {
  connect?: InputMaybe<Array<ChangeWhereUniqueInput>>;
  create?: InputMaybe<Array<ChangeCreateWithoutLicenseInput>>;
};

export type ChangeCreateWithoutAudienceInput = {
  campaignOrder?: InputMaybe<CampaignOrderCreateOneWithoutChangeLogInput>;
  changedBy?: InputMaybe<UserCreateOneWithoutChangesInput>;
  description: Scalars['String'];
  eventsTarget?: InputMaybe<EventsTargetCreateOneWithoutChangeLogInput>;
  geoTarget?: InputMaybe<GeoTargetCreateOneWithoutChangeLogInput>;
  license?: InputMaybe<LicenseCreateOneWithoutChangeLogInput>;
};

export type ChangeCreateWithoutCampaignOrderInput = {
  audience?: InputMaybe<AudienceCreateOneWithoutChangeLogInput>;
  changedBy?: InputMaybe<UserCreateOneWithoutChangesInput>;
  description: Scalars['String'];
  eventsTarget?: InputMaybe<EventsTargetCreateOneWithoutChangeLogInput>;
  geoTarget?: InputMaybe<GeoTargetCreateOneWithoutChangeLogInput>;
  license?: InputMaybe<LicenseCreateOneWithoutChangeLogInput>;
};

export type ChangeCreateWithoutChangedByInput = {
  audience?: InputMaybe<AudienceCreateOneWithoutChangeLogInput>;
  campaignOrder?: InputMaybe<CampaignOrderCreateOneWithoutChangeLogInput>;
  description: Scalars['String'];
  eventsTarget?: InputMaybe<EventsTargetCreateOneWithoutChangeLogInput>;
  geoTarget?: InputMaybe<GeoTargetCreateOneWithoutChangeLogInput>;
  license?: InputMaybe<LicenseCreateOneWithoutChangeLogInput>;
};

export type ChangeCreateWithoutEventsTargetInput = {
  audience?: InputMaybe<AudienceCreateOneWithoutChangeLogInput>;
  campaignOrder?: InputMaybe<CampaignOrderCreateOneWithoutChangeLogInput>;
  changedBy?: InputMaybe<UserCreateOneWithoutChangesInput>;
  description: Scalars['String'];
  geoTarget?: InputMaybe<GeoTargetCreateOneWithoutChangeLogInput>;
  license?: InputMaybe<LicenseCreateOneWithoutChangeLogInput>;
};

export type ChangeCreateWithoutGeoTargetInput = {
  audience?: InputMaybe<AudienceCreateOneWithoutChangeLogInput>;
  campaignOrder?: InputMaybe<CampaignOrderCreateOneWithoutChangeLogInput>;
  changedBy?: InputMaybe<UserCreateOneWithoutChangesInput>;
  description: Scalars['String'];
  eventsTarget?: InputMaybe<EventsTargetCreateOneWithoutChangeLogInput>;
  license?: InputMaybe<LicenseCreateOneWithoutChangeLogInput>;
};

export type ChangeCreateWithoutLicenseInput = {
  audience?: InputMaybe<AudienceCreateOneWithoutChangeLogInput>;
  campaignOrder?: InputMaybe<CampaignOrderCreateOneWithoutChangeLogInput>;
  changedBy?: InputMaybe<UserCreateOneWithoutChangesInput>;
  description: Scalars['String'];
  eventsTarget?: InputMaybe<EventsTargetCreateOneWithoutChangeLogInput>;
  geoTarget?: InputMaybe<GeoTargetCreateOneWithoutChangeLogInput>;
};

export enum ChangeOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DescriptionAsc = 'description_ASC',
  DescriptionDesc = 'description_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC'
}

export type ChangeUpdateManyWithoutAudienceInput = {
  connect?: InputMaybe<Array<ChangeWhereUniqueInput>>;
  create?: InputMaybe<Array<ChangeCreateWithoutAudienceInput>>;
  delete?: InputMaybe<Array<ChangeWhereUniqueInput>>;
  disconnect?: InputMaybe<Array<ChangeWhereUniqueInput>>;
  update?: InputMaybe<Array<ChangeUpdateWithWhereUniqueWithoutAudienceInput>>;
  upsert?: InputMaybe<Array<ChangeUpsertWithWhereUniqueWithoutAudienceInput>>;
};

export type ChangeUpdateManyWithoutCampaignOrderInput = {
  connect?: InputMaybe<Array<ChangeWhereUniqueInput>>;
  create?: InputMaybe<Array<ChangeCreateWithoutCampaignOrderInput>>;
  delete?: InputMaybe<Array<ChangeWhereUniqueInput>>;
  disconnect?: InputMaybe<Array<ChangeWhereUniqueInput>>;
  update?: InputMaybe<Array<ChangeUpdateWithWhereUniqueWithoutCampaignOrderInput>>;
  upsert?: InputMaybe<Array<ChangeUpsertWithWhereUniqueWithoutCampaignOrderInput>>;
};

export type ChangeUpdateManyWithoutChangedByInput = {
  connect?: InputMaybe<Array<ChangeWhereUniqueInput>>;
  create?: InputMaybe<Array<ChangeCreateWithoutChangedByInput>>;
  delete?: InputMaybe<Array<ChangeWhereUniqueInput>>;
  disconnect?: InputMaybe<Array<ChangeWhereUniqueInput>>;
  update?: InputMaybe<Array<ChangeUpdateWithWhereUniqueWithoutChangedByInput>>;
  upsert?: InputMaybe<Array<ChangeUpsertWithWhereUniqueWithoutChangedByInput>>;
};

export type ChangeUpdateManyWithoutEventsTargetInput = {
  connect?: InputMaybe<Array<ChangeWhereUniqueInput>>;
  create?: InputMaybe<Array<ChangeCreateWithoutEventsTargetInput>>;
  delete?: InputMaybe<Array<ChangeWhereUniqueInput>>;
  disconnect?: InputMaybe<Array<ChangeWhereUniqueInput>>;
  update?: InputMaybe<Array<ChangeUpdateWithWhereUniqueWithoutEventsTargetInput>>;
  upsert?: InputMaybe<Array<ChangeUpsertWithWhereUniqueWithoutEventsTargetInput>>;
};

export type ChangeUpdateManyWithoutGeoTargetInput = {
  connect?: InputMaybe<Array<ChangeWhereUniqueInput>>;
  create?: InputMaybe<Array<ChangeCreateWithoutGeoTargetInput>>;
  delete?: InputMaybe<Array<ChangeWhereUniqueInput>>;
  disconnect?: InputMaybe<Array<ChangeWhereUniqueInput>>;
  update?: InputMaybe<Array<ChangeUpdateWithWhereUniqueWithoutGeoTargetInput>>;
  upsert?: InputMaybe<Array<ChangeUpsertWithWhereUniqueWithoutGeoTargetInput>>;
};

export type ChangeUpdateManyWithoutLicenseInput = {
  connect?: InputMaybe<Array<ChangeWhereUniqueInput>>;
  create?: InputMaybe<Array<ChangeCreateWithoutLicenseInput>>;
  delete?: InputMaybe<Array<ChangeWhereUniqueInput>>;
  disconnect?: InputMaybe<Array<ChangeWhereUniqueInput>>;
  update?: InputMaybe<Array<ChangeUpdateWithWhereUniqueWithoutLicenseInput>>;
  upsert?: InputMaybe<Array<ChangeUpsertWithWhereUniqueWithoutLicenseInput>>;
};

export type ChangeUpdateWithWhereUniqueWithoutAudienceInput = {
  data: ChangeUpdateWithoutAudienceDataInput;
  where: ChangeWhereUniqueInput;
};

export type ChangeUpdateWithWhereUniqueWithoutCampaignOrderInput = {
  data: ChangeUpdateWithoutCampaignOrderDataInput;
  where: ChangeWhereUniqueInput;
};

export type ChangeUpdateWithWhereUniqueWithoutChangedByInput = {
  data: ChangeUpdateWithoutChangedByDataInput;
  where: ChangeWhereUniqueInput;
};

export type ChangeUpdateWithWhereUniqueWithoutEventsTargetInput = {
  data: ChangeUpdateWithoutEventsTargetDataInput;
  where: ChangeWhereUniqueInput;
};

export type ChangeUpdateWithWhereUniqueWithoutGeoTargetInput = {
  data: ChangeUpdateWithoutGeoTargetDataInput;
  where: ChangeWhereUniqueInput;
};

export type ChangeUpdateWithWhereUniqueWithoutLicenseInput = {
  data: ChangeUpdateWithoutLicenseDataInput;
  where: ChangeWhereUniqueInput;
};

export type ChangeUpdateWithoutAudienceDataInput = {
  campaignOrder?: InputMaybe<CampaignOrderUpdateOneWithoutChangeLogInput>;
  changedBy?: InputMaybe<UserUpdateOneWithoutChangesInput>;
  description?: InputMaybe<Scalars['String']>;
  eventsTarget?: InputMaybe<EventsTargetUpdateOneWithoutChangeLogInput>;
  geoTarget?: InputMaybe<GeoTargetUpdateOneWithoutChangeLogInput>;
  license?: InputMaybe<LicenseUpdateOneWithoutChangeLogInput>;
};

export type ChangeUpdateWithoutCampaignOrderDataInput = {
  audience?: InputMaybe<AudienceUpdateOneWithoutChangeLogInput>;
  changedBy?: InputMaybe<UserUpdateOneWithoutChangesInput>;
  description?: InputMaybe<Scalars['String']>;
  eventsTarget?: InputMaybe<EventsTargetUpdateOneWithoutChangeLogInput>;
  geoTarget?: InputMaybe<GeoTargetUpdateOneWithoutChangeLogInput>;
  license?: InputMaybe<LicenseUpdateOneWithoutChangeLogInput>;
};

export type ChangeUpdateWithoutChangedByDataInput = {
  audience?: InputMaybe<AudienceUpdateOneWithoutChangeLogInput>;
  campaignOrder?: InputMaybe<CampaignOrderUpdateOneWithoutChangeLogInput>;
  description?: InputMaybe<Scalars['String']>;
  eventsTarget?: InputMaybe<EventsTargetUpdateOneWithoutChangeLogInput>;
  geoTarget?: InputMaybe<GeoTargetUpdateOneWithoutChangeLogInput>;
  license?: InputMaybe<LicenseUpdateOneWithoutChangeLogInput>;
};

export type ChangeUpdateWithoutEventsTargetDataInput = {
  audience?: InputMaybe<AudienceUpdateOneWithoutChangeLogInput>;
  campaignOrder?: InputMaybe<CampaignOrderUpdateOneWithoutChangeLogInput>;
  changedBy?: InputMaybe<UserUpdateOneWithoutChangesInput>;
  description?: InputMaybe<Scalars['String']>;
  geoTarget?: InputMaybe<GeoTargetUpdateOneWithoutChangeLogInput>;
  license?: InputMaybe<LicenseUpdateOneWithoutChangeLogInput>;
};

export type ChangeUpdateWithoutGeoTargetDataInput = {
  audience?: InputMaybe<AudienceUpdateOneWithoutChangeLogInput>;
  campaignOrder?: InputMaybe<CampaignOrderUpdateOneWithoutChangeLogInput>;
  changedBy?: InputMaybe<UserUpdateOneWithoutChangesInput>;
  description?: InputMaybe<Scalars['String']>;
  eventsTarget?: InputMaybe<EventsTargetUpdateOneWithoutChangeLogInput>;
  license?: InputMaybe<LicenseUpdateOneWithoutChangeLogInput>;
};

export type ChangeUpdateWithoutLicenseDataInput = {
  audience?: InputMaybe<AudienceUpdateOneWithoutChangeLogInput>;
  campaignOrder?: InputMaybe<CampaignOrderUpdateOneWithoutChangeLogInput>;
  changedBy?: InputMaybe<UserUpdateOneWithoutChangesInput>;
  description?: InputMaybe<Scalars['String']>;
  eventsTarget?: InputMaybe<EventsTargetUpdateOneWithoutChangeLogInput>;
  geoTarget?: InputMaybe<GeoTargetUpdateOneWithoutChangeLogInput>;
};

export type ChangeUpsertWithWhereUniqueWithoutAudienceInput = {
  create: ChangeCreateWithoutAudienceInput;
  update: ChangeUpdateWithoutAudienceDataInput;
  where: ChangeWhereUniqueInput;
};

export type ChangeUpsertWithWhereUniqueWithoutCampaignOrderInput = {
  create: ChangeCreateWithoutCampaignOrderInput;
  update: ChangeUpdateWithoutCampaignOrderDataInput;
  where: ChangeWhereUniqueInput;
};

export type ChangeUpsertWithWhereUniqueWithoutChangedByInput = {
  create: ChangeCreateWithoutChangedByInput;
  update: ChangeUpdateWithoutChangedByDataInput;
  where: ChangeWhereUniqueInput;
};

export type ChangeUpsertWithWhereUniqueWithoutEventsTargetInput = {
  create: ChangeCreateWithoutEventsTargetInput;
  update: ChangeUpdateWithoutEventsTargetDataInput;
  where: ChangeWhereUniqueInput;
};

export type ChangeUpsertWithWhereUniqueWithoutGeoTargetInput = {
  create: ChangeCreateWithoutGeoTargetInput;
  update: ChangeUpdateWithoutGeoTargetDataInput;
  where: ChangeWhereUniqueInput;
};

export type ChangeUpsertWithWhereUniqueWithoutLicenseInput = {
  create: ChangeCreateWithoutLicenseInput;
  update: ChangeUpdateWithoutLicenseDataInput;
  where: ChangeWhereUniqueInput;
};

export type ChangeWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<ChangeWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<ChangeWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<ChangeWhereInput>>;
  audience?: InputMaybe<AudienceWhereInput>;
  campaignOrder?: InputMaybe<CampaignOrderWhereInput>;
  changedBy?: InputMaybe<UserWhereInput>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  description?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  description_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  description_ends_with?: InputMaybe<Scalars['String']>;
  /** All values greater than the given value. */
  description_gt?: InputMaybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  description_gte?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  description_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  description_lt?: InputMaybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  description_lte?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  description_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  description_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string. */
  description_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  description_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  description_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  description_starts_with?: InputMaybe<Scalars['String']>;
  eventsTarget?: InputMaybe<EventsTargetWhereInput>;
  geoTarget?: InputMaybe<GeoTargetWhereInput>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: InputMaybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: InputMaybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: InputMaybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  license?: InputMaybe<LicenseWhereInput>;
};

export type ChangeWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export type Circle = Node & {
  __typename?: 'Circle';
  coordinate: Coordinate;
  createdAt: Scalars['DateTime'];
  geoTarget?: Maybe<GeoTarget>;
  id: Scalars['ID'];
  location?: Maybe<Location>;
  radius: Scalars['Float'];
  updatedAt: Scalars['DateTime'];
};

export type CircleCreateManyWithoutGeoTargetInput = {
  connect?: InputMaybe<Array<CircleWhereUniqueInput>>;
  create?: InputMaybe<Array<CircleCreateWithoutGeoTargetInput>>;
};

export type CircleCreateManyWithoutLocationInput = {
  connect?: InputMaybe<Array<CircleWhereUniqueInput>>;
  create?: InputMaybe<Array<CircleCreateWithoutLocationInput>>;
};

export type CircleCreateWithoutGeoTargetInput = {
  coordinate: CoordinateCreateOneWithoutCirclesInput;
  location?: InputMaybe<LocationCreateOneWithoutCirclesInput>;
  radius: Scalars['Float'];
};

export type CircleCreateWithoutLocationInput = {
  coordinate: CoordinateCreateOneWithoutCirclesInput;
  geoTarget?: InputMaybe<GeoTargetCreateOneWithoutCirclesInput>;
  radius: Scalars['Float'];
};

export enum CircleOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  RadiusAsc = 'radius_ASC',
  RadiusDesc = 'radius_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC'
}

export type CircleUpdateManyWithoutGeoTargetInput = {
  connect?: InputMaybe<Array<CircleWhereUniqueInput>>;
  create?: InputMaybe<Array<CircleCreateWithoutGeoTargetInput>>;
  delete?: InputMaybe<Array<CircleWhereUniqueInput>>;
  disconnect?: InputMaybe<Array<CircleWhereUniqueInput>>;
  update?: InputMaybe<Array<CircleUpdateWithWhereUniqueWithoutGeoTargetInput>>;
  upsert?: InputMaybe<Array<CircleUpsertWithWhereUniqueWithoutGeoTargetInput>>;
};

export type CircleUpdateManyWithoutLocationInput = {
  connect?: InputMaybe<Array<CircleWhereUniqueInput>>;
  create?: InputMaybe<Array<CircleCreateWithoutLocationInput>>;
  delete?: InputMaybe<Array<CircleWhereUniqueInput>>;
  disconnect?: InputMaybe<Array<CircleWhereUniqueInput>>;
  update?: InputMaybe<Array<CircleUpdateWithWhereUniqueWithoutLocationInput>>;
  upsert?: InputMaybe<Array<CircleUpsertWithWhereUniqueWithoutLocationInput>>;
};

export type CircleUpdateWithWhereUniqueWithoutGeoTargetInput = {
  data: CircleUpdateWithoutGeoTargetDataInput;
  where: CircleWhereUniqueInput;
};

export type CircleUpdateWithWhereUniqueWithoutLocationInput = {
  data: CircleUpdateWithoutLocationDataInput;
  where: CircleWhereUniqueInput;
};

export type CircleUpdateWithoutGeoTargetDataInput = {
  coordinate?: InputMaybe<CoordinateUpdateOneRequiredWithoutCirclesInput>;
  location?: InputMaybe<LocationUpdateOneWithoutCirclesInput>;
  radius?: InputMaybe<Scalars['Float']>;
};

export type CircleUpdateWithoutLocationDataInput = {
  coordinate?: InputMaybe<CoordinateUpdateOneRequiredWithoutCirclesInput>;
  geoTarget?: InputMaybe<GeoTargetUpdateOneWithoutCirclesInput>;
  radius?: InputMaybe<Scalars['Float']>;
};

export type CircleUpsertWithWhereUniqueWithoutGeoTargetInput = {
  create: CircleCreateWithoutGeoTargetInput;
  update: CircleUpdateWithoutGeoTargetDataInput;
  where: CircleWhereUniqueInput;
};

export type CircleUpsertWithWhereUniqueWithoutLocationInput = {
  create: CircleCreateWithoutLocationInput;
  update: CircleUpdateWithoutLocationDataInput;
  where: CircleWhereUniqueInput;
};

export type CircleWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<CircleWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<CircleWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<CircleWhereInput>>;
  coordinate?: InputMaybe<CoordinateWhereInput>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  geoTarget?: InputMaybe<GeoTargetWhereInput>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: InputMaybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: InputMaybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: InputMaybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  location?: InputMaybe<LocationWhereInput>;
  radius?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  radius_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  radius_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  radius_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  radius_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  radius_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  radius_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  radius_not_in?: InputMaybe<Array<Scalars['Float']>>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
};

export type CircleWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export type Conversation = Node & {
  __typename?: 'Conversation';
  id: Scalars['ID'];
  messages?: Maybe<Array<Message>>;
  user?: Maybe<User>;
};


export type ConversationMessagesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MessageOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<MessageWhereInput>;
};

export type ConversationCreateInput = {
  messages?: InputMaybe<MessageCreateManyWithoutConversationInput>;
  user?: InputMaybe<UserCreateOneWithoutConversationInput>;
};

export type ConversationCreateManyWithoutUserInput = {
  connect?: InputMaybe<Array<ConversationWhereUniqueInput>>;
  create?: InputMaybe<Array<ConversationCreateWithoutUserInput>>;
};

export type ConversationCreateOneWithoutMessagesInput = {
  connect?: InputMaybe<ConversationWhereUniqueInput>;
  create?: InputMaybe<ConversationCreateWithoutMessagesInput>;
};

export type ConversationCreateWithoutMessagesInput = {
  user?: InputMaybe<UserCreateOneWithoutConversationInput>;
};

export type ConversationCreateWithoutUserInput = {
  messages?: InputMaybe<MessageCreateManyWithoutConversationInput>;
};

export type ConversationInput = {
  message: Scalars['String'];
  requestAttributes?: InputMaybe<RequestAttributes>;
  sessionAttributes: SessionInputAttributes;
};

export enum ConversationOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC'
}

export type ConversationResponse = {
  __typename?: 'ConversationResponse';
  airnContext?: Maybe<Scalars['String']>;
  airnFulfillment?: Maybe<AirnFulfillment>;
  message: Scalars['String'];
  sessionAttributes: SessionOuputAttributes;
  userContext?: Maybe<Scalars['String']>;
};

export type ConversationUpdateInput = {
  messages?: InputMaybe<MessageUpdateManyWithoutConversationInput>;
  user?: InputMaybe<UserUpdateOneWithoutConversationInput>;
};

export type ConversationUpdateManyWithoutUserInput = {
  connect?: InputMaybe<Array<ConversationWhereUniqueInput>>;
  create?: InputMaybe<Array<ConversationCreateWithoutUserInput>>;
  delete?: InputMaybe<Array<ConversationWhereUniqueInput>>;
  disconnect?: InputMaybe<Array<ConversationWhereUniqueInput>>;
  update?: InputMaybe<Array<ConversationUpdateWithWhereUniqueWithoutUserInput>>;
  upsert?: InputMaybe<Array<ConversationUpsertWithWhereUniqueWithoutUserInput>>;
};

export type ConversationUpdateOneRequiredWithoutMessagesInput = {
  connect?: InputMaybe<ConversationWhereUniqueInput>;
  create?: InputMaybe<ConversationCreateWithoutMessagesInput>;
  update?: InputMaybe<ConversationUpdateWithoutMessagesDataInput>;
  upsert?: InputMaybe<ConversationUpsertWithoutMessagesInput>;
};

export type ConversationUpdateWithWhereUniqueWithoutUserInput = {
  data: ConversationUpdateWithoutUserDataInput;
  where: ConversationWhereUniqueInput;
};

export type ConversationUpdateWithoutMessagesDataInput = {
  user?: InputMaybe<UserUpdateOneWithoutConversationInput>;
};

export type ConversationUpdateWithoutUserDataInput = {
  messages?: InputMaybe<MessageUpdateManyWithoutConversationInput>;
};

export type ConversationUpsertWithWhereUniqueWithoutUserInput = {
  create: ConversationCreateWithoutUserInput;
  update: ConversationUpdateWithoutUserDataInput;
  where: ConversationWhereUniqueInput;
};

export type ConversationUpsertWithoutMessagesInput = {
  create: ConversationCreateWithoutMessagesInput;
  update: ConversationUpdateWithoutMessagesDataInput;
};

export type ConversationWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<ConversationWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<ConversationWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<ConversationWhereInput>>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: InputMaybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: InputMaybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: InputMaybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  messages_every?: InputMaybe<MessageWhereInput>;
  messages_none?: InputMaybe<MessageWhereInput>;
  messages_some?: InputMaybe<MessageWhereInput>;
  user?: InputMaybe<UserWhereInput>;
};

export type ConversationWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export type Coordinate = Node & {
  __typename?: 'Coordinate';
  circles?: Maybe<Array<Circle>>;
  id: Scalars['ID'];
  lat?: Maybe<Scalars['Float']>;
  lng?: Maybe<Scalars['Float']>;
};


export type CoordinateCirclesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<CircleOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<CircleWhereInput>;
};

export type CoordinateCreateOneWithoutCirclesInput = {
  connect?: InputMaybe<CoordinateWhereUniqueInput>;
  create?: InputMaybe<CoordinateCreateWithoutCirclesInput>;
};

export type CoordinateCreateWithoutCirclesInput = {
  lat?: InputMaybe<Scalars['Float']>;
  lng?: InputMaybe<Scalars['Float']>;
};

export type CoordinateUpdateOneRequiredWithoutCirclesInput = {
  connect?: InputMaybe<CoordinateWhereUniqueInput>;
  create?: InputMaybe<CoordinateCreateWithoutCirclesInput>;
  update?: InputMaybe<CoordinateUpdateWithoutCirclesDataInput>;
  upsert?: InputMaybe<CoordinateUpsertWithoutCirclesInput>;
};

export type CoordinateUpdateWithoutCirclesDataInput = {
  lat?: InputMaybe<Scalars['Float']>;
  lng?: InputMaybe<Scalars['Float']>;
};

export type CoordinateUpsertWithoutCirclesInput = {
  create: CoordinateCreateWithoutCirclesInput;
  update: CoordinateUpdateWithoutCirclesDataInput;
};

export type CoordinateWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<CoordinateWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<CoordinateWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<CoordinateWhereInput>>;
  circles_every?: InputMaybe<CircleWhereInput>;
  circles_none?: InputMaybe<CircleWhereInput>;
  circles_some?: InputMaybe<CircleWhereInput>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: InputMaybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: InputMaybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: InputMaybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  lat?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  lat_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  lat_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  lat_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  lat_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  lat_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  lat_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  lat_not_in?: InputMaybe<Array<Scalars['Float']>>;
  lng?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  lng_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  lng_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  lng_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  lng_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  lng_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  lng_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  lng_not_in?: InputMaybe<Array<Scalars['Float']>>;
};

export type CoordinateWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export enum CountryType {
  Canada = 'CANADA',
  Usa = 'USA'
}

export type CreateAppNexusMappingRecordInput = {
  active: Scalars['Boolean'];
  data_category_id: Scalars['Int'];
  data_provider_id: Scalars['Int'];
  data_segment_type_id: Scalars['String'];
  is_public: Scalars['Boolean'];
  member_id: Scalars['Int'];
  segment_id: Scalars['Int'];
};

export type CreateAppNexusSegmentInput = {
  code: Scalars['String'];
  description?: InputMaybe<Scalars['String']>;
  price: Scalars['Float'];
  short_name: Scalars['String'];
};

export type CreateAppNexusSharingRecordInput = {
  buyer_member_id?: InputMaybe<Scalars['Int']>;
  name?: InputMaybe<Scalars['String']>;
  segment_exposure?: InputMaybe<Scalars['String']>;
  segments?: InputMaybe<Array<ById>>;
};

export type CreateDashboardUserInput = {
  avatar?: InputMaybe<Scalars['ID']>;
  config: UserConfigCreateInput;
  email?: InputMaybe<Scalars['String']>;
  name?: InputMaybe<Scalars['String']>;
  orgId: Scalars['ID'];
  phone: Scalars['String'];
  roleItems?: InputMaybe<Array<RoleItemCreateWithoutRoleInput>>;
  username: Scalars['String'];
};

export type Creative = Node & {
  __typename?: 'Creative';
  adProviderId?: Maybe<Scalars['String']>;
  adTags?: Maybe<Array<AdTag>>;
  adUnit?: Maybe<AdUnit>;
  cpm?: Maybe<Scalars['Float']>;
  createdAt: Scalars['DateTime'];
  id: Scalars['ID'];
  media: Media;
  updatedAt: Scalars['DateTime'];
};


export type CreativeAdTagsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<AdTagOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<AdTagWhereInput>;
};

export type CreativeCreateManyWithoutAdUnitInput = {
  connect?: InputMaybe<Array<CreativeWhereUniqueInput>>;
  create?: InputMaybe<Array<CreativeCreateWithoutAdUnitInput>>;
};

export type CreativeCreateManyWithoutMediaInput = {
  connect?: InputMaybe<Array<CreativeWhereUniqueInput>>;
  create?: InputMaybe<Array<CreativeCreateWithoutMediaInput>>;
};

export type CreativeCreateOneWithoutAdTagsInput = {
  connect?: InputMaybe<CreativeWhereUniqueInput>;
  create?: InputMaybe<CreativeCreateWithoutAdTagsInput>;
};

export type CreativeCreateWithoutAdTagsInput = {
  adProviderId?: InputMaybe<Scalars['String']>;
  adUnit?: InputMaybe<AdUnitCreateOneWithoutBannersInput>;
  cpm?: InputMaybe<Scalars['Float']>;
  media: MediaCreateOneWithoutCreativesInput;
};

export type CreativeCreateWithoutAdUnitInput = {
  adProviderId?: InputMaybe<Scalars['String']>;
  adTags?: InputMaybe<AdTagCreateManyWithoutCreativeInput>;
  cpm?: InputMaybe<Scalars['Float']>;
  media: MediaCreateOneWithoutCreativesInput;
};

export type CreativeCreateWithoutMediaInput = {
  adProviderId?: InputMaybe<Scalars['String']>;
  adTags?: InputMaybe<AdTagCreateManyWithoutCreativeInput>;
  adUnit?: InputMaybe<AdUnitCreateOneWithoutBannersInput>;
  cpm?: InputMaybe<Scalars['Float']>;
};

export enum CreativeOrderByInput {
  AdProviderIdAsc = 'adProviderId_ASC',
  AdProviderIdDesc = 'adProviderId_DESC',
  CpmAsc = 'cpm_ASC',
  CpmDesc = 'cpm_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC'
}

export type CreativeUpdateManyWithoutAdUnitInput = {
  connect?: InputMaybe<Array<CreativeWhereUniqueInput>>;
  create?: InputMaybe<Array<CreativeCreateWithoutAdUnitInput>>;
  delete?: InputMaybe<Array<CreativeWhereUniqueInput>>;
  disconnect?: InputMaybe<Array<CreativeWhereUniqueInput>>;
  update?: InputMaybe<Array<CreativeUpdateWithWhereUniqueWithoutAdUnitInput>>;
  upsert?: InputMaybe<Array<CreativeUpsertWithWhereUniqueWithoutAdUnitInput>>;
};

export type CreativeUpdateManyWithoutMediaInput = {
  connect?: InputMaybe<Array<CreativeWhereUniqueInput>>;
  create?: InputMaybe<Array<CreativeCreateWithoutMediaInput>>;
  delete?: InputMaybe<Array<CreativeWhereUniqueInput>>;
  disconnect?: InputMaybe<Array<CreativeWhereUniqueInput>>;
  update?: InputMaybe<Array<CreativeUpdateWithWhereUniqueWithoutMediaInput>>;
  upsert?: InputMaybe<Array<CreativeUpsertWithWhereUniqueWithoutMediaInput>>;
};

export type CreativeUpdateOneWithoutAdTagsInput = {
  connect?: InputMaybe<CreativeWhereUniqueInput>;
  create?: InputMaybe<CreativeCreateWithoutAdTagsInput>;
  delete?: InputMaybe<Scalars['Boolean']>;
  disconnect?: InputMaybe<Scalars['Boolean']>;
  update?: InputMaybe<CreativeUpdateWithoutAdTagsDataInput>;
  upsert?: InputMaybe<CreativeUpsertWithoutAdTagsInput>;
};

export type CreativeUpdateWithWhereUniqueWithoutAdUnitInput = {
  data: CreativeUpdateWithoutAdUnitDataInput;
  where: CreativeWhereUniqueInput;
};

export type CreativeUpdateWithWhereUniqueWithoutMediaInput = {
  data: CreativeUpdateWithoutMediaDataInput;
  where: CreativeWhereUniqueInput;
};

export type CreativeUpdateWithoutAdTagsDataInput = {
  adProviderId?: InputMaybe<Scalars['String']>;
  adUnit?: InputMaybe<AdUnitUpdateOneWithoutBannersInput>;
  cpm?: InputMaybe<Scalars['Float']>;
  media?: InputMaybe<MediaUpdateOneRequiredWithoutCreativesInput>;
};

export type CreativeUpdateWithoutAdUnitDataInput = {
  adProviderId?: InputMaybe<Scalars['String']>;
  adTags?: InputMaybe<AdTagUpdateManyWithoutCreativeInput>;
  cpm?: InputMaybe<Scalars['Float']>;
  media?: InputMaybe<MediaUpdateOneRequiredWithoutCreativesInput>;
};

export type CreativeUpdateWithoutMediaDataInput = {
  adProviderId?: InputMaybe<Scalars['String']>;
  adTags?: InputMaybe<AdTagUpdateManyWithoutCreativeInput>;
  adUnit?: InputMaybe<AdUnitUpdateOneWithoutBannersInput>;
  cpm?: InputMaybe<Scalars['Float']>;
};

export type CreativeUpsertWithWhereUniqueWithoutAdUnitInput = {
  create: CreativeCreateWithoutAdUnitInput;
  update: CreativeUpdateWithoutAdUnitDataInput;
  where: CreativeWhereUniqueInput;
};

export type CreativeUpsertWithWhereUniqueWithoutMediaInput = {
  create: CreativeCreateWithoutMediaInput;
  update: CreativeUpdateWithoutMediaDataInput;
  where: CreativeWhereUniqueInput;
};

export type CreativeUpsertWithoutAdTagsInput = {
  create: CreativeCreateWithoutAdTagsInput;
  update: CreativeUpdateWithoutAdTagsDataInput;
};

export type CreativeWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<CreativeWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<CreativeWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<CreativeWhereInput>>;
  adProviderId?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  adProviderId_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  adProviderId_ends_with?: InputMaybe<Scalars['String']>;
  /** All values greater than the given value. */
  adProviderId_gt?: InputMaybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  adProviderId_gte?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  adProviderId_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  adProviderId_lt?: InputMaybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  adProviderId_lte?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  adProviderId_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  adProviderId_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string. */
  adProviderId_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  adProviderId_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  adProviderId_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  adProviderId_starts_with?: InputMaybe<Scalars['String']>;
  adTags_every?: InputMaybe<AdTagWhereInput>;
  adTags_none?: InputMaybe<AdTagWhereInput>;
  adTags_some?: InputMaybe<AdTagWhereInput>;
  adUnit?: InputMaybe<AdUnitWhereInput>;
  cpm?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  cpm_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  cpm_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  cpm_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  cpm_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  cpm_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  cpm_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  cpm_not_in?: InputMaybe<Array<Scalars['Float']>>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: InputMaybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: InputMaybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: InputMaybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  media?: InputMaybe<MediaWhereInput>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
};

export type CreativeWhereUniqueInput = {
  adProviderId?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
};

export type Customer = Node & {
  __typename?: 'Customer';
  address?: Maybe<Scalars['String']>;
  birthday?: Maybe<Scalars['DateTime']>;
  brands?: Maybe<Array<Brand>>;
  city?: Maybe<Scalars['String']>;
  country?: Maybe<CountryType>;
  county?: Maybe<Scalars['String']>;
  createdAt: Scalars['DateTime'];
  email?: Maybe<Scalars['String']>;
  firstName?: Maybe<Scalars['String']>;
  gender?: Maybe<Gender>;
  geojson: Array<Scalars['Float']>;
  id: Scalars['ID'];
  interests: Array<Scalars['String']>;
  lastName?: Maybe<Scalars['String']>;
  lat?: Maybe<Scalars['Float']>;
  lng?: Maybe<Scalars['Float']>;
  loyaltyPlacementUnits?: Maybe<Array<LoyaltyPlacementUnit>>;
  name: Scalars['String'];
  org?: Maybe<Org>;
  phone: Scalars['String'];
  points?: Maybe<Scalars['Int']>;
  state?: Maybe<StateType>;
  street?: Maybe<Scalars['String']>;
  tags: Array<Scalars['String']>;
  updatedAt: Scalars['DateTime'];
  zip?: Maybe<Scalars['String']>;
};


export type CustomerBrandsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<BrandOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<BrandWhereInput>;
};


export type CustomerLoyaltyPlacementUnitsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<LoyaltyPlacementUnitOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<LoyaltyPlacementUnitWhereInput>;
};

export type CustomerCreateInput = {
  address?: InputMaybe<Scalars['String']>;
  birthday?: InputMaybe<Scalars['DateTime']>;
  brands?: InputMaybe<BrandCreateManyWithoutCustomerInput>;
  city?: InputMaybe<Scalars['String']>;
  country?: InputMaybe<CountryType>;
  county?: InputMaybe<Scalars['String']>;
  email?: InputMaybe<Scalars['String']>;
  firstName?: InputMaybe<Scalars['String']>;
  gender?: InputMaybe<Gender>;
  geojson?: InputMaybe<CustomerCreategeojsonInput>;
  interests?: InputMaybe<CustomerCreateinterestsInput>;
  lastName?: InputMaybe<Scalars['String']>;
  lat?: InputMaybe<Scalars['Float']>;
  lng?: InputMaybe<Scalars['Float']>;
  loyaltyPlacementUnits?: InputMaybe<LoyaltyPlacementUnitCreateManyWithoutCustomerInput>;
  name: Scalars['String'];
  org?: InputMaybe<OrgCreateOneWithoutCustomersInput>;
  phone: Scalars['String'];
  points?: InputMaybe<Scalars['Int']>;
  state?: InputMaybe<StateType>;
  street?: InputMaybe<Scalars['String']>;
  tags?: InputMaybe<CustomerCreatetagsInput>;
  zip?: InputMaybe<Scalars['String']>;
};

export type CustomerCreateManyWithoutOrgInput = {
  connect?: InputMaybe<Array<CustomerWhereUniqueInput>>;
  create?: InputMaybe<Array<CustomerCreateWithoutOrgInput>>;
};

export type CustomerCreateOneWithoutBrandsInput = {
  connect?: InputMaybe<CustomerWhereUniqueInput>;
  create?: InputMaybe<CustomerCreateWithoutBrandsInput>;
};

export type CustomerCreateOneWithoutLoyaltyPlacementUnitsInput = {
  connect?: InputMaybe<CustomerWhereUniqueInput>;
  create?: InputMaybe<CustomerCreateWithoutLoyaltyPlacementUnitsInput>;
};

export type CustomerCreateWithoutBrandsInput = {
  address?: InputMaybe<Scalars['String']>;
  birthday?: InputMaybe<Scalars['DateTime']>;
  city?: InputMaybe<Scalars['String']>;
  country?: InputMaybe<CountryType>;
  county?: InputMaybe<Scalars['String']>;
  email?: InputMaybe<Scalars['String']>;
  firstName?: InputMaybe<Scalars['String']>;
  gender?: InputMaybe<Gender>;
  geojson?: InputMaybe<CustomerCreategeojsonInput>;
  interests?: InputMaybe<CustomerCreateinterestsInput>;
  lastName?: InputMaybe<Scalars['String']>;
  lat?: InputMaybe<Scalars['Float']>;
  lng?: InputMaybe<Scalars['Float']>;
  loyaltyPlacementUnits?: InputMaybe<LoyaltyPlacementUnitCreateManyWithoutCustomerInput>;
  name: Scalars['String'];
  org?: InputMaybe<OrgCreateOneWithoutCustomersInput>;
  phone: Scalars['String'];
  points?: InputMaybe<Scalars['Int']>;
  state?: InputMaybe<StateType>;
  street?: InputMaybe<Scalars['String']>;
  tags?: InputMaybe<CustomerCreatetagsInput>;
  zip?: InputMaybe<Scalars['String']>;
};

export type CustomerCreateWithoutLoyaltyPlacementUnitsInput = {
  address?: InputMaybe<Scalars['String']>;
  birthday?: InputMaybe<Scalars['DateTime']>;
  brands?: InputMaybe<BrandCreateManyWithoutCustomerInput>;
  city?: InputMaybe<Scalars['String']>;
  country?: InputMaybe<CountryType>;
  county?: InputMaybe<Scalars['String']>;
  email?: InputMaybe<Scalars['String']>;
  firstName?: InputMaybe<Scalars['String']>;
  gender?: InputMaybe<Gender>;
  geojson?: InputMaybe<CustomerCreategeojsonInput>;
  interests?: InputMaybe<CustomerCreateinterestsInput>;
  lastName?: InputMaybe<Scalars['String']>;
  lat?: InputMaybe<Scalars['Float']>;
  lng?: InputMaybe<Scalars['Float']>;
  name: Scalars['String'];
  org?: InputMaybe<OrgCreateOneWithoutCustomersInput>;
  phone: Scalars['String'];
  points?: InputMaybe<Scalars['Int']>;
  state?: InputMaybe<StateType>;
  street?: InputMaybe<Scalars['String']>;
  tags?: InputMaybe<CustomerCreatetagsInput>;
  zip?: InputMaybe<Scalars['String']>;
};

export type CustomerCreateWithoutOrgInput = {
  address?: InputMaybe<Scalars['String']>;
  birthday?: InputMaybe<Scalars['DateTime']>;
  brands?: InputMaybe<BrandCreateManyWithoutCustomerInput>;
  city?: InputMaybe<Scalars['String']>;
  country?: InputMaybe<CountryType>;
  county?: InputMaybe<Scalars['String']>;
  email?: InputMaybe<Scalars['String']>;
  firstName?: InputMaybe<Scalars['String']>;
  gender?: InputMaybe<Gender>;
  geojson?: InputMaybe<CustomerCreategeojsonInput>;
  interests?: InputMaybe<CustomerCreateinterestsInput>;
  lastName?: InputMaybe<Scalars['String']>;
  lat?: InputMaybe<Scalars['Float']>;
  lng?: InputMaybe<Scalars['Float']>;
  loyaltyPlacementUnits?: InputMaybe<LoyaltyPlacementUnitCreateManyWithoutCustomerInput>;
  name: Scalars['String'];
  phone: Scalars['String'];
  points?: InputMaybe<Scalars['Int']>;
  state?: InputMaybe<StateType>;
  street?: InputMaybe<Scalars['String']>;
  tags?: InputMaybe<CustomerCreatetagsInput>;
  zip?: InputMaybe<Scalars['String']>;
};

export type CustomerCreategeojsonInput = {
  set?: InputMaybe<Array<Scalars['Float']>>;
};

export type CustomerCreateinterestsInput = {
  set?: InputMaybe<Array<Scalars['String']>>;
};

export type CustomerCreatetagsInput = {
  set?: InputMaybe<Array<Scalars['String']>>;
};

export enum CustomerOrderByInput {
  AddressAsc = 'address_ASC',
  AddressDesc = 'address_DESC',
  BirthdayAsc = 'birthday_ASC',
  BirthdayDesc = 'birthday_DESC',
  CityAsc = 'city_ASC',
  CityDesc = 'city_DESC',
  CountryAsc = 'country_ASC',
  CountryDesc = 'country_DESC',
  CountyAsc = 'county_ASC',
  CountyDesc = 'county_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  EmailAsc = 'email_ASC',
  EmailDesc = 'email_DESC',
  FirstNameAsc = 'firstName_ASC',
  FirstNameDesc = 'firstName_DESC',
  GenderAsc = 'gender_ASC',
  GenderDesc = 'gender_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  LastNameAsc = 'lastName_ASC',
  LastNameDesc = 'lastName_DESC',
  LatAsc = 'lat_ASC',
  LatDesc = 'lat_DESC',
  LngAsc = 'lng_ASC',
  LngDesc = 'lng_DESC',
  NameAsc = 'name_ASC',
  NameDesc = 'name_DESC',
  PhoneAsc = 'phone_ASC',
  PhoneDesc = 'phone_DESC',
  PointsAsc = 'points_ASC',
  PointsDesc = 'points_DESC',
  StateAsc = 'state_ASC',
  StateDesc = 'state_DESC',
  StreetAsc = 'street_ASC',
  StreetDesc = 'street_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  ZipAsc = 'zip_ASC',
  ZipDesc = 'zip_DESC'
}

export type CustomerPreviousValues = {
  __typename?: 'CustomerPreviousValues';
  address?: Maybe<Scalars['String']>;
  birthday?: Maybe<Scalars['DateTime']>;
  city?: Maybe<Scalars['String']>;
  country?: Maybe<CountryType>;
  county?: Maybe<Scalars['String']>;
  createdAt: Scalars['DateTime'];
  email?: Maybe<Scalars['String']>;
  firstName?: Maybe<Scalars['String']>;
  gender?: Maybe<Gender>;
  geojson: Array<Scalars['Float']>;
  id: Scalars['ID'];
  interests: Array<Scalars['String']>;
  lastName?: Maybe<Scalars['String']>;
  lat?: Maybe<Scalars['Float']>;
  lng?: Maybe<Scalars['Float']>;
  name: Scalars['String'];
  phone: Scalars['String'];
  points?: Maybe<Scalars['Int']>;
  state?: Maybe<StateType>;
  street?: Maybe<Scalars['String']>;
  tags: Array<Scalars['String']>;
  updatedAt: Scalars['DateTime'];
  zip?: Maybe<Scalars['String']>;
};

export type CustomerSubscriptionPayload = {
  __typename?: 'CustomerSubscriptionPayload';
  mutation: MutationType;
  node?: Maybe<Customer>;
  previousValues?: Maybe<CustomerPreviousValues>;
  updatedFields?: Maybe<Array<Scalars['String']>>;
};

export type CustomerSubscriptionWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<CustomerSubscriptionWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<CustomerSubscriptionWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<CustomerSubscriptionWhereInput>>;
  /** The subscription event gets dispatched when it's listed in mutation_in */
  mutation_in?: InputMaybe<Array<MutationType>>;
  node?: InputMaybe<CustomerWhereInput>;
  /** The subscription event gets only dispatched when one of the updated fields names is included in this list */
  updatedFields_contains?: InputMaybe<Scalars['String']>;
  /** The subscription event gets only dispatched when all of the field names included in this list have been updated */
  updatedFields_contains_every?: InputMaybe<Array<Scalars['String']>>;
  /** The subscription event gets only dispatched when some of the field names included in this list have been updated */
  updatedFields_contains_some?: InputMaybe<Array<Scalars['String']>>;
};

export type CustomerUpdateInput = {
  address?: InputMaybe<Scalars['String']>;
  birthday?: InputMaybe<Scalars['DateTime']>;
  brands?: InputMaybe<BrandUpdateManyWithoutCustomerInput>;
  city?: InputMaybe<Scalars['String']>;
  country?: InputMaybe<CountryType>;
  county?: InputMaybe<Scalars['String']>;
  email?: InputMaybe<Scalars['String']>;
  firstName?: InputMaybe<Scalars['String']>;
  gender?: InputMaybe<Gender>;
  geojson?: InputMaybe<CustomerUpdategeojsonInput>;
  interests?: InputMaybe<CustomerUpdateinterestsInput>;
  lastName?: InputMaybe<Scalars['String']>;
  lat?: InputMaybe<Scalars['Float']>;
  lng?: InputMaybe<Scalars['Float']>;
  loyaltyPlacementUnits?: InputMaybe<LoyaltyPlacementUnitUpdateManyWithoutCustomerInput>;
  name?: InputMaybe<Scalars['String']>;
  org?: InputMaybe<OrgUpdateOneWithoutCustomersInput>;
  phone?: InputMaybe<Scalars['String']>;
  points?: InputMaybe<Scalars['Int']>;
  state?: InputMaybe<StateType>;
  street?: InputMaybe<Scalars['String']>;
  tags?: InputMaybe<CustomerUpdatetagsInput>;
  zip?: InputMaybe<Scalars['String']>;
};

export type CustomerUpdateManyWithoutOrgInput = {
  connect?: InputMaybe<Array<CustomerWhereUniqueInput>>;
  create?: InputMaybe<Array<CustomerCreateWithoutOrgInput>>;
  delete?: InputMaybe<Array<CustomerWhereUniqueInput>>;
  disconnect?: InputMaybe<Array<CustomerWhereUniqueInput>>;
  update?: InputMaybe<Array<CustomerUpdateWithWhereUniqueWithoutOrgInput>>;
  upsert?: InputMaybe<Array<CustomerUpsertWithWhereUniqueWithoutOrgInput>>;
};

export type CustomerUpdateOneWithoutBrandsInput = {
  connect?: InputMaybe<CustomerWhereUniqueInput>;
  create?: InputMaybe<CustomerCreateWithoutBrandsInput>;
  delete?: InputMaybe<Scalars['Boolean']>;
  disconnect?: InputMaybe<Scalars['Boolean']>;
  update?: InputMaybe<CustomerUpdateWithoutBrandsDataInput>;
  upsert?: InputMaybe<CustomerUpsertWithoutBrandsInput>;
};

export type CustomerUpdateOneWithoutLoyaltyPlacementUnitsInput = {
  connect?: InputMaybe<CustomerWhereUniqueInput>;
  create?: InputMaybe<CustomerCreateWithoutLoyaltyPlacementUnitsInput>;
  delete?: InputMaybe<Scalars['Boolean']>;
  disconnect?: InputMaybe<Scalars['Boolean']>;
  update?: InputMaybe<CustomerUpdateWithoutLoyaltyPlacementUnitsDataInput>;
  upsert?: InputMaybe<CustomerUpsertWithoutLoyaltyPlacementUnitsInput>;
};

export type CustomerUpdateWithWhereUniqueWithoutOrgInput = {
  data: CustomerUpdateWithoutOrgDataInput;
  where: CustomerWhereUniqueInput;
};

export type CustomerUpdateWithoutBrandsDataInput = {
  address?: InputMaybe<Scalars['String']>;
  birthday?: InputMaybe<Scalars['DateTime']>;
  city?: InputMaybe<Scalars['String']>;
  country?: InputMaybe<CountryType>;
  county?: InputMaybe<Scalars['String']>;
  email?: InputMaybe<Scalars['String']>;
  firstName?: InputMaybe<Scalars['String']>;
  gender?: InputMaybe<Gender>;
  geojson?: InputMaybe<CustomerUpdategeojsonInput>;
  interests?: InputMaybe<CustomerUpdateinterestsInput>;
  lastName?: InputMaybe<Scalars['String']>;
  lat?: InputMaybe<Scalars['Float']>;
  lng?: InputMaybe<Scalars['Float']>;
  loyaltyPlacementUnits?: InputMaybe<LoyaltyPlacementUnitUpdateManyWithoutCustomerInput>;
  name?: InputMaybe<Scalars['String']>;
  org?: InputMaybe<OrgUpdateOneWithoutCustomersInput>;
  phone?: InputMaybe<Scalars['String']>;
  points?: InputMaybe<Scalars['Int']>;
  state?: InputMaybe<StateType>;
  street?: InputMaybe<Scalars['String']>;
  tags?: InputMaybe<CustomerUpdatetagsInput>;
  zip?: InputMaybe<Scalars['String']>;
};

export type CustomerUpdateWithoutLoyaltyPlacementUnitsDataInput = {
  address?: InputMaybe<Scalars['String']>;
  birthday?: InputMaybe<Scalars['DateTime']>;
  brands?: InputMaybe<BrandUpdateManyWithoutCustomerInput>;
  city?: InputMaybe<Scalars['String']>;
  country?: InputMaybe<CountryType>;
  county?: InputMaybe<Scalars['String']>;
  email?: InputMaybe<Scalars['String']>;
  firstName?: InputMaybe<Scalars['String']>;
  gender?: InputMaybe<Gender>;
  geojson?: InputMaybe<CustomerUpdategeojsonInput>;
  interests?: InputMaybe<CustomerUpdateinterestsInput>;
  lastName?: InputMaybe<Scalars['String']>;
  lat?: InputMaybe<Scalars['Float']>;
  lng?: InputMaybe<Scalars['Float']>;
  name?: InputMaybe<Scalars['String']>;
  org?: InputMaybe<OrgUpdateOneWithoutCustomersInput>;
  phone?: InputMaybe<Scalars['String']>;
  points?: InputMaybe<Scalars['Int']>;
  state?: InputMaybe<StateType>;
  street?: InputMaybe<Scalars['String']>;
  tags?: InputMaybe<CustomerUpdatetagsInput>;
  zip?: InputMaybe<Scalars['String']>;
};

export type CustomerUpdateWithoutOrgDataInput = {
  address?: InputMaybe<Scalars['String']>;
  birthday?: InputMaybe<Scalars['DateTime']>;
  brands?: InputMaybe<BrandUpdateManyWithoutCustomerInput>;
  city?: InputMaybe<Scalars['String']>;
  country?: InputMaybe<CountryType>;
  county?: InputMaybe<Scalars['String']>;
  email?: InputMaybe<Scalars['String']>;
  firstName?: InputMaybe<Scalars['String']>;
  gender?: InputMaybe<Gender>;
  geojson?: InputMaybe<CustomerUpdategeojsonInput>;
  interests?: InputMaybe<CustomerUpdateinterestsInput>;
  lastName?: InputMaybe<Scalars['String']>;
  lat?: InputMaybe<Scalars['Float']>;
  lng?: InputMaybe<Scalars['Float']>;
  loyaltyPlacementUnits?: InputMaybe<LoyaltyPlacementUnitUpdateManyWithoutCustomerInput>;
  name?: InputMaybe<Scalars['String']>;
  phone?: InputMaybe<Scalars['String']>;
  points?: InputMaybe<Scalars['Int']>;
  state?: InputMaybe<StateType>;
  street?: InputMaybe<Scalars['String']>;
  tags?: InputMaybe<CustomerUpdatetagsInput>;
  zip?: InputMaybe<Scalars['String']>;
};

export type CustomerUpdategeojsonInput = {
  set?: InputMaybe<Array<Scalars['Float']>>;
};

export type CustomerUpdateinterestsInput = {
  set?: InputMaybe<Array<Scalars['String']>>;
};

export type CustomerUpdatetagsInput = {
  set?: InputMaybe<Array<Scalars['String']>>;
};

export type CustomerUpsertWithWhereUniqueWithoutOrgInput = {
  create: CustomerCreateWithoutOrgInput;
  update: CustomerUpdateWithoutOrgDataInput;
  where: CustomerWhereUniqueInput;
};

export type CustomerUpsertWithoutBrandsInput = {
  create: CustomerCreateWithoutBrandsInput;
  update: CustomerUpdateWithoutBrandsDataInput;
};

export type CustomerUpsertWithoutLoyaltyPlacementUnitsInput = {
  create: CustomerCreateWithoutLoyaltyPlacementUnitsInput;
  update: CustomerUpdateWithoutLoyaltyPlacementUnitsDataInput;
};

export type CustomerWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<CustomerWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<CustomerWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<CustomerWhereInput>>;
  address?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  address_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  address_ends_with?: InputMaybe<Scalars['String']>;
  /** All values greater than the given value. */
  address_gt?: InputMaybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  address_gte?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  address_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  address_lt?: InputMaybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  address_lte?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  address_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  address_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string. */
  address_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  address_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  address_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  address_starts_with?: InputMaybe<Scalars['String']>;
  birthday?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  birthday_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  birthday_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  birthday_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  birthday_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  birthday_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  birthday_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  birthday_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  brands_every?: InputMaybe<BrandWhereInput>;
  brands_none?: InputMaybe<BrandWhereInput>;
  brands_some?: InputMaybe<BrandWhereInput>;
  city?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  city_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  city_ends_with?: InputMaybe<Scalars['String']>;
  /** All values greater than the given value. */
  city_gt?: InputMaybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  city_gte?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  city_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  city_lt?: InputMaybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  city_lte?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  city_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  city_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string. */
  city_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  city_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  city_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  city_starts_with?: InputMaybe<Scalars['String']>;
  country?: InputMaybe<CountryType>;
  /** All values that are contained in given list. */
  country_in?: InputMaybe<Array<CountryType>>;
  /** All values that are not equal to given value. */
  country_not?: InputMaybe<CountryType>;
  /** All values that are not contained in given list. */
  country_not_in?: InputMaybe<Array<CountryType>>;
  county?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  county_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  county_ends_with?: InputMaybe<Scalars['String']>;
  /** All values greater than the given value. */
  county_gt?: InputMaybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  county_gte?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  county_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  county_lt?: InputMaybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  county_lte?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  county_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  county_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string. */
  county_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  county_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  county_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  county_starts_with?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  email?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  email_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  email_ends_with?: InputMaybe<Scalars['String']>;
  /** All values greater than the given value. */
  email_gt?: InputMaybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  email_gte?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  email_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  email_lt?: InputMaybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  email_lte?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  email_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  email_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string. */
  email_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  email_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  email_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  email_starts_with?: InputMaybe<Scalars['String']>;
  firstName?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  firstName_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  firstName_ends_with?: InputMaybe<Scalars['String']>;
  /** All values greater than the given value. */
  firstName_gt?: InputMaybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  firstName_gte?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  firstName_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  firstName_lt?: InputMaybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  firstName_lte?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  firstName_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  firstName_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string. */
  firstName_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  firstName_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  firstName_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  firstName_starts_with?: InputMaybe<Scalars['String']>;
  gender?: InputMaybe<Gender>;
  /** All values that are contained in given list. */
  gender_in?: InputMaybe<Array<Gender>>;
  /** All values that are not equal to given value. */
  gender_not?: InputMaybe<Gender>;
  /** All values that are not contained in given list. */
  gender_not_in?: InputMaybe<Array<Gender>>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: InputMaybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: InputMaybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: InputMaybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  lastName?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  lastName_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  lastName_ends_with?: InputMaybe<Scalars['String']>;
  /** All values greater than the given value. */
  lastName_gt?: InputMaybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  lastName_gte?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  lastName_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  lastName_lt?: InputMaybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  lastName_lte?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  lastName_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  lastName_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string. */
  lastName_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  lastName_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  lastName_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  lastName_starts_with?: InputMaybe<Scalars['String']>;
  lat?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  lat_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  lat_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  lat_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  lat_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  lat_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  lat_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  lat_not_in?: InputMaybe<Array<Scalars['Float']>>;
  lng?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  lng_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  lng_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  lng_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  lng_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  lng_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  lng_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  lng_not_in?: InputMaybe<Array<Scalars['Float']>>;
  loyaltyPlacementUnits_every?: InputMaybe<LoyaltyPlacementUnitWhereInput>;
  loyaltyPlacementUnits_none?: InputMaybe<LoyaltyPlacementUnitWhereInput>;
  loyaltyPlacementUnits_some?: InputMaybe<LoyaltyPlacementUnitWhereInput>;
  name?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  name_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  name_ends_with?: InputMaybe<Scalars['String']>;
  /** All values greater than the given value. */
  name_gt?: InputMaybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  name_gte?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  name_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  name_lt?: InputMaybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  name_lte?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  name_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  name_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string. */
  name_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  name_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  name_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  name_starts_with?: InputMaybe<Scalars['String']>;
  org?: InputMaybe<OrgWhereInput>;
  phone?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  phone_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  phone_ends_with?: InputMaybe<Scalars['String']>;
  /** All values greater than the given value. */
  phone_gt?: InputMaybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  phone_gte?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  phone_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  phone_lt?: InputMaybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  phone_lte?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  phone_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  phone_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string. */
  phone_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  phone_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  phone_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  phone_starts_with?: InputMaybe<Scalars['String']>;
  points?: InputMaybe<Scalars['Int']>;
  /** All values greater than the given value. */
  points_gt?: InputMaybe<Scalars['Int']>;
  /** All values greater than or equal the given value. */
  points_gte?: InputMaybe<Scalars['Int']>;
  /** All values that are contained in given list. */
  points_in?: InputMaybe<Array<Scalars['Int']>>;
  /** All values less than the given value. */
  points_lt?: InputMaybe<Scalars['Int']>;
  /** All values less than or equal the given value. */
  points_lte?: InputMaybe<Scalars['Int']>;
  /** All values that are not equal to given value. */
  points_not?: InputMaybe<Scalars['Int']>;
  /** All values that are not contained in given list. */
  points_not_in?: InputMaybe<Array<Scalars['Int']>>;
  state?: InputMaybe<StateType>;
  /** All values that are contained in given list. */
  state_in?: InputMaybe<Array<StateType>>;
  /** All values that are not equal to given value. */
  state_not?: InputMaybe<StateType>;
  /** All values that are not contained in given list. */
  state_not_in?: InputMaybe<Array<StateType>>;
  street?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  street_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  street_ends_with?: InputMaybe<Scalars['String']>;
  /** All values greater than the given value. */
  street_gt?: InputMaybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  street_gte?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  street_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  street_lt?: InputMaybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  street_lte?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  street_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  street_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string. */
  street_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  street_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  street_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  street_starts_with?: InputMaybe<Scalars['String']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  zip?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  zip_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  zip_ends_with?: InputMaybe<Scalars['String']>;
  /** All values greater than the given value. */
  zip_gt?: InputMaybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  zip_gte?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  zip_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  zip_lt?: InputMaybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  zip_lte?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  zip_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  zip_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string. */
  zip_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  zip_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  zip_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  zip_starts_with?: InputMaybe<Scalars['String']>;
};

export type CustomerWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export enum DemandSidePlatform {
  Adsupply = 'ADSUPPLY',
  Amobee = 'AMOBEE',
  Appnexus = 'APPNEXUS',
  Centro = 'CENTRO',
  Choozle = 'CHOOZLE',
  Googleanalytics = 'GOOGLEANALYTICS',
  Liquidm = 'LIQUIDM',
  Meteora = 'METEORA',
  Rtbiq = 'RTBIQ',
  Sito = 'SITO',
  Smart = 'SMART',
  Ttd = 'TTD'
}

export enum DesignationType {
  Medical = 'MEDICAL',
  NotApplicable = 'NOT_APPLICABLE',
  Recreational = 'RECREATIONAL'
}

export enum DeviceType {
  Desktop = 'DESKTOP',
  Mobile = 'MOBILE',
  Tablet = 'TABLET'
}

export type DisplayReportDateUnit = Node & {
  __typename?: 'DisplayReportDateUnit';
  campaignOrder?: Maybe<CampaignOrder>;
  clicks?: Maybe<Scalars['Int']>;
  createdAt: Scalars['DateTime'];
  ctr?: Maybe<Scalars['Float']>;
  id: Scalars['ID'];
  impressions?: Maybe<Scalars['String']>;
  key?: Maybe<Scalars['String']>;
  observations?: Maybe<Scalars['Int']>;
  signUps?: Maybe<Scalars['Int']>;
  totalImpressions?: Maybe<Scalars['String']>;
  transactionCount?: Maybe<Scalars['Int']>;
  transactionTotal?: Maybe<Scalars['Float']>;
  updatedAt: Scalars['DateTime'];
  userCost?: Maybe<Scalars['Float']>;
  utcISODate?: Maybe<Scalars['DateTime']>;
  walkIns?: Maybe<Scalars['Int']>;
  xAxis: Scalars['DateTime'];
};

export type DisplayReportDateUnitCreateInput = {
  campaignOrder?: InputMaybe<CampaignOrderCreateOneInput>;
  clicks?: InputMaybe<Scalars['Int']>;
  ctr?: InputMaybe<Scalars['Float']>;
  impressions?: InputMaybe<Scalars['String']>;
  key?: InputMaybe<Scalars['String']>;
  observations?: InputMaybe<Scalars['Int']>;
  signUps?: InputMaybe<Scalars['Int']>;
  totalImpressions?: InputMaybe<Scalars['String']>;
  transactionCount?: InputMaybe<Scalars['Int']>;
  transactionTotal?: InputMaybe<Scalars['Float']>;
  userCost?: InputMaybe<Scalars['Float']>;
  utcISODate?: InputMaybe<Scalars['DateTime']>;
  walkIns?: InputMaybe<Scalars['Int']>;
  xAxis: Scalars['DateTime'];
};

export type DisplayReportDateUnitCreateManyInput = {
  connect?: InputMaybe<Array<DisplayReportDateUnitWhereUniqueInput>>;
  create?: InputMaybe<Array<DisplayReportDateUnitCreateInput>>;
};

export enum DisplayReportDateUnitOrderByInput {
  ClicksAsc = 'clicks_ASC',
  ClicksDesc = 'clicks_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  CtrAsc = 'ctr_ASC',
  CtrDesc = 'ctr_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  ImpressionsAsc = 'impressions_ASC',
  ImpressionsDesc = 'impressions_DESC',
  KeyAsc = 'key_ASC',
  KeyDesc = 'key_DESC',
  ObservationsAsc = 'observations_ASC',
  ObservationsDesc = 'observations_DESC',
  SignUpsAsc = 'signUps_ASC',
  SignUpsDesc = 'signUps_DESC',
  TotalImpressionsAsc = 'totalImpressions_ASC',
  TotalImpressionsDesc = 'totalImpressions_DESC',
  TransactionCountAsc = 'transactionCount_ASC',
  TransactionCountDesc = 'transactionCount_DESC',
  TransactionTotalAsc = 'transactionTotal_ASC',
  TransactionTotalDesc = 'transactionTotal_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  UserCostAsc = 'userCost_ASC',
  UserCostDesc = 'userCost_DESC',
  UtcIsoDateAsc = 'utcISODate_ASC',
  UtcIsoDateDesc = 'utcISODate_DESC',
  WalkInsAsc = 'walkIns_ASC',
  WalkInsDesc = 'walkIns_DESC',
  XAxisAsc = 'xAxis_ASC',
  XAxisDesc = 'xAxis_DESC'
}

export type DisplayReportDateUnitUpdateDataInput = {
  campaignOrder?: InputMaybe<CampaignOrderUpdateOneInput>;
  clicks?: InputMaybe<Scalars['Int']>;
  ctr?: InputMaybe<Scalars['Float']>;
  impressions?: InputMaybe<Scalars['String']>;
  key?: InputMaybe<Scalars['String']>;
  observations?: InputMaybe<Scalars['Int']>;
  signUps?: InputMaybe<Scalars['Int']>;
  totalImpressions?: InputMaybe<Scalars['String']>;
  transactionCount?: InputMaybe<Scalars['Int']>;
  transactionTotal?: InputMaybe<Scalars['Float']>;
  userCost?: InputMaybe<Scalars['Float']>;
  utcISODate?: InputMaybe<Scalars['DateTime']>;
  walkIns?: InputMaybe<Scalars['Int']>;
  xAxis?: InputMaybe<Scalars['DateTime']>;
};

export type DisplayReportDateUnitUpdateManyInput = {
  connect?: InputMaybe<Array<DisplayReportDateUnitWhereUniqueInput>>;
  create?: InputMaybe<Array<DisplayReportDateUnitCreateInput>>;
  delete?: InputMaybe<Array<DisplayReportDateUnitWhereUniqueInput>>;
  disconnect?: InputMaybe<Array<DisplayReportDateUnitWhereUniqueInput>>;
  update?: InputMaybe<Array<DisplayReportDateUnitUpdateWithWhereUniqueNestedInput>>;
  upsert?: InputMaybe<Array<DisplayReportDateUnitUpsertWithWhereUniqueNestedInput>>;
};

export type DisplayReportDateUnitUpdateWithWhereUniqueNestedInput = {
  data: DisplayReportDateUnitUpdateDataInput;
  where: DisplayReportDateUnitWhereUniqueInput;
};

export type DisplayReportDateUnitUpsertWithWhereUniqueNestedInput = {
  create: DisplayReportDateUnitCreateInput;
  update: DisplayReportDateUnitUpdateDataInput;
  where: DisplayReportDateUnitWhereUniqueInput;
};

export type DisplayReportDateUnitWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<DisplayReportDateUnitWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<DisplayReportDateUnitWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<DisplayReportDateUnitWhereInput>>;
  campaignOrder?: InputMaybe<CampaignOrderWhereInput>;
  clicks?: InputMaybe<Scalars['Int']>;
  /** All values greater than the given value. */
  clicks_gt?: InputMaybe<Scalars['Int']>;
  /** All values greater than or equal the given value. */
  clicks_gte?: InputMaybe<Scalars['Int']>;
  /** All values that are contained in given list. */
  clicks_in?: InputMaybe<Array<Scalars['Int']>>;
  /** All values less than the given value. */
  clicks_lt?: InputMaybe<Scalars['Int']>;
  /** All values less than or equal the given value. */
  clicks_lte?: InputMaybe<Scalars['Int']>;
  /** All values that are not equal to given value. */
  clicks_not?: InputMaybe<Scalars['Int']>;
  /** All values that are not contained in given list. */
  clicks_not_in?: InputMaybe<Array<Scalars['Int']>>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  ctr?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  ctr_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  ctr_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  ctr_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  ctr_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  ctr_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  ctr_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  ctr_not_in?: InputMaybe<Array<Scalars['Float']>>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: InputMaybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: InputMaybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: InputMaybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  impressions?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  impressions_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  impressions_ends_with?: InputMaybe<Scalars['String']>;
  /** All values greater than the given value. */
  impressions_gt?: InputMaybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  impressions_gte?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  impressions_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  impressions_lt?: InputMaybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  impressions_lte?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  impressions_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  impressions_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string. */
  impressions_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  impressions_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  impressions_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  impressions_starts_with?: InputMaybe<Scalars['String']>;
  key?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  key_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  key_ends_with?: InputMaybe<Scalars['String']>;
  /** All values greater than the given value. */
  key_gt?: InputMaybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  key_gte?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  key_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  key_lt?: InputMaybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  key_lte?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  key_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  key_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string. */
  key_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  key_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  key_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  key_starts_with?: InputMaybe<Scalars['String']>;
  observations?: InputMaybe<Scalars['Int']>;
  /** All values greater than the given value. */
  observations_gt?: InputMaybe<Scalars['Int']>;
  /** All values greater than or equal the given value. */
  observations_gte?: InputMaybe<Scalars['Int']>;
  /** All values that are contained in given list. */
  observations_in?: InputMaybe<Array<Scalars['Int']>>;
  /** All values less than the given value. */
  observations_lt?: InputMaybe<Scalars['Int']>;
  /** All values less than or equal the given value. */
  observations_lte?: InputMaybe<Scalars['Int']>;
  /** All values that are not equal to given value. */
  observations_not?: InputMaybe<Scalars['Int']>;
  /** All values that are not contained in given list. */
  observations_not_in?: InputMaybe<Array<Scalars['Int']>>;
  signUps?: InputMaybe<Scalars['Int']>;
  /** All values greater than the given value. */
  signUps_gt?: InputMaybe<Scalars['Int']>;
  /** All values greater than or equal the given value. */
  signUps_gte?: InputMaybe<Scalars['Int']>;
  /** All values that are contained in given list. */
  signUps_in?: InputMaybe<Array<Scalars['Int']>>;
  /** All values less than the given value. */
  signUps_lt?: InputMaybe<Scalars['Int']>;
  /** All values less than or equal the given value. */
  signUps_lte?: InputMaybe<Scalars['Int']>;
  /** All values that are not equal to given value. */
  signUps_not?: InputMaybe<Scalars['Int']>;
  /** All values that are not contained in given list. */
  signUps_not_in?: InputMaybe<Array<Scalars['Int']>>;
  totalImpressions?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  totalImpressions_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  totalImpressions_ends_with?: InputMaybe<Scalars['String']>;
  /** All values greater than the given value. */
  totalImpressions_gt?: InputMaybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  totalImpressions_gte?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  totalImpressions_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  totalImpressions_lt?: InputMaybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  totalImpressions_lte?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  totalImpressions_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  totalImpressions_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string. */
  totalImpressions_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  totalImpressions_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  totalImpressions_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  totalImpressions_starts_with?: InputMaybe<Scalars['String']>;
  transactionCount?: InputMaybe<Scalars['Int']>;
  /** All values greater than the given value. */
  transactionCount_gt?: InputMaybe<Scalars['Int']>;
  /** All values greater than or equal the given value. */
  transactionCount_gte?: InputMaybe<Scalars['Int']>;
  /** All values that are contained in given list. */
  transactionCount_in?: InputMaybe<Array<Scalars['Int']>>;
  /** All values less than the given value. */
  transactionCount_lt?: InputMaybe<Scalars['Int']>;
  /** All values less than or equal the given value. */
  transactionCount_lte?: InputMaybe<Scalars['Int']>;
  /** All values that are not equal to given value. */
  transactionCount_not?: InputMaybe<Scalars['Int']>;
  /** All values that are not contained in given list. */
  transactionCount_not_in?: InputMaybe<Array<Scalars['Int']>>;
  transactionTotal?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  transactionTotal_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  transactionTotal_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  transactionTotal_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  transactionTotal_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  transactionTotal_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  transactionTotal_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  transactionTotal_not_in?: InputMaybe<Array<Scalars['Float']>>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  userCost?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  userCost_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  userCost_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  userCost_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  userCost_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  userCost_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  userCost_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  userCost_not_in?: InputMaybe<Array<Scalars['Float']>>;
  utcISODate?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  utcISODate_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  utcISODate_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  utcISODate_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  utcISODate_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  utcISODate_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  utcISODate_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  utcISODate_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  walkIns?: InputMaybe<Scalars['Int']>;
  /** All values greater than the given value. */
  walkIns_gt?: InputMaybe<Scalars['Int']>;
  /** All values greater than or equal the given value. */
  walkIns_gte?: InputMaybe<Scalars['Int']>;
  /** All values that are contained in given list. */
  walkIns_in?: InputMaybe<Array<Scalars['Int']>>;
  /** All values less than the given value. */
  walkIns_lt?: InputMaybe<Scalars['Int']>;
  /** All values less than or equal the given value. */
  walkIns_lte?: InputMaybe<Scalars['Int']>;
  /** All values that are not equal to given value. */
  walkIns_not?: InputMaybe<Scalars['Int']>;
  /** All values that are not contained in given list. */
  walkIns_not_in?: InputMaybe<Array<Scalars['Int']>>;
  xAxis?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  xAxis_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  xAxis_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  xAxis_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  xAxis_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  xAxis_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  xAxis_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  xAxis_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
};

export type DisplayReportDateUnitWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
  key?: InputMaybe<Scalars['String']>;
};

export type DistributionConfig = Node & {
  __typename?: 'DistributionConfig';
  DSP: DemandSidePlatform;
  audience?: Maybe<Audience>;
  id: Scalars['ID'];
  providerSegmentId: Scalars['String'];
};

export type DistributionConfigCreateManyWithoutAudienceInput = {
  connect?: InputMaybe<Array<DistributionConfigWhereUniqueInput>>;
  create?: InputMaybe<Array<DistributionConfigCreateWithoutAudienceInput>>;
};

export type DistributionConfigCreateWithoutAudienceInput = {
  DSP: DemandSidePlatform;
  providerSegmentId: Scalars['String'];
};

export enum DistributionConfigOrderByInput {
  DspAsc = 'DSP_ASC',
  DspDesc = 'DSP_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  ProviderSegmentIdAsc = 'providerSegmentId_ASC',
  ProviderSegmentIdDesc = 'providerSegmentId_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC'
}

export type DistributionConfigUpdateManyWithoutAudienceInput = {
  connect?: InputMaybe<Array<DistributionConfigWhereUniqueInput>>;
  create?: InputMaybe<Array<DistributionConfigCreateWithoutAudienceInput>>;
  delete?: InputMaybe<Array<DistributionConfigWhereUniqueInput>>;
  disconnect?: InputMaybe<Array<DistributionConfigWhereUniqueInput>>;
  update?: InputMaybe<Array<DistributionConfigUpdateWithWhereUniqueWithoutAudienceInput>>;
  upsert?: InputMaybe<Array<DistributionConfigUpsertWithWhereUniqueWithoutAudienceInput>>;
};

export type DistributionConfigUpdateWithWhereUniqueWithoutAudienceInput = {
  data: DistributionConfigUpdateWithoutAudienceDataInput;
  where: DistributionConfigWhereUniqueInput;
};

export type DistributionConfigUpdateWithoutAudienceDataInput = {
  DSP?: InputMaybe<DemandSidePlatform>;
  providerSegmentId?: InputMaybe<Scalars['String']>;
};

export type DistributionConfigUpsertWithWhereUniqueWithoutAudienceInput = {
  create: DistributionConfigCreateWithoutAudienceInput;
  update: DistributionConfigUpdateWithoutAudienceDataInput;
  where: DistributionConfigWhereUniqueInput;
};

export type DistributionConfigWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<DistributionConfigWhereInput>>;
  DSP?: InputMaybe<DemandSidePlatform>;
  /** All values that are contained in given list. */
  DSP_in?: InputMaybe<Array<DemandSidePlatform>>;
  /** All values that are not equal to given value. */
  DSP_not?: InputMaybe<DemandSidePlatform>;
  /** All values that are not contained in given list. */
  DSP_not_in?: InputMaybe<Array<DemandSidePlatform>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<DistributionConfigWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<DistributionConfigWhereInput>>;
  audience?: InputMaybe<AudienceWhereInput>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: InputMaybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: InputMaybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: InputMaybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  providerSegmentId?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  providerSegmentId_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  providerSegmentId_ends_with?: InputMaybe<Scalars['String']>;
  /** All values greater than the given value. */
  providerSegmentId_gt?: InputMaybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  providerSegmentId_gte?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  providerSegmentId_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  providerSegmentId_lt?: InputMaybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  providerSegmentId_lte?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  providerSegmentId_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  providerSegmentId_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string. */
  providerSegmentId_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  providerSegmentId_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  providerSegmentId_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  providerSegmentId_starts_with?: InputMaybe<Scalars['String']>;
};

export type DistributionConfigWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export type Event = Node & {
  __typename?: 'Event';
  attending?: Maybe<Array<User>>;
  createdAt: Scalars['DateTime'];
  createdBy?: Maybe<User>;
  description: Scalars['String'];
  endDate: Scalars['DateTime'];
  featuredMedia?: Maybe<Media>;
  id: Scalars['ID'];
  isPublished: Scalars['Boolean'];
  location?: Maybe<Location>;
  maybe?: Maybe<Array<User>>;
  name: Scalars['String'];
  orgs?: Maybe<Array<Org>>;
  recurring: Scalars['Boolean'];
  recurringArray: Array<Scalars['String']>;
  startDate: Scalars['DateTime'];
  tickets?: Maybe<Array<Tickets>>;
  updatedAt: Scalars['DateTime'];
};


export type EventAttendingArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<UserOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<UserWhereInput>;
};


export type EventMaybeArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<UserOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<UserWhereInput>;
};


export type EventOrgsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<OrgOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<OrgWhereInput>;
};


export type EventTicketsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<TicketsOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<TicketsWhereInput>;
};

export type EventCreateManyWithoutCreatedByInput = {
  connect?: InputMaybe<Array<EventWhereUniqueInput>>;
  create?: InputMaybe<Array<EventCreateWithoutCreatedByInput>>;
};

export type EventCreateManyWithoutLocationInput = {
  connect?: InputMaybe<Array<EventWhereUniqueInput>>;
  create?: InputMaybe<Array<EventCreateWithoutLocationInput>>;
};

export type EventCreateOneWithoutOrgsInput = {
  connect?: InputMaybe<EventWhereUniqueInput>;
  create?: InputMaybe<EventCreateWithoutOrgsInput>;
};

export type EventCreateOneWithoutTicketsInput = {
  connect?: InputMaybe<EventWhereUniqueInput>;
  create?: InputMaybe<EventCreateWithoutTicketsInput>;
};

export type EventCreateWithoutCreatedByInput = {
  attending?: InputMaybe<UserCreateManyInput>;
  description: Scalars['String'];
  endDate: Scalars['DateTime'];
  featuredMedia?: InputMaybe<MediaCreateOneInput>;
  isPublished?: InputMaybe<Scalars['Boolean']>;
  location?: InputMaybe<LocationCreateOneWithoutEventsInput>;
  maybe?: InputMaybe<UserCreateManyInput>;
  name: Scalars['String'];
  orgs?: InputMaybe<OrgCreateManyWithoutEventInput>;
  recurring: Scalars['Boolean'];
  recurringArray?: InputMaybe<EventCreaterecurringArrayInput>;
  startDate: Scalars['DateTime'];
  tickets?: InputMaybe<TicketsCreateManyWithoutEventInput>;
};

export type EventCreateWithoutLocationInput = {
  attending?: InputMaybe<UserCreateManyInput>;
  createdBy?: InputMaybe<UserCreateOneWithoutEventsInput>;
  description: Scalars['String'];
  endDate: Scalars['DateTime'];
  featuredMedia?: InputMaybe<MediaCreateOneInput>;
  isPublished?: InputMaybe<Scalars['Boolean']>;
  maybe?: InputMaybe<UserCreateManyInput>;
  name: Scalars['String'];
  orgs?: InputMaybe<OrgCreateManyWithoutEventInput>;
  recurring: Scalars['Boolean'];
  recurringArray?: InputMaybe<EventCreaterecurringArrayInput>;
  startDate: Scalars['DateTime'];
  tickets?: InputMaybe<TicketsCreateManyWithoutEventInput>;
};

export type EventCreateWithoutOrgsInput = {
  attending?: InputMaybe<UserCreateManyInput>;
  createdBy?: InputMaybe<UserCreateOneWithoutEventsInput>;
  description: Scalars['String'];
  endDate: Scalars['DateTime'];
  featuredMedia?: InputMaybe<MediaCreateOneInput>;
  isPublished?: InputMaybe<Scalars['Boolean']>;
  location?: InputMaybe<LocationCreateOneWithoutEventsInput>;
  maybe?: InputMaybe<UserCreateManyInput>;
  name: Scalars['String'];
  recurring: Scalars['Boolean'];
  recurringArray?: InputMaybe<EventCreaterecurringArrayInput>;
  startDate: Scalars['DateTime'];
  tickets?: InputMaybe<TicketsCreateManyWithoutEventInput>;
};

export type EventCreateWithoutTicketsInput = {
  attending?: InputMaybe<UserCreateManyInput>;
  createdBy?: InputMaybe<UserCreateOneWithoutEventsInput>;
  description: Scalars['String'];
  endDate: Scalars['DateTime'];
  featuredMedia?: InputMaybe<MediaCreateOneInput>;
  isPublished?: InputMaybe<Scalars['Boolean']>;
  location?: InputMaybe<LocationCreateOneWithoutEventsInput>;
  maybe?: InputMaybe<UserCreateManyInput>;
  name: Scalars['String'];
  orgs?: InputMaybe<OrgCreateManyWithoutEventInput>;
  recurring: Scalars['Boolean'];
  recurringArray?: InputMaybe<EventCreaterecurringArrayInput>;
  startDate: Scalars['DateTime'];
};

export type EventCreaterecurringArrayInput = {
  set?: InputMaybe<Array<Scalars['String']>>;
};

export enum EventOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DescriptionAsc = 'description_ASC',
  DescriptionDesc = 'description_DESC',
  EndDateAsc = 'endDate_ASC',
  EndDateDesc = 'endDate_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  IsPublishedAsc = 'isPublished_ASC',
  IsPublishedDesc = 'isPublished_DESC',
  NameAsc = 'name_ASC',
  NameDesc = 'name_DESC',
  RecurringAsc = 'recurring_ASC',
  RecurringDesc = 'recurring_DESC',
  StartDateAsc = 'startDate_ASC',
  StartDateDesc = 'startDate_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC'
}

export type EventUpdateManyWithoutCreatedByInput = {
  connect?: InputMaybe<Array<EventWhereUniqueInput>>;
  create?: InputMaybe<Array<EventCreateWithoutCreatedByInput>>;
  delete?: InputMaybe<Array<EventWhereUniqueInput>>;
  disconnect?: InputMaybe<Array<EventWhereUniqueInput>>;
  update?: InputMaybe<Array<EventUpdateWithWhereUniqueWithoutCreatedByInput>>;
  upsert?: InputMaybe<Array<EventUpsertWithWhereUniqueWithoutCreatedByInput>>;
};

export type EventUpdateManyWithoutLocationInput = {
  connect?: InputMaybe<Array<EventWhereUniqueInput>>;
  create?: InputMaybe<Array<EventCreateWithoutLocationInput>>;
  delete?: InputMaybe<Array<EventWhereUniqueInput>>;
  disconnect?: InputMaybe<Array<EventWhereUniqueInput>>;
  update?: InputMaybe<Array<EventUpdateWithWhereUniqueWithoutLocationInput>>;
  upsert?: InputMaybe<Array<EventUpsertWithWhereUniqueWithoutLocationInput>>;
};

export type EventUpdateOneWithoutOrgsInput = {
  connect?: InputMaybe<EventWhereUniqueInput>;
  create?: InputMaybe<EventCreateWithoutOrgsInput>;
  delete?: InputMaybe<Scalars['Boolean']>;
  disconnect?: InputMaybe<Scalars['Boolean']>;
  update?: InputMaybe<EventUpdateWithoutOrgsDataInput>;
  upsert?: InputMaybe<EventUpsertWithoutOrgsInput>;
};

export type EventUpdateOneWithoutTicketsInput = {
  connect?: InputMaybe<EventWhereUniqueInput>;
  create?: InputMaybe<EventCreateWithoutTicketsInput>;
  delete?: InputMaybe<Scalars['Boolean']>;
  disconnect?: InputMaybe<Scalars['Boolean']>;
  update?: InputMaybe<EventUpdateWithoutTicketsDataInput>;
  upsert?: InputMaybe<EventUpsertWithoutTicketsInput>;
};

export type EventUpdateWithWhereUniqueWithoutCreatedByInput = {
  data: EventUpdateWithoutCreatedByDataInput;
  where: EventWhereUniqueInput;
};

export type EventUpdateWithWhereUniqueWithoutLocationInput = {
  data: EventUpdateWithoutLocationDataInput;
  where: EventWhereUniqueInput;
};

export type EventUpdateWithoutCreatedByDataInput = {
  attending?: InputMaybe<UserUpdateManyInput>;
  description?: InputMaybe<Scalars['String']>;
  endDate?: InputMaybe<Scalars['DateTime']>;
  featuredMedia?: InputMaybe<MediaUpdateOneInput>;
  isPublished?: InputMaybe<Scalars['Boolean']>;
  location?: InputMaybe<LocationUpdateOneWithoutEventsInput>;
  maybe?: InputMaybe<UserUpdateManyInput>;
  name?: InputMaybe<Scalars['String']>;
  orgs?: InputMaybe<OrgUpdateManyWithoutEventInput>;
  recurring?: InputMaybe<Scalars['Boolean']>;
  recurringArray?: InputMaybe<EventUpdaterecurringArrayInput>;
  startDate?: InputMaybe<Scalars['DateTime']>;
  tickets?: InputMaybe<TicketsUpdateManyWithoutEventInput>;
};

export type EventUpdateWithoutLocationDataInput = {
  attending?: InputMaybe<UserUpdateManyInput>;
  createdBy?: InputMaybe<UserUpdateOneWithoutEventsInput>;
  description?: InputMaybe<Scalars['String']>;
  endDate?: InputMaybe<Scalars['DateTime']>;
  featuredMedia?: InputMaybe<MediaUpdateOneInput>;
  isPublished?: InputMaybe<Scalars['Boolean']>;
  maybe?: InputMaybe<UserUpdateManyInput>;
  name?: InputMaybe<Scalars['String']>;
  orgs?: InputMaybe<OrgUpdateManyWithoutEventInput>;
  recurring?: InputMaybe<Scalars['Boolean']>;
  recurringArray?: InputMaybe<EventUpdaterecurringArrayInput>;
  startDate?: InputMaybe<Scalars['DateTime']>;
  tickets?: InputMaybe<TicketsUpdateManyWithoutEventInput>;
};

export type EventUpdateWithoutOrgsDataInput = {
  attending?: InputMaybe<UserUpdateManyInput>;
  createdBy?: InputMaybe<UserUpdateOneWithoutEventsInput>;
  description?: InputMaybe<Scalars['String']>;
  endDate?: InputMaybe<Scalars['DateTime']>;
  featuredMedia?: InputMaybe<MediaUpdateOneInput>;
  isPublished?: InputMaybe<Scalars['Boolean']>;
  location?: InputMaybe<LocationUpdateOneWithoutEventsInput>;
  maybe?: InputMaybe<UserUpdateManyInput>;
  name?: InputMaybe<Scalars['String']>;
  recurring?: InputMaybe<Scalars['Boolean']>;
  recurringArray?: InputMaybe<EventUpdaterecurringArrayInput>;
  startDate?: InputMaybe<Scalars['DateTime']>;
  tickets?: InputMaybe<TicketsUpdateManyWithoutEventInput>;
};

export type EventUpdateWithoutTicketsDataInput = {
  attending?: InputMaybe<UserUpdateManyInput>;
  createdBy?: InputMaybe<UserUpdateOneWithoutEventsInput>;
  description?: InputMaybe<Scalars['String']>;
  endDate?: InputMaybe<Scalars['DateTime']>;
  featuredMedia?: InputMaybe<MediaUpdateOneInput>;
  isPublished?: InputMaybe<Scalars['Boolean']>;
  location?: InputMaybe<LocationUpdateOneWithoutEventsInput>;
  maybe?: InputMaybe<UserUpdateManyInput>;
  name?: InputMaybe<Scalars['String']>;
  orgs?: InputMaybe<OrgUpdateManyWithoutEventInput>;
  recurring?: InputMaybe<Scalars['Boolean']>;
  recurringArray?: InputMaybe<EventUpdaterecurringArrayInput>;
  startDate?: InputMaybe<Scalars['DateTime']>;
};

export type EventUpdaterecurringArrayInput = {
  set?: InputMaybe<Array<Scalars['String']>>;
};

export type EventUpsertWithWhereUniqueWithoutCreatedByInput = {
  create: EventCreateWithoutCreatedByInput;
  update: EventUpdateWithoutCreatedByDataInput;
  where: EventWhereUniqueInput;
};

export type EventUpsertWithWhereUniqueWithoutLocationInput = {
  create: EventCreateWithoutLocationInput;
  update: EventUpdateWithoutLocationDataInput;
  where: EventWhereUniqueInput;
};

export type EventUpsertWithoutOrgsInput = {
  create: EventCreateWithoutOrgsInput;
  update: EventUpdateWithoutOrgsDataInput;
};

export type EventUpsertWithoutTicketsInput = {
  create: EventCreateWithoutTicketsInput;
  update: EventUpdateWithoutTicketsDataInput;
};

export type EventWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<EventWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<EventWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<EventWhereInput>>;
  attending_every?: InputMaybe<UserWhereInput>;
  attending_none?: InputMaybe<UserWhereInput>;
  attending_some?: InputMaybe<UserWhereInput>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  createdBy?: InputMaybe<UserWhereInput>;
  description?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  description_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  description_ends_with?: InputMaybe<Scalars['String']>;
  /** All values greater than the given value. */
  description_gt?: InputMaybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  description_gte?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  description_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  description_lt?: InputMaybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  description_lte?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  description_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  description_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string. */
  description_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  description_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  description_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  description_starts_with?: InputMaybe<Scalars['String']>;
  endDate?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  endDate_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  endDate_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  endDate_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  endDate_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  endDate_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  endDate_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  endDate_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  featuredMedia?: InputMaybe<MediaWhereInput>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: InputMaybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: InputMaybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: InputMaybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  isPublished?: InputMaybe<Scalars['Boolean']>;
  /** All values that are not equal to given value. */
  isPublished_not?: InputMaybe<Scalars['Boolean']>;
  location?: InputMaybe<LocationWhereInput>;
  maybe_every?: InputMaybe<UserWhereInput>;
  maybe_none?: InputMaybe<UserWhereInput>;
  maybe_some?: InputMaybe<UserWhereInput>;
  name?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  name_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  name_ends_with?: InputMaybe<Scalars['String']>;
  /** All values greater than the given value. */
  name_gt?: InputMaybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  name_gte?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  name_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  name_lt?: InputMaybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  name_lte?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  name_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  name_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string. */
  name_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  name_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  name_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  name_starts_with?: InputMaybe<Scalars['String']>;
  orgs_every?: InputMaybe<OrgWhereInput>;
  orgs_none?: InputMaybe<OrgWhereInput>;
  orgs_some?: InputMaybe<OrgWhereInput>;
  recurring?: InputMaybe<Scalars['Boolean']>;
  /** All values that are not equal to given value. */
  recurring_not?: InputMaybe<Scalars['Boolean']>;
  startDate?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  startDate_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  startDate_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  startDate_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  startDate_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  startDate_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  startDate_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  startDate_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  tickets_every?: InputMaybe<TicketsWhereInput>;
  tickets_none?: InputMaybe<TicketsWhereInput>;
  tickets_some?: InputMaybe<TicketsWhereInput>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
};

export type EventWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export type EventsTarget = Node & {
  __typename?: 'EventsTarget';
  audiences?: Maybe<Array<Audience>>;
  changeLog?: Maybe<Array<Change>>;
  createdAt: Scalars['DateTime'];
  description?: Maybe<Scalars['String']>;
  end?: Maybe<Scalars['DateTime']>;
  eventTags?: Maybe<Array<AdTag>>;
  expandedReach?: Maybe<Scalars['Int']>;
  id: Scalars['ID'];
  name?: Maybe<Scalars['String']>;
  observations?: Maybe<Scalars['Int']>;
  orgs?: Maybe<Array<Org>>;
  reports?: Maybe<Array<CampaignReport>>;
  start?: Maybe<Scalars['DateTime']>;
  tags: Array<Scalars['String']>;
  uniqueDevices?: Maybe<Scalars['Int']>;
  updatedAt: Scalars['DateTime'];
};


export type EventsTargetAudiencesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<AudienceOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<AudienceWhereInput>;
};


export type EventsTargetChangeLogArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ChangeOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ChangeWhereInput>;
};


export type EventsTargetEventTagsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<AdTagOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<AdTagWhereInput>;
};


export type EventsTargetOrgsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<OrgOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<OrgWhereInput>;
};


export type EventsTargetReportsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<CampaignReportOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<CampaignReportWhereInput>;
};

/** A connection to a list of items. */
export type EventsTargetConnection = {
  __typename?: 'EventsTargetConnection';
  aggregate: AggregateEventsTarget;
  /** A list of edges. */
  edges: Array<Maybe<EventsTargetEdge>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type EventsTargetCreateInput = {
  audiences?: InputMaybe<AudienceCreateManyWithoutEventsTargetsInput>;
  changeLog?: InputMaybe<ChangeCreateManyWithoutEventsTargetInput>;
  description?: InputMaybe<Scalars['String']>;
  end?: InputMaybe<Scalars['DateTime']>;
  eventTags?: InputMaybe<AdTagCreateManyWithoutEventsTargetInput>;
  expandedReach?: InputMaybe<Scalars['Int']>;
  name?: InputMaybe<Scalars['String']>;
  observations?: InputMaybe<Scalars['Int']>;
  orgs?: InputMaybe<OrgCreateManyWithoutEventsTargetInput>;
  reports?: InputMaybe<CampaignReportCreateManyWithoutEventsTargetSegmentInput>;
  start?: InputMaybe<Scalars['DateTime']>;
  tags?: InputMaybe<EventsTargetCreatetagsInput>;
  uniqueDevices?: InputMaybe<Scalars['Int']>;
};

export type EventsTargetCreateManyWithoutAudiencesInput = {
  connect?: InputMaybe<Array<EventsTargetWhereUniqueInput>>;
  create?: InputMaybe<Array<EventsTargetCreateWithoutAudiencesInput>>;
};

export type EventsTargetCreateOneWithoutChangeLogInput = {
  connect?: InputMaybe<EventsTargetWhereUniqueInput>;
  create?: InputMaybe<EventsTargetCreateWithoutChangeLogInput>;
};

export type EventsTargetCreateOneWithoutEventTagsInput = {
  connect?: InputMaybe<EventsTargetWhereUniqueInput>;
  create?: InputMaybe<EventsTargetCreateWithoutEventTagsInput>;
};

export type EventsTargetCreateOneWithoutOrgsInput = {
  connect?: InputMaybe<EventsTargetWhereUniqueInput>;
  create?: InputMaybe<EventsTargetCreateWithoutOrgsInput>;
};

export type EventsTargetCreateOneWithoutReportsInput = {
  connect?: InputMaybe<EventsTargetWhereUniqueInput>;
  create?: InputMaybe<EventsTargetCreateWithoutReportsInput>;
};

export type EventsTargetCreateWithoutAudiencesInput = {
  changeLog?: InputMaybe<ChangeCreateManyWithoutEventsTargetInput>;
  description?: InputMaybe<Scalars['String']>;
  end?: InputMaybe<Scalars['DateTime']>;
  eventTags?: InputMaybe<AdTagCreateManyWithoutEventsTargetInput>;
  expandedReach?: InputMaybe<Scalars['Int']>;
  name?: InputMaybe<Scalars['String']>;
  observations?: InputMaybe<Scalars['Int']>;
  orgs?: InputMaybe<OrgCreateManyWithoutEventsTargetInput>;
  reports?: InputMaybe<CampaignReportCreateManyWithoutEventsTargetSegmentInput>;
  start?: InputMaybe<Scalars['DateTime']>;
  tags?: InputMaybe<EventsTargetCreatetagsInput>;
  uniqueDevices?: InputMaybe<Scalars['Int']>;
};

export type EventsTargetCreateWithoutChangeLogInput = {
  audiences?: InputMaybe<AudienceCreateManyWithoutEventsTargetsInput>;
  description?: InputMaybe<Scalars['String']>;
  end?: InputMaybe<Scalars['DateTime']>;
  eventTags?: InputMaybe<AdTagCreateManyWithoutEventsTargetInput>;
  expandedReach?: InputMaybe<Scalars['Int']>;
  name?: InputMaybe<Scalars['String']>;
  observations?: InputMaybe<Scalars['Int']>;
  orgs?: InputMaybe<OrgCreateManyWithoutEventsTargetInput>;
  reports?: InputMaybe<CampaignReportCreateManyWithoutEventsTargetSegmentInput>;
  start?: InputMaybe<Scalars['DateTime']>;
  tags?: InputMaybe<EventsTargetCreatetagsInput>;
  uniqueDevices?: InputMaybe<Scalars['Int']>;
};

export type EventsTargetCreateWithoutEventTagsInput = {
  audiences?: InputMaybe<AudienceCreateManyWithoutEventsTargetsInput>;
  changeLog?: InputMaybe<ChangeCreateManyWithoutEventsTargetInput>;
  description?: InputMaybe<Scalars['String']>;
  end?: InputMaybe<Scalars['DateTime']>;
  expandedReach?: InputMaybe<Scalars['Int']>;
  name?: InputMaybe<Scalars['String']>;
  observations?: InputMaybe<Scalars['Int']>;
  orgs?: InputMaybe<OrgCreateManyWithoutEventsTargetInput>;
  reports?: InputMaybe<CampaignReportCreateManyWithoutEventsTargetSegmentInput>;
  start?: InputMaybe<Scalars['DateTime']>;
  tags?: InputMaybe<EventsTargetCreatetagsInput>;
  uniqueDevices?: InputMaybe<Scalars['Int']>;
};

export type EventsTargetCreateWithoutOrgsInput = {
  audiences?: InputMaybe<AudienceCreateManyWithoutEventsTargetsInput>;
  changeLog?: InputMaybe<ChangeCreateManyWithoutEventsTargetInput>;
  description?: InputMaybe<Scalars['String']>;
  end?: InputMaybe<Scalars['DateTime']>;
  eventTags?: InputMaybe<AdTagCreateManyWithoutEventsTargetInput>;
  expandedReach?: InputMaybe<Scalars['Int']>;
  name?: InputMaybe<Scalars['String']>;
  observations?: InputMaybe<Scalars['Int']>;
  reports?: InputMaybe<CampaignReportCreateManyWithoutEventsTargetSegmentInput>;
  start?: InputMaybe<Scalars['DateTime']>;
  tags?: InputMaybe<EventsTargetCreatetagsInput>;
  uniqueDevices?: InputMaybe<Scalars['Int']>;
};

export type EventsTargetCreateWithoutReportsInput = {
  audiences?: InputMaybe<AudienceCreateManyWithoutEventsTargetsInput>;
  changeLog?: InputMaybe<ChangeCreateManyWithoutEventsTargetInput>;
  description?: InputMaybe<Scalars['String']>;
  end?: InputMaybe<Scalars['DateTime']>;
  eventTags?: InputMaybe<AdTagCreateManyWithoutEventsTargetInput>;
  expandedReach?: InputMaybe<Scalars['Int']>;
  name?: InputMaybe<Scalars['String']>;
  observations?: InputMaybe<Scalars['Int']>;
  orgs?: InputMaybe<OrgCreateManyWithoutEventsTargetInput>;
  start?: InputMaybe<Scalars['DateTime']>;
  tags?: InputMaybe<EventsTargetCreatetagsInput>;
  uniqueDevices?: InputMaybe<Scalars['Int']>;
};

export type EventsTargetCreatetagsInput = {
  set?: InputMaybe<Array<Scalars['String']>>;
};

/** An edge in a connection. */
export type EventsTargetEdge = {
  __typename?: 'EventsTargetEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: EventsTarget;
};

export enum EventsTargetOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DescriptionAsc = 'description_ASC',
  DescriptionDesc = 'description_DESC',
  EndAsc = 'end_ASC',
  EndDesc = 'end_DESC',
  ExpandedReachAsc = 'expandedReach_ASC',
  ExpandedReachDesc = 'expandedReach_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  NameAsc = 'name_ASC',
  NameDesc = 'name_DESC',
  ObservationsAsc = 'observations_ASC',
  ObservationsDesc = 'observations_DESC',
  StartAsc = 'start_ASC',
  StartDesc = 'start_DESC',
  UniqueDevicesAsc = 'uniqueDevices_ASC',
  UniqueDevicesDesc = 'uniqueDevices_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC'
}

export type EventsTargetUpdateInput = {
  audiences?: InputMaybe<AudienceUpdateManyWithoutEventsTargetsInput>;
  changeLog?: InputMaybe<ChangeUpdateManyWithoutEventsTargetInput>;
  description?: InputMaybe<Scalars['String']>;
  end?: InputMaybe<Scalars['DateTime']>;
  eventTags?: InputMaybe<AdTagUpdateManyWithoutEventsTargetInput>;
  expandedReach?: InputMaybe<Scalars['Int']>;
  name?: InputMaybe<Scalars['String']>;
  observations?: InputMaybe<Scalars['Int']>;
  orgs?: InputMaybe<OrgUpdateManyWithoutEventsTargetInput>;
  reports?: InputMaybe<CampaignReportUpdateManyWithoutEventsTargetSegmentInput>;
  start?: InputMaybe<Scalars['DateTime']>;
  tags?: InputMaybe<EventsTargetUpdatetagsInput>;
  uniqueDevices?: InputMaybe<Scalars['Int']>;
};

export type EventsTargetUpdateManyWithoutAudiencesInput = {
  connect?: InputMaybe<Array<EventsTargetWhereUniqueInput>>;
  create?: InputMaybe<Array<EventsTargetCreateWithoutAudiencesInput>>;
  delete?: InputMaybe<Array<EventsTargetWhereUniqueInput>>;
  disconnect?: InputMaybe<Array<EventsTargetWhereUniqueInput>>;
  update?: InputMaybe<Array<EventsTargetUpdateWithWhereUniqueWithoutAudiencesInput>>;
  upsert?: InputMaybe<Array<EventsTargetUpsertWithWhereUniqueWithoutAudiencesInput>>;
};

export type EventsTargetUpdateOneWithoutChangeLogInput = {
  connect?: InputMaybe<EventsTargetWhereUniqueInput>;
  create?: InputMaybe<EventsTargetCreateWithoutChangeLogInput>;
  delete?: InputMaybe<Scalars['Boolean']>;
  disconnect?: InputMaybe<Scalars['Boolean']>;
  update?: InputMaybe<EventsTargetUpdateWithoutChangeLogDataInput>;
  upsert?: InputMaybe<EventsTargetUpsertWithoutChangeLogInput>;
};

export type EventsTargetUpdateOneWithoutEventTagsInput = {
  connect?: InputMaybe<EventsTargetWhereUniqueInput>;
  create?: InputMaybe<EventsTargetCreateWithoutEventTagsInput>;
  delete?: InputMaybe<Scalars['Boolean']>;
  disconnect?: InputMaybe<Scalars['Boolean']>;
  update?: InputMaybe<EventsTargetUpdateWithoutEventTagsDataInput>;
  upsert?: InputMaybe<EventsTargetUpsertWithoutEventTagsInput>;
};

export type EventsTargetUpdateOneWithoutOrgsInput = {
  connect?: InputMaybe<EventsTargetWhereUniqueInput>;
  create?: InputMaybe<EventsTargetCreateWithoutOrgsInput>;
  delete?: InputMaybe<Scalars['Boolean']>;
  disconnect?: InputMaybe<Scalars['Boolean']>;
  update?: InputMaybe<EventsTargetUpdateWithoutOrgsDataInput>;
  upsert?: InputMaybe<EventsTargetUpsertWithoutOrgsInput>;
};

export type EventsTargetUpdateOneWithoutReportsInput = {
  connect?: InputMaybe<EventsTargetWhereUniqueInput>;
  create?: InputMaybe<EventsTargetCreateWithoutReportsInput>;
  delete?: InputMaybe<Scalars['Boolean']>;
  disconnect?: InputMaybe<Scalars['Boolean']>;
  update?: InputMaybe<EventsTargetUpdateWithoutReportsDataInput>;
  upsert?: InputMaybe<EventsTargetUpsertWithoutReportsInput>;
};

export type EventsTargetUpdateWithWhereUniqueWithoutAudiencesInput = {
  data: EventsTargetUpdateWithoutAudiencesDataInput;
  where: EventsTargetWhereUniqueInput;
};

export type EventsTargetUpdateWithoutAudiencesDataInput = {
  changeLog?: InputMaybe<ChangeUpdateManyWithoutEventsTargetInput>;
  description?: InputMaybe<Scalars['String']>;
  end?: InputMaybe<Scalars['DateTime']>;
  eventTags?: InputMaybe<AdTagUpdateManyWithoutEventsTargetInput>;
  expandedReach?: InputMaybe<Scalars['Int']>;
  name?: InputMaybe<Scalars['String']>;
  observations?: InputMaybe<Scalars['Int']>;
  orgs?: InputMaybe<OrgUpdateManyWithoutEventsTargetInput>;
  reports?: InputMaybe<CampaignReportUpdateManyWithoutEventsTargetSegmentInput>;
  start?: InputMaybe<Scalars['DateTime']>;
  tags?: InputMaybe<EventsTargetUpdatetagsInput>;
  uniqueDevices?: InputMaybe<Scalars['Int']>;
};

export type EventsTargetUpdateWithoutChangeLogDataInput = {
  audiences?: InputMaybe<AudienceUpdateManyWithoutEventsTargetsInput>;
  description?: InputMaybe<Scalars['String']>;
  end?: InputMaybe<Scalars['DateTime']>;
  eventTags?: InputMaybe<AdTagUpdateManyWithoutEventsTargetInput>;
  expandedReach?: InputMaybe<Scalars['Int']>;
  name?: InputMaybe<Scalars['String']>;
  observations?: InputMaybe<Scalars['Int']>;
  orgs?: InputMaybe<OrgUpdateManyWithoutEventsTargetInput>;
  reports?: InputMaybe<CampaignReportUpdateManyWithoutEventsTargetSegmentInput>;
  start?: InputMaybe<Scalars['DateTime']>;
  tags?: InputMaybe<EventsTargetUpdatetagsInput>;
  uniqueDevices?: InputMaybe<Scalars['Int']>;
};

export type EventsTargetUpdateWithoutEventTagsDataInput = {
  audiences?: InputMaybe<AudienceUpdateManyWithoutEventsTargetsInput>;
  changeLog?: InputMaybe<ChangeUpdateManyWithoutEventsTargetInput>;
  description?: InputMaybe<Scalars['String']>;
  end?: InputMaybe<Scalars['DateTime']>;
  expandedReach?: InputMaybe<Scalars['Int']>;
  name?: InputMaybe<Scalars['String']>;
  observations?: InputMaybe<Scalars['Int']>;
  orgs?: InputMaybe<OrgUpdateManyWithoutEventsTargetInput>;
  reports?: InputMaybe<CampaignReportUpdateManyWithoutEventsTargetSegmentInput>;
  start?: InputMaybe<Scalars['DateTime']>;
  tags?: InputMaybe<EventsTargetUpdatetagsInput>;
  uniqueDevices?: InputMaybe<Scalars['Int']>;
};

export type EventsTargetUpdateWithoutOrgsDataInput = {
  audiences?: InputMaybe<AudienceUpdateManyWithoutEventsTargetsInput>;
  changeLog?: InputMaybe<ChangeUpdateManyWithoutEventsTargetInput>;
  description?: InputMaybe<Scalars['String']>;
  end?: InputMaybe<Scalars['DateTime']>;
  eventTags?: InputMaybe<AdTagUpdateManyWithoutEventsTargetInput>;
  expandedReach?: InputMaybe<Scalars['Int']>;
  name?: InputMaybe<Scalars['String']>;
  observations?: InputMaybe<Scalars['Int']>;
  reports?: InputMaybe<CampaignReportUpdateManyWithoutEventsTargetSegmentInput>;
  start?: InputMaybe<Scalars['DateTime']>;
  tags?: InputMaybe<EventsTargetUpdatetagsInput>;
  uniqueDevices?: InputMaybe<Scalars['Int']>;
};

export type EventsTargetUpdateWithoutReportsDataInput = {
  audiences?: InputMaybe<AudienceUpdateManyWithoutEventsTargetsInput>;
  changeLog?: InputMaybe<ChangeUpdateManyWithoutEventsTargetInput>;
  description?: InputMaybe<Scalars['String']>;
  end?: InputMaybe<Scalars['DateTime']>;
  eventTags?: InputMaybe<AdTagUpdateManyWithoutEventsTargetInput>;
  expandedReach?: InputMaybe<Scalars['Int']>;
  name?: InputMaybe<Scalars['String']>;
  observations?: InputMaybe<Scalars['Int']>;
  orgs?: InputMaybe<OrgUpdateManyWithoutEventsTargetInput>;
  start?: InputMaybe<Scalars['DateTime']>;
  tags?: InputMaybe<EventsTargetUpdatetagsInput>;
  uniqueDevices?: InputMaybe<Scalars['Int']>;
};

export type EventsTargetUpdatetagsInput = {
  set?: InputMaybe<Array<Scalars['String']>>;
};

export type EventsTargetUpsertWithWhereUniqueWithoutAudiencesInput = {
  create: EventsTargetCreateWithoutAudiencesInput;
  update: EventsTargetUpdateWithoutAudiencesDataInput;
  where: EventsTargetWhereUniqueInput;
};

export type EventsTargetUpsertWithoutChangeLogInput = {
  create: EventsTargetCreateWithoutChangeLogInput;
  update: EventsTargetUpdateWithoutChangeLogDataInput;
};

export type EventsTargetUpsertWithoutEventTagsInput = {
  create: EventsTargetCreateWithoutEventTagsInput;
  update: EventsTargetUpdateWithoutEventTagsDataInput;
};

export type EventsTargetUpsertWithoutOrgsInput = {
  create: EventsTargetCreateWithoutOrgsInput;
  update: EventsTargetUpdateWithoutOrgsDataInput;
};

export type EventsTargetUpsertWithoutReportsInput = {
  create: EventsTargetCreateWithoutReportsInput;
  update: EventsTargetUpdateWithoutReportsDataInput;
};

export type EventsTargetWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<EventsTargetWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<EventsTargetWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<EventsTargetWhereInput>>;
  audiences_every?: InputMaybe<AudienceWhereInput>;
  audiences_none?: InputMaybe<AudienceWhereInput>;
  audiences_some?: InputMaybe<AudienceWhereInput>;
  changeLog_every?: InputMaybe<ChangeWhereInput>;
  changeLog_none?: InputMaybe<ChangeWhereInput>;
  changeLog_some?: InputMaybe<ChangeWhereInput>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  description?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  description_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  description_ends_with?: InputMaybe<Scalars['String']>;
  /** All values greater than the given value. */
  description_gt?: InputMaybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  description_gte?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  description_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  description_lt?: InputMaybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  description_lte?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  description_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  description_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string. */
  description_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  description_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  description_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  description_starts_with?: InputMaybe<Scalars['String']>;
  end?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  end_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  end_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  end_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  end_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  end_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  end_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  end_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  eventTags_every?: InputMaybe<AdTagWhereInput>;
  eventTags_none?: InputMaybe<AdTagWhereInput>;
  eventTags_some?: InputMaybe<AdTagWhereInput>;
  expandedReach?: InputMaybe<Scalars['Int']>;
  /** All values greater than the given value. */
  expandedReach_gt?: InputMaybe<Scalars['Int']>;
  /** All values greater than or equal the given value. */
  expandedReach_gte?: InputMaybe<Scalars['Int']>;
  /** All values that are contained in given list. */
  expandedReach_in?: InputMaybe<Array<Scalars['Int']>>;
  /** All values less than the given value. */
  expandedReach_lt?: InputMaybe<Scalars['Int']>;
  /** All values less than or equal the given value. */
  expandedReach_lte?: InputMaybe<Scalars['Int']>;
  /** All values that are not equal to given value. */
  expandedReach_not?: InputMaybe<Scalars['Int']>;
  /** All values that are not contained in given list. */
  expandedReach_not_in?: InputMaybe<Array<Scalars['Int']>>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: InputMaybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: InputMaybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: InputMaybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  name?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  name_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  name_ends_with?: InputMaybe<Scalars['String']>;
  /** All values greater than the given value. */
  name_gt?: InputMaybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  name_gte?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  name_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  name_lt?: InputMaybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  name_lte?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  name_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  name_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string. */
  name_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  name_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  name_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  name_starts_with?: InputMaybe<Scalars['String']>;
  observations?: InputMaybe<Scalars['Int']>;
  /** All values greater than the given value. */
  observations_gt?: InputMaybe<Scalars['Int']>;
  /** All values greater than or equal the given value. */
  observations_gte?: InputMaybe<Scalars['Int']>;
  /** All values that are contained in given list. */
  observations_in?: InputMaybe<Array<Scalars['Int']>>;
  /** All values less than the given value. */
  observations_lt?: InputMaybe<Scalars['Int']>;
  /** All values less than or equal the given value. */
  observations_lte?: InputMaybe<Scalars['Int']>;
  /** All values that are not equal to given value. */
  observations_not?: InputMaybe<Scalars['Int']>;
  /** All values that are not contained in given list. */
  observations_not_in?: InputMaybe<Array<Scalars['Int']>>;
  orgs_every?: InputMaybe<OrgWhereInput>;
  orgs_none?: InputMaybe<OrgWhereInput>;
  orgs_some?: InputMaybe<OrgWhereInput>;
  reports_every?: InputMaybe<CampaignReportWhereInput>;
  reports_none?: InputMaybe<CampaignReportWhereInput>;
  reports_some?: InputMaybe<CampaignReportWhereInput>;
  start?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  start_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  start_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  start_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  start_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  start_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  start_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  start_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  uniqueDevices?: InputMaybe<Scalars['Int']>;
  /** All values greater than the given value. */
  uniqueDevices_gt?: InputMaybe<Scalars['Int']>;
  /** All values greater than or equal the given value. */
  uniqueDevices_gte?: InputMaybe<Scalars['Int']>;
  /** All values that are contained in given list. */
  uniqueDevices_in?: InputMaybe<Array<Scalars['Int']>>;
  /** All values less than the given value. */
  uniqueDevices_lt?: InputMaybe<Scalars['Int']>;
  /** All values less than or equal the given value. */
  uniqueDevices_lte?: InputMaybe<Scalars['Int']>;
  /** All values that are not equal to given value. */
  uniqueDevices_not?: InputMaybe<Scalars['Int']>;
  /** All values that are not contained in given list. */
  uniqueDevices_not_in?: InputMaybe<Array<Scalars['Int']>>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
};

export type EventsTargetWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export enum Feature {
  Audiences = 'AUDIENCES',
  Brands = 'BRANDS',
  Campaigns = 'CAMPAIGNS',
  Customers = 'CUSTOMERS',
  Enabled = 'ENABLED',
  Inventory = 'INVENTORY',
  Licensing = 'LICENSING',
  Locations = 'LOCATIONS',
  Loyalty = 'LOYALTY',
  Map = 'MAP',
  Orgs = 'ORGS',
  PaidSearch = 'PAID_SEARCH',
  Products = 'PRODUCTS',
  Segments = 'SEGMENTS',
  Seo = 'SEO',
  Strains = 'STRAINS'
}

export enum FeatureActions {
  Delete = 'DELETE',
  Read = 'READ',
  Upload = 'UPLOAD',
  Write = 'WRITE'
}

export enum FileType {
  Avif = 'AVIF',
  Gif = 'GIF',
  Jpeg = 'JPEG',
  Jpg = 'JPG',
  Mp4 = 'MP4',
  Png = 'PNG'
}

export enum Gender {
  Female = 'FEMALE',
  Male = 'MALE',
  Nonbinary = 'NONBINARY',
  Unknown = 'UNKNOWN'
}

export type GeoTarget = Node & {
  __typename?: 'GeoTarget';
  audiences?: Maybe<Array<Audience>>;
  campaignOrder?: Maybe<CampaignOrder>;
  changeLog?: Maybe<Array<Change>>;
  circles?: Maybe<Array<Circle>>;
  createdAt: Scalars['DateTime'];
  description?: Maybe<Scalars['String']>;
  end?: Maybe<Scalars['DateTime']>;
  expandedReach?: Maybe<Scalars['Int']>;
  flights?: Maybe<Array<GeoTarget>>;
  id: Scalars['ID'];
  isBase?: Maybe<Scalars['Boolean']>;
  location?: Maybe<Location>;
  name?: Maybe<Scalars['String']>;
  observations?: Maybe<Scalars['Int']>;
  orgs?: Maybe<Array<Org>>;
  polygons?: Maybe<Array<Polygon>>;
  reports?: Maybe<Array<CampaignReport>>;
  start?: Maybe<Scalars['DateTime']>;
  tags: Array<Scalars['String']>;
  uniqueDevices?: Maybe<Scalars['Int']>;
  updatedAt: Scalars['DateTime'];
  vwiUpdated?: Maybe<Scalars['DateTime']>;
  vwiUpdatedOnSpot?: Maybe<Scalars['DateTime']>;
};


export type GeoTargetAudiencesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<AudienceOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<AudienceWhereInput>;
};


export type GeoTargetChangeLogArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ChangeOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ChangeWhereInput>;
};


export type GeoTargetCirclesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<CircleOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<CircleWhereInput>;
};


export type GeoTargetFlightsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<GeoTargetOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<GeoTargetWhereInput>;
};


export type GeoTargetOrgsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<OrgOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<OrgWhereInput>;
};


export type GeoTargetPolygonsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<PolygonOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<PolygonWhereInput>;
};


export type GeoTargetReportsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<CampaignReportOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<CampaignReportWhereInput>;
};

/** A connection to a list of items. */
export type GeoTargetConnection = {
  __typename?: 'GeoTargetConnection';
  aggregate: AggregateGeoTarget;
  /** A list of edges. */
  edges: Array<Maybe<GeoTargetEdge>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type GeoTargetCreateInput = {
  audiences?: InputMaybe<AudienceCreateManyWithoutGeoTargetsInput>;
  campaignOrder?: InputMaybe<CampaignOrderCreateOneWithoutGeoTargetsInput>;
  changeLog?: InputMaybe<ChangeCreateManyWithoutGeoTargetInput>;
  circles?: InputMaybe<CircleCreateManyWithoutGeoTargetInput>;
  description?: InputMaybe<Scalars['String']>;
  end?: InputMaybe<Scalars['DateTime']>;
  expandedReach?: InputMaybe<Scalars['Int']>;
  flights?: InputMaybe<GeoTargetCreateManyInput>;
  isBase?: InputMaybe<Scalars['Boolean']>;
  location?: InputMaybe<LocationCreateOneWithoutGeoframeInput>;
  name?: InputMaybe<Scalars['String']>;
  observations?: InputMaybe<Scalars['Int']>;
  orgs?: InputMaybe<OrgCreateManyInput>;
  polygons?: InputMaybe<PolygonCreateManyWithoutGeoTargetInput>;
  reports?: InputMaybe<CampaignReportCreateManyWithoutSegmentInput>;
  start?: InputMaybe<Scalars['DateTime']>;
  tags?: InputMaybe<GeoTargetCreatetagsInput>;
  uniqueDevices?: InputMaybe<Scalars['Int']>;
  vwiUpdated?: InputMaybe<Scalars['DateTime']>;
  vwiUpdatedOnSpot?: InputMaybe<Scalars['DateTime']>;
};

export type GeoTargetCreateManyInput = {
  connect?: InputMaybe<Array<GeoTargetWhereUniqueInput>>;
  create?: InputMaybe<Array<GeoTargetCreateInput>>;
};

export type GeoTargetCreateManyWithoutAudiencesInput = {
  connect?: InputMaybe<Array<GeoTargetWhereUniqueInput>>;
  create?: InputMaybe<Array<GeoTargetCreateWithoutAudiencesInput>>;
};

export type GeoTargetCreateManyWithoutCampaignOrderInput = {
  connect?: InputMaybe<Array<GeoTargetWhereUniqueInput>>;
  create?: InputMaybe<Array<GeoTargetCreateWithoutCampaignOrderInput>>;
};

export type GeoTargetCreateOneWithoutChangeLogInput = {
  connect?: InputMaybe<GeoTargetWhereUniqueInput>;
  create?: InputMaybe<GeoTargetCreateWithoutChangeLogInput>;
};

export type GeoTargetCreateOneWithoutCirclesInput = {
  connect?: InputMaybe<GeoTargetWhereUniqueInput>;
  create?: InputMaybe<GeoTargetCreateWithoutCirclesInput>;
};

export type GeoTargetCreateOneWithoutLocationInput = {
  connect?: InputMaybe<GeoTargetWhereUniqueInput>;
  create?: InputMaybe<GeoTargetCreateWithoutLocationInput>;
};

export type GeoTargetCreateOneWithoutPolygonsInput = {
  connect?: InputMaybe<GeoTargetWhereUniqueInput>;
  create?: InputMaybe<GeoTargetCreateWithoutPolygonsInput>;
};

export type GeoTargetCreateOneWithoutReportsInput = {
  connect?: InputMaybe<GeoTargetWhereUniqueInput>;
  create?: InputMaybe<GeoTargetCreateWithoutReportsInput>;
};

export type GeoTargetCreateWithoutAudiencesInput = {
  campaignOrder?: InputMaybe<CampaignOrderCreateOneWithoutGeoTargetsInput>;
  changeLog?: InputMaybe<ChangeCreateManyWithoutGeoTargetInput>;
  circles?: InputMaybe<CircleCreateManyWithoutGeoTargetInput>;
  description?: InputMaybe<Scalars['String']>;
  end?: InputMaybe<Scalars['DateTime']>;
  expandedReach?: InputMaybe<Scalars['Int']>;
  flights?: InputMaybe<GeoTargetCreateManyInput>;
  isBase?: InputMaybe<Scalars['Boolean']>;
  location?: InputMaybe<LocationCreateOneWithoutGeoframeInput>;
  name?: InputMaybe<Scalars['String']>;
  observations?: InputMaybe<Scalars['Int']>;
  orgs?: InputMaybe<OrgCreateManyInput>;
  polygons?: InputMaybe<PolygonCreateManyWithoutGeoTargetInput>;
  reports?: InputMaybe<CampaignReportCreateManyWithoutSegmentInput>;
  start?: InputMaybe<Scalars['DateTime']>;
  tags?: InputMaybe<GeoTargetCreatetagsInput>;
  uniqueDevices?: InputMaybe<Scalars['Int']>;
  vwiUpdated?: InputMaybe<Scalars['DateTime']>;
  vwiUpdatedOnSpot?: InputMaybe<Scalars['DateTime']>;
};

export type GeoTargetCreateWithoutCampaignOrderInput = {
  audiences?: InputMaybe<AudienceCreateManyWithoutGeoTargetsInput>;
  changeLog?: InputMaybe<ChangeCreateManyWithoutGeoTargetInput>;
  circles?: InputMaybe<CircleCreateManyWithoutGeoTargetInput>;
  description?: InputMaybe<Scalars['String']>;
  end?: InputMaybe<Scalars['DateTime']>;
  expandedReach?: InputMaybe<Scalars['Int']>;
  flights?: InputMaybe<GeoTargetCreateManyInput>;
  isBase?: InputMaybe<Scalars['Boolean']>;
  location?: InputMaybe<LocationCreateOneWithoutGeoframeInput>;
  name?: InputMaybe<Scalars['String']>;
  observations?: InputMaybe<Scalars['Int']>;
  orgs?: InputMaybe<OrgCreateManyInput>;
  polygons?: InputMaybe<PolygonCreateManyWithoutGeoTargetInput>;
  reports?: InputMaybe<CampaignReportCreateManyWithoutSegmentInput>;
  start?: InputMaybe<Scalars['DateTime']>;
  tags?: InputMaybe<GeoTargetCreatetagsInput>;
  uniqueDevices?: InputMaybe<Scalars['Int']>;
  vwiUpdated?: InputMaybe<Scalars['DateTime']>;
  vwiUpdatedOnSpot?: InputMaybe<Scalars['DateTime']>;
};

export type GeoTargetCreateWithoutChangeLogInput = {
  audiences?: InputMaybe<AudienceCreateManyWithoutGeoTargetsInput>;
  campaignOrder?: InputMaybe<CampaignOrderCreateOneWithoutGeoTargetsInput>;
  circles?: InputMaybe<CircleCreateManyWithoutGeoTargetInput>;
  description?: InputMaybe<Scalars['String']>;
  end?: InputMaybe<Scalars['DateTime']>;
  expandedReach?: InputMaybe<Scalars['Int']>;
  flights?: InputMaybe<GeoTargetCreateManyInput>;
  isBase?: InputMaybe<Scalars['Boolean']>;
  location?: InputMaybe<LocationCreateOneWithoutGeoframeInput>;
  name?: InputMaybe<Scalars['String']>;
  observations?: InputMaybe<Scalars['Int']>;
  orgs?: InputMaybe<OrgCreateManyInput>;
  polygons?: InputMaybe<PolygonCreateManyWithoutGeoTargetInput>;
  reports?: InputMaybe<CampaignReportCreateManyWithoutSegmentInput>;
  start?: InputMaybe<Scalars['DateTime']>;
  tags?: InputMaybe<GeoTargetCreatetagsInput>;
  uniqueDevices?: InputMaybe<Scalars['Int']>;
  vwiUpdated?: InputMaybe<Scalars['DateTime']>;
  vwiUpdatedOnSpot?: InputMaybe<Scalars['DateTime']>;
};

export type GeoTargetCreateWithoutCirclesInput = {
  audiences?: InputMaybe<AudienceCreateManyWithoutGeoTargetsInput>;
  campaignOrder?: InputMaybe<CampaignOrderCreateOneWithoutGeoTargetsInput>;
  changeLog?: InputMaybe<ChangeCreateManyWithoutGeoTargetInput>;
  description?: InputMaybe<Scalars['String']>;
  end?: InputMaybe<Scalars['DateTime']>;
  expandedReach?: InputMaybe<Scalars['Int']>;
  flights?: InputMaybe<GeoTargetCreateManyInput>;
  isBase?: InputMaybe<Scalars['Boolean']>;
  location?: InputMaybe<LocationCreateOneWithoutGeoframeInput>;
  name?: InputMaybe<Scalars['String']>;
  observations?: InputMaybe<Scalars['Int']>;
  orgs?: InputMaybe<OrgCreateManyInput>;
  polygons?: InputMaybe<PolygonCreateManyWithoutGeoTargetInput>;
  reports?: InputMaybe<CampaignReportCreateManyWithoutSegmentInput>;
  start?: InputMaybe<Scalars['DateTime']>;
  tags?: InputMaybe<GeoTargetCreatetagsInput>;
  uniqueDevices?: InputMaybe<Scalars['Int']>;
  vwiUpdated?: InputMaybe<Scalars['DateTime']>;
  vwiUpdatedOnSpot?: InputMaybe<Scalars['DateTime']>;
};

export type GeoTargetCreateWithoutLocationInput = {
  audiences?: InputMaybe<AudienceCreateManyWithoutGeoTargetsInput>;
  campaignOrder?: InputMaybe<CampaignOrderCreateOneWithoutGeoTargetsInput>;
  changeLog?: InputMaybe<ChangeCreateManyWithoutGeoTargetInput>;
  circles?: InputMaybe<CircleCreateManyWithoutGeoTargetInput>;
  description?: InputMaybe<Scalars['String']>;
  end?: InputMaybe<Scalars['DateTime']>;
  expandedReach?: InputMaybe<Scalars['Int']>;
  flights?: InputMaybe<GeoTargetCreateManyInput>;
  isBase?: InputMaybe<Scalars['Boolean']>;
  name?: InputMaybe<Scalars['String']>;
  observations?: InputMaybe<Scalars['Int']>;
  orgs?: InputMaybe<OrgCreateManyInput>;
  polygons?: InputMaybe<PolygonCreateManyWithoutGeoTargetInput>;
  reports?: InputMaybe<CampaignReportCreateManyWithoutSegmentInput>;
  start?: InputMaybe<Scalars['DateTime']>;
  tags?: InputMaybe<GeoTargetCreatetagsInput>;
  uniqueDevices?: InputMaybe<Scalars['Int']>;
  vwiUpdated?: InputMaybe<Scalars['DateTime']>;
  vwiUpdatedOnSpot?: InputMaybe<Scalars['DateTime']>;
};

export type GeoTargetCreateWithoutPolygonsInput = {
  audiences?: InputMaybe<AudienceCreateManyWithoutGeoTargetsInput>;
  campaignOrder?: InputMaybe<CampaignOrderCreateOneWithoutGeoTargetsInput>;
  changeLog?: InputMaybe<ChangeCreateManyWithoutGeoTargetInput>;
  circles?: InputMaybe<CircleCreateManyWithoutGeoTargetInput>;
  description?: InputMaybe<Scalars['String']>;
  end?: InputMaybe<Scalars['DateTime']>;
  expandedReach?: InputMaybe<Scalars['Int']>;
  flights?: InputMaybe<GeoTargetCreateManyInput>;
  isBase?: InputMaybe<Scalars['Boolean']>;
  location?: InputMaybe<LocationCreateOneWithoutGeoframeInput>;
  name?: InputMaybe<Scalars['String']>;
  observations?: InputMaybe<Scalars['Int']>;
  orgs?: InputMaybe<OrgCreateManyInput>;
  reports?: InputMaybe<CampaignReportCreateManyWithoutSegmentInput>;
  start?: InputMaybe<Scalars['DateTime']>;
  tags?: InputMaybe<GeoTargetCreatetagsInput>;
  uniqueDevices?: InputMaybe<Scalars['Int']>;
  vwiUpdated?: InputMaybe<Scalars['DateTime']>;
  vwiUpdatedOnSpot?: InputMaybe<Scalars['DateTime']>;
};

export type GeoTargetCreateWithoutReportsInput = {
  audiences?: InputMaybe<AudienceCreateManyWithoutGeoTargetsInput>;
  campaignOrder?: InputMaybe<CampaignOrderCreateOneWithoutGeoTargetsInput>;
  changeLog?: InputMaybe<ChangeCreateManyWithoutGeoTargetInput>;
  circles?: InputMaybe<CircleCreateManyWithoutGeoTargetInput>;
  description?: InputMaybe<Scalars['String']>;
  end?: InputMaybe<Scalars['DateTime']>;
  expandedReach?: InputMaybe<Scalars['Int']>;
  flights?: InputMaybe<GeoTargetCreateManyInput>;
  isBase?: InputMaybe<Scalars['Boolean']>;
  location?: InputMaybe<LocationCreateOneWithoutGeoframeInput>;
  name?: InputMaybe<Scalars['String']>;
  observations?: InputMaybe<Scalars['Int']>;
  orgs?: InputMaybe<OrgCreateManyInput>;
  polygons?: InputMaybe<PolygonCreateManyWithoutGeoTargetInput>;
  start?: InputMaybe<Scalars['DateTime']>;
  tags?: InputMaybe<GeoTargetCreatetagsInput>;
  uniqueDevices?: InputMaybe<Scalars['Int']>;
  vwiUpdated?: InputMaybe<Scalars['DateTime']>;
  vwiUpdatedOnSpot?: InputMaybe<Scalars['DateTime']>;
};

export type GeoTargetCreatetagsInput = {
  set?: InputMaybe<Array<Scalars['String']>>;
};

/** An edge in a connection. */
export type GeoTargetEdge = {
  __typename?: 'GeoTargetEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: GeoTarget;
};

export enum GeoTargetOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DescriptionAsc = 'description_ASC',
  DescriptionDesc = 'description_DESC',
  EndAsc = 'end_ASC',
  EndDesc = 'end_DESC',
  ExpandedReachAsc = 'expandedReach_ASC',
  ExpandedReachDesc = 'expandedReach_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  IsBaseAsc = 'isBase_ASC',
  IsBaseDesc = 'isBase_DESC',
  NameAsc = 'name_ASC',
  NameDesc = 'name_DESC',
  ObservationsAsc = 'observations_ASC',
  ObservationsDesc = 'observations_DESC',
  StartAsc = 'start_ASC',
  StartDesc = 'start_DESC',
  UniqueDevicesAsc = 'uniqueDevices_ASC',
  UniqueDevicesDesc = 'uniqueDevices_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  VwiUpdatedOnSpotAsc = 'vwiUpdatedOnSpot_ASC',
  VwiUpdatedOnSpotDesc = 'vwiUpdatedOnSpot_DESC',
  VwiUpdatedAsc = 'vwiUpdated_ASC',
  VwiUpdatedDesc = 'vwiUpdated_DESC'
}

export type GeoTargetUpdateDataInput = {
  audiences?: InputMaybe<AudienceUpdateManyWithoutGeoTargetsInput>;
  campaignOrder?: InputMaybe<CampaignOrderUpdateOneWithoutGeoTargetsInput>;
  changeLog?: InputMaybe<ChangeUpdateManyWithoutGeoTargetInput>;
  circles?: InputMaybe<CircleUpdateManyWithoutGeoTargetInput>;
  description?: InputMaybe<Scalars['String']>;
  end?: InputMaybe<Scalars['DateTime']>;
  expandedReach?: InputMaybe<Scalars['Int']>;
  flights?: InputMaybe<GeoTargetUpdateManyInput>;
  isBase?: InputMaybe<Scalars['Boolean']>;
  location?: InputMaybe<LocationUpdateOneWithoutGeoframeInput>;
  name?: InputMaybe<Scalars['String']>;
  observations?: InputMaybe<Scalars['Int']>;
  orgs?: InputMaybe<OrgUpdateManyInput>;
  polygons?: InputMaybe<PolygonUpdateManyWithoutGeoTargetInput>;
  reports?: InputMaybe<CampaignReportUpdateManyWithoutSegmentInput>;
  start?: InputMaybe<Scalars['DateTime']>;
  tags?: InputMaybe<GeoTargetUpdatetagsInput>;
  uniqueDevices?: InputMaybe<Scalars['Int']>;
  vwiUpdated?: InputMaybe<Scalars['DateTime']>;
  vwiUpdatedOnSpot?: InputMaybe<Scalars['DateTime']>;
};

export type GeoTargetUpdateInput = {
  audiences?: InputMaybe<AudienceUpdateManyWithoutGeoTargetsInput>;
  campaignOrder?: InputMaybe<CampaignOrderUpdateOneWithoutGeoTargetsInput>;
  changeLog?: InputMaybe<ChangeUpdateManyWithoutGeoTargetInput>;
  circles?: InputMaybe<CircleUpdateManyWithoutGeoTargetInput>;
  description?: InputMaybe<Scalars['String']>;
  end?: InputMaybe<Scalars['DateTime']>;
  expandedReach?: InputMaybe<Scalars['Int']>;
  flights?: InputMaybe<GeoTargetUpdateManyInput>;
  isBase?: InputMaybe<Scalars['Boolean']>;
  location?: InputMaybe<LocationUpdateOneWithoutGeoframeInput>;
  name?: InputMaybe<Scalars['String']>;
  observations?: InputMaybe<Scalars['Int']>;
  orgs?: InputMaybe<OrgUpdateManyInput>;
  polygons?: InputMaybe<PolygonUpdateManyWithoutGeoTargetInput>;
  reports?: InputMaybe<CampaignReportUpdateManyWithoutSegmentInput>;
  start?: InputMaybe<Scalars['DateTime']>;
  tags?: InputMaybe<GeoTargetUpdatetagsInput>;
  uniqueDevices?: InputMaybe<Scalars['Int']>;
  vwiUpdated?: InputMaybe<Scalars['DateTime']>;
  vwiUpdatedOnSpot?: InputMaybe<Scalars['DateTime']>;
};

export type GeoTargetUpdateManyInput = {
  connect?: InputMaybe<Array<GeoTargetWhereUniqueInput>>;
  create?: InputMaybe<Array<GeoTargetCreateInput>>;
  delete?: InputMaybe<Array<GeoTargetWhereUniqueInput>>;
  disconnect?: InputMaybe<Array<GeoTargetWhereUniqueInput>>;
  update?: InputMaybe<Array<GeoTargetUpdateWithWhereUniqueNestedInput>>;
  upsert?: InputMaybe<Array<GeoTargetUpsertWithWhereUniqueNestedInput>>;
};

export type GeoTargetUpdateManyWithoutAudiencesInput = {
  connect?: InputMaybe<Array<GeoTargetWhereUniqueInput>>;
  create?: InputMaybe<Array<GeoTargetCreateWithoutAudiencesInput>>;
  delete?: InputMaybe<Array<GeoTargetWhereUniqueInput>>;
  disconnect?: InputMaybe<Array<GeoTargetWhereUniqueInput>>;
  update?: InputMaybe<Array<GeoTargetUpdateWithWhereUniqueWithoutAudiencesInput>>;
  upsert?: InputMaybe<Array<GeoTargetUpsertWithWhereUniqueWithoutAudiencesInput>>;
};

export type GeoTargetUpdateManyWithoutCampaignOrderInput = {
  connect?: InputMaybe<Array<GeoTargetWhereUniqueInput>>;
  create?: InputMaybe<Array<GeoTargetCreateWithoutCampaignOrderInput>>;
  delete?: InputMaybe<Array<GeoTargetWhereUniqueInput>>;
  disconnect?: InputMaybe<Array<GeoTargetWhereUniqueInput>>;
  update?: InputMaybe<Array<GeoTargetUpdateWithWhereUniqueWithoutCampaignOrderInput>>;
  upsert?: InputMaybe<Array<GeoTargetUpsertWithWhereUniqueWithoutCampaignOrderInput>>;
};

export type GeoTargetUpdateOneWithoutChangeLogInput = {
  connect?: InputMaybe<GeoTargetWhereUniqueInput>;
  create?: InputMaybe<GeoTargetCreateWithoutChangeLogInput>;
  delete?: InputMaybe<Scalars['Boolean']>;
  disconnect?: InputMaybe<Scalars['Boolean']>;
  update?: InputMaybe<GeoTargetUpdateWithoutChangeLogDataInput>;
  upsert?: InputMaybe<GeoTargetUpsertWithoutChangeLogInput>;
};

export type GeoTargetUpdateOneWithoutCirclesInput = {
  connect?: InputMaybe<GeoTargetWhereUniqueInput>;
  create?: InputMaybe<GeoTargetCreateWithoutCirclesInput>;
  delete?: InputMaybe<Scalars['Boolean']>;
  disconnect?: InputMaybe<Scalars['Boolean']>;
  update?: InputMaybe<GeoTargetUpdateWithoutCirclesDataInput>;
  upsert?: InputMaybe<GeoTargetUpsertWithoutCirclesInput>;
};

export type GeoTargetUpdateOneWithoutLocationInput = {
  connect?: InputMaybe<GeoTargetWhereUniqueInput>;
  create?: InputMaybe<GeoTargetCreateWithoutLocationInput>;
  delete?: InputMaybe<Scalars['Boolean']>;
  disconnect?: InputMaybe<Scalars['Boolean']>;
  update?: InputMaybe<GeoTargetUpdateWithoutLocationDataInput>;
  upsert?: InputMaybe<GeoTargetUpsertWithoutLocationInput>;
};

export type GeoTargetUpdateOneWithoutPolygonsInput = {
  connect?: InputMaybe<GeoTargetWhereUniqueInput>;
  create?: InputMaybe<GeoTargetCreateWithoutPolygonsInput>;
  delete?: InputMaybe<Scalars['Boolean']>;
  disconnect?: InputMaybe<Scalars['Boolean']>;
  update?: InputMaybe<GeoTargetUpdateWithoutPolygonsDataInput>;
  upsert?: InputMaybe<GeoTargetUpsertWithoutPolygonsInput>;
};

export type GeoTargetUpdateOneWithoutReportsInput = {
  connect?: InputMaybe<GeoTargetWhereUniqueInput>;
  create?: InputMaybe<GeoTargetCreateWithoutReportsInput>;
  delete?: InputMaybe<Scalars['Boolean']>;
  disconnect?: InputMaybe<Scalars['Boolean']>;
  update?: InputMaybe<GeoTargetUpdateWithoutReportsDataInput>;
  upsert?: InputMaybe<GeoTargetUpsertWithoutReportsInput>;
};

export type GeoTargetUpdateWithWhereUniqueNestedInput = {
  data: GeoTargetUpdateDataInput;
  where: GeoTargetWhereUniqueInput;
};

export type GeoTargetUpdateWithWhereUniqueWithoutAudiencesInput = {
  data: GeoTargetUpdateWithoutAudiencesDataInput;
  where: GeoTargetWhereUniqueInput;
};

export type GeoTargetUpdateWithWhereUniqueWithoutCampaignOrderInput = {
  data: GeoTargetUpdateWithoutCampaignOrderDataInput;
  where: GeoTargetWhereUniqueInput;
};

export type GeoTargetUpdateWithoutAudiencesDataInput = {
  campaignOrder?: InputMaybe<CampaignOrderUpdateOneWithoutGeoTargetsInput>;
  changeLog?: InputMaybe<ChangeUpdateManyWithoutGeoTargetInput>;
  circles?: InputMaybe<CircleUpdateManyWithoutGeoTargetInput>;
  description?: InputMaybe<Scalars['String']>;
  end?: InputMaybe<Scalars['DateTime']>;
  expandedReach?: InputMaybe<Scalars['Int']>;
  flights?: InputMaybe<GeoTargetUpdateManyInput>;
  isBase?: InputMaybe<Scalars['Boolean']>;
  location?: InputMaybe<LocationUpdateOneWithoutGeoframeInput>;
  name?: InputMaybe<Scalars['String']>;
  observations?: InputMaybe<Scalars['Int']>;
  orgs?: InputMaybe<OrgUpdateManyInput>;
  polygons?: InputMaybe<PolygonUpdateManyWithoutGeoTargetInput>;
  reports?: InputMaybe<CampaignReportUpdateManyWithoutSegmentInput>;
  start?: InputMaybe<Scalars['DateTime']>;
  tags?: InputMaybe<GeoTargetUpdatetagsInput>;
  uniqueDevices?: InputMaybe<Scalars['Int']>;
  vwiUpdated?: InputMaybe<Scalars['DateTime']>;
  vwiUpdatedOnSpot?: InputMaybe<Scalars['DateTime']>;
};

export type GeoTargetUpdateWithoutCampaignOrderDataInput = {
  audiences?: InputMaybe<AudienceUpdateManyWithoutGeoTargetsInput>;
  changeLog?: InputMaybe<ChangeUpdateManyWithoutGeoTargetInput>;
  circles?: InputMaybe<CircleUpdateManyWithoutGeoTargetInput>;
  description?: InputMaybe<Scalars['String']>;
  end?: InputMaybe<Scalars['DateTime']>;
  expandedReach?: InputMaybe<Scalars['Int']>;
  flights?: InputMaybe<GeoTargetUpdateManyInput>;
  isBase?: InputMaybe<Scalars['Boolean']>;
  location?: InputMaybe<LocationUpdateOneWithoutGeoframeInput>;
  name?: InputMaybe<Scalars['String']>;
  observations?: InputMaybe<Scalars['Int']>;
  orgs?: InputMaybe<OrgUpdateManyInput>;
  polygons?: InputMaybe<PolygonUpdateManyWithoutGeoTargetInput>;
  reports?: InputMaybe<CampaignReportUpdateManyWithoutSegmentInput>;
  start?: InputMaybe<Scalars['DateTime']>;
  tags?: InputMaybe<GeoTargetUpdatetagsInput>;
  uniqueDevices?: InputMaybe<Scalars['Int']>;
  vwiUpdated?: InputMaybe<Scalars['DateTime']>;
  vwiUpdatedOnSpot?: InputMaybe<Scalars['DateTime']>;
};

export type GeoTargetUpdateWithoutChangeLogDataInput = {
  audiences?: InputMaybe<AudienceUpdateManyWithoutGeoTargetsInput>;
  campaignOrder?: InputMaybe<CampaignOrderUpdateOneWithoutGeoTargetsInput>;
  circles?: InputMaybe<CircleUpdateManyWithoutGeoTargetInput>;
  description?: InputMaybe<Scalars['String']>;
  end?: InputMaybe<Scalars['DateTime']>;
  expandedReach?: InputMaybe<Scalars['Int']>;
  flights?: InputMaybe<GeoTargetUpdateManyInput>;
  isBase?: InputMaybe<Scalars['Boolean']>;
  location?: InputMaybe<LocationUpdateOneWithoutGeoframeInput>;
  name?: InputMaybe<Scalars['String']>;
  observations?: InputMaybe<Scalars['Int']>;
  orgs?: InputMaybe<OrgUpdateManyInput>;
  polygons?: InputMaybe<PolygonUpdateManyWithoutGeoTargetInput>;
  reports?: InputMaybe<CampaignReportUpdateManyWithoutSegmentInput>;
  start?: InputMaybe<Scalars['DateTime']>;
  tags?: InputMaybe<GeoTargetUpdatetagsInput>;
  uniqueDevices?: InputMaybe<Scalars['Int']>;
  vwiUpdated?: InputMaybe<Scalars['DateTime']>;
  vwiUpdatedOnSpot?: InputMaybe<Scalars['DateTime']>;
};

export type GeoTargetUpdateWithoutCirclesDataInput = {
  audiences?: InputMaybe<AudienceUpdateManyWithoutGeoTargetsInput>;
  campaignOrder?: InputMaybe<CampaignOrderUpdateOneWithoutGeoTargetsInput>;
  changeLog?: InputMaybe<ChangeUpdateManyWithoutGeoTargetInput>;
  description?: InputMaybe<Scalars['String']>;
  end?: InputMaybe<Scalars['DateTime']>;
  expandedReach?: InputMaybe<Scalars['Int']>;
  flights?: InputMaybe<GeoTargetUpdateManyInput>;
  isBase?: InputMaybe<Scalars['Boolean']>;
  location?: InputMaybe<LocationUpdateOneWithoutGeoframeInput>;
  name?: InputMaybe<Scalars['String']>;
  observations?: InputMaybe<Scalars['Int']>;
  orgs?: InputMaybe<OrgUpdateManyInput>;
  polygons?: InputMaybe<PolygonUpdateManyWithoutGeoTargetInput>;
  reports?: InputMaybe<CampaignReportUpdateManyWithoutSegmentInput>;
  start?: InputMaybe<Scalars['DateTime']>;
  tags?: InputMaybe<GeoTargetUpdatetagsInput>;
  uniqueDevices?: InputMaybe<Scalars['Int']>;
  vwiUpdated?: InputMaybe<Scalars['DateTime']>;
  vwiUpdatedOnSpot?: InputMaybe<Scalars['DateTime']>;
};

export type GeoTargetUpdateWithoutLocationDataInput = {
  audiences?: InputMaybe<AudienceUpdateManyWithoutGeoTargetsInput>;
  campaignOrder?: InputMaybe<CampaignOrderUpdateOneWithoutGeoTargetsInput>;
  changeLog?: InputMaybe<ChangeUpdateManyWithoutGeoTargetInput>;
  circles?: InputMaybe<CircleUpdateManyWithoutGeoTargetInput>;
  description?: InputMaybe<Scalars['String']>;
  end?: InputMaybe<Scalars['DateTime']>;
  expandedReach?: InputMaybe<Scalars['Int']>;
  flights?: InputMaybe<GeoTargetUpdateManyInput>;
  isBase?: InputMaybe<Scalars['Boolean']>;
  name?: InputMaybe<Scalars['String']>;
  observations?: InputMaybe<Scalars['Int']>;
  orgs?: InputMaybe<OrgUpdateManyInput>;
  polygons?: InputMaybe<PolygonUpdateManyWithoutGeoTargetInput>;
  reports?: InputMaybe<CampaignReportUpdateManyWithoutSegmentInput>;
  start?: InputMaybe<Scalars['DateTime']>;
  tags?: InputMaybe<GeoTargetUpdatetagsInput>;
  uniqueDevices?: InputMaybe<Scalars['Int']>;
  vwiUpdated?: InputMaybe<Scalars['DateTime']>;
  vwiUpdatedOnSpot?: InputMaybe<Scalars['DateTime']>;
};

export type GeoTargetUpdateWithoutPolygonsDataInput = {
  audiences?: InputMaybe<AudienceUpdateManyWithoutGeoTargetsInput>;
  campaignOrder?: InputMaybe<CampaignOrderUpdateOneWithoutGeoTargetsInput>;
  changeLog?: InputMaybe<ChangeUpdateManyWithoutGeoTargetInput>;
  circles?: InputMaybe<CircleUpdateManyWithoutGeoTargetInput>;
  description?: InputMaybe<Scalars['String']>;
  end?: InputMaybe<Scalars['DateTime']>;
  expandedReach?: InputMaybe<Scalars['Int']>;
  flights?: InputMaybe<GeoTargetUpdateManyInput>;
  isBase?: InputMaybe<Scalars['Boolean']>;
  location?: InputMaybe<LocationUpdateOneWithoutGeoframeInput>;
  name?: InputMaybe<Scalars['String']>;
  observations?: InputMaybe<Scalars['Int']>;
  orgs?: InputMaybe<OrgUpdateManyInput>;
  reports?: InputMaybe<CampaignReportUpdateManyWithoutSegmentInput>;
  start?: InputMaybe<Scalars['DateTime']>;
  tags?: InputMaybe<GeoTargetUpdatetagsInput>;
  uniqueDevices?: InputMaybe<Scalars['Int']>;
  vwiUpdated?: InputMaybe<Scalars['DateTime']>;
  vwiUpdatedOnSpot?: InputMaybe<Scalars['DateTime']>;
};

export type GeoTargetUpdateWithoutReportsDataInput = {
  audiences?: InputMaybe<AudienceUpdateManyWithoutGeoTargetsInput>;
  campaignOrder?: InputMaybe<CampaignOrderUpdateOneWithoutGeoTargetsInput>;
  changeLog?: InputMaybe<ChangeUpdateManyWithoutGeoTargetInput>;
  circles?: InputMaybe<CircleUpdateManyWithoutGeoTargetInput>;
  description?: InputMaybe<Scalars['String']>;
  end?: InputMaybe<Scalars['DateTime']>;
  expandedReach?: InputMaybe<Scalars['Int']>;
  flights?: InputMaybe<GeoTargetUpdateManyInput>;
  isBase?: InputMaybe<Scalars['Boolean']>;
  location?: InputMaybe<LocationUpdateOneWithoutGeoframeInput>;
  name?: InputMaybe<Scalars['String']>;
  observations?: InputMaybe<Scalars['Int']>;
  orgs?: InputMaybe<OrgUpdateManyInput>;
  polygons?: InputMaybe<PolygonUpdateManyWithoutGeoTargetInput>;
  start?: InputMaybe<Scalars['DateTime']>;
  tags?: InputMaybe<GeoTargetUpdatetagsInput>;
  uniqueDevices?: InputMaybe<Scalars['Int']>;
  vwiUpdated?: InputMaybe<Scalars['DateTime']>;
  vwiUpdatedOnSpot?: InputMaybe<Scalars['DateTime']>;
};

export type GeoTargetUpdatetagsInput = {
  set?: InputMaybe<Array<Scalars['String']>>;
};

export type GeoTargetUpsertWithWhereUniqueNestedInput = {
  create: GeoTargetCreateInput;
  update: GeoTargetUpdateDataInput;
  where: GeoTargetWhereUniqueInput;
};

export type GeoTargetUpsertWithWhereUniqueWithoutAudiencesInput = {
  create: GeoTargetCreateWithoutAudiencesInput;
  update: GeoTargetUpdateWithoutAudiencesDataInput;
  where: GeoTargetWhereUniqueInput;
};

export type GeoTargetUpsertWithWhereUniqueWithoutCampaignOrderInput = {
  create: GeoTargetCreateWithoutCampaignOrderInput;
  update: GeoTargetUpdateWithoutCampaignOrderDataInput;
  where: GeoTargetWhereUniqueInput;
};

export type GeoTargetUpsertWithoutChangeLogInput = {
  create: GeoTargetCreateWithoutChangeLogInput;
  update: GeoTargetUpdateWithoutChangeLogDataInput;
};

export type GeoTargetUpsertWithoutCirclesInput = {
  create: GeoTargetCreateWithoutCirclesInput;
  update: GeoTargetUpdateWithoutCirclesDataInput;
};

export type GeoTargetUpsertWithoutLocationInput = {
  create: GeoTargetCreateWithoutLocationInput;
  update: GeoTargetUpdateWithoutLocationDataInput;
};

export type GeoTargetUpsertWithoutPolygonsInput = {
  create: GeoTargetCreateWithoutPolygonsInput;
  update: GeoTargetUpdateWithoutPolygonsDataInput;
};

export type GeoTargetUpsertWithoutReportsInput = {
  create: GeoTargetCreateWithoutReportsInput;
  update: GeoTargetUpdateWithoutReportsDataInput;
};

export type GeoTargetWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<GeoTargetWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<GeoTargetWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<GeoTargetWhereInput>>;
  audiences_every?: InputMaybe<AudienceWhereInput>;
  audiences_none?: InputMaybe<AudienceWhereInput>;
  audiences_some?: InputMaybe<AudienceWhereInput>;
  campaignOrder?: InputMaybe<CampaignOrderWhereInput>;
  changeLog_every?: InputMaybe<ChangeWhereInput>;
  changeLog_none?: InputMaybe<ChangeWhereInput>;
  changeLog_some?: InputMaybe<ChangeWhereInput>;
  circles_every?: InputMaybe<CircleWhereInput>;
  circles_none?: InputMaybe<CircleWhereInput>;
  circles_some?: InputMaybe<CircleWhereInput>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  description?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  description_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  description_ends_with?: InputMaybe<Scalars['String']>;
  /** All values greater than the given value. */
  description_gt?: InputMaybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  description_gte?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  description_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  description_lt?: InputMaybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  description_lte?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  description_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  description_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string. */
  description_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  description_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  description_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  description_starts_with?: InputMaybe<Scalars['String']>;
  end?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  end_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  end_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  end_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  end_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  end_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  end_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  end_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  expandedReach?: InputMaybe<Scalars['Int']>;
  /** All values greater than the given value. */
  expandedReach_gt?: InputMaybe<Scalars['Int']>;
  /** All values greater than or equal the given value. */
  expandedReach_gte?: InputMaybe<Scalars['Int']>;
  /** All values that are contained in given list. */
  expandedReach_in?: InputMaybe<Array<Scalars['Int']>>;
  /** All values less than the given value. */
  expandedReach_lt?: InputMaybe<Scalars['Int']>;
  /** All values less than or equal the given value. */
  expandedReach_lte?: InputMaybe<Scalars['Int']>;
  /** All values that are not equal to given value. */
  expandedReach_not?: InputMaybe<Scalars['Int']>;
  /** All values that are not contained in given list. */
  expandedReach_not_in?: InputMaybe<Array<Scalars['Int']>>;
  flights_every?: InputMaybe<GeoTargetWhereInput>;
  flights_none?: InputMaybe<GeoTargetWhereInput>;
  flights_some?: InputMaybe<GeoTargetWhereInput>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: InputMaybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: InputMaybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: InputMaybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  isBase?: InputMaybe<Scalars['Boolean']>;
  /** All values that are not equal to given value. */
  isBase_not?: InputMaybe<Scalars['Boolean']>;
  location?: InputMaybe<LocationWhereInput>;
  name?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  name_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  name_ends_with?: InputMaybe<Scalars['String']>;
  /** All values greater than the given value. */
  name_gt?: InputMaybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  name_gte?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  name_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  name_lt?: InputMaybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  name_lte?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  name_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  name_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string. */
  name_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  name_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  name_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  name_starts_with?: InputMaybe<Scalars['String']>;
  observations?: InputMaybe<Scalars['Int']>;
  /** All values greater than the given value. */
  observations_gt?: InputMaybe<Scalars['Int']>;
  /** All values greater than or equal the given value. */
  observations_gte?: InputMaybe<Scalars['Int']>;
  /** All values that are contained in given list. */
  observations_in?: InputMaybe<Array<Scalars['Int']>>;
  /** All values less than the given value. */
  observations_lt?: InputMaybe<Scalars['Int']>;
  /** All values less than or equal the given value. */
  observations_lte?: InputMaybe<Scalars['Int']>;
  /** All values that are not equal to given value. */
  observations_not?: InputMaybe<Scalars['Int']>;
  /** All values that are not contained in given list. */
  observations_not_in?: InputMaybe<Array<Scalars['Int']>>;
  orgs_every?: InputMaybe<OrgWhereInput>;
  orgs_none?: InputMaybe<OrgWhereInput>;
  orgs_some?: InputMaybe<OrgWhereInput>;
  polygons_every?: InputMaybe<PolygonWhereInput>;
  polygons_none?: InputMaybe<PolygonWhereInput>;
  polygons_some?: InputMaybe<PolygonWhereInput>;
  reports_every?: InputMaybe<CampaignReportWhereInput>;
  reports_none?: InputMaybe<CampaignReportWhereInput>;
  reports_some?: InputMaybe<CampaignReportWhereInput>;
  start?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  start_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  start_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  start_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  start_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  start_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  start_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  start_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  uniqueDevices?: InputMaybe<Scalars['Int']>;
  /** All values greater than the given value. */
  uniqueDevices_gt?: InputMaybe<Scalars['Int']>;
  /** All values greater than or equal the given value. */
  uniqueDevices_gte?: InputMaybe<Scalars['Int']>;
  /** All values that are contained in given list. */
  uniqueDevices_in?: InputMaybe<Array<Scalars['Int']>>;
  /** All values less than the given value. */
  uniqueDevices_lt?: InputMaybe<Scalars['Int']>;
  /** All values less than or equal the given value. */
  uniqueDevices_lte?: InputMaybe<Scalars['Int']>;
  /** All values that are not equal to given value. */
  uniqueDevices_not?: InputMaybe<Scalars['Int']>;
  /** All values that are not contained in given list. */
  uniqueDevices_not_in?: InputMaybe<Array<Scalars['Int']>>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  vwiUpdated?: InputMaybe<Scalars['DateTime']>;
  vwiUpdatedOnSpot?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  vwiUpdatedOnSpot_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  vwiUpdatedOnSpot_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  vwiUpdatedOnSpot_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  vwiUpdatedOnSpot_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  vwiUpdatedOnSpot_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  vwiUpdatedOnSpot_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  vwiUpdatedOnSpot_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values greater than the given value. */
  vwiUpdated_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  vwiUpdated_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  vwiUpdated_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  vwiUpdated_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  vwiUpdated_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  vwiUpdated_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  vwiUpdated_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
};

export type GeoTargetWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export type GoogleAnalytics = {
  __typename?: 'GoogleAnalytics';
  campaigns?: Maybe<Array<Campaign>>;
  isGA4?: Maybe<Scalars['Boolean']>;
  keyFileName?: Maybe<Scalars['String']>;
  orgDataConfigs?: Maybe<Array<OrgDataConfig>>;
  scopes: Array<Scalars['String']>;
  viewId?: Maybe<Scalars['String']>;
};


export type GoogleAnalyticsCampaignsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<CampaignOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<CampaignWhereInput>;
};


export type GoogleAnalyticsOrgDataConfigsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<OrgDataConfigOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<OrgDataConfigWhereInput>;
};

export type GoogleAnalyticsCreateOneWithoutCampaignsInput = {
  create?: InputMaybe<GoogleAnalyticsCreateWithoutCampaignsInput>;
};

export type GoogleAnalyticsCreateOneWithoutOrgDataConfigsInput = {
  create?: InputMaybe<GoogleAnalyticsCreateWithoutOrgDataConfigsInput>;
};

export type GoogleAnalyticsCreateWithoutCampaignsInput = {
  isGA4?: InputMaybe<Scalars['Boolean']>;
  keyFileName?: InputMaybe<Scalars['String']>;
  orgDataConfigs?: InputMaybe<OrgDataConfigCreateManyWithoutGoogleAnalyticsInput>;
  scopes?: InputMaybe<GoogleAnalyticsCreatescopesInput>;
  viewId?: InputMaybe<Scalars['String']>;
};

export type GoogleAnalyticsCreateWithoutOrgDataConfigsInput = {
  campaigns?: InputMaybe<CampaignCreateManyWithoutGoogleAnalyticsMetaDataInput>;
  isGA4?: InputMaybe<Scalars['Boolean']>;
  keyFileName?: InputMaybe<Scalars['String']>;
  scopes?: InputMaybe<GoogleAnalyticsCreatescopesInput>;
  viewId?: InputMaybe<Scalars['String']>;
};

export type GoogleAnalyticsCreatescopesInput = {
  set?: InputMaybe<Array<Scalars['String']>>;
};

export type GoogleAnalyticsUpdateOneWithoutCampaignsInput = {
  create?: InputMaybe<GoogleAnalyticsCreateWithoutCampaignsInput>;
  delete?: InputMaybe<Scalars['Boolean']>;
  disconnect?: InputMaybe<Scalars['Boolean']>;
  update?: InputMaybe<GoogleAnalyticsUpdateWithoutCampaignsDataInput>;
  upsert?: InputMaybe<GoogleAnalyticsUpsertWithoutCampaignsInput>;
};

export type GoogleAnalyticsUpdateOneWithoutOrgDataConfigsInput = {
  create?: InputMaybe<GoogleAnalyticsCreateWithoutOrgDataConfigsInput>;
  delete?: InputMaybe<Scalars['Boolean']>;
  disconnect?: InputMaybe<Scalars['Boolean']>;
  update?: InputMaybe<GoogleAnalyticsUpdateWithoutOrgDataConfigsDataInput>;
  upsert?: InputMaybe<GoogleAnalyticsUpsertWithoutOrgDataConfigsInput>;
};

export type GoogleAnalyticsUpdateWithoutCampaignsDataInput = {
  isGA4?: InputMaybe<Scalars['Boolean']>;
  keyFileName?: InputMaybe<Scalars['String']>;
  orgDataConfigs?: InputMaybe<OrgDataConfigUpdateManyWithoutGoogleAnalyticsInput>;
  scopes?: InputMaybe<GoogleAnalyticsUpdatescopesInput>;
  viewId?: InputMaybe<Scalars['String']>;
};

export type GoogleAnalyticsUpdateWithoutOrgDataConfigsDataInput = {
  campaigns?: InputMaybe<CampaignUpdateManyWithoutGoogleAnalyticsMetaDataInput>;
  isGA4?: InputMaybe<Scalars['Boolean']>;
  keyFileName?: InputMaybe<Scalars['String']>;
  scopes?: InputMaybe<GoogleAnalyticsUpdatescopesInput>;
  viewId?: InputMaybe<Scalars['String']>;
};

export type GoogleAnalyticsUpdatescopesInput = {
  set?: InputMaybe<Array<Scalars['String']>>;
};

export type GoogleAnalyticsUpsertWithoutCampaignsInput = {
  create: GoogleAnalyticsCreateWithoutCampaignsInput;
  update: GoogleAnalyticsUpdateWithoutCampaignsDataInput;
};

export type GoogleAnalyticsUpsertWithoutOrgDataConfigsInput = {
  create: GoogleAnalyticsCreateWithoutOrgDataConfigsInput;
  update: GoogleAnalyticsUpdateWithoutOrgDataConfigsDataInput;
};

export type GoogleAnalyticsWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<GoogleAnalyticsWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<GoogleAnalyticsWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<GoogleAnalyticsWhereInput>>;
  campaigns_every?: InputMaybe<CampaignWhereInput>;
  campaigns_none?: InputMaybe<CampaignWhereInput>;
  campaigns_some?: InputMaybe<CampaignWhereInput>;
  isGA4?: InputMaybe<Scalars['Boolean']>;
  /** All values that are not equal to given value. */
  isGA4_not?: InputMaybe<Scalars['Boolean']>;
  keyFileName?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  keyFileName_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  keyFileName_ends_with?: InputMaybe<Scalars['String']>;
  /** All values greater than the given value. */
  keyFileName_gt?: InputMaybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  keyFileName_gte?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  keyFileName_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  keyFileName_lt?: InputMaybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  keyFileName_lte?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  keyFileName_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  keyFileName_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string. */
  keyFileName_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  keyFileName_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  keyFileName_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  keyFileName_starts_with?: InputMaybe<Scalars['String']>;
  orgDataConfigs_every?: InputMaybe<OrgDataConfigWhereInput>;
  orgDataConfigs_none?: InputMaybe<OrgDataConfigWhereInput>;
  orgDataConfigs_some?: InputMaybe<OrgDataConfigWhereInput>;
  viewId?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  viewId_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  viewId_ends_with?: InputMaybe<Scalars['String']>;
  /** All values greater than the given value. */
  viewId_gt?: InputMaybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  viewId_gte?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  viewId_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  viewId_lt?: InputMaybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  viewId_lte?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  viewId_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  viewId_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string. */
  viewId_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  viewId_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  viewId_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  viewId_starts_with?: InputMaybe<Scalars['String']>;
};

export type IabCategoryGroup = Node & {
  __typename?: 'IABCategoryGroup';
  createdAt: Scalars['DateTime'];
  createdBy?: Maybe<User>;
  iabCategories: Array<Scalars['String']>;
  id: Scalars['ID'];
  isActive?: Maybe<Scalars['Boolean']>;
  name: Scalars['String'];
  orgs?: Maybe<Array<Org>>;
  updatedAt: Scalars['DateTime'];
  updatedBy?: Maybe<User>;
};


export type IabCategoryGroupOrgsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<OrgOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<OrgWhereInput>;
};

export type IabCategoryGroupCreateInput = {
  createdBy?: InputMaybe<UserCreateOneWithoutCreatedIabCategoryGroupsInput>;
  iabCategories?: InputMaybe<IabCategoryGroupCreateiabCategoriesInput>;
  isActive?: InputMaybe<Scalars['Boolean']>;
  name: Scalars['String'];
  orgs?: InputMaybe<OrgCreateManyWithoutIabCategoryGroupInput>;
  updatedBy?: InputMaybe<UserCreateOneWithoutUpdatedIabCategoryGroupsInput>;
};

export type IabCategoryGroupCreateManyWithoutCreatedByInput = {
  connect?: InputMaybe<Array<IabCategoryGroupWhereUniqueInput>>;
  create?: InputMaybe<Array<IabCategoryGroupCreateWithoutCreatedByInput>>;
};

export type IabCategoryGroupCreateManyWithoutOrgsInput = {
  connect?: InputMaybe<Array<IabCategoryGroupWhereUniqueInput>>;
  create?: InputMaybe<Array<IabCategoryGroupCreateWithoutOrgsInput>>;
};

export type IabCategoryGroupCreateManyWithoutUpdatedByInput = {
  connect?: InputMaybe<Array<IabCategoryGroupWhereUniqueInput>>;
  create?: InputMaybe<Array<IabCategoryGroupCreateWithoutUpdatedByInput>>;
};

export type IabCategoryGroupCreateWithoutCreatedByInput = {
  iabCategories?: InputMaybe<IabCategoryGroupCreateiabCategoriesInput>;
  isActive?: InputMaybe<Scalars['Boolean']>;
  name: Scalars['String'];
  orgs?: InputMaybe<OrgCreateManyWithoutIabCategoryGroupInput>;
  updatedBy?: InputMaybe<UserCreateOneWithoutUpdatedIabCategoryGroupsInput>;
};

export type IabCategoryGroupCreateWithoutOrgsInput = {
  createdBy?: InputMaybe<UserCreateOneWithoutCreatedIabCategoryGroupsInput>;
  iabCategories?: InputMaybe<IabCategoryGroupCreateiabCategoriesInput>;
  isActive?: InputMaybe<Scalars['Boolean']>;
  name: Scalars['String'];
  updatedBy?: InputMaybe<UserCreateOneWithoutUpdatedIabCategoryGroupsInput>;
};

export type IabCategoryGroupCreateWithoutUpdatedByInput = {
  createdBy?: InputMaybe<UserCreateOneWithoutCreatedIabCategoryGroupsInput>;
  iabCategories?: InputMaybe<IabCategoryGroupCreateiabCategoriesInput>;
  isActive?: InputMaybe<Scalars['Boolean']>;
  name: Scalars['String'];
  orgs?: InputMaybe<OrgCreateManyWithoutIabCategoryGroupInput>;
};

export type IabCategoryGroupCreateiabCategoriesInput = {
  set?: InputMaybe<Array<Scalars['String']>>;
};

export enum IabCategoryGroupOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  IsActiveAsc = 'isActive_ASC',
  IsActiveDesc = 'isActive_DESC',
  NameAsc = 'name_ASC',
  NameDesc = 'name_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC'
}

export type IabCategoryGroupUpdateManyWithoutCreatedByInput = {
  connect?: InputMaybe<Array<IabCategoryGroupWhereUniqueInput>>;
  create?: InputMaybe<Array<IabCategoryGroupCreateWithoutCreatedByInput>>;
  delete?: InputMaybe<Array<IabCategoryGroupWhereUniqueInput>>;
  disconnect?: InputMaybe<Array<IabCategoryGroupWhereUniqueInput>>;
  update?: InputMaybe<Array<IabCategoryGroupUpdateWithWhereUniqueWithoutCreatedByInput>>;
  upsert?: InputMaybe<Array<IabCategoryGroupUpsertWithWhereUniqueWithoutCreatedByInput>>;
};

export type IabCategoryGroupUpdateManyWithoutOrgsInput = {
  connect?: InputMaybe<Array<IabCategoryGroupWhereUniqueInput>>;
  create?: InputMaybe<Array<IabCategoryGroupCreateWithoutOrgsInput>>;
  delete?: InputMaybe<Array<IabCategoryGroupWhereUniqueInput>>;
  disconnect?: InputMaybe<Array<IabCategoryGroupWhereUniqueInput>>;
  update?: InputMaybe<Array<IabCategoryGroupUpdateWithWhereUniqueWithoutOrgsInput>>;
  upsert?: InputMaybe<Array<IabCategoryGroupUpsertWithWhereUniqueWithoutOrgsInput>>;
};

export type IabCategoryGroupUpdateManyWithoutUpdatedByInput = {
  connect?: InputMaybe<Array<IabCategoryGroupWhereUniqueInput>>;
  create?: InputMaybe<Array<IabCategoryGroupCreateWithoutUpdatedByInput>>;
  delete?: InputMaybe<Array<IabCategoryGroupWhereUniqueInput>>;
  disconnect?: InputMaybe<Array<IabCategoryGroupWhereUniqueInput>>;
  update?: InputMaybe<Array<IabCategoryGroupUpdateWithWhereUniqueWithoutUpdatedByInput>>;
  upsert?: InputMaybe<Array<IabCategoryGroupUpsertWithWhereUniqueWithoutUpdatedByInput>>;
};

export type IabCategoryGroupUpdateWithWhereUniqueWithoutCreatedByInput = {
  data: IabCategoryGroupUpdateWithoutCreatedByDataInput;
  where: IabCategoryGroupWhereUniqueInput;
};

export type IabCategoryGroupUpdateWithWhereUniqueWithoutOrgsInput = {
  data: IabCategoryGroupUpdateWithoutOrgsDataInput;
  where: IabCategoryGroupWhereUniqueInput;
};

export type IabCategoryGroupUpdateWithWhereUniqueWithoutUpdatedByInput = {
  data: IabCategoryGroupUpdateWithoutUpdatedByDataInput;
  where: IabCategoryGroupWhereUniqueInput;
};

export type IabCategoryGroupUpdateWithoutCreatedByDataInput = {
  iabCategories?: InputMaybe<IabCategoryGroupUpdateiabCategoriesInput>;
  isActive?: InputMaybe<Scalars['Boolean']>;
  name?: InputMaybe<Scalars['String']>;
  orgs?: InputMaybe<OrgUpdateManyWithoutIabCategoryGroupInput>;
  updatedBy?: InputMaybe<UserUpdateOneWithoutUpdatedIabCategoryGroupsInput>;
};

export type IabCategoryGroupUpdateWithoutOrgsDataInput = {
  createdBy?: InputMaybe<UserUpdateOneWithoutCreatedIabCategoryGroupsInput>;
  iabCategories?: InputMaybe<IabCategoryGroupUpdateiabCategoriesInput>;
  isActive?: InputMaybe<Scalars['Boolean']>;
  name?: InputMaybe<Scalars['String']>;
  updatedBy?: InputMaybe<UserUpdateOneWithoutUpdatedIabCategoryGroupsInput>;
};

export type IabCategoryGroupUpdateWithoutUpdatedByDataInput = {
  createdBy?: InputMaybe<UserUpdateOneWithoutCreatedIabCategoryGroupsInput>;
  iabCategories?: InputMaybe<IabCategoryGroupUpdateiabCategoriesInput>;
  isActive?: InputMaybe<Scalars['Boolean']>;
  name?: InputMaybe<Scalars['String']>;
  orgs?: InputMaybe<OrgUpdateManyWithoutIabCategoryGroupInput>;
};

export type IabCategoryGroupUpdateiabCategoriesInput = {
  set?: InputMaybe<Array<Scalars['String']>>;
};

export type IabCategoryGroupUpsertWithWhereUniqueWithoutCreatedByInput = {
  create: IabCategoryGroupCreateWithoutCreatedByInput;
  update: IabCategoryGroupUpdateWithoutCreatedByDataInput;
  where: IabCategoryGroupWhereUniqueInput;
};

export type IabCategoryGroupUpsertWithWhereUniqueWithoutOrgsInput = {
  create: IabCategoryGroupCreateWithoutOrgsInput;
  update: IabCategoryGroupUpdateWithoutOrgsDataInput;
  where: IabCategoryGroupWhereUniqueInput;
};

export type IabCategoryGroupUpsertWithWhereUniqueWithoutUpdatedByInput = {
  create: IabCategoryGroupCreateWithoutUpdatedByInput;
  update: IabCategoryGroupUpdateWithoutUpdatedByDataInput;
  where: IabCategoryGroupWhereUniqueInput;
};

export type IabCategoryGroupWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<IabCategoryGroupWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<IabCategoryGroupWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<IabCategoryGroupWhereInput>>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  createdBy?: InputMaybe<UserWhereInput>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: InputMaybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: InputMaybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: InputMaybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  isActive?: InputMaybe<Scalars['Boolean']>;
  /** All values that are not equal to given value. */
  isActive_not?: InputMaybe<Scalars['Boolean']>;
  name?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  name_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  name_ends_with?: InputMaybe<Scalars['String']>;
  /** All values greater than the given value. */
  name_gt?: InputMaybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  name_gte?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  name_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  name_lt?: InputMaybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  name_lte?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  name_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  name_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string. */
  name_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  name_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  name_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  name_starts_with?: InputMaybe<Scalars['String']>;
  orgs_every?: InputMaybe<OrgWhereInput>;
  orgs_none?: InputMaybe<OrgWhereInput>;
  orgs_some?: InputMaybe<OrgWhereInput>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

export type IabCategoryGroupWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export type IndicaEffects = Node & {
  __typename?: 'IndicaEffects';
  body_buzz?: Maybe<Scalars['Float']>;
  calm?: Maybe<Scalars['Float']>;
  couchlock?: Maybe<Scalars['Float']>;
  createdAt: Scalars['DateTime'];
  id: Scalars['ID'];
  mellow?: Maybe<Scalars['Float']>;
  relaxed?: Maybe<Scalars['Float']>;
  sleepy?: Maybe<Scalars['Float']>;
  strainTypes?: Maybe<Array<StrainType>>;
  updatedAt: Scalars['DateTime'];
};


export type IndicaEffectsStrainTypesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<StrainTypeOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<StrainTypeWhereInput>;
};

export type IndicaEffectsCreateOneWithoutStrainTypesInput = {
  connect?: InputMaybe<IndicaEffectsWhereUniqueInput>;
  create?: InputMaybe<IndicaEffectsCreateWithoutStrainTypesInput>;
};

export type IndicaEffectsCreateWithoutStrainTypesInput = {
  body_buzz?: InputMaybe<Scalars['Float']>;
  calm?: InputMaybe<Scalars['Float']>;
  couchlock?: InputMaybe<Scalars['Float']>;
  mellow?: InputMaybe<Scalars['Float']>;
  relaxed?: InputMaybe<Scalars['Float']>;
  sleepy?: InputMaybe<Scalars['Float']>;
};

export type IndicaEffectsUpdateOneWithoutStrainTypesInput = {
  connect?: InputMaybe<IndicaEffectsWhereUniqueInput>;
  create?: InputMaybe<IndicaEffectsCreateWithoutStrainTypesInput>;
  delete?: InputMaybe<Scalars['Boolean']>;
  disconnect?: InputMaybe<Scalars['Boolean']>;
  update?: InputMaybe<IndicaEffectsUpdateWithoutStrainTypesDataInput>;
  upsert?: InputMaybe<IndicaEffectsUpsertWithoutStrainTypesInput>;
};

export type IndicaEffectsUpdateWithoutStrainTypesDataInput = {
  body_buzz?: InputMaybe<Scalars['Float']>;
  calm?: InputMaybe<Scalars['Float']>;
  couchlock?: InputMaybe<Scalars['Float']>;
  mellow?: InputMaybe<Scalars['Float']>;
  relaxed?: InputMaybe<Scalars['Float']>;
  sleepy?: InputMaybe<Scalars['Float']>;
};

export type IndicaEffectsUpsertWithoutStrainTypesInput = {
  create: IndicaEffectsCreateWithoutStrainTypesInput;
  update: IndicaEffectsUpdateWithoutStrainTypesDataInput;
};

export type IndicaEffectsWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<IndicaEffectsWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<IndicaEffectsWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<IndicaEffectsWhereInput>>;
  body_buzz?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  body_buzz_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  body_buzz_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  body_buzz_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  body_buzz_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  body_buzz_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  body_buzz_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  body_buzz_not_in?: InputMaybe<Array<Scalars['Float']>>;
  calm?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  calm_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  calm_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  calm_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  calm_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  calm_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  calm_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  calm_not_in?: InputMaybe<Array<Scalars['Float']>>;
  couchlock?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  couchlock_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  couchlock_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  couchlock_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  couchlock_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  couchlock_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  couchlock_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  couchlock_not_in?: InputMaybe<Array<Scalars['Float']>>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: InputMaybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: InputMaybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: InputMaybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  mellow?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  mellow_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  mellow_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  mellow_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  mellow_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  mellow_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  mellow_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  mellow_not_in?: InputMaybe<Array<Scalars['Float']>>;
  relaxed?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  relaxed_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  relaxed_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  relaxed_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  relaxed_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  relaxed_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  relaxed_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  relaxed_not_in?: InputMaybe<Array<Scalars['Float']>>;
  sleepy?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  sleepy_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  sleepy_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  sleepy_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  sleepy_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  sleepy_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  sleepy_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  sleepy_not_in?: InputMaybe<Array<Scalars['Float']>>;
  strainTypes_every?: InputMaybe<StrainTypeWhereInput>;
  strainTypes_none?: InputMaybe<StrainTypeWhereInput>;
  strainTypes_some?: InputMaybe<StrainTypeWhereInput>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
};

export type IndicaEffectsWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export type JobLaunchReturn = {
  __typename?: 'JobLaunchReturn';
  success: Scalars['Boolean'];
};

export enum Kpi {
  Cpa = 'CPA',
  Cpc = 'CPC',
  Cpm = 'CPM'
}

export enum Language {
  Arabic = 'ARABIC',
  Bulgarian = 'BULGARIAN',
  Catalan = 'CATALAN',
  Chinese = 'CHINESE',
  Croatian = 'CROATIAN',
  Czech = 'CZECH',
  Danish = 'DANISH',
  Dutch = 'DUTCH',
  English = 'ENGLISH',
  Estonian = 'ESTONIAN',
  Filipino = 'FILIPINO',
  Finnish = 'FINNISH',
  French = 'FRENCH',
  German = 'GERMAN',
  Greek = 'GREEK',
  Hebrew = 'HEBREW',
  Hindi = 'HINDI',
  Hungarian = 'HUNGARIAN',
  Icelandic = 'ICELANDIC',
  Indonesian = 'INDONESIAN',
  Italian = 'ITALIAN',
  Japanese = 'JAPANESE',
  Korean = 'KOREAN',
  Latvian = 'LATVIAN',
  Lithuanian = 'LITHUANIAN',
  Norwegian = 'NORWEGIAN',
  Polish = 'POLISH',
  Portuguese = 'PORTUGUESE',
  Romanian = 'ROMANIAN',
  Russian = 'RUSSIAN',
  Serbian = 'SERBIAN',
  Slovak = 'SLOVAK',
  Slovenian = 'SLOVENIAN',
  Spanish = 'SPANISH',
  Swedish = 'SWEDISH',
  Thai = 'THAI',
  Turkish = 'TURKISH',
  Ukrainian = 'UKRAINIAN',
  Urdu = 'URDU',
  Vietnamese = 'VIETNAMESE'
}

export type LaunchAmobeeCampaignInput = {
  campaignOrderId: Scalars['ID'];
  orgId: Scalars['ID'];
};

export type License = Node & {
  __typename?: 'License';
  changeLog?: Maybe<Array<Change>>;
  createdAt: Scalars['DateTime'];
  designations: Array<DesignationType>;
  expiration?: Maybe<Scalars['DateTime']>;
  id: Scalars['ID'];
  isValid: Scalars['Boolean'];
  licenseIdentifier: Scalars['String'];
  licenseInformation: Scalars['Json'];
  licenseType?: Maybe<LicenseType>;
  location?: Maybe<Location>;
  state: StateType;
  updatedAt: Scalars['DateTime'];
};


export type LicenseChangeLogArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ChangeOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ChangeWhereInput>;
};

/** A connection to a list of items. */
export type LicenseConnection = {
  __typename?: 'LicenseConnection';
  aggregate: AggregateLicense;
  /** A list of edges. */
  edges: Array<Maybe<LicenseEdge>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type LicenseCreateManyWithoutLocationInput = {
  connect?: InputMaybe<Array<LicenseWhereUniqueInput>>;
  create?: InputMaybe<Array<LicenseCreateWithoutLocationInput>>;
};

export type LicenseCreateOneWithoutChangeLogInput = {
  connect?: InputMaybe<LicenseWhereUniqueInput>;
  create?: InputMaybe<LicenseCreateWithoutChangeLogInput>;
};

export type LicenseCreateWithoutChangeLogInput = {
  designations?: InputMaybe<LicenseCreatedesignationsInput>;
  expiration?: InputMaybe<Scalars['DateTime']>;
  isValid: Scalars['Boolean'];
  licenseIdentifier: Scalars['String'];
  licenseInformation: Scalars['Json'];
  licenseType?: InputMaybe<LicenseType>;
  location?: InputMaybe<LocationCreateOneWithoutLicensesInput>;
  state: StateType;
};

export type LicenseCreateWithoutLocationInput = {
  changeLog?: InputMaybe<ChangeCreateManyWithoutLicenseInput>;
  designations?: InputMaybe<LicenseCreatedesignationsInput>;
  expiration?: InputMaybe<Scalars['DateTime']>;
  isValid: Scalars['Boolean'];
  licenseIdentifier: Scalars['String'];
  licenseInformation: Scalars['Json'];
  licenseType?: InputMaybe<LicenseType>;
  state: StateType;
};

export type LicenseCreatedesignationsInput = {
  set?: InputMaybe<Array<DesignationType>>;
};

/** An edge in a connection. */
export type LicenseEdge = {
  __typename?: 'LicenseEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: License;
};

export enum LicenseOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  ExpirationAsc = 'expiration_ASC',
  ExpirationDesc = 'expiration_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  IsValidAsc = 'isValid_ASC',
  IsValidDesc = 'isValid_DESC',
  LicenseIdentifierAsc = 'licenseIdentifier_ASC',
  LicenseIdentifierDesc = 'licenseIdentifier_DESC',
  LicenseInformationAsc = 'licenseInformation_ASC',
  LicenseInformationDesc = 'licenseInformation_DESC',
  LicenseTypeAsc = 'licenseType_ASC',
  LicenseTypeDesc = 'licenseType_DESC',
  StateAsc = 'state_ASC',
  StateDesc = 'state_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC'
}

export type LicensePreviousValues = {
  __typename?: 'LicensePreviousValues';
  createdAt: Scalars['DateTime'];
  designations: Array<DesignationType>;
  expiration?: Maybe<Scalars['DateTime']>;
  id: Scalars['ID'];
  isValid: Scalars['Boolean'];
  licenseIdentifier: Scalars['String'];
  licenseInformation: Scalars['Json'];
  licenseType?: Maybe<LicenseType>;
  state: StateType;
  updatedAt: Scalars['DateTime'];
};

export type LicenseSubscriptionPayload = {
  __typename?: 'LicenseSubscriptionPayload';
  mutation: MutationType;
  node?: Maybe<License>;
  previousValues?: Maybe<LicensePreviousValues>;
  updatedFields?: Maybe<Array<Scalars['String']>>;
};

export type LicenseSubscriptionWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<LicenseSubscriptionWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<LicenseSubscriptionWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<LicenseSubscriptionWhereInput>>;
  /** The subscription event gets dispatched when it's listed in mutation_in */
  mutation_in?: InputMaybe<Array<MutationType>>;
  node?: InputMaybe<LicenseWhereInput>;
  /** The subscription event gets only dispatched when one of the updated fields names is included in this list */
  updatedFields_contains?: InputMaybe<Scalars['String']>;
  /** The subscription event gets only dispatched when all of the field names included in this list have been updated */
  updatedFields_contains_every?: InputMaybe<Array<Scalars['String']>>;
  /** The subscription event gets only dispatched when some of the field names included in this list have been updated */
  updatedFields_contains_some?: InputMaybe<Array<Scalars['String']>>;
};

export enum LicenseType {
  Delivery = 'DELIVERY',
  Dispensary = 'DISPENSARY',
  Distribution = 'DISTRIBUTION',
  Event = 'EVENT'
}

export type LicenseUpdateInput = {
  changeLog?: InputMaybe<ChangeUpdateManyWithoutLicenseInput>;
  designations?: InputMaybe<LicenseUpdatedesignationsInput>;
  expiration?: InputMaybe<Scalars['DateTime']>;
  isValid?: InputMaybe<Scalars['Boolean']>;
  licenseIdentifier?: InputMaybe<Scalars['String']>;
  licenseInformation?: InputMaybe<Scalars['Json']>;
  licenseType?: InputMaybe<LicenseType>;
  location?: InputMaybe<LocationUpdateOneWithoutLicensesInput>;
  state?: InputMaybe<StateType>;
};

export type LicenseUpdateManyWithoutLocationInput = {
  connect?: InputMaybe<Array<LicenseWhereUniqueInput>>;
  create?: InputMaybe<Array<LicenseCreateWithoutLocationInput>>;
  delete?: InputMaybe<Array<LicenseWhereUniqueInput>>;
  disconnect?: InputMaybe<Array<LicenseWhereUniqueInput>>;
  update?: InputMaybe<Array<LicenseUpdateWithWhereUniqueWithoutLocationInput>>;
  upsert?: InputMaybe<Array<LicenseUpsertWithWhereUniqueWithoutLocationInput>>;
};

export type LicenseUpdateOneWithoutChangeLogInput = {
  connect?: InputMaybe<LicenseWhereUniqueInput>;
  create?: InputMaybe<LicenseCreateWithoutChangeLogInput>;
  delete?: InputMaybe<Scalars['Boolean']>;
  disconnect?: InputMaybe<Scalars['Boolean']>;
  update?: InputMaybe<LicenseUpdateWithoutChangeLogDataInput>;
  upsert?: InputMaybe<LicenseUpsertWithoutChangeLogInput>;
};

export type LicenseUpdateWithWhereUniqueWithoutLocationInput = {
  data: LicenseUpdateWithoutLocationDataInput;
  where: LicenseWhereUniqueInput;
};

export type LicenseUpdateWithoutChangeLogDataInput = {
  designations?: InputMaybe<LicenseUpdatedesignationsInput>;
  expiration?: InputMaybe<Scalars['DateTime']>;
  isValid?: InputMaybe<Scalars['Boolean']>;
  licenseIdentifier?: InputMaybe<Scalars['String']>;
  licenseInformation?: InputMaybe<Scalars['Json']>;
  licenseType?: InputMaybe<LicenseType>;
  location?: InputMaybe<LocationUpdateOneWithoutLicensesInput>;
  state?: InputMaybe<StateType>;
};

export type LicenseUpdateWithoutLocationDataInput = {
  changeLog?: InputMaybe<ChangeUpdateManyWithoutLicenseInput>;
  designations?: InputMaybe<LicenseUpdatedesignationsInput>;
  expiration?: InputMaybe<Scalars['DateTime']>;
  isValid?: InputMaybe<Scalars['Boolean']>;
  licenseIdentifier?: InputMaybe<Scalars['String']>;
  licenseInformation?: InputMaybe<Scalars['Json']>;
  licenseType?: InputMaybe<LicenseType>;
  state?: InputMaybe<StateType>;
};

export type LicenseUpdatedesignationsInput = {
  set?: InputMaybe<Array<DesignationType>>;
};

export type LicenseUpsertWithWhereUniqueWithoutLocationInput = {
  create: LicenseCreateWithoutLocationInput;
  update: LicenseUpdateWithoutLocationDataInput;
  where: LicenseWhereUniqueInput;
};

export type LicenseUpsertWithoutChangeLogInput = {
  create: LicenseCreateWithoutChangeLogInput;
  update: LicenseUpdateWithoutChangeLogDataInput;
};

export type LicenseWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<LicenseWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<LicenseWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<LicenseWhereInput>>;
  changeLog_every?: InputMaybe<ChangeWhereInput>;
  changeLog_none?: InputMaybe<ChangeWhereInput>;
  changeLog_some?: InputMaybe<ChangeWhereInput>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  expiration?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  expiration_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  expiration_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  expiration_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  expiration_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  expiration_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  expiration_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  expiration_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: InputMaybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: InputMaybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: InputMaybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  isValid?: InputMaybe<Scalars['Boolean']>;
  /** All values that are not equal to given value. */
  isValid_not?: InputMaybe<Scalars['Boolean']>;
  licenseIdentifier?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  licenseIdentifier_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  licenseIdentifier_ends_with?: InputMaybe<Scalars['String']>;
  /** All values greater than the given value. */
  licenseIdentifier_gt?: InputMaybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  licenseIdentifier_gte?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  licenseIdentifier_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  licenseIdentifier_lt?: InputMaybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  licenseIdentifier_lte?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  licenseIdentifier_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  licenseIdentifier_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string. */
  licenseIdentifier_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  licenseIdentifier_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  licenseIdentifier_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  licenseIdentifier_starts_with?: InputMaybe<Scalars['String']>;
  licenseType?: InputMaybe<LicenseType>;
  /** All values that are contained in given list. */
  licenseType_in?: InputMaybe<Array<LicenseType>>;
  /** All values that are not equal to given value. */
  licenseType_not?: InputMaybe<LicenseType>;
  /** All values that are not contained in given list. */
  licenseType_not_in?: InputMaybe<Array<LicenseType>>;
  location?: InputMaybe<LocationWhereInput>;
  state?: InputMaybe<StateType>;
  /** All values that are contained in given list. */
  state_in?: InputMaybe<Array<StateType>>;
  /** All values that are not equal to given value. */
  state_not?: InputMaybe<StateType>;
  /** All values that are not contained in given list. */
  state_not_in?: InputMaybe<Array<StateType>>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
};

export type LicenseWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
  licenseIdentifier?: InputMaybe<Scalars['String']>;
};

export type LineItem = Node & {
  __typename?: 'LineItem';
  adProviderId?: Maybe<Scalars['String']>;
  adUnits?: Maybe<Array<AdUnit>>;
  aggregateData?: Maybe<AggregateDataObject>;
  budgetTotal?: Maybe<Scalars['Float']>;
  campaign?: Maybe<Campaign>;
  cpm?: Maybe<Scalars['Float']>;
  createdAt: Scalars['DateTime'];
  demandSidePlatform?: Maybe<DemandSidePlatform>;
  endDate?: Maybe<Scalars['DateTime']>;
  id: Scalars['ID'];
  name?: Maybe<Scalars['String']>;
  startDate?: Maybe<Scalars['DateTime']>;
  updatedAt: Scalars['DateTime'];
};


export type LineItemAdUnitsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<AdUnitOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<AdUnitWhereInput>;
};

export type LineItemCreateManyWithoutAdUnitsInput = {
  connect?: InputMaybe<Array<LineItemWhereUniqueInput>>;
  create?: InputMaybe<Array<LineItemCreateWithoutAdUnitsInput>>;
};

export type LineItemCreateManyWithoutCampaignInput = {
  connect?: InputMaybe<Array<LineItemWhereUniqueInput>>;
  create?: InputMaybe<Array<LineItemCreateWithoutCampaignInput>>;
};

export type LineItemCreateOneWithoutAggregateDataInput = {
  connect?: InputMaybe<LineItemWhereUniqueInput>;
  create?: InputMaybe<LineItemCreateWithoutAggregateDataInput>;
};

export type LineItemCreateWithoutAdUnitsInput = {
  adProviderId?: InputMaybe<Scalars['String']>;
  aggregateData?: InputMaybe<AggregateDataObjectCreateOneWithoutLineItemInput>;
  budgetTotal?: InputMaybe<Scalars['Float']>;
  campaign?: InputMaybe<CampaignCreateOneWithoutLineItemsInput>;
  cpm?: InputMaybe<Scalars['Float']>;
  demandSidePlatform?: InputMaybe<DemandSidePlatform>;
  endDate?: InputMaybe<Scalars['DateTime']>;
  name?: InputMaybe<Scalars['String']>;
  startDate?: InputMaybe<Scalars['DateTime']>;
};

export type LineItemCreateWithoutAggregateDataInput = {
  adProviderId?: InputMaybe<Scalars['String']>;
  adUnits?: InputMaybe<AdUnitCreateManyWithoutLineItemsInput>;
  budgetTotal?: InputMaybe<Scalars['Float']>;
  campaign?: InputMaybe<CampaignCreateOneWithoutLineItemsInput>;
  cpm?: InputMaybe<Scalars['Float']>;
  demandSidePlatform?: InputMaybe<DemandSidePlatform>;
  endDate?: InputMaybe<Scalars['DateTime']>;
  name?: InputMaybe<Scalars['String']>;
  startDate?: InputMaybe<Scalars['DateTime']>;
};

export type LineItemCreateWithoutCampaignInput = {
  adProviderId?: InputMaybe<Scalars['String']>;
  adUnits?: InputMaybe<AdUnitCreateManyWithoutLineItemsInput>;
  aggregateData?: InputMaybe<AggregateDataObjectCreateOneWithoutLineItemInput>;
  budgetTotal?: InputMaybe<Scalars['Float']>;
  cpm?: InputMaybe<Scalars['Float']>;
  demandSidePlatform?: InputMaybe<DemandSidePlatform>;
  endDate?: InputMaybe<Scalars['DateTime']>;
  name?: InputMaybe<Scalars['String']>;
  startDate?: InputMaybe<Scalars['DateTime']>;
};

export enum LineItemOrderByInput {
  AdProviderIdAsc = 'adProviderId_ASC',
  AdProviderIdDesc = 'adProviderId_DESC',
  BudgetTotalAsc = 'budgetTotal_ASC',
  BudgetTotalDesc = 'budgetTotal_DESC',
  CpmAsc = 'cpm_ASC',
  CpmDesc = 'cpm_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DemandSidePlatformAsc = 'demandSidePlatform_ASC',
  DemandSidePlatformDesc = 'demandSidePlatform_DESC',
  EndDateAsc = 'endDate_ASC',
  EndDateDesc = 'endDate_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  NameAsc = 'name_ASC',
  NameDesc = 'name_DESC',
  StartDateAsc = 'startDate_ASC',
  StartDateDesc = 'startDate_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC'
}

export type LineItemUpdateManyWithoutAdUnitsInput = {
  connect?: InputMaybe<Array<LineItemWhereUniqueInput>>;
  create?: InputMaybe<Array<LineItemCreateWithoutAdUnitsInput>>;
  delete?: InputMaybe<Array<LineItemWhereUniqueInput>>;
  disconnect?: InputMaybe<Array<LineItemWhereUniqueInput>>;
  update?: InputMaybe<Array<LineItemUpdateWithWhereUniqueWithoutAdUnitsInput>>;
  upsert?: InputMaybe<Array<LineItemUpsertWithWhereUniqueWithoutAdUnitsInput>>;
};

export type LineItemUpdateManyWithoutCampaignInput = {
  connect?: InputMaybe<Array<LineItemWhereUniqueInput>>;
  create?: InputMaybe<Array<LineItemCreateWithoutCampaignInput>>;
  delete?: InputMaybe<Array<LineItemWhereUniqueInput>>;
  disconnect?: InputMaybe<Array<LineItemWhereUniqueInput>>;
  update?: InputMaybe<Array<LineItemUpdateWithWhereUniqueWithoutCampaignInput>>;
  upsert?: InputMaybe<Array<LineItemUpsertWithWhereUniqueWithoutCampaignInput>>;
};

export type LineItemUpdateOneWithoutAggregateDataInput = {
  connect?: InputMaybe<LineItemWhereUniqueInput>;
  create?: InputMaybe<LineItemCreateWithoutAggregateDataInput>;
  delete?: InputMaybe<Scalars['Boolean']>;
  disconnect?: InputMaybe<Scalars['Boolean']>;
  update?: InputMaybe<LineItemUpdateWithoutAggregateDataDataInput>;
  upsert?: InputMaybe<LineItemUpsertWithoutAggregateDataInput>;
};

export type LineItemUpdateWithWhereUniqueWithoutAdUnitsInput = {
  data: LineItemUpdateWithoutAdUnitsDataInput;
  where: LineItemWhereUniqueInput;
};

export type LineItemUpdateWithWhereUniqueWithoutCampaignInput = {
  data: LineItemUpdateWithoutCampaignDataInput;
  where: LineItemWhereUniqueInput;
};

export type LineItemUpdateWithoutAdUnitsDataInput = {
  adProviderId?: InputMaybe<Scalars['String']>;
  aggregateData?: InputMaybe<AggregateDataObjectUpdateOneWithoutLineItemInput>;
  budgetTotal?: InputMaybe<Scalars['Float']>;
  campaign?: InputMaybe<CampaignUpdateOneWithoutLineItemsInput>;
  cpm?: InputMaybe<Scalars['Float']>;
  demandSidePlatform?: InputMaybe<DemandSidePlatform>;
  endDate?: InputMaybe<Scalars['DateTime']>;
  name?: InputMaybe<Scalars['String']>;
  startDate?: InputMaybe<Scalars['DateTime']>;
};

export type LineItemUpdateWithoutAggregateDataDataInput = {
  adProviderId?: InputMaybe<Scalars['String']>;
  adUnits?: InputMaybe<AdUnitUpdateManyWithoutLineItemsInput>;
  budgetTotal?: InputMaybe<Scalars['Float']>;
  campaign?: InputMaybe<CampaignUpdateOneWithoutLineItemsInput>;
  cpm?: InputMaybe<Scalars['Float']>;
  demandSidePlatform?: InputMaybe<DemandSidePlatform>;
  endDate?: InputMaybe<Scalars['DateTime']>;
  name?: InputMaybe<Scalars['String']>;
  startDate?: InputMaybe<Scalars['DateTime']>;
};

export type LineItemUpdateWithoutCampaignDataInput = {
  adProviderId?: InputMaybe<Scalars['String']>;
  adUnits?: InputMaybe<AdUnitUpdateManyWithoutLineItemsInput>;
  aggregateData?: InputMaybe<AggregateDataObjectUpdateOneWithoutLineItemInput>;
  budgetTotal?: InputMaybe<Scalars['Float']>;
  cpm?: InputMaybe<Scalars['Float']>;
  demandSidePlatform?: InputMaybe<DemandSidePlatform>;
  endDate?: InputMaybe<Scalars['DateTime']>;
  name?: InputMaybe<Scalars['String']>;
  startDate?: InputMaybe<Scalars['DateTime']>;
};

export type LineItemUpsertWithWhereUniqueWithoutAdUnitsInput = {
  create: LineItemCreateWithoutAdUnitsInput;
  update: LineItemUpdateWithoutAdUnitsDataInput;
  where: LineItemWhereUniqueInput;
};

export type LineItemUpsertWithWhereUniqueWithoutCampaignInput = {
  create: LineItemCreateWithoutCampaignInput;
  update: LineItemUpdateWithoutCampaignDataInput;
  where: LineItemWhereUniqueInput;
};

export type LineItemUpsertWithoutAggregateDataInput = {
  create: LineItemCreateWithoutAggregateDataInput;
  update: LineItemUpdateWithoutAggregateDataDataInput;
};

export type LineItemWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<LineItemWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<LineItemWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<LineItemWhereInput>>;
  adProviderId?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  adProviderId_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  adProviderId_ends_with?: InputMaybe<Scalars['String']>;
  /** All values greater than the given value. */
  adProviderId_gt?: InputMaybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  adProviderId_gte?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  adProviderId_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  adProviderId_lt?: InputMaybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  adProviderId_lte?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  adProviderId_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  adProviderId_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string. */
  adProviderId_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  adProviderId_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  adProviderId_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  adProviderId_starts_with?: InputMaybe<Scalars['String']>;
  adUnits_every?: InputMaybe<AdUnitWhereInput>;
  adUnits_none?: InputMaybe<AdUnitWhereInput>;
  adUnits_some?: InputMaybe<AdUnitWhereInput>;
  aggregateData?: InputMaybe<AggregateDataObjectWhereInput>;
  budgetTotal?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  budgetTotal_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  budgetTotal_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  budgetTotal_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  budgetTotal_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  budgetTotal_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  budgetTotal_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  budgetTotal_not_in?: InputMaybe<Array<Scalars['Float']>>;
  campaign?: InputMaybe<CampaignWhereInput>;
  cpm?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  cpm_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  cpm_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  cpm_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  cpm_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  cpm_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  cpm_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  cpm_not_in?: InputMaybe<Array<Scalars['Float']>>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  demandSidePlatform?: InputMaybe<DemandSidePlatform>;
  /** All values that are contained in given list. */
  demandSidePlatform_in?: InputMaybe<Array<DemandSidePlatform>>;
  /** All values that are not equal to given value. */
  demandSidePlatform_not?: InputMaybe<DemandSidePlatform>;
  /** All values that are not contained in given list. */
  demandSidePlatform_not_in?: InputMaybe<Array<DemandSidePlatform>>;
  endDate?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  endDate_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  endDate_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  endDate_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  endDate_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  endDate_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  endDate_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  endDate_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: InputMaybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: InputMaybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: InputMaybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  name?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  name_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  name_ends_with?: InputMaybe<Scalars['String']>;
  /** All values greater than the given value. */
  name_gt?: InputMaybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  name_gte?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  name_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  name_lt?: InputMaybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  name_lte?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  name_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  name_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string. */
  name_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  name_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  name_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  name_starts_with?: InputMaybe<Scalars['String']>;
  startDate?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  startDate_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  startDate_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  startDate_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  startDate_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  startDate_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  startDate_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  startDate_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
};

export type LineItemWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export type LiquidMCreativeInput = {
  bannerUrl?: InputMaybe<Scalars['String']>;
  height?: InputMaybe<Scalars['Int']>;
  width?: InputMaybe<Scalars['Int']>;
};

export type LiquidMGeoCoordinateInput = {
  lat?: InputMaybe<Scalars['Float']>;
  lng?: InputMaybe<Scalars['Float']>;
  name?: InputMaybe<Scalars['String']>;
  rad?: InputMaybe<Scalars['Float']>;
};

export type LiquidMNativeCreateAttributeInput = {
  campaignId?: InputMaybe<Scalars['Int']>;
  creative?: InputMaybe<LiquidMCreativeInput>;
  name?: InputMaybe<Scalars['String']>;
  targetUrl?: InputMaybe<Scalars['String']>;
  trackers?: InputMaybe<Array<InputMaybe<LiquidMTrackersInput>>>;
};

export type LiquidMSettingAttributeInput = {
  dealIds?: InputMaybe<Array<InputMaybe<Scalars['Int']>>>;
  targetUrl?: InputMaybe<Scalars['String']>;
  trackers?: InputMaybe<Array<InputMaybe<LiquidMTrackersInput>>>;
};

export type LiquidMSupplyAttributeInput = {
  exclAppIds?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  exclDomains?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  exclPublishers?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  exclSites?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  inclAppIds?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  inclDomains?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  inclPublishers?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  inclSites?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
};

export type LiquidMTrackersInput = {
  resource?: InputMaybe<Scalars['String']>;
  type?: InputMaybe<Scalars['String']>;
};

export type LiquidMWithBudgetsInput = {
  endDate?: InputMaybe<Scalars['DateTime']>;
  startDate?: InputMaybe<Scalars['DateTime']>;
  totalBudget?: InputMaybe<Scalars['Float']>;
  unitPrice?: InputMaybe<Scalars['Float']>;
};

export type Location = Node & {
  __typename?: 'Location';
  audienceType?: Maybe<AudienceType>;
  catalogs?: Maybe<Array<Catalog>>;
  circles?: Maybe<Array<Circle>>;
  city: Scalars['String'];
  contact?: Maybe<Scalars['String']>;
  country?: Maybe<CountryType>;
  county?: Maybe<Scalars['String']>;
  createdAt: Scalars['DateTime'];
  description?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  events?: Maybe<Array<Event>>;
  formattedAddress: Scalars['String'];
  geoframe?: Maybe<GeoTarget>;
  hours?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  lat: Scalars['Float'];
  licenses?: Maybe<Array<License>>;
  lng: Scalars['Float'];
  locationKey?: Maybe<Scalars['String']>;
  locationType?: Maybe<LocationType>;
  logo?: Maybe<Media>;
  mediaList?: Maybe<Array<Media>>;
  message?: Maybe<Message>;
  name: Scalars['String'];
  org?: Maybe<Org>;
  phone?: Maybe<Scalars['String']>;
  polygons?: Maybe<Array<Polygon>>;
  qrs?: Maybe<Array<Qr>>;
  reviews?: Maybe<Array<Review>>;
  state?: Maybe<StateType>;
  strains?: Maybe<Array<Strain>>;
  street: Scalars['String'];
  transConfig?: Maybe<TransactionsConfig>;
  updatedAt: Scalars['DateTime'];
  url?: Maybe<Scalars['String']>;
  zip: Scalars['String'];
};


export type LocationCatalogsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<CatalogOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<CatalogWhereInput>;
};


export type LocationCirclesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<CircleOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<CircleWhereInput>;
};


export type LocationEventsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<EventOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<EventWhereInput>;
};


export type LocationLicensesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<LicenseOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<LicenseWhereInput>;
};


export type LocationMediaListArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MediaOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<MediaWhereInput>;
};


export type LocationPolygonsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<PolygonOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<PolygonWhereInput>;
};


export type LocationQrsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<QrOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<QrWhereInput>;
};


export type LocationReviewsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ReviewOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ReviewWhereInput>;
};


export type LocationStrainsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<StrainOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<StrainWhereInput>;
};

export type LocationCreateInput = {
  audienceType?: InputMaybe<AudienceType>;
  catalogs?: InputMaybe<CatalogCreateManyWithoutLocationInput>;
  circles?: InputMaybe<CircleCreateManyWithoutLocationInput>;
  city: Scalars['String'];
  contact?: InputMaybe<Scalars['String']>;
  country?: InputMaybe<CountryType>;
  county?: InputMaybe<Scalars['String']>;
  description?: InputMaybe<Scalars['String']>;
  email?: InputMaybe<Scalars['String']>;
  events?: InputMaybe<EventCreateManyWithoutLocationInput>;
  formattedAddress: Scalars['String'];
  geoframe?: InputMaybe<GeoTargetCreateOneWithoutLocationInput>;
  hours?: InputMaybe<Scalars['String']>;
  lat: Scalars['Float'];
  licenses?: InputMaybe<LicenseCreateManyWithoutLocationInput>;
  lng: Scalars['Float'];
  locationKey?: InputMaybe<Scalars['String']>;
  locationType?: InputMaybe<LocationType>;
  logo?: InputMaybe<MediaCreateOneInput>;
  mediaList?: InputMaybe<MediaCreateManyInput>;
  message?: InputMaybe<MessageCreateOneWithoutLocationsInput>;
  name: Scalars['String'];
  org?: InputMaybe<OrgCreateOneInput>;
  phone?: InputMaybe<Scalars['String']>;
  polygons?: InputMaybe<PolygonCreateManyWithoutLocationInput>;
  qrs?: InputMaybe<QrCreateManyWithoutLocationInput>;
  reviews?: InputMaybe<ReviewCreateManyWithoutLocationInput>;
  state?: InputMaybe<StateType>;
  strains?: InputMaybe<StrainCreateManyWithoutLocationsInput>;
  street: Scalars['String'];
  transConfig?: InputMaybe<TransactionsConfigCreateOneWithoutLocationsInput>;
  url?: InputMaybe<Scalars['String']>;
  zip: Scalars['String'];
};

export type LocationCreateManyInput = {
  connect?: InputMaybe<Array<LocationWhereUniqueInput>>;
  create?: InputMaybe<Array<LocationCreateInput>>;
};

export type LocationCreateManyWithoutMessageInput = {
  connect?: InputMaybe<Array<LocationWhereUniqueInput>>;
  create?: InputMaybe<Array<LocationCreateWithoutMessageInput>>;
};

export type LocationCreateManyWithoutStrainsInput = {
  connect?: InputMaybe<Array<LocationWhereUniqueInput>>;
  create?: InputMaybe<Array<LocationCreateWithoutStrainsInput>>;
};

export type LocationCreateManyWithoutTransConfigInput = {
  connect?: InputMaybe<Array<LocationWhereUniqueInput>>;
  create?: InputMaybe<Array<LocationCreateWithoutTransConfigInput>>;
};

export type LocationCreateOneInput = {
  connect?: InputMaybe<LocationWhereUniqueInput>;
  create?: InputMaybe<LocationCreateInput>;
};

export type LocationCreateOneWithoutCatalogsInput = {
  connect?: InputMaybe<LocationWhereUniqueInput>;
  create?: InputMaybe<LocationCreateWithoutCatalogsInput>;
};

export type LocationCreateOneWithoutCirclesInput = {
  connect?: InputMaybe<LocationWhereUniqueInput>;
  create?: InputMaybe<LocationCreateWithoutCirclesInput>;
};

export type LocationCreateOneWithoutEventsInput = {
  connect?: InputMaybe<LocationWhereUniqueInput>;
  create?: InputMaybe<LocationCreateWithoutEventsInput>;
};

export type LocationCreateOneWithoutGeoframeInput = {
  connect?: InputMaybe<LocationWhereUniqueInput>;
  create?: InputMaybe<LocationCreateWithoutGeoframeInput>;
};

export type LocationCreateOneWithoutLicensesInput = {
  connect?: InputMaybe<LocationWhereUniqueInput>;
  create?: InputMaybe<LocationCreateWithoutLicensesInput>;
};

export type LocationCreateOneWithoutPolygonsInput = {
  connect?: InputMaybe<LocationWhereUniqueInput>;
  create?: InputMaybe<LocationCreateWithoutPolygonsInput>;
};

export type LocationCreateOneWithoutQrsInput = {
  connect?: InputMaybe<LocationWhereUniqueInput>;
  create?: InputMaybe<LocationCreateWithoutQrsInput>;
};

export type LocationCreateOneWithoutReviewsInput = {
  connect?: InputMaybe<LocationWhereUniqueInput>;
  create?: InputMaybe<LocationCreateWithoutReviewsInput>;
};

export type LocationCreateWithoutCatalogsInput = {
  audienceType?: InputMaybe<AudienceType>;
  circles?: InputMaybe<CircleCreateManyWithoutLocationInput>;
  city: Scalars['String'];
  contact?: InputMaybe<Scalars['String']>;
  country?: InputMaybe<CountryType>;
  county?: InputMaybe<Scalars['String']>;
  description?: InputMaybe<Scalars['String']>;
  email?: InputMaybe<Scalars['String']>;
  events?: InputMaybe<EventCreateManyWithoutLocationInput>;
  formattedAddress: Scalars['String'];
  geoframe?: InputMaybe<GeoTargetCreateOneWithoutLocationInput>;
  hours?: InputMaybe<Scalars['String']>;
  lat: Scalars['Float'];
  licenses?: InputMaybe<LicenseCreateManyWithoutLocationInput>;
  lng: Scalars['Float'];
  locationKey?: InputMaybe<Scalars['String']>;
  locationType?: InputMaybe<LocationType>;
  logo?: InputMaybe<MediaCreateOneInput>;
  mediaList?: InputMaybe<MediaCreateManyInput>;
  message?: InputMaybe<MessageCreateOneWithoutLocationsInput>;
  name: Scalars['String'];
  org?: InputMaybe<OrgCreateOneInput>;
  phone?: InputMaybe<Scalars['String']>;
  polygons?: InputMaybe<PolygonCreateManyWithoutLocationInput>;
  qrs?: InputMaybe<QrCreateManyWithoutLocationInput>;
  reviews?: InputMaybe<ReviewCreateManyWithoutLocationInput>;
  state?: InputMaybe<StateType>;
  strains?: InputMaybe<StrainCreateManyWithoutLocationsInput>;
  street: Scalars['String'];
  transConfig?: InputMaybe<TransactionsConfigCreateOneWithoutLocationsInput>;
  url?: InputMaybe<Scalars['String']>;
  zip: Scalars['String'];
};

export type LocationCreateWithoutCirclesInput = {
  audienceType?: InputMaybe<AudienceType>;
  catalogs?: InputMaybe<CatalogCreateManyWithoutLocationInput>;
  city: Scalars['String'];
  contact?: InputMaybe<Scalars['String']>;
  country?: InputMaybe<CountryType>;
  county?: InputMaybe<Scalars['String']>;
  description?: InputMaybe<Scalars['String']>;
  email?: InputMaybe<Scalars['String']>;
  events?: InputMaybe<EventCreateManyWithoutLocationInput>;
  formattedAddress: Scalars['String'];
  geoframe?: InputMaybe<GeoTargetCreateOneWithoutLocationInput>;
  hours?: InputMaybe<Scalars['String']>;
  lat: Scalars['Float'];
  licenses?: InputMaybe<LicenseCreateManyWithoutLocationInput>;
  lng: Scalars['Float'];
  locationKey?: InputMaybe<Scalars['String']>;
  locationType?: InputMaybe<LocationType>;
  logo?: InputMaybe<MediaCreateOneInput>;
  mediaList?: InputMaybe<MediaCreateManyInput>;
  message?: InputMaybe<MessageCreateOneWithoutLocationsInput>;
  name: Scalars['String'];
  org?: InputMaybe<OrgCreateOneInput>;
  phone?: InputMaybe<Scalars['String']>;
  polygons?: InputMaybe<PolygonCreateManyWithoutLocationInput>;
  qrs?: InputMaybe<QrCreateManyWithoutLocationInput>;
  reviews?: InputMaybe<ReviewCreateManyWithoutLocationInput>;
  state?: InputMaybe<StateType>;
  strains?: InputMaybe<StrainCreateManyWithoutLocationsInput>;
  street: Scalars['String'];
  transConfig?: InputMaybe<TransactionsConfigCreateOneWithoutLocationsInput>;
  url?: InputMaybe<Scalars['String']>;
  zip: Scalars['String'];
};

export type LocationCreateWithoutEventsInput = {
  audienceType?: InputMaybe<AudienceType>;
  catalogs?: InputMaybe<CatalogCreateManyWithoutLocationInput>;
  circles?: InputMaybe<CircleCreateManyWithoutLocationInput>;
  city: Scalars['String'];
  contact?: InputMaybe<Scalars['String']>;
  country?: InputMaybe<CountryType>;
  county?: InputMaybe<Scalars['String']>;
  description?: InputMaybe<Scalars['String']>;
  email?: InputMaybe<Scalars['String']>;
  formattedAddress: Scalars['String'];
  geoframe?: InputMaybe<GeoTargetCreateOneWithoutLocationInput>;
  hours?: InputMaybe<Scalars['String']>;
  lat: Scalars['Float'];
  licenses?: InputMaybe<LicenseCreateManyWithoutLocationInput>;
  lng: Scalars['Float'];
  locationKey?: InputMaybe<Scalars['String']>;
  locationType?: InputMaybe<LocationType>;
  logo?: InputMaybe<MediaCreateOneInput>;
  mediaList?: InputMaybe<MediaCreateManyInput>;
  message?: InputMaybe<MessageCreateOneWithoutLocationsInput>;
  name: Scalars['String'];
  org?: InputMaybe<OrgCreateOneInput>;
  phone?: InputMaybe<Scalars['String']>;
  polygons?: InputMaybe<PolygonCreateManyWithoutLocationInput>;
  qrs?: InputMaybe<QrCreateManyWithoutLocationInput>;
  reviews?: InputMaybe<ReviewCreateManyWithoutLocationInput>;
  state?: InputMaybe<StateType>;
  strains?: InputMaybe<StrainCreateManyWithoutLocationsInput>;
  street: Scalars['String'];
  transConfig?: InputMaybe<TransactionsConfigCreateOneWithoutLocationsInput>;
  url?: InputMaybe<Scalars['String']>;
  zip: Scalars['String'];
};

export type LocationCreateWithoutGeoframeInput = {
  audienceType?: InputMaybe<AudienceType>;
  catalogs?: InputMaybe<CatalogCreateManyWithoutLocationInput>;
  circles?: InputMaybe<CircleCreateManyWithoutLocationInput>;
  city: Scalars['String'];
  contact?: InputMaybe<Scalars['String']>;
  country?: InputMaybe<CountryType>;
  county?: InputMaybe<Scalars['String']>;
  description?: InputMaybe<Scalars['String']>;
  email?: InputMaybe<Scalars['String']>;
  events?: InputMaybe<EventCreateManyWithoutLocationInput>;
  formattedAddress: Scalars['String'];
  hours?: InputMaybe<Scalars['String']>;
  lat: Scalars['Float'];
  licenses?: InputMaybe<LicenseCreateManyWithoutLocationInput>;
  lng: Scalars['Float'];
  locationKey?: InputMaybe<Scalars['String']>;
  locationType?: InputMaybe<LocationType>;
  logo?: InputMaybe<MediaCreateOneInput>;
  mediaList?: InputMaybe<MediaCreateManyInput>;
  message?: InputMaybe<MessageCreateOneWithoutLocationsInput>;
  name: Scalars['String'];
  org?: InputMaybe<OrgCreateOneInput>;
  phone?: InputMaybe<Scalars['String']>;
  polygons?: InputMaybe<PolygonCreateManyWithoutLocationInput>;
  qrs?: InputMaybe<QrCreateManyWithoutLocationInput>;
  reviews?: InputMaybe<ReviewCreateManyWithoutLocationInput>;
  state?: InputMaybe<StateType>;
  strains?: InputMaybe<StrainCreateManyWithoutLocationsInput>;
  street: Scalars['String'];
  transConfig?: InputMaybe<TransactionsConfigCreateOneWithoutLocationsInput>;
  url?: InputMaybe<Scalars['String']>;
  zip: Scalars['String'];
};

export type LocationCreateWithoutLicensesInput = {
  audienceType?: InputMaybe<AudienceType>;
  catalogs?: InputMaybe<CatalogCreateManyWithoutLocationInput>;
  circles?: InputMaybe<CircleCreateManyWithoutLocationInput>;
  city: Scalars['String'];
  contact?: InputMaybe<Scalars['String']>;
  country?: InputMaybe<CountryType>;
  county?: InputMaybe<Scalars['String']>;
  description?: InputMaybe<Scalars['String']>;
  email?: InputMaybe<Scalars['String']>;
  events?: InputMaybe<EventCreateManyWithoutLocationInput>;
  formattedAddress: Scalars['String'];
  geoframe?: InputMaybe<GeoTargetCreateOneWithoutLocationInput>;
  hours?: InputMaybe<Scalars['String']>;
  lat: Scalars['Float'];
  lng: Scalars['Float'];
  locationKey?: InputMaybe<Scalars['String']>;
  locationType?: InputMaybe<LocationType>;
  logo?: InputMaybe<MediaCreateOneInput>;
  mediaList?: InputMaybe<MediaCreateManyInput>;
  message?: InputMaybe<MessageCreateOneWithoutLocationsInput>;
  name: Scalars['String'];
  org?: InputMaybe<OrgCreateOneInput>;
  phone?: InputMaybe<Scalars['String']>;
  polygons?: InputMaybe<PolygonCreateManyWithoutLocationInput>;
  qrs?: InputMaybe<QrCreateManyWithoutLocationInput>;
  reviews?: InputMaybe<ReviewCreateManyWithoutLocationInput>;
  state?: InputMaybe<StateType>;
  strains?: InputMaybe<StrainCreateManyWithoutLocationsInput>;
  street: Scalars['String'];
  transConfig?: InputMaybe<TransactionsConfigCreateOneWithoutLocationsInput>;
  url?: InputMaybe<Scalars['String']>;
  zip: Scalars['String'];
};

export type LocationCreateWithoutMessageInput = {
  audienceType?: InputMaybe<AudienceType>;
  catalogs?: InputMaybe<CatalogCreateManyWithoutLocationInput>;
  circles?: InputMaybe<CircleCreateManyWithoutLocationInput>;
  city: Scalars['String'];
  contact?: InputMaybe<Scalars['String']>;
  country?: InputMaybe<CountryType>;
  county?: InputMaybe<Scalars['String']>;
  description?: InputMaybe<Scalars['String']>;
  email?: InputMaybe<Scalars['String']>;
  events?: InputMaybe<EventCreateManyWithoutLocationInput>;
  formattedAddress: Scalars['String'];
  geoframe?: InputMaybe<GeoTargetCreateOneWithoutLocationInput>;
  hours?: InputMaybe<Scalars['String']>;
  lat: Scalars['Float'];
  licenses?: InputMaybe<LicenseCreateManyWithoutLocationInput>;
  lng: Scalars['Float'];
  locationKey?: InputMaybe<Scalars['String']>;
  locationType?: InputMaybe<LocationType>;
  logo?: InputMaybe<MediaCreateOneInput>;
  mediaList?: InputMaybe<MediaCreateManyInput>;
  name: Scalars['String'];
  org?: InputMaybe<OrgCreateOneInput>;
  phone?: InputMaybe<Scalars['String']>;
  polygons?: InputMaybe<PolygonCreateManyWithoutLocationInput>;
  qrs?: InputMaybe<QrCreateManyWithoutLocationInput>;
  reviews?: InputMaybe<ReviewCreateManyWithoutLocationInput>;
  state?: InputMaybe<StateType>;
  strains?: InputMaybe<StrainCreateManyWithoutLocationsInput>;
  street: Scalars['String'];
  transConfig?: InputMaybe<TransactionsConfigCreateOneWithoutLocationsInput>;
  url?: InputMaybe<Scalars['String']>;
  zip: Scalars['String'];
};

export type LocationCreateWithoutPolygonsInput = {
  audienceType?: InputMaybe<AudienceType>;
  catalogs?: InputMaybe<CatalogCreateManyWithoutLocationInput>;
  circles?: InputMaybe<CircleCreateManyWithoutLocationInput>;
  city: Scalars['String'];
  contact?: InputMaybe<Scalars['String']>;
  country?: InputMaybe<CountryType>;
  county?: InputMaybe<Scalars['String']>;
  description?: InputMaybe<Scalars['String']>;
  email?: InputMaybe<Scalars['String']>;
  events?: InputMaybe<EventCreateManyWithoutLocationInput>;
  formattedAddress: Scalars['String'];
  geoframe?: InputMaybe<GeoTargetCreateOneWithoutLocationInput>;
  hours?: InputMaybe<Scalars['String']>;
  lat: Scalars['Float'];
  licenses?: InputMaybe<LicenseCreateManyWithoutLocationInput>;
  lng: Scalars['Float'];
  locationKey?: InputMaybe<Scalars['String']>;
  locationType?: InputMaybe<LocationType>;
  logo?: InputMaybe<MediaCreateOneInput>;
  mediaList?: InputMaybe<MediaCreateManyInput>;
  message?: InputMaybe<MessageCreateOneWithoutLocationsInput>;
  name: Scalars['String'];
  org?: InputMaybe<OrgCreateOneInput>;
  phone?: InputMaybe<Scalars['String']>;
  qrs?: InputMaybe<QrCreateManyWithoutLocationInput>;
  reviews?: InputMaybe<ReviewCreateManyWithoutLocationInput>;
  state?: InputMaybe<StateType>;
  strains?: InputMaybe<StrainCreateManyWithoutLocationsInput>;
  street: Scalars['String'];
  transConfig?: InputMaybe<TransactionsConfigCreateOneWithoutLocationsInput>;
  url?: InputMaybe<Scalars['String']>;
  zip: Scalars['String'];
};

export type LocationCreateWithoutQrsInput = {
  audienceType?: InputMaybe<AudienceType>;
  catalogs?: InputMaybe<CatalogCreateManyWithoutLocationInput>;
  circles?: InputMaybe<CircleCreateManyWithoutLocationInput>;
  city: Scalars['String'];
  contact?: InputMaybe<Scalars['String']>;
  country?: InputMaybe<CountryType>;
  county?: InputMaybe<Scalars['String']>;
  description?: InputMaybe<Scalars['String']>;
  email?: InputMaybe<Scalars['String']>;
  events?: InputMaybe<EventCreateManyWithoutLocationInput>;
  formattedAddress: Scalars['String'];
  geoframe?: InputMaybe<GeoTargetCreateOneWithoutLocationInput>;
  hours?: InputMaybe<Scalars['String']>;
  lat: Scalars['Float'];
  licenses?: InputMaybe<LicenseCreateManyWithoutLocationInput>;
  lng: Scalars['Float'];
  locationKey?: InputMaybe<Scalars['String']>;
  locationType?: InputMaybe<LocationType>;
  logo?: InputMaybe<MediaCreateOneInput>;
  mediaList?: InputMaybe<MediaCreateManyInput>;
  message?: InputMaybe<MessageCreateOneWithoutLocationsInput>;
  name: Scalars['String'];
  org?: InputMaybe<OrgCreateOneInput>;
  phone?: InputMaybe<Scalars['String']>;
  polygons?: InputMaybe<PolygonCreateManyWithoutLocationInput>;
  reviews?: InputMaybe<ReviewCreateManyWithoutLocationInput>;
  state?: InputMaybe<StateType>;
  strains?: InputMaybe<StrainCreateManyWithoutLocationsInput>;
  street: Scalars['String'];
  transConfig?: InputMaybe<TransactionsConfigCreateOneWithoutLocationsInput>;
  url?: InputMaybe<Scalars['String']>;
  zip: Scalars['String'];
};

export type LocationCreateWithoutReviewsInput = {
  audienceType?: InputMaybe<AudienceType>;
  catalogs?: InputMaybe<CatalogCreateManyWithoutLocationInput>;
  circles?: InputMaybe<CircleCreateManyWithoutLocationInput>;
  city: Scalars['String'];
  contact?: InputMaybe<Scalars['String']>;
  country?: InputMaybe<CountryType>;
  county?: InputMaybe<Scalars['String']>;
  description?: InputMaybe<Scalars['String']>;
  email?: InputMaybe<Scalars['String']>;
  events?: InputMaybe<EventCreateManyWithoutLocationInput>;
  formattedAddress: Scalars['String'];
  geoframe?: InputMaybe<GeoTargetCreateOneWithoutLocationInput>;
  hours?: InputMaybe<Scalars['String']>;
  lat: Scalars['Float'];
  licenses?: InputMaybe<LicenseCreateManyWithoutLocationInput>;
  lng: Scalars['Float'];
  locationKey?: InputMaybe<Scalars['String']>;
  locationType?: InputMaybe<LocationType>;
  logo?: InputMaybe<MediaCreateOneInput>;
  mediaList?: InputMaybe<MediaCreateManyInput>;
  message?: InputMaybe<MessageCreateOneWithoutLocationsInput>;
  name: Scalars['String'];
  org?: InputMaybe<OrgCreateOneInput>;
  phone?: InputMaybe<Scalars['String']>;
  polygons?: InputMaybe<PolygonCreateManyWithoutLocationInput>;
  qrs?: InputMaybe<QrCreateManyWithoutLocationInput>;
  state?: InputMaybe<StateType>;
  strains?: InputMaybe<StrainCreateManyWithoutLocationsInput>;
  street: Scalars['String'];
  transConfig?: InputMaybe<TransactionsConfigCreateOneWithoutLocationsInput>;
  url?: InputMaybe<Scalars['String']>;
  zip: Scalars['String'];
};

export type LocationCreateWithoutStrainsInput = {
  audienceType?: InputMaybe<AudienceType>;
  catalogs?: InputMaybe<CatalogCreateManyWithoutLocationInput>;
  circles?: InputMaybe<CircleCreateManyWithoutLocationInput>;
  city: Scalars['String'];
  contact?: InputMaybe<Scalars['String']>;
  country?: InputMaybe<CountryType>;
  county?: InputMaybe<Scalars['String']>;
  description?: InputMaybe<Scalars['String']>;
  email?: InputMaybe<Scalars['String']>;
  events?: InputMaybe<EventCreateManyWithoutLocationInput>;
  formattedAddress: Scalars['String'];
  geoframe?: InputMaybe<GeoTargetCreateOneWithoutLocationInput>;
  hours?: InputMaybe<Scalars['String']>;
  lat: Scalars['Float'];
  licenses?: InputMaybe<LicenseCreateManyWithoutLocationInput>;
  lng: Scalars['Float'];
  locationKey?: InputMaybe<Scalars['String']>;
  locationType?: InputMaybe<LocationType>;
  logo?: InputMaybe<MediaCreateOneInput>;
  mediaList?: InputMaybe<MediaCreateManyInput>;
  message?: InputMaybe<MessageCreateOneWithoutLocationsInput>;
  name: Scalars['String'];
  org?: InputMaybe<OrgCreateOneInput>;
  phone?: InputMaybe<Scalars['String']>;
  polygons?: InputMaybe<PolygonCreateManyWithoutLocationInput>;
  qrs?: InputMaybe<QrCreateManyWithoutLocationInput>;
  reviews?: InputMaybe<ReviewCreateManyWithoutLocationInput>;
  state?: InputMaybe<StateType>;
  street: Scalars['String'];
  transConfig?: InputMaybe<TransactionsConfigCreateOneWithoutLocationsInput>;
  url?: InputMaybe<Scalars['String']>;
  zip: Scalars['String'];
};

export type LocationCreateWithoutTransConfigInput = {
  audienceType?: InputMaybe<AudienceType>;
  catalogs?: InputMaybe<CatalogCreateManyWithoutLocationInput>;
  circles?: InputMaybe<CircleCreateManyWithoutLocationInput>;
  city: Scalars['String'];
  contact?: InputMaybe<Scalars['String']>;
  country?: InputMaybe<CountryType>;
  county?: InputMaybe<Scalars['String']>;
  description?: InputMaybe<Scalars['String']>;
  email?: InputMaybe<Scalars['String']>;
  events?: InputMaybe<EventCreateManyWithoutLocationInput>;
  formattedAddress: Scalars['String'];
  geoframe?: InputMaybe<GeoTargetCreateOneWithoutLocationInput>;
  hours?: InputMaybe<Scalars['String']>;
  lat: Scalars['Float'];
  licenses?: InputMaybe<LicenseCreateManyWithoutLocationInput>;
  lng: Scalars['Float'];
  locationKey?: InputMaybe<Scalars['String']>;
  locationType?: InputMaybe<LocationType>;
  logo?: InputMaybe<MediaCreateOneInput>;
  mediaList?: InputMaybe<MediaCreateManyInput>;
  message?: InputMaybe<MessageCreateOneWithoutLocationsInput>;
  name: Scalars['String'];
  org?: InputMaybe<OrgCreateOneInput>;
  phone?: InputMaybe<Scalars['String']>;
  polygons?: InputMaybe<PolygonCreateManyWithoutLocationInput>;
  qrs?: InputMaybe<QrCreateManyWithoutLocationInput>;
  reviews?: InputMaybe<ReviewCreateManyWithoutLocationInput>;
  state?: InputMaybe<StateType>;
  strains?: InputMaybe<StrainCreateManyWithoutLocationsInput>;
  street: Scalars['String'];
  url?: InputMaybe<Scalars['String']>;
  zip: Scalars['String'];
};

export enum LocationOrderByInput {
  AudienceTypeAsc = 'audienceType_ASC',
  AudienceTypeDesc = 'audienceType_DESC',
  CityAsc = 'city_ASC',
  CityDesc = 'city_DESC',
  ContactAsc = 'contact_ASC',
  ContactDesc = 'contact_DESC',
  CountryAsc = 'country_ASC',
  CountryDesc = 'country_DESC',
  CountyAsc = 'county_ASC',
  CountyDesc = 'county_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DescriptionAsc = 'description_ASC',
  DescriptionDesc = 'description_DESC',
  EmailAsc = 'email_ASC',
  EmailDesc = 'email_DESC',
  FormattedAddressAsc = 'formattedAddress_ASC',
  FormattedAddressDesc = 'formattedAddress_DESC',
  HoursAsc = 'hours_ASC',
  HoursDesc = 'hours_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  LatAsc = 'lat_ASC',
  LatDesc = 'lat_DESC',
  LngAsc = 'lng_ASC',
  LngDesc = 'lng_DESC',
  LocationKeyAsc = 'locationKey_ASC',
  LocationKeyDesc = 'locationKey_DESC',
  LocationTypeAsc = 'locationType_ASC',
  LocationTypeDesc = 'locationType_DESC',
  NameAsc = 'name_ASC',
  NameDesc = 'name_DESC',
  PhoneAsc = 'phone_ASC',
  PhoneDesc = 'phone_DESC',
  StateAsc = 'state_ASC',
  StateDesc = 'state_DESC',
  StreetAsc = 'street_ASC',
  StreetDesc = 'street_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  UrlAsc = 'url_ASC',
  UrlDesc = 'url_DESC',
  ZipAsc = 'zip_ASC',
  ZipDesc = 'zip_DESC'
}

export enum LocationType {
  Dutchie = 'DUTCHIE',
  Google = 'GOOGLE',
  Jane = 'JANE'
}

export type LocationUpdateDataInput = {
  audienceType?: InputMaybe<AudienceType>;
  catalogs?: InputMaybe<CatalogUpdateManyWithoutLocationInput>;
  circles?: InputMaybe<CircleUpdateManyWithoutLocationInput>;
  city?: InputMaybe<Scalars['String']>;
  contact?: InputMaybe<Scalars['String']>;
  country?: InputMaybe<CountryType>;
  county?: InputMaybe<Scalars['String']>;
  description?: InputMaybe<Scalars['String']>;
  email?: InputMaybe<Scalars['String']>;
  events?: InputMaybe<EventUpdateManyWithoutLocationInput>;
  formattedAddress?: InputMaybe<Scalars['String']>;
  geoframe?: InputMaybe<GeoTargetUpdateOneWithoutLocationInput>;
  hours?: InputMaybe<Scalars['String']>;
  lat?: InputMaybe<Scalars['Float']>;
  licenses?: InputMaybe<LicenseUpdateManyWithoutLocationInput>;
  lng?: InputMaybe<Scalars['Float']>;
  locationKey?: InputMaybe<Scalars['String']>;
  locationType?: InputMaybe<LocationType>;
  logo?: InputMaybe<MediaUpdateOneInput>;
  mediaList?: InputMaybe<MediaUpdateManyInput>;
  message?: InputMaybe<MessageUpdateOneWithoutLocationsInput>;
  name?: InputMaybe<Scalars['String']>;
  org?: InputMaybe<OrgUpdateOneInput>;
  phone?: InputMaybe<Scalars['String']>;
  polygons?: InputMaybe<PolygonUpdateManyWithoutLocationInput>;
  qrs?: InputMaybe<QrUpdateManyWithoutLocationInput>;
  reviews?: InputMaybe<ReviewUpdateManyWithoutLocationInput>;
  state?: InputMaybe<StateType>;
  strains?: InputMaybe<StrainUpdateManyWithoutLocationsInput>;
  street?: InputMaybe<Scalars['String']>;
  transConfig?: InputMaybe<TransactionsConfigUpdateOneWithoutLocationsInput>;
  url?: InputMaybe<Scalars['String']>;
  zip?: InputMaybe<Scalars['String']>;
};

export type LocationUpdateInput = {
  audienceType?: InputMaybe<AudienceType>;
  catalogs?: InputMaybe<CatalogUpdateManyWithoutLocationInput>;
  circles?: InputMaybe<CircleUpdateManyWithoutLocationInput>;
  city?: InputMaybe<Scalars['String']>;
  contact?: InputMaybe<Scalars['String']>;
  country?: InputMaybe<CountryType>;
  county?: InputMaybe<Scalars['String']>;
  description?: InputMaybe<Scalars['String']>;
  email?: InputMaybe<Scalars['String']>;
  events?: InputMaybe<EventUpdateManyWithoutLocationInput>;
  formattedAddress?: InputMaybe<Scalars['String']>;
  geoframe?: InputMaybe<GeoTargetUpdateOneWithoutLocationInput>;
  hours?: InputMaybe<Scalars['String']>;
  lat?: InputMaybe<Scalars['Float']>;
  licenses?: InputMaybe<LicenseUpdateManyWithoutLocationInput>;
  lng?: InputMaybe<Scalars['Float']>;
  locationKey?: InputMaybe<Scalars['String']>;
  locationType?: InputMaybe<LocationType>;
  logo?: InputMaybe<MediaUpdateOneInput>;
  mediaList?: InputMaybe<MediaUpdateManyInput>;
  message?: InputMaybe<MessageUpdateOneWithoutLocationsInput>;
  name?: InputMaybe<Scalars['String']>;
  org?: InputMaybe<OrgUpdateOneInput>;
  phone?: InputMaybe<Scalars['String']>;
  polygons?: InputMaybe<PolygonUpdateManyWithoutLocationInput>;
  qrs?: InputMaybe<QrUpdateManyWithoutLocationInput>;
  reviews?: InputMaybe<ReviewUpdateManyWithoutLocationInput>;
  state?: InputMaybe<StateType>;
  strains?: InputMaybe<StrainUpdateManyWithoutLocationsInput>;
  street?: InputMaybe<Scalars['String']>;
  transConfig?: InputMaybe<TransactionsConfigUpdateOneWithoutLocationsInput>;
  url?: InputMaybe<Scalars['String']>;
  zip?: InputMaybe<Scalars['String']>;
};

export type LocationUpdateManyInput = {
  connect?: InputMaybe<Array<LocationWhereUniqueInput>>;
  create?: InputMaybe<Array<LocationCreateInput>>;
  delete?: InputMaybe<Array<LocationWhereUniqueInput>>;
  disconnect?: InputMaybe<Array<LocationWhereUniqueInput>>;
  update?: InputMaybe<Array<LocationUpdateWithWhereUniqueNestedInput>>;
  upsert?: InputMaybe<Array<LocationUpsertWithWhereUniqueNestedInput>>;
};

export type LocationUpdateManyWithoutMessageInput = {
  connect?: InputMaybe<Array<LocationWhereUniqueInput>>;
  create?: InputMaybe<Array<LocationCreateWithoutMessageInput>>;
  delete?: InputMaybe<Array<LocationWhereUniqueInput>>;
  disconnect?: InputMaybe<Array<LocationWhereUniqueInput>>;
  update?: InputMaybe<Array<LocationUpdateWithWhereUniqueWithoutMessageInput>>;
  upsert?: InputMaybe<Array<LocationUpsertWithWhereUniqueWithoutMessageInput>>;
};

export type LocationUpdateManyWithoutStrainsInput = {
  connect?: InputMaybe<Array<LocationWhereUniqueInput>>;
  create?: InputMaybe<Array<LocationCreateWithoutStrainsInput>>;
  delete?: InputMaybe<Array<LocationWhereUniqueInput>>;
  disconnect?: InputMaybe<Array<LocationWhereUniqueInput>>;
  update?: InputMaybe<Array<LocationUpdateWithWhereUniqueWithoutStrainsInput>>;
  upsert?: InputMaybe<Array<LocationUpsertWithWhereUniqueWithoutStrainsInput>>;
};

export type LocationUpdateManyWithoutTransConfigInput = {
  connect?: InputMaybe<Array<LocationWhereUniqueInput>>;
  create?: InputMaybe<Array<LocationCreateWithoutTransConfigInput>>;
  delete?: InputMaybe<Array<LocationWhereUniqueInput>>;
  disconnect?: InputMaybe<Array<LocationWhereUniqueInput>>;
  update?: InputMaybe<Array<LocationUpdateWithWhereUniqueWithoutTransConfigInput>>;
  upsert?: InputMaybe<Array<LocationUpsertWithWhereUniqueWithoutTransConfigInput>>;
};

export type LocationUpdateOneInput = {
  connect?: InputMaybe<LocationWhereUniqueInput>;
  create?: InputMaybe<LocationCreateInput>;
  delete?: InputMaybe<Scalars['Boolean']>;
  disconnect?: InputMaybe<Scalars['Boolean']>;
  update?: InputMaybe<LocationUpdateDataInput>;
  upsert?: InputMaybe<LocationUpsertNestedInput>;
};

export type LocationUpdateOneRequiredWithoutCatalogsInput = {
  connect?: InputMaybe<LocationWhereUniqueInput>;
  create?: InputMaybe<LocationCreateWithoutCatalogsInput>;
  update?: InputMaybe<LocationUpdateWithoutCatalogsDataInput>;
  upsert?: InputMaybe<LocationUpsertWithoutCatalogsInput>;
};

export type LocationUpdateOneWithoutCirclesInput = {
  connect?: InputMaybe<LocationWhereUniqueInput>;
  create?: InputMaybe<LocationCreateWithoutCirclesInput>;
  delete?: InputMaybe<Scalars['Boolean']>;
  disconnect?: InputMaybe<Scalars['Boolean']>;
  update?: InputMaybe<LocationUpdateWithoutCirclesDataInput>;
  upsert?: InputMaybe<LocationUpsertWithoutCirclesInput>;
};

export type LocationUpdateOneWithoutEventsInput = {
  connect?: InputMaybe<LocationWhereUniqueInput>;
  create?: InputMaybe<LocationCreateWithoutEventsInput>;
  delete?: InputMaybe<Scalars['Boolean']>;
  disconnect?: InputMaybe<Scalars['Boolean']>;
  update?: InputMaybe<LocationUpdateWithoutEventsDataInput>;
  upsert?: InputMaybe<LocationUpsertWithoutEventsInput>;
};

export type LocationUpdateOneWithoutGeoframeInput = {
  connect?: InputMaybe<LocationWhereUniqueInput>;
  create?: InputMaybe<LocationCreateWithoutGeoframeInput>;
  delete?: InputMaybe<Scalars['Boolean']>;
  disconnect?: InputMaybe<Scalars['Boolean']>;
  update?: InputMaybe<LocationUpdateWithoutGeoframeDataInput>;
  upsert?: InputMaybe<LocationUpsertWithoutGeoframeInput>;
};

export type LocationUpdateOneWithoutLicensesInput = {
  connect?: InputMaybe<LocationWhereUniqueInput>;
  create?: InputMaybe<LocationCreateWithoutLicensesInput>;
  delete?: InputMaybe<Scalars['Boolean']>;
  disconnect?: InputMaybe<Scalars['Boolean']>;
  update?: InputMaybe<LocationUpdateWithoutLicensesDataInput>;
  upsert?: InputMaybe<LocationUpsertWithoutLicensesInput>;
};

export type LocationUpdateOneWithoutPolygonsInput = {
  connect?: InputMaybe<LocationWhereUniqueInput>;
  create?: InputMaybe<LocationCreateWithoutPolygonsInput>;
  delete?: InputMaybe<Scalars['Boolean']>;
  disconnect?: InputMaybe<Scalars['Boolean']>;
  update?: InputMaybe<LocationUpdateWithoutPolygonsDataInput>;
  upsert?: InputMaybe<LocationUpsertWithoutPolygonsInput>;
};

export type LocationUpdateOneWithoutQrsInput = {
  connect?: InputMaybe<LocationWhereUniqueInput>;
  create?: InputMaybe<LocationCreateWithoutQrsInput>;
  delete?: InputMaybe<Scalars['Boolean']>;
  disconnect?: InputMaybe<Scalars['Boolean']>;
  update?: InputMaybe<LocationUpdateWithoutQrsDataInput>;
  upsert?: InputMaybe<LocationUpsertWithoutQrsInput>;
};

export type LocationUpdateOneWithoutReviewsInput = {
  connect?: InputMaybe<LocationWhereUniqueInput>;
  create?: InputMaybe<LocationCreateWithoutReviewsInput>;
  delete?: InputMaybe<Scalars['Boolean']>;
  disconnect?: InputMaybe<Scalars['Boolean']>;
  update?: InputMaybe<LocationUpdateWithoutReviewsDataInput>;
  upsert?: InputMaybe<LocationUpsertWithoutReviewsInput>;
};

export type LocationUpdateWithWhereUniqueNestedInput = {
  data: LocationUpdateDataInput;
  where: LocationWhereUniqueInput;
};

export type LocationUpdateWithWhereUniqueWithoutMessageInput = {
  data: LocationUpdateWithoutMessageDataInput;
  where: LocationWhereUniqueInput;
};

export type LocationUpdateWithWhereUniqueWithoutStrainsInput = {
  data: LocationUpdateWithoutStrainsDataInput;
  where: LocationWhereUniqueInput;
};

export type LocationUpdateWithWhereUniqueWithoutTransConfigInput = {
  data: LocationUpdateWithoutTransConfigDataInput;
  where: LocationWhereUniqueInput;
};

export type LocationUpdateWithoutCatalogsDataInput = {
  audienceType?: InputMaybe<AudienceType>;
  circles?: InputMaybe<CircleUpdateManyWithoutLocationInput>;
  city?: InputMaybe<Scalars['String']>;
  contact?: InputMaybe<Scalars['String']>;
  country?: InputMaybe<CountryType>;
  county?: InputMaybe<Scalars['String']>;
  description?: InputMaybe<Scalars['String']>;
  email?: InputMaybe<Scalars['String']>;
  events?: InputMaybe<EventUpdateManyWithoutLocationInput>;
  formattedAddress?: InputMaybe<Scalars['String']>;
  geoframe?: InputMaybe<GeoTargetUpdateOneWithoutLocationInput>;
  hours?: InputMaybe<Scalars['String']>;
  lat?: InputMaybe<Scalars['Float']>;
  licenses?: InputMaybe<LicenseUpdateManyWithoutLocationInput>;
  lng?: InputMaybe<Scalars['Float']>;
  locationKey?: InputMaybe<Scalars['String']>;
  locationType?: InputMaybe<LocationType>;
  logo?: InputMaybe<MediaUpdateOneInput>;
  mediaList?: InputMaybe<MediaUpdateManyInput>;
  message?: InputMaybe<MessageUpdateOneWithoutLocationsInput>;
  name?: InputMaybe<Scalars['String']>;
  org?: InputMaybe<OrgUpdateOneInput>;
  phone?: InputMaybe<Scalars['String']>;
  polygons?: InputMaybe<PolygonUpdateManyWithoutLocationInput>;
  qrs?: InputMaybe<QrUpdateManyWithoutLocationInput>;
  reviews?: InputMaybe<ReviewUpdateManyWithoutLocationInput>;
  state?: InputMaybe<StateType>;
  strains?: InputMaybe<StrainUpdateManyWithoutLocationsInput>;
  street?: InputMaybe<Scalars['String']>;
  transConfig?: InputMaybe<TransactionsConfigUpdateOneWithoutLocationsInput>;
  url?: InputMaybe<Scalars['String']>;
  zip?: InputMaybe<Scalars['String']>;
};

export type LocationUpdateWithoutCirclesDataInput = {
  audienceType?: InputMaybe<AudienceType>;
  catalogs?: InputMaybe<CatalogUpdateManyWithoutLocationInput>;
  city?: InputMaybe<Scalars['String']>;
  contact?: InputMaybe<Scalars['String']>;
  country?: InputMaybe<CountryType>;
  county?: InputMaybe<Scalars['String']>;
  description?: InputMaybe<Scalars['String']>;
  email?: InputMaybe<Scalars['String']>;
  events?: InputMaybe<EventUpdateManyWithoutLocationInput>;
  formattedAddress?: InputMaybe<Scalars['String']>;
  geoframe?: InputMaybe<GeoTargetUpdateOneWithoutLocationInput>;
  hours?: InputMaybe<Scalars['String']>;
  lat?: InputMaybe<Scalars['Float']>;
  licenses?: InputMaybe<LicenseUpdateManyWithoutLocationInput>;
  lng?: InputMaybe<Scalars['Float']>;
  locationKey?: InputMaybe<Scalars['String']>;
  locationType?: InputMaybe<LocationType>;
  logo?: InputMaybe<MediaUpdateOneInput>;
  mediaList?: InputMaybe<MediaUpdateManyInput>;
  message?: InputMaybe<MessageUpdateOneWithoutLocationsInput>;
  name?: InputMaybe<Scalars['String']>;
  org?: InputMaybe<OrgUpdateOneInput>;
  phone?: InputMaybe<Scalars['String']>;
  polygons?: InputMaybe<PolygonUpdateManyWithoutLocationInput>;
  qrs?: InputMaybe<QrUpdateManyWithoutLocationInput>;
  reviews?: InputMaybe<ReviewUpdateManyWithoutLocationInput>;
  state?: InputMaybe<StateType>;
  strains?: InputMaybe<StrainUpdateManyWithoutLocationsInput>;
  street?: InputMaybe<Scalars['String']>;
  transConfig?: InputMaybe<TransactionsConfigUpdateOneWithoutLocationsInput>;
  url?: InputMaybe<Scalars['String']>;
  zip?: InputMaybe<Scalars['String']>;
};

export type LocationUpdateWithoutEventsDataInput = {
  audienceType?: InputMaybe<AudienceType>;
  catalogs?: InputMaybe<CatalogUpdateManyWithoutLocationInput>;
  circles?: InputMaybe<CircleUpdateManyWithoutLocationInput>;
  city?: InputMaybe<Scalars['String']>;
  contact?: InputMaybe<Scalars['String']>;
  country?: InputMaybe<CountryType>;
  county?: InputMaybe<Scalars['String']>;
  description?: InputMaybe<Scalars['String']>;
  email?: InputMaybe<Scalars['String']>;
  formattedAddress?: InputMaybe<Scalars['String']>;
  geoframe?: InputMaybe<GeoTargetUpdateOneWithoutLocationInput>;
  hours?: InputMaybe<Scalars['String']>;
  lat?: InputMaybe<Scalars['Float']>;
  licenses?: InputMaybe<LicenseUpdateManyWithoutLocationInput>;
  lng?: InputMaybe<Scalars['Float']>;
  locationKey?: InputMaybe<Scalars['String']>;
  locationType?: InputMaybe<LocationType>;
  logo?: InputMaybe<MediaUpdateOneInput>;
  mediaList?: InputMaybe<MediaUpdateManyInput>;
  message?: InputMaybe<MessageUpdateOneWithoutLocationsInput>;
  name?: InputMaybe<Scalars['String']>;
  org?: InputMaybe<OrgUpdateOneInput>;
  phone?: InputMaybe<Scalars['String']>;
  polygons?: InputMaybe<PolygonUpdateManyWithoutLocationInput>;
  qrs?: InputMaybe<QrUpdateManyWithoutLocationInput>;
  reviews?: InputMaybe<ReviewUpdateManyWithoutLocationInput>;
  state?: InputMaybe<StateType>;
  strains?: InputMaybe<StrainUpdateManyWithoutLocationsInput>;
  street?: InputMaybe<Scalars['String']>;
  transConfig?: InputMaybe<TransactionsConfigUpdateOneWithoutLocationsInput>;
  url?: InputMaybe<Scalars['String']>;
  zip?: InputMaybe<Scalars['String']>;
};

export type LocationUpdateWithoutGeoframeDataInput = {
  audienceType?: InputMaybe<AudienceType>;
  catalogs?: InputMaybe<CatalogUpdateManyWithoutLocationInput>;
  circles?: InputMaybe<CircleUpdateManyWithoutLocationInput>;
  city?: InputMaybe<Scalars['String']>;
  contact?: InputMaybe<Scalars['String']>;
  country?: InputMaybe<CountryType>;
  county?: InputMaybe<Scalars['String']>;
  description?: InputMaybe<Scalars['String']>;
  email?: InputMaybe<Scalars['String']>;
  events?: InputMaybe<EventUpdateManyWithoutLocationInput>;
  formattedAddress?: InputMaybe<Scalars['String']>;
  hours?: InputMaybe<Scalars['String']>;
  lat?: InputMaybe<Scalars['Float']>;
  licenses?: InputMaybe<LicenseUpdateManyWithoutLocationInput>;
  lng?: InputMaybe<Scalars['Float']>;
  locationKey?: InputMaybe<Scalars['String']>;
  locationType?: InputMaybe<LocationType>;
  logo?: InputMaybe<MediaUpdateOneInput>;
  mediaList?: InputMaybe<MediaUpdateManyInput>;
  message?: InputMaybe<MessageUpdateOneWithoutLocationsInput>;
  name?: InputMaybe<Scalars['String']>;
  org?: InputMaybe<OrgUpdateOneInput>;
  phone?: InputMaybe<Scalars['String']>;
  polygons?: InputMaybe<PolygonUpdateManyWithoutLocationInput>;
  qrs?: InputMaybe<QrUpdateManyWithoutLocationInput>;
  reviews?: InputMaybe<ReviewUpdateManyWithoutLocationInput>;
  state?: InputMaybe<StateType>;
  strains?: InputMaybe<StrainUpdateManyWithoutLocationsInput>;
  street?: InputMaybe<Scalars['String']>;
  transConfig?: InputMaybe<TransactionsConfigUpdateOneWithoutLocationsInput>;
  url?: InputMaybe<Scalars['String']>;
  zip?: InputMaybe<Scalars['String']>;
};

export type LocationUpdateWithoutLicensesDataInput = {
  audienceType?: InputMaybe<AudienceType>;
  catalogs?: InputMaybe<CatalogUpdateManyWithoutLocationInput>;
  circles?: InputMaybe<CircleUpdateManyWithoutLocationInput>;
  city?: InputMaybe<Scalars['String']>;
  contact?: InputMaybe<Scalars['String']>;
  country?: InputMaybe<CountryType>;
  county?: InputMaybe<Scalars['String']>;
  description?: InputMaybe<Scalars['String']>;
  email?: InputMaybe<Scalars['String']>;
  events?: InputMaybe<EventUpdateManyWithoutLocationInput>;
  formattedAddress?: InputMaybe<Scalars['String']>;
  geoframe?: InputMaybe<GeoTargetUpdateOneWithoutLocationInput>;
  hours?: InputMaybe<Scalars['String']>;
  lat?: InputMaybe<Scalars['Float']>;
  lng?: InputMaybe<Scalars['Float']>;
  locationKey?: InputMaybe<Scalars['String']>;
  locationType?: InputMaybe<LocationType>;
  logo?: InputMaybe<MediaUpdateOneInput>;
  mediaList?: InputMaybe<MediaUpdateManyInput>;
  message?: InputMaybe<MessageUpdateOneWithoutLocationsInput>;
  name?: InputMaybe<Scalars['String']>;
  org?: InputMaybe<OrgUpdateOneInput>;
  phone?: InputMaybe<Scalars['String']>;
  polygons?: InputMaybe<PolygonUpdateManyWithoutLocationInput>;
  qrs?: InputMaybe<QrUpdateManyWithoutLocationInput>;
  reviews?: InputMaybe<ReviewUpdateManyWithoutLocationInput>;
  state?: InputMaybe<StateType>;
  strains?: InputMaybe<StrainUpdateManyWithoutLocationsInput>;
  street?: InputMaybe<Scalars['String']>;
  transConfig?: InputMaybe<TransactionsConfigUpdateOneWithoutLocationsInput>;
  url?: InputMaybe<Scalars['String']>;
  zip?: InputMaybe<Scalars['String']>;
};

export type LocationUpdateWithoutMessageDataInput = {
  audienceType?: InputMaybe<AudienceType>;
  catalogs?: InputMaybe<CatalogUpdateManyWithoutLocationInput>;
  circles?: InputMaybe<CircleUpdateManyWithoutLocationInput>;
  city?: InputMaybe<Scalars['String']>;
  contact?: InputMaybe<Scalars['String']>;
  country?: InputMaybe<CountryType>;
  county?: InputMaybe<Scalars['String']>;
  description?: InputMaybe<Scalars['String']>;
  email?: InputMaybe<Scalars['String']>;
  events?: InputMaybe<EventUpdateManyWithoutLocationInput>;
  formattedAddress?: InputMaybe<Scalars['String']>;
  geoframe?: InputMaybe<GeoTargetUpdateOneWithoutLocationInput>;
  hours?: InputMaybe<Scalars['String']>;
  lat?: InputMaybe<Scalars['Float']>;
  licenses?: InputMaybe<LicenseUpdateManyWithoutLocationInput>;
  lng?: InputMaybe<Scalars['Float']>;
  locationKey?: InputMaybe<Scalars['String']>;
  locationType?: InputMaybe<LocationType>;
  logo?: InputMaybe<MediaUpdateOneInput>;
  mediaList?: InputMaybe<MediaUpdateManyInput>;
  name?: InputMaybe<Scalars['String']>;
  org?: InputMaybe<OrgUpdateOneInput>;
  phone?: InputMaybe<Scalars['String']>;
  polygons?: InputMaybe<PolygonUpdateManyWithoutLocationInput>;
  qrs?: InputMaybe<QrUpdateManyWithoutLocationInput>;
  reviews?: InputMaybe<ReviewUpdateManyWithoutLocationInput>;
  state?: InputMaybe<StateType>;
  strains?: InputMaybe<StrainUpdateManyWithoutLocationsInput>;
  street?: InputMaybe<Scalars['String']>;
  transConfig?: InputMaybe<TransactionsConfigUpdateOneWithoutLocationsInput>;
  url?: InputMaybe<Scalars['String']>;
  zip?: InputMaybe<Scalars['String']>;
};

export type LocationUpdateWithoutPolygonsDataInput = {
  audienceType?: InputMaybe<AudienceType>;
  catalogs?: InputMaybe<CatalogUpdateManyWithoutLocationInput>;
  circles?: InputMaybe<CircleUpdateManyWithoutLocationInput>;
  city?: InputMaybe<Scalars['String']>;
  contact?: InputMaybe<Scalars['String']>;
  country?: InputMaybe<CountryType>;
  county?: InputMaybe<Scalars['String']>;
  description?: InputMaybe<Scalars['String']>;
  email?: InputMaybe<Scalars['String']>;
  events?: InputMaybe<EventUpdateManyWithoutLocationInput>;
  formattedAddress?: InputMaybe<Scalars['String']>;
  geoframe?: InputMaybe<GeoTargetUpdateOneWithoutLocationInput>;
  hours?: InputMaybe<Scalars['String']>;
  lat?: InputMaybe<Scalars['Float']>;
  licenses?: InputMaybe<LicenseUpdateManyWithoutLocationInput>;
  lng?: InputMaybe<Scalars['Float']>;
  locationKey?: InputMaybe<Scalars['String']>;
  locationType?: InputMaybe<LocationType>;
  logo?: InputMaybe<MediaUpdateOneInput>;
  mediaList?: InputMaybe<MediaUpdateManyInput>;
  message?: InputMaybe<MessageUpdateOneWithoutLocationsInput>;
  name?: InputMaybe<Scalars['String']>;
  org?: InputMaybe<OrgUpdateOneInput>;
  phone?: InputMaybe<Scalars['String']>;
  qrs?: InputMaybe<QrUpdateManyWithoutLocationInput>;
  reviews?: InputMaybe<ReviewUpdateManyWithoutLocationInput>;
  state?: InputMaybe<StateType>;
  strains?: InputMaybe<StrainUpdateManyWithoutLocationsInput>;
  street?: InputMaybe<Scalars['String']>;
  transConfig?: InputMaybe<TransactionsConfigUpdateOneWithoutLocationsInput>;
  url?: InputMaybe<Scalars['String']>;
  zip?: InputMaybe<Scalars['String']>;
};

export type LocationUpdateWithoutQrsDataInput = {
  audienceType?: InputMaybe<AudienceType>;
  catalogs?: InputMaybe<CatalogUpdateManyWithoutLocationInput>;
  circles?: InputMaybe<CircleUpdateManyWithoutLocationInput>;
  city?: InputMaybe<Scalars['String']>;
  contact?: InputMaybe<Scalars['String']>;
  country?: InputMaybe<CountryType>;
  county?: InputMaybe<Scalars['String']>;
  description?: InputMaybe<Scalars['String']>;
  email?: InputMaybe<Scalars['String']>;
  events?: InputMaybe<EventUpdateManyWithoutLocationInput>;
  formattedAddress?: InputMaybe<Scalars['String']>;
  geoframe?: InputMaybe<GeoTargetUpdateOneWithoutLocationInput>;
  hours?: InputMaybe<Scalars['String']>;
  lat?: InputMaybe<Scalars['Float']>;
  licenses?: InputMaybe<LicenseUpdateManyWithoutLocationInput>;
  lng?: InputMaybe<Scalars['Float']>;
  locationKey?: InputMaybe<Scalars['String']>;
  locationType?: InputMaybe<LocationType>;
  logo?: InputMaybe<MediaUpdateOneInput>;
  mediaList?: InputMaybe<MediaUpdateManyInput>;
  message?: InputMaybe<MessageUpdateOneWithoutLocationsInput>;
  name?: InputMaybe<Scalars['String']>;
  org?: InputMaybe<OrgUpdateOneInput>;
  phone?: InputMaybe<Scalars['String']>;
  polygons?: InputMaybe<PolygonUpdateManyWithoutLocationInput>;
  reviews?: InputMaybe<ReviewUpdateManyWithoutLocationInput>;
  state?: InputMaybe<StateType>;
  strains?: InputMaybe<StrainUpdateManyWithoutLocationsInput>;
  street?: InputMaybe<Scalars['String']>;
  transConfig?: InputMaybe<TransactionsConfigUpdateOneWithoutLocationsInput>;
  url?: InputMaybe<Scalars['String']>;
  zip?: InputMaybe<Scalars['String']>;
};

export type LocationUpdateWithoutReviewsDataInput = {
  audienceType?: InputMaybe<AudienceType>;
  catalogs?: InputMaybe<CatalogUpdateManyWithoutLocationInput>;
  circles?: InputMaybe<CircleUpdateManyWithoutLocationInput>;
  city?: InputMaybe<Scalars['String']>;
  contact?: InputMaybe<Scalars['String']>;
  country?: InputMaybe<CountryType>;
  county?: InputMaybe<Scalars['String']>;
  description?: InputMaybe<Scalars['String']>;
  email?: InputMaybe<Scalars['String']>;
  events?: InputMaybe<EventUpdateManyWithoutLocationInput>;
  formattedAddress?: InputMaybe<Scalars['String']>;
  geoframe?: InputMaybe<GeoTargetUpdateOneWithoutLocationInput>;
  hours?: InputMaybe<Scalars['String']>;
  lat?: InputMaybe<Scalars['Float']>;
  licenses?: InputMaybe<LicenseUpdateManyWithoutLocationInput>;
  lng?: InputMaybe<Scalars['Float']>;
  locationKey?: InputMaybe<Scalars['String']>;
  locationType?: InputMaybe<LocationType>;
  logo?: InputMaybe<MediaUpdateOneInput>;
  mediaList?: InputMaybe<MediaUpdateManyInput>;
  message?: InputMaybe<MessageUpdateOneWithoutLocationsInput>;
  name?: InputMaybe<Scalars['String']>;
  org?: InputMaybe<OrgUpdateOneInput>;
  phone?: InputMaybe<Scalars['String']>;
  polygons?: InputMaybe<PolygonUpdateManyWithoutLocationInput>;
  qrs?: InputMaybe<QrUpdateManyWithoutLocationInput>;
  state?: InputMaybe<StateType>;
  strains?: InputMaybe<StrainUpdateManyWithoutLocationsInput>;
  street?: InputMaybe<Scalars['String']>;
  transConfig?: InputMaybe<TransactionsConfigUpdateOneWithoutLocationsInput>;
  url?: InputMaybe<Scalars['String']>;
  zip?: InputMaybe<Scalars['String']>;
};

export type LocationUpdateWithoutStrainsDataInput = {
  audienceType?: InputMaybe<AudienceType>;
  catalogs?: InputMaybe<CatalogUpdateManyWithoutLocationInput>;
  circles?: InputMaybe<CircleUpdateManyWithoutLocationInput>;
  city?: InputMaybe<Scalars['String']>;
  contact?: InputMaybe<Scalars['String']>;
  country?: InputMaybe<CountryType>;
  county?: InputMaybe<Scalars['String']>;
  description?: InputMaybe<Scalars['String']>;
  email?: InputMaybe<Scalars['String']>;
  events?: InputMaybe<EventUpdateManyWithoutLocationInput>;
  formattedAddress?: InputMaybe<Scalars['String']>;
  geoframe?: InputMaybe<GeoTargetUpdateOneWithoutLocationInput>;
  hours?: InputMaybe<Scalars['String']>;
  lat?: InputMaybe<Scalars['Float']>;
  licenses?: InputMaybe<LicenseUpdateManyWithoutLocationInput>;
  lng?: InputMaybe<Scalars['Float']>;
  locationKey?: InputMaybe<Scalars['String']>;
  locationType?: InputMaybe<LocationType>;
  logo?: InputMaybe<MediaUpdateOneInput>;
  mediaList?: InputMaybe<MediaUpdateManyInput>;
  message?: InputMaybe<MessageUpdateOneWithoutLocationsInput>;
  name?: InputMaybe<Scalars['String']>;
  org?: InputMaybe<OrgUpdateOneInput>;
  phone?: InputMaybe<Scalars['String']>;
  polygons?: InputMaybe<PolygonUpdateManyWithoutLocationInput>;
  qrs?: InputMaybe<QrUpdateManyWithoutLocationInput>;
  reviews?: InputMaybe<ReviewUpdateManyWithoutLocationInput>;
  state?: InputMaybe<StateType>;
  street?: InputMaybe<Scalars['String']>;
  transConfig?: InputMaybe<TransactionsConfigUpdateOneWithoutLocationsInput>;
  url?: InputMaybe<Scalars['String']>;
  zip?: InputMaybe<Scalars['String']>;
};

export type LocationUpdateWithoutTransConfigDataInput = {
  audienceType?: InputMaybe<AudienceType>;
  catalogs?: InputMaybe<CatalogUpdateManyWithoutLocationInput>;
  circles?: InputMaybe<CircleUpdateManyWithoutLocationInput>;
  city?: InputMaybe<Scalars['String']>;
  contact?: InputMaybe<Scalars['String']>;
  country?: InputMaybe<CountryType>;
  county?: InputMaybe<Scalars['String']>;
  description?: InputMaybe<Scalars['String']>;
  email?: InputMaybe<Scalars['String']>;
  events?: InputMaybe<EventUpdateManyWithoutLocationInput>;
  formattedAddress?: InputMaybe<Scalars['String']>;
  geoframe?: InputMaybe<GeoTargetUpdateOneWithoutLocationInput>;
  hours?: InputMaybe<Scalars['String']>;
  lat?: InputMaybe<Scalars['Float']>;
  licenses?: InputMaybe<LicenseUpdateManyWithoutLocationInput>;
  lng?: InputMaybe<Scalars['Float']>;
  locationKey?: InputMaybe<Scalars['String']>;
  locationType?: InputMaybe<LocationType>;
  logo?: InputMaybe<MediaUpdateOneInput>;
  mediaList?: InputMaybe<MediaUpdateManyInput>;
  message?: InputMaybe<MessageUpdateOneWithoutLocationsInput>;
  name?: InputMaybe<Scalars['String']>;
  org?: InputMaybe<OrgUpdateOneInput>;
  phone?: InputMaybe<Scalars['String']>;
  polygons?: InputMaybe<PolygonUpdateManyWithoutLocationInput>;
  qrs?: InputMaybe<QrUpdateManyWithoutLocationInput>;
  reviews?: InputMaybe<ReviewUpdateManyWithoutLocationInput>;
  state?: InputMaybe<StateType>;
  strains?: InputMaybe<StrainUpdateManyWithoutLocationsInput>;
  street?: InputMaybe<Scalars['String']>;
  url?: InputMaybe<Scalars['String']>;
  zip?: InputMaybe<Scalars['String']>;
};

export type LocationUpsertNestedInput = {
  create: LocationCreateInput;
  update: LocationUpdateDataInput;
};

export type LocationUpsertWithWhereUniqueNestedInput = {
  create: LocationCreateInput;
  update: LocationUpdateDataInput;
  where: LocationWhereUniqueInput;
};

export type LocationUpsertWithWhereUniqueWithoutMessageInput = {
  create: LocationCreateWithoutMessageInput;
  update: LocationUpdateWithoutMessageDataInput;
  where: LocationWhereUniqueInput;
};

export type LocationUpsertWithWhereUniqueWithoutStrainsInput = {
  create: LocationCreateWithoutStrainsInput;
  update: LocationUpdateWithoutStrainsDataInput;
  where: LocationWhereUniqueInput;
};

export type LocationUpsertWithWhereUniqueWithoutTransConfigInput = {
  create: LocationCreateWithoutTransConfigInput;
  update: LocationUpdateWithoutTransConfigDataInput;
  where: LocationWhereUniqueInput;
};

export type LocationUpsertWithoutCatalogsInput = {
  create: LocationCreateWithoutCatalogsInput;
  update: LocationUpdateWithoutCatalogsDataInput;
};

export type LocationUpsertWithoutCirclesInput = {
  create: LocationCreateWithoutCirclesInput;
  update: LocationUpdateWithoutCirclesDataInput;
};

export type LocationUpsertWithoutEventsInput = {
  create: LocationCreateWithoutEventsInput;
  update: LocationUpdateWithoutEventsDataInput;
};

export type LocationUpsertWithoutGeoframeInput = {
  create: LocationCreateWithoutGeoframeInput;
  update: LocationUpdateWithoutGeoframeDataInput;
};

export type LocationUpsertWithoutLicensesInput = {
  create: LocationCreateWithoutLicensesInput;
  update: LocationUpdateWithoutLicensesDataInput;
};

export type LocationUpsertWithoutPolygonsInput = {
  create: LocationCreateWithoutPolygonsInput;
  update: LocationUpdateWithoutPolygonsDataInput;
};

export type LocationUpsertWithoutQrsInput = {
  create: LocationCreateWithoutQrsInput;
  update: LocationUpdateWithoutQrsDataInput;
};

export type LocationUpsertWithoutReviewsInput = {
  create: LocationCreateWithoutReviewsInput;
  update: LocationUpdateWithoutReviewsDataInput;
};

export type LocationWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<LocationWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<LocationWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<LocationWhereInput>>;
  audienceType?: InputMaybe<AudienceType>;
  /** All values that are contained in given list. */
  audienceType_in?: InputMaybe<Array<AudienceType>>;
  /** All values that are not equal to given value. */
  audienceType_not?: InputMaybe<AudienceType>;
  /** All values that are not contained in given list. */
  audienceType_not_in?: InputMaybe<Array<AudienceType>>;
  catalogs_every?: InputMaybe<CatalogWhereInput>;
  catalogs_none?: InputMaybe<CatalogWhereInput>;
  catalogs_some?: InputMaybe<CatalogWhereInput>;
  circles_every?: InputMaybe<CircleWhereInput>;
  circles_none?: InputMaybe<CircleWhereInput>;
  circles_some?: InputMaybe<CircleWhereInput>;
  city?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  city_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  city_ends_with?: InputMaybe<Scalars['String']>;
  /** All values greater than the given value. */
  city_gt?: InputMaybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  city_gte?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  city_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  city_lt?: InputMaybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  city_lte?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  city_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  city_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string. */
  city_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  city_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  city_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  city_starts_with?: InputMaybe<Scalars['String']>;
  contact?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  contact_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  contact_ends_with?: InputMaybe<Scalars['String']>;
  /** All values greater than the given value. */
  contact_gt?: InputMaybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  contact_gte?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  contact_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  contact_lt?: InputMaybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  contact_lte?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  contact_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  contact_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string. */
  contact_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  contact_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  contact_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  contact_starts_with?: InputMaybe<Scalars['String']>;
  country?: InputMaybe<CountryType>;
  /** All values that are contained in given list. */
  country_in?: InputMaybe<Array<CountryType>>;
  /** All values that are not equal to given value. */
  country_not?: InputMaybe<CountryType>;
  /** All values that are not contained in given list. */
  country_not_in?: InputMaybe<Array<CountryType>>;
  county?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  county_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  county_ends_with?: InputMaybe<Scalars['String']>;
  /** All values greater than the given value. */
  county_gt?: InputMaybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  county_gte?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  county_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  county_lt?: InputMaybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  county_lte?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  county_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  county_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string. */
  county_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  county_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  county_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  county_starts_with?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  description?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  description_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  description_ends_with?: InputMaybe<Scalars['String']>;
  /** All values greater than the given value. */
  description_gt?: InputMaybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  description_gte?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  description_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  description_lt?: InputMaybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  description_lte?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  description_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  description_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string. */
  description_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  description_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  description_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  description_starts_with?: InputMaybe<Scalars['String']>;
  email?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  email_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  email_ends_with?: InputMaybe<Scalars['String']>;
  /** All values greater than the given value. */
  email_gt?: InputMaybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  email_gte?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  email_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  email_lt?: InputMaybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  email_lte?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  email_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  email_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string. */
  email_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  email_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  email_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  email_starts_with?: InputMaybe<Scalars['String']>;
  events_every?: InputMaybe<EventWhereInput>;
  events_none?: InputMaybe<EventWhereInput>;
  events_some?: InputMaybe<EventWhereInput>;
  formattedAddress?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  formattedAddress_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  formattedAddress_ends_with?: InputMaybe<Scalars['String']>;
  /** All values greater than the given value. */
  formattedAddress_gt?: InputMaybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  formattedAddress_gte?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  formattedAddress_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  formattedAddress_lt?: InputMaybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  formattedAddress_lte?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  formattedAddress_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  formattedAddress_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string. */
  formattedAddress_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  formattedAddress_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  formattedAddress_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  formattedAddress_starts_with?: InputMaybe<Scalars['String']>;
  geoframe?: InputMaybe<GeoTargetWhereInput>;
  hours?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  hours_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  hours_ends_with?: InputMaybe<Scalars['String']>;
  /** All values greater than the given value. */
  hours_gt?: InputMaybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  hours_gte?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  hours_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  hours_lt?: InputMaybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  hours_lte?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  hours_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  hours_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string. */
  hours_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  hours_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  hours_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  hours_starts_with?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: InputMaybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: InputMaybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: InputMaybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  lat?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  lat_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  lat_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  lat_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  lat_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  lat_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  lat_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  lat_not_in?: InputMaybe<Array<Scalars['Float']>>;
  licenses_every?: InputMaybe<LicenseWhereInput>;
  licenses_none?: InputMaybe<LicenseWhereInput>;
  licenses_some?: InputMaybe<LicenseWhereInput>;
  lng?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  lng_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  lng_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  lng_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  lng_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  lng_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  lng_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  lng_not_in?: InputMaybe<Array<Scalars['Float']>>;
  locationKey?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  locationKey_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  locationKey_ends_with?: InputMaybe<Scalars['String']>;
  /** All values greater than the given value. */
  locationKey_gt?: InputMaybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  locationKey_gte?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  locationKey_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  locationKey_lt?: InputMaybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  locationKey_lte?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  locationKey_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  locationKey_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string. */
  locationKey_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  locationKey_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  locationKey_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  locationKey_starts_with?: InputMaybe<Scalars['String']>;
  locationType?: InputMaybe<LocationType>;
  /** All values that are contained in given list. */
  locationType_in?: InputMaybe<Array<LocationType>>;
  /** All values that are not equal to given value. */
  locationType_not?: InputMaybe<LocationType>;
  /** All values that are not contained in given list. */
  locationType_not_in?: InputMaybe<Array<LocationType>>;
  logo?: InputMaybe<MediaWhereInput>;
  mediaList_every?: InputMaybe<MediaWhereInput>;
  mediaList_none?: InputMaybe<MediaWhereInput>;
  mediaList_some?: InputMaybe<MediaWhereInput>;
  message?: InputMaybe<MessageWhereInput>;
  name?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  name_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  name_ends_with?: InputMaybe<Scalars['String']>;
  /** All values greater than the given value. */
  name_gt?: InputMaybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  name_gte?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  name_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  name_lt?: InputMaybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  name_lte?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  name_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  name_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string. */
  name_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  name_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  name_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  name_starts_with?: InputMaybe<Scalars['String']>;
  org?: InputMaybe<OrgWhereInput>;
  phone?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  phone_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  phone_ends_with?: InputMaybe<Scalars['String']>;
  /** All values greater than the given value. */
  phone_gt?: InputMaybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  phone_gte?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  phone_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  phone_lt?: InputMaybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  phone_lte?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  phone_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  phone_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string. */
  phone_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  phone_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  phone_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  phone_starts_with?: InputMaybe<Scalars['String']>;
  polygons_every?: InputMaybe<PolygonWhereInput>;
  polygons_none?: InputMaybe<PolygonWhereInput>;
  polygons_some?: InputMaybe<PolygonWhereInput>;
  qrs_every?: InputMaybe<QrWhereInput>;
  qrs_none?: InputMaybe<QrWhereInput>;
  qrs_some?: InputMaybe<QrWhereInput>;
  reviews_every?: InputMaybe<ReviewWhereInput>;
  reviews_none?: InputMaybe<ReviewWhereInput>;
  reviews_some?: InputMaybe<ReviewWhereInput>;
  state?: InputMaybe<StateType>;
  /** All values that are contained in given list. */
  state_in?: InputMaybe<Array<StateType>>;
  /** All values that are not equal to given value. */
  state_not?: InputMaybe<StateType>;
  /** All values that are not contained in given list. */
  state_not_in?: InputMaybe<Array<StateType>>;
  strains_every?: InputMaybe<StrainWhereInput>;
  strains_none?: InputMaybe<StrainWhereInput>;
  strains_some?: InputMaybe<StrainWhereInput>;
  street?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  street_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  street_ends_with?: InputMaybe<Scalars['String']>;
  /** All values greater than the given value. */
  street_gt?: InputMaybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  street_gte?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  street_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  street_lt?: InputMaybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  street_lte?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  street_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  street_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string. */
  street_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  street_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  street_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  street_starts_with?: InputMaybe<Scalars['String']>;
  transConfig?: InputMaybe<TransactionsConfigWhereInput>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  url?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  url_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  url_ends_with?: InputMaybe<Scalars['String']>;
  /** All values greater than the given value. */
  url_gt?: InputMaybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  url_gte?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  url_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  url_lt?: InputMaybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  url_lte?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  url_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  url_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string. */
  url_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  url_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  url_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  url_starts_with?: InputMaybe<Scalars['String']>;
  zip?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  zip_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  zip_ends_with?: InputMaybe<Scalars['String']>;
  /** All values greater than the given value. */
  zip_gt?: InputMaybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  zip_gte?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  zip_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  zip_lt?: InputMaybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  zip_lte?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  zip_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  zip_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string. */
  zip_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  zip_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  zip_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  zip_starts_with?: InputMaybe<Scalars['String']>;
};

export type LocationWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export type LoyaltyCampaign = Node & {
  __typename?: 'LoyaltyCampaign';
  createdAt: Scalars['DateTime'];
  excludeOfferedFilter?: Maybe<Scalars['Int']>;
  expiration: Scalars['DateTime'];
  id: Scalars['ID'];
  includeActiveFilter?: Maybe<Scalars['Int']>;
  interests: Array<Scalars['String']>;
  loyaltyPlacementUnits?: Maybe<Array<LoyaltyPlacementUnit>>;
  name: Scalars['String'];
  offering: Scalars['String'];
  org?: Maybe<Org>;
  tags: Array<Scalars['String']>;
  totalDelivered: Scalars['Int'];
  totalSent: Scalars['Int'];
  type: Array<OfferType>;
  updatedAt: Scalars['DateTime'];
};


export type LoyaltyCampaignLoyaltyPlacementUnitsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<LoyaltyPlacementUnitOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<LoyaltyPlacementUnitWhereInput>;
};

export type LoyaltyCampaignCreateInput = {
  excludeOfferedFilter?: InputMaybe<Scalars['Int']>;
  expiration: Scalars['DateTime'];
  includeActiveFilter?: InputMaybe<Scalars['Int']>;
  interests?: InputMaybe<LoyaltyCampaignCreateinterestsInput>;
  loyaltyPlacementUnits?: InputMaybe<LoyaltyPlacementUnitCreateManyWithoutLoyaltyCampaignInput>;
  name: Scalars['String'];
  offering: Scalars['String'];
  org?: InputMaybe<OrgCreateOneWithoutLoyaltyCampaignsInput>;
  tags?: InputMaybe<LoyaltyCampaignCreatetagsInput>;
  totalDelivered: Scalars['Int'];
  totalSent: Scalars['Int'];
  type?: InputMaybe<LoyaltyCampaignCreatetypeInput>;
};

export type LoyaltyCampaignCreateManyWithoutOrgInput = {
  connect?: InputMaybe<Array<LoyaltyCampaignWhereUniqueInput>>;
  create?: InputMaybe<Array<LoyaltyCampaignCreateWithoutOrgInput>>;
};

export type LoyaltyCampaignCreateOneWithoutLoyaltyPlacementUnitsInput = {
  connect?: InputMaybe<LoyaltyCampaignWhereUniqueInput>;
  create?: InputMaybe<LoyaltyCampaignCreateWithoutLoyaltyPlacementUnitsInput>;
};

export type LoyaltyCampaignCreateWithoutLoyaltyPlacementUnitsInput = {
  excludeOfferedFilter?: InputMaybe<Scalars['Int']>;
  expiration: Scalars['DateTime'];
  includeActiveFilter?: InputMaybe<Scalars['Int']>;
  interests?: InputMaybe<LoyaltyCampaignCreateinterestsInput>;
  name: Scalars['String'];
  offering: Scalars['String'];
  org?: InputMaybe<OrgCreateOneWithoutLoyaltyCampaignsInput>;
  tags?: InputMaybe<LoyaltyCampaignCreatetagsInput>;
  totalDelivered: Scalars['Int'];
  totalSent: Scalars['Int'];
  type?: InputMaybe<LoyaltyCampaignCreatetypeInput>;
};

export type LoyaltyCampaignCreateWithoutOrgInput = {
  excludeOfferedFilter?: InputMaybe<Scalars['Int']>;
  expiration: Scalars['DateTime'];
  includeActiveFilter?: InputMaybe<Scalars['Int']>;
  interests?: InputMaybe<LoyaltyCampaignCreateinterestsInput>;
  loyaltyPlacementUnits?: InputMaybe<LoyaltyPlacementUnitCreateManyWithoutLoyaltyCampaignInput>;
  name: Scalars['String'];
  offering: Scalars['String'];
  tags?: InputMaybe<LoyaltyCampaignCreatetagsInput>;
  totalDelivered: Scalars['Int'];
  totalSent: Scalars['Int'];
  type?: InputMaybe<LoyaltyCampaignCreatetypeInput>;
};

export type LoyaltyCampaignCreateinterestsInput = {
  set?: InputMaybe<Array<Scalars['String']>>;
};

export type LoyaltyCampaignCreatetagsInput = {
  set?: InputMaybe<Array<Scalars['String']>>;
};

export type LoyaltyCampaignCreatetypeInput = {
  set?: InputMaybe<Array<OfferType>>;
};

export enum LoyaltyCampaignOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  ExcludeOfferedFilterAsc = 'excludeOfferedFilter_ASC',
  ExcludeOfferedFilterDesc = 'excludeOfferedFilter_DESC',
  ExpirationAsc = 'expiration_ASC',
  ExpirationDesc = 'expiration_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  IncludeActiveFilterAsc = 'includeActiveFilter_ASC',
  IncludeActiveFilterDesc = 'includeActiveFilter_DESC',
  NameAsc = 'name_ASC',
  NameDesc = 'name_DESC',
  OfferingAsc = 'offering_ASC',
  OfferingDesc = 'offering_DESC',
  TotalDeliveredAsc = 'totalDelivered_ASC',
  TotalDeliveredDesc = 'totalDelivered_DESC',
  TotalSentAsc = 'totalSent_ASC',
  TotalSentDesc = 'totalSent_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC'
}

export type LoyaltyCampaignPreviousValues = {
  __typename?: 'LoyaltyCampaignPreviousValues';
  createdAt: Scalars['DateTime'];
  excludeOfferedFilter?: Maybe<Scalars['Int']>;
  expiration: Scalars['DateTime'];
  id: Scalars['ID'];
  includeActiveFilter?: Maybe<Scalars['Int']>;
  interests: Array<Scalars['String']>;
  name: Scalars['String'];
  offering: Scalars['String'];
  tags: Array<Scalars['String']>;
  totalDelivered: Scalars['Int'];
  totalSent: Scalars['Int'];
  type: Array<OfferType>;
  updatedAt: Scalars['DateTime'];
};

export type LoyaltyCampaignSubscriptionPayload = {
  __typename?: 'LoyaltyCampaignSubscriptionPayload';
  mutation: MutationType;
  node?: Maybe<LoyaltyCampaign>;
  previousValues?: Maybe<LoyaltyCampaignPreviousValues>;
  updatedFields?: Maybe<Array<Scalars['String']>>;
};

export type LoyaltyCampaignSubscriptionWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<LoyaltyCampaignSubscriptionWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<LoyaltyCampaignSubscriptionWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<LoyaltyCampaignSubscriptionWhereInput>>;
  /** The subscription event gets dispatched when it's listed in mutation_in */
  mutation_in?: InputMaybe<Array<MutationType>>;
  node?: InputMaybe<LoyaltyCampaignWhereInput>;
  /** The subscription event gets only dispatched when one of the updated fields names is included in this list */
  updatedFields_contains?: InputMaybe<Scalars['String']>;
  /** The subscription event gets only dispatched when all of the field names included in this list have been updated */
  updatedFields_contains_every?: InputMaybe<Array<Scalars['String']>>;
  /** The subscription event gets only dispatched when some of the field names included in this list have been updated */
  updatedFields_contains_some?: InputMaybe<Array<Scalars['String']>>;
};

export type LoyaltyCampaignUpdateManyWithoutOrgInput = {
  connect?: InputMaybe<Array<LoyaltyCampaignWhereUniqueInput>>;
  create?: InputMaybe<Array<LoyaltyCampaignCreateWithoutOrgInput>>;
  delete?: InputMaybe<Array<LoyaltyCampaignWhereUniqueInput>>;
  disconnect?: InputMaybe<Array<LoyaltyCampaignWhereUniqueInput>>;
  update?: InputMaybe<Array<LoyaltyCampaignUpdateWithWhereUniqueWithoutOrgInput>>;
  upsert?: InputMaybe<Array<LoyaltyCampaignUpsertWithWhereUniqueWithoutOrgInput>>;
};

export type LoyaltyCampaignUpdateOneWithoutLoyaltyPlacementUnitsInput = {
  connect?: InputMaybe<LoyaltyCampaignWhereUniqueInput>;
  create?: InputMaybe<LoyaltyCampaignCreateWithoutLoyaltyPlacementUnitsInput>;
  delete?: InputMaybe<Scalars['Boolean']>;
  disconnect?: InputMaybe<Scalars['Boolean']>;
  update?: InputMaybe<LoyaltyCampaignUpdateWithoutLoyaltyPlacementUnitsDataInput>;
  upsert?: InputMaybe<LoyaltyCampaignUpsertWithoutLoyaltyPlacementUnitsInput>;
};

export type LoyaltyCampaignUpdateWithWhereUniqueWithoutOrgInput = {
  data: LoyaltyCampaignUpdateWithoutOrgDataInput;
  where: LoyaltyCampaignWhereUniqueInput;
};

export type LoyaltyCampaignUpdateWithoutLoyaltyPlacementUnitsDataInput = {
  excludeOfferedFilter?: InputMaybe<Scalars['Int']>;
  expiration?: InputMaybe<Scalars['DateTime']>;
  includeActiveFilter?: InputMaybe<Scalars['Int']>;
  interests?: InputMaybe<LoyaltyCampaignUpdateinterestsInput>;
  name?: InputMaybe<Scalars['String']>;
  offering?: InputMaybe<Scalars['String']>;
  org?: InputMaybe<OrgUpdateOneWithoutLoyaltyCampaignsInput>;
  tags?: InputMaybe<LoyaltyCampaignUpdatetagsInput>;
  totalDelivered?: InputMaybe<Scalars['Int']>;
  totalSent?: InputMaybe<Scalars['Int']>;
  type?: InputMaybe<LoyaltyCampaignUpdatetypeInput>;
};

export type LoyaltyCampaignUpdateWithoutOrgDataInput = {
  excludeOfferedFilter?: InputMaybe<Scalars['Int']>;
  expiration?: InputMaybe<Scalars['DateTime']>;
  includeActiveFilter?: InputMaybe<Scalars['Int']>;
  interests?: InputMaybe<LoyaltyCampaignUpdateinterestsInput>;
  loyaltyPlacementUnits?: InputMaybe<LoyaltyPlacementUnitUpdateManyWithoutLoyaltyCampaignInput>;
  name?: InputMaybe<Scalars['String']>;
  offering?: InputMaybe<Scalars['String']>;
  tags?: InputMaybe<LoyaltyCampaignUpdatetagsInput>;
  totalDelivered?: InputMaybe<Scalars['Int']>;
  totalSent?: InputMaybe<Scalars['Int']>;
  type?: InputMaybe<LoyaltyCampaignUpdatetypeInput>;
};

export type LoyaltyCampaignUpdateinterestsInput = {
  set?: InputMaybe<Array<Scalars['String']>>;
};

export type LoyaltyCampaignUpdatetagsInput = {
  set?: InputMaybe<Array<Scalars['String']>>;
};

export type LoyaltyCampaignUpdatetypeInput = {
  set?: InputMaybe<Array<OfferType>>;
};

export type LoyaltyCampaignUpsertWithWhereUniqueWithoutOrgInput = {
  create: LoyaltyCampaignCreateWithoutOrgInput;
  update: LoyaltyCampaignUpdateWithoutOrgDataInput;
  where: LoyaltyCampaignWhereUniqueInput;
};

export type LoyaltyCampaignUpsertWithoutLoyaltyPlacementUnitsInput = {
  create: LoyaltyCampaignCreateWithoutLoyaltyPlacementUnitsInput;
  update: LoyaltyCampaignUpdateWithoutLoyaltyPlacementUnitsDataInput;
};

export type LoyaltyCampaignWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<LoyaltyCampaignWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<LoyaltyCampaignWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<LoyaltyCampaignWhereInput>>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  excludeOfferedFilter?: InputMaybe<Scalars['Int']>;
  /** All values greater than the given value. */
  excludeOfferedFilter_gt?: InputMaybe<Scalars['Int']>;
  /** All values greater than or equal the given value. */
  excludeOfferedFilter_gte?: InputMaybe<Scalars['Int']>;
  /** All values that are contained in given list. */
  excludeOfferedFilter_in?: InputMaybe<Array<Scalars['Int']>>;
  /** All values less than the given value. */
  excludeOfferedFilter_lt?: InputMaybe<Scalars['Int']>;
  /** All values less than or equal the given value. */
  excludeOfferedFilter_lte?: InputMaybe<Scalars['Int']>;
  /** All values that are not equal to given value. */
  excludeOfferedFilter_not?: InputMaybe<Scalars['Int']>;
  /** All values that are not contained in given list. */
  excludeOfferedFilter_not_in?: InputMaybe<Array<Scalars['Int']>>;
  expiration?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  expiration_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  expiration_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  expiration_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  expiration_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  expiration_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  expiration_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  expiration_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: InputMaybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: InputMaybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: InputMaybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  includeActiveFilter?: InputMaybe<Scalars['Int']>;
  /** All values greater than the given value. */
  includeActiveFilter_gt?: InputMaybe<Scalars['Int']>;
  /** All values greater than or equal the given value. */
  includeActiveFilter_gte?: InputMaybe<Scalars['Int']>;
  /** All values that are contained in given list. */
  includeActiveFilter_in?: InputMaybe<Array<Scalars['Int']>>;
  /** All values less than the given value. */
  includeActiveFilter_lt?: InputMaybe<Scalars['Int']>;
  /** All values less than or equal the given value. */
  includeActiveFilter_lte?: InputMaybe<Scalars['Int']>;
  /** All values that are not equal to given value. */
  includeActiveFilter_not?: InputMaybe<Scalars['Int']>;
  /** All values that are not contained in given list. */
  includeActiveFilter_not_in?: InputMaybe<Array<Scalars['Int']>>;
  loyaltyPlacementUnits_every?: InputMaybe<LoyaltyPlacementUnitWhereInput>;
  loyaltyPlacementUnits_none?: InputMaybe<LoyaltyPlacementUnitWhereInput>;
  loyaltyPlacementUnits_some?: InputMaybe<LoyaltyPlacementUnitWhereInput>;
  name?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  name_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  name_ends_with?: InputMaybe<Scalars['String']>;
  /** All values greater than the given value. */
  name_gt?: InputMaybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  name_gte?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  name_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  name_lt?: InputMaybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  name_lte?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  name_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  name_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string. */
  name_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  name_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  name_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  name_starts_with?: InputMaybe<Scalars['String']>;
  offering?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  offering_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  offering_ends_with?: InputMaybe<Scalars['String']>;
  /** All values greater than the given value. */
  offering_gt?: InputMaybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  offering_gte?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  offering_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  offering_lt?: InputMaybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  offering_lte?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  offering_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  offering_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string. */
  offering_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  offering_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  offering_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  offering_starts_with?: InputMaybe<Scalars['String']>;
  org?: InputMaybe<OrgWhereInput>;
  totalDelivered?: InputMaybe<Scalars['Int']>;
  /** All values greater than the given value. */
  totalDelivered_gt?: InputMaybe<Scalars['Int']>;
  /** All values greater than or equal the given value. */
  totalDelivered_gte?: InputMaybe<Scalars['Int']>;
  /** All values that are contained in given list. */
  totalDelivered_in?: InputMaybe<Array<Scalars['Int']>>;
  /** All values less than the given value. */
  totalDelivered_lt?: InputMaybe<Scalars['Int']>;
  /** All values less than or equal the given value. */
  totalDelivered_lte?: InputMaybe<Scalars['Int']>;
  /** All values that are not equal to given value. */
  totalDelivered_not?: InputMaybe<Scalars['Int']>;
  /** All values that are not contained in given list. */
  totalDelivered_not_in?: InputMaybe<Array<Scalars['Int']>>;
  totalSent?: InputMaybe<Scalars['Int']>;
  /** All values greater than the given value. */
  totalSent_gt?: InputMaybe<Scalars['Int']>;
  /** All values greater than or equal the given value. */
  totalSent_gte?: InputMaybe<Scalars['Int']>;
  /** All values that are contained in given list. */
  totalSent_in?: InputMaybe<Array<Scalars['Int']>>;
  /** All values less than the given value. */
  totalSent_lt?: InputMaybe<Scalars['Int']>;
  /** All values less than or equal the given value. */
  totalSent_lte?: InputMaybe<Scalars['Int']>;
  /** All values that are not equal to given value. */
  totalSent_not?: InputMaybe<Scalars['Int']>;
  /** All values that are not contained in given list. */
  totalSent_not_in?: InputMaybe<Array<Scalars['Int']>>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
};

export type LoyaltyCampaignWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
  name?: InputMaybe<Scalars['String']>;
};

export enum LoyaltyConversion {
  Click = 'CLICK',
  Coupon = 'COUPON',
  Delivered = 'DELIVERED',
  Queued = 'QUEUED',
  Signup = 'SIGNUP',
  Walkin = 'WALKIN'
}

export type LoyaltyPlacementUnit = Node & {
  __typename?: 'LoyaltyPlacementUnit';
  action?: Maybe<LoyaltyConversion>;
  createdAt: Scalars['DateTime'];
  customer?: Maybe<Customer>;
  id: Scalars['ID'];
  ip?: Maybe<Scalars['String']>;
  lat: Scalars['String'];
  lng: Scalars['String'];
  loyaltyCampaign?: Maybe<LoyaltyCampaign>;
  phoneNumber: Scalars['String'];
  revenue?: Maybe<Scalars['Int']>;
  sid?: Maybe<Scalars['String']>;
};

export type LoyaltyPlacementUnitCreateManyWithoutCustomerInput = {
  connect?: InputMaybe<Array<LoyaltyPlacementUnitWhereUniqueInput>>;
  create?: InputMaybe<Array<LoyaltyPlacementUnitCreateWithoutCustomerInput>>;
};

export type LoyaltyPlacementUnitCreateManyWithoutLoyaltyCampaignInput = {
  connect?: InputMaybe<Array<LoyaltyPlacementUnitWhereUniqueInput>>;
  create?: InputMaybe<Array<LoyaltyPlacementUnitCreateWithoutLoyaltyCampaignInput>>;
};

export type LoyaltyPlacementUnitCreateWithoutCustomerInput = {
  action?: InputMaybe<LoyaltyConversion>;
  ip?: InputMaybe<Scalars['String']>;
  lat: Scalars['String'];
  lng: Scalars['String'];
  loyaltyCampaign?: InputMaybe<LoyaltyCampaignCreateOneWithoutLoyaltyPlacementUnitsInput>;
  phoneNumber: Scalars['String'];
  revenue?: InputMaybe<Scalars['Int']>;
  sid?: InputMaybe<Scalars['String']>;
};

export type LoyaltyPlacementUnitCreateWithoutLoyaltyCampaignInput = {
  action?: InputMaybe<LoyaltyConversion>;
  customer?: InputMaybe<CustomerCreateOneWithoutLoyaltyPlacementUnitsInput>;
  ip?: InputMaybe<Scalars['String']>;
  lat: Scalars['String'];
  lng: Scalars['String'];
  phoneNumber: Scalars['String'];
  revenue?: InputMaybe<Scalars['Int']>;
  sid?: InputMaybe<Scalars['String']>;
};

export enum LoyaltyPlacementUnitOrderByInput {
  ActionAsc = 'action_ASC',
  ActionDesc = 'action_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  IpAsc = 'ip_ASC',
  IpDesc = 'ip_DESC',
  LatAsc = 'lat_ASC',
  LatDesc = 'lat_DESC',
  LngAsc = 'lng_ASC',
  LngDesc = 'lng_DESC',
  PhoneNumberAsc = 'phoneNumber_ASC',
  PhoneNumberDesc = 'phoneNumber_DESC',
  RevenueAsc = 'revenue_ASC',
  RevenueDesc = 'revenue_DESC',
  SidAsc = 'sid_ASC',
  SidDesc = 'sid_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC'
}

export type LoyaltyPlacementUnitUpdateManyWithoutCustomerInput = {
  connect?: InputMaybe<Array<LoyaltyPlacementUnitWhereUniqueInput>>;
  create?: InputMaybe<Array<LoyaltyPlacementUnitCreateWithoutCustomerInput>>;
  delete?: InputMaybe<Array<LoyaltyPlacementUnitWhereUniqueInput>>;
  disconnect?: InputMaybe<Array<LoyaltyPlacementUnitWhereUniqueInput>>;
  update?: InputMaybe<Array<LoyaltyPlacementUnitUpdateWithWhereUniqueWithoutCustomerInput>>;
  upsert?: InputMaybe<Array<LoyaltyPlacementUnitUpsertWithWhereUniqueWithoutCustomerInput>>;
};

export type LoyaltyPlacementUnitUpdateManyWithoutLoyaltyCampaignInput = {
  connect?: InputMaybe<Array<LoyaltyPlacementUnitWhereUniqueInput>>;
  create?: InputMaybe<Array<LoyaltyPlacementUnitCreateWithoutLoyaltyCampaignInput>>;
  delete?: InputMaybe<Array<LoyaltyPlacementUnitWhereUniqueInput>>;
  disconnect?: InputMaybe<Array<LoyaltyPlacementUnitWhereUniqueInput>>;
  update?: InputMaybe<Array<LoyaltyPlacementUnitUpdateWithWhereUniqueWithoutLoyaltyCampaignInput>>;
  upsert?: InputMaybe<Array<LoyaltyPlacementUnitUpsertWithWhereUniqueWithoutLoyaltyCampaignInput>>;
};

export type LoyaltyPlacementUnitUpdateWithWhereUniqueWithoutCustomerInput = {
  data: LoyaltyPlacementUnitUpdateWithoutCustomerDataInput;
  where: LoyaltyPlacementUnitWhereUniqueInput;
};

export type LoyaltyPlacementUnitUpdateWithWhereUniqueWithoutLoyaltyCampaignInput = {
  data: LoyaltyPlacementUnitUpdateWithoutLoyaltyCampaignDataInput;
  where: LoyaltyPlacementUnitWhereUniqueInput;
};

export type LoyaltyPlacementUnitUpdateWithoutCustomerDataInput = {
  action?: InputMaybe<LoyaltyConversion>;
  ip?: InputMaybe<Scalars['String']>;
  lat?: InputMaybe<Scalars['String']>;
  lng?: InputMaybe<Scalars['String']>;
  loyaltyCampaign?: InputMaybe<LoyaltyCampaignUpdateOneWithoutLoyaltyPlacementUnitsInput>;
  phoneNumber?: InputMaybe<Scalars['String']>;
  revenue?: InputMaybe<Scalars['Int']>;
  sid?: InputMaybe<Scalars['String']>;
};

export type LoyaltyPlacementUnitUpdateWithoutLoyaltyCampaignDataInput = {
  action?: InputMaybe<LoyaltyConversion>;
  customer?: InputMaybe<CustomerUpdateOneWithoutLoyaltyPlacementUnitsInput>;
  ip?: InputMaybe<Scalars['String']>;
  lat?: InputMaybe<Scalars['String']>;
  lng?: InputMaybe<Scalars['String']>;
  phoneNumber?: InputMaybe<Scalars['String']>;
  revenue?: InputMaybe<Scalars['Int']>;
  sid?: InputMaybe<Scalars['String']>;
};

export type LoyaltyPlacementUnitUpsertWithWhereUniqueWithoutCustomerInput = {
  create: LoyaltyPlacementUnitCreateWithoutCustomerInput;
  update: LoyaltyPlacementUnitUpdateWithoutCustomerDataInput;
  where: LoyaltyPlacementUnitWhereUniqueInput;
};

export type LoyaltyPlacementUnitUpsertWithWhereUniqueWithoutLoyaltyCampaignInput = {
  create: LoyaltyPlacementUnitCreateWithoutLoyaltyCampaignInput;
  update: LoyaltyPlacementUnitUpdateWithoutLoyaltyCampaignDataInput;
  where: LoyaltyPlacementUnitWhereUniqueInput;
};

export type LoyaltyPlacementUnitWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<LoyaltyPlacementUnitWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<LoyaltyPlacementUnitWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<LoyaltyPlacementUnitWhereInput>>;
  action?: InputMaybe<LoyaltyConversion>;
  /** All values that are contained in given list. */
  action_in?: InputMaybe<Array<LoyaltyConversion>>;
  /** All values that are not equal to given value. */
  action_not?: InputMaybe<LoyaltyConversion>;
  /** All values that are not contained in given list. */
  action_not_in?: InputMaybe<Array<LoyaltyConversion>>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  customer?: InputMaybe<CustomerWhereInput>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: InputMaybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: InputMaybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: InputMaybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  ip?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  ip_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  ip_ends_with?: InputMaybe<Scalars['String']>;
  /** All values greater than the given value. */
  ip_gt?: InputMaybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  ip_gte?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  ip_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  ip_lt?: InputMaybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  ip_lte?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  ip_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  ip_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string. */
  ip_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  ip_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  ip_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  ip_starts_with?: InputMaybe<Scalars['String']>;
  lat?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  lat_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  lat_ends_with?: InputMaybe<Scalars['String']>;
  /** All values greater than the given value. */
  lat_gt?: InputMaybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  lat_gte?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  lat_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  lat_lt?: InputMaybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  lat_lte?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  lat_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  lat_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string. */
  lat_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  lat_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  lat_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  lat_starts_with?: InputMaybe<Scalars['String']>;
  lng?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  lng_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  lng_ends_with?: InputMaybe<Scalars['String']>;
  /** All values greater than the given value. */
  lng_gt?: InputMaybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  lng_gte?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  lng_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  lng_lt?: InputMaybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  lng_lte?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  lng_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  lng_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string. */
  lng_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  lng_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  lng_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  lng_starts_with?: InputMaybe<Scalars['String']>;
  loyaltyCampaign?: InputMaybe<LoyaltyCampaignWhereInput>;
  phoneNumber?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  phoneNumber_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  phoneNumber_ends_with?: InputMaybe<Scalars['String']>;
  /** All values greater than the given value. */
  phoneNumber_gt?: InputMaybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  phoneNumber_gte?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  phoneNumber_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  phoneNumber_lt?: InputMaybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  phoneNumber_lte?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  phoneNumber_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  phoneNumber_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string. */
  phoneNumber_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  phoneNumber_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  phoneNumber_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  phoneNumber_starts_with?: InputMaybe<Scalars['String']>;
  revenue?: InputMaybe<Scalars['Int']>;
  /** All values greater than the given value. */
  revenue_gt?: InputMaybe<Scalars['Int']>;
  /** All values greater than or equal the given value. */
  revenue_gte?: InputMaybe<Scalars['Int']>;
  /** All values that are contained in given list. */
  revenue_in?: InputMaybe<Array<Scalars['Int']>>;
  /** All values less than the given value. */
  revenue_lt?: InputMaybe<Scalars['Int']>;
  /** All values less than or equal the given value. */
  revenue_lte?: InputMaybe<Scalars['Int']>;
  /** All values that are not equal to given value. */
  revenue_not?: InputMaybe<Scalars['Int']>;
  /** All values that are not contained in given list. */
  revenue_not_in?: InputMaybe<Array<Scalars['Int']>>;
  sid?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  sid_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  sid_ends_with?: InputMaybe<Scalars['String']>;
  /** All values greater than the given value. */
  sid_gt?: InputMaybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  sid_gte?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  sid_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  sid_lt?: InputMaybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  sid_lte?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  sid_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  sid_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string. */
  sid_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  sid_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  sid_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  sid_starts_with?: InputMaybe<Scalars['String']>;
};

export type LoyaltyPlacementUnitWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export enum MsaVersion {
  Version_1 = 'VERSION_1',
  Version_2 = 'VERSION_2'
}

export type Media = Node & {
  __typename?: 'Media';
  adGroupCreative?: Maybe<Array<AdGroupCreatives>>;
  brand?: Maybe<Brand>;
  catalogItem?: Maybe<CatalogItem>;
  createdAt: Scalars['DateTime'];
  creatives?: Maybe<Array<Creative>>;
  fileType?: Maybe<FileType>;
  flag?: Maybe<Scalars['Boolean']>;
  height?: Maybe<Scalars['Int']>;
  id: Scalars['ID'];
  key: Scalars['String'];
  length?: Maybe<Scalars['Int']>;
  locationAvatar?: Maybe<Location>;
  locationMedia?: Maybe<Location>;
  name?: Maybe<Scalars['String']>;
  org?: Maybe<Org>;
  product?: Maybe<Product>;
  productMedia?: Maybe<Product>;
  sharedWith?: Maybe<Array<Org>>;
  size?: Maybe<Scalars['Int']>;
  type: MediaType;
  updatedAt: Scalars['DateTime'];
  url: Scalars['String'];
  width?: Maybe<Scalars['Int']>;
};


export type MediaAdGroupCreativeArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<AdGroupCreativesOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<AdGroupCreativesWhereInput>;
};


export type MediaCreativesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<CreativeOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<CreativeWhereInput>;
};


export type MediaSharedWithArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<OrgOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<OrgWhereInput>;
};

export type MediaCreateInput = {
  adGroupCreative?: InputMaybe<AdGroupCreativesCreateManyWithoutMediasInput>;
  brand?: InputMaybe<BrandCreateOneInput>;
  catalogItem?: InputMaybe<CatalogItemCreateOneWithoutMediasInput>;
  creatives?: InputMaybe<CreativeCreateManyWithoutMediaInput>;
  fileType?: InputMaybe<FileType>;
  flag?: InputMaybe<Scalars['Boolean']>;
  height?: InputMaybe<Scalars['Int']>;
  key: Scalars['String'];
  length?: InputMaybe<Scalars['Int']>;
  locationAvatar?: InputMaybe<LocationCreateOneInput>;
  locationMedia?: InputMaybe<LocationCreateOneInput>;
  name?: InputMaybe<Scalars['String']>;
  org?: InputMaybe<OrgCreateOneWithoutLogoInput>;
  product?: InputMaybe<ProductCreateOneInput>;
  productMedia?: InputMaybe<ProductCreateOneInput>;
  sharedWith?: InputMaybe<OrgCreateManyWithoutMediaInput>;
  size?: InputMaybe<Scalars['Int']>;
  type: MediaType;
  url: Scalars['String'];
  width?: InputMaybe<Scalars['Int']>;
};

export type MediaCreateManyInput = {
  connect?: InputMaybe<Array<MediaWhereUniqueInput>>;
  create?: InputMaybe<Array<MediaCreateInput>>;
};

export type MediaCreateManyWithoutAdGroupCreativeInput = {
  connect?: InputMaybe<Array<MediaWhereUniqueInput>>;
  create?: InputMaybe<Array<MediaCreateWithoutAdGroupCreativeInput>>;
};

export type MediaCreateManyWithoutCatalogItemInput = {
  connect?: InputMaybe<Array<MediaWhereUniqueInput>>;
  create?: InputMaybe<Array<MediaCreateWithoutCatalogItemInput>>;
};

export type MediaCreateManyWithoutSharedWithInput = {
  connect?: InputMaybe<Array<MediaWhereUniqueInput>>;
  create?: InputMaybe<Array<MediaCreateWithoutSharedWithInput>>;
};

export type MediaCreateOneInput = {
  connect?: InputMaybe<MediaWhereUniqueInput>;
  create?: InputMaybe<MediaCreateInput>;
};

export type MediaCreateOneWithoutCreativesInput = {
  connect?: InputMaybe<MediaWhereUniqueInput>;
  create?: InputMaybe<MediaCreateWithoutCreativesInput>;
};

export type MediaCreateOneWithoutOrgInput = {
  connect?: InputMaybe<MediaWhereUniqueInput>;
  create?: InputMaybe<MediaCreateWithoutOrgInput>;
};

export type MediaCreateWithoutAdGroupCreativeInput = {
  brand?: InputMaybe<BrandCreateOneInput>;
  catalogItem?: InputMaybe<CatalogItemCreateOneWithoutMediasInput>;
  creatives?: InputMaybe<CreativeCreateManyWithoutMediaInput>;
  fileType?: InputMaybe<FileType>;
  flag?: InputMaybe<Scalars['Boolean']>;
  height?: InputMaybe<Scalars['Int']>;
  key: Scalars['String'];
  length?: InputMaybe<Scalars['Int']>;
  locationAvatar?: InputMaybe<LocationCreateOneInput>;
  locationMedia?: InputMaybe<LocationCreateOneInput>;
  name?: InputMaybe<Scalars['String']>;
  org?: InputMaybe<OrgCreateOneWithoutLogoInput>;
  product?: InputMaybe<ProductCreateOneInput>;
  productMedia?: InputMaybe<ProductCreateOneInput>;
  sharedWith?: InputMaybe<OrgCreateManyWithoutMediaInput>;
  size?: InputMaybe<Scalars['Int']>;
  type: MediaType;
  url: Scalars['String'];
  width?: InputMaybe<Scalars['Int']>;
};

export type MediaCreateWithoutCatalogItemInput = {
  adGroupCreative?: InputMaybe<AdGroupCreativesCreateManyWithoutMediasInput>;
  brand?: InputMaybe<BrandCreateOneInput>;
  creatives?: InputMaybe<CreativeCreateManyWithoutMediaInput>;
  fileType?: InputMaybe<FileType>;
  flag?: InputMaybe<Scalars['Boolean']>;
  height?: InputMaybe<Scalars['Int']>;
  key: Scalars['String'];
  length?: InputMaybe<Scalars['Int']>;
  locationAvatar?: InputMaybe<LocationCreateOneInput>;
  locationMedia?: InputMaybe<LocationCreateOneInput>;
  name?: InputMaybe<Scalars['String']>;
  org?: InputMaybe<OrgCreateOneWithoutLogoInput>;
  product?: InputMaybe<ProductCreateOneInput>;
  productMedia?: InputMaybe<ProductCreateOneInput>;
  sharedWith?: InputMaybe<OrgCreateManyWithoutMediaInput>;
  size?: InputMaybe<Scalars['Int']>;
  type: MediaType;
  url: Scalars['String'];
  width?: InputMaybe<Scalars['Int']>;
};

export type MediaCreateWithoutCreativesInput = {
  adGroupCreative?: InputMaybe<AdGroupCreativesCreateManyWithoutMediasInput>;
  brand?: InputMaybe<BrandCreateOneInput>;
  catalogItem?: InputMaybe<CatalogItemCreateOneWithoutMediasInput>;
  fileType?: InputMaybe<FileType>;
  flag?: InputMaybe<Scalars['Boolean']>;
  height?: InputMaybe<Scalars['Int']>;
  key: Scalars['String'];
  length?: InputMaybe<Scalars['Int']>;
  locationAvatar?: InputMaybe<LocationCreateOneInput>;
  locationMedia?: InputMaybe<LocationCreateOneInput>;
  name?: InputMaybe<Scalars['String']>;
  org?: InputMaybe<OrgCreateOneWithoutLogoInput>;
  product?: InputMaybe<ProductCreateOneInput>;
  productMedia?: InputMaybe<ProductCreateOneInput>;
  sharedWith?: InputMaybe<OrgCreateManyWithoutMediaInput>;
  size?: InputMaybe<Scalars['Int']>;
  type: MediaType;
  url: Scalars['String'];
  width?: InputMaybe<Scalars['Int']>;
};

export type MediaCreateWithoutOrgInput = {
  adGroupCreative?: InputMaybe<AdGroupCreativesCreateManyWithoutMediasInput>;
  brand?: InputMaybe<BrandCreateOneInput>;
  catalogItem?: InputMaybe<CatalogItemCreateOneWithoutMediasInput>;
  creatives?: InputMaybe<CreativeCreateManyWithoutMediaInput>;
  fileType?: InputMaybe<FileType>;
  flag?: InputMaybe<Scalars['Boolean']>;
  height?: InputMaybe<Scalars['Int']>;
  key: Scalars['String'];
  length?: InputMaybe<Scalars['Int']>;
  locationAvatar?: InputMaybe<LocationCreateOneInput>;
  locationMedia?: InputMaybe<LocationCreateOneInput>;
  name?: InputMaybe<Scalars['String']>;
  product?: InputMaybe<ProductCreateOneInput>;
  productMedia?: InputMaybe<ProductCreateOneInput>;
  sharedWith?: InputMaybe<OrgCreateManyWithoutMediaInput>;
  size?: InputMaybe<Scalars['Int']>;
  type: MediaType;
  url: Scalars['String'];
  width?: InputMaybe<Scalars['Int']>;
};

export type MediaCreateWithoutSharedWithInput = {
  adGroupCreative?: InputMaybe<AdGroupCreativesCreateManyWithoutMediasInput>;
  brand?: InputMaybe<BrandCreateOneInput>;
  catalogItem?: InputMaybe<CatalogItemCreateOneWithoutMediasInput>;
  creatives?: InputMaybe<CreativeCreateManyWithoutMediaInput>;
  fileType?: InputMaybe<FileType>;
  flag?: InputMaybe<Scalars['Boolean']>;
  height?: InputMaybe<Scalars['Int']>;
  key: Scalars['String'];
  length?: InputMaybe<Scalars['Int']>;
  locationAvatar?: InputMaybe<LocationCreateOneInput>;
  locationMedia?: InputMaybe<LocationCreateOneInput>;
  name?: InputMaybe<Scalars['String']>;
  org?: InputMaybe<OrgCreateOneWithoutLogoInput>;
  product?: InputMaybe<ProductCreateOneInput>;
  productMedia?: InputMaybe<ProductCreateOneInput>;
  size?: InputMaybe<Scalars['Int']>;
  type: MediaType;
  url: Scalars['String'];
  width?: InputMaybe<Scalars['Int']>;
};

export enum MediaOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  FileTypeAsc = 'fileType_ASC',
  FileTypeDesc = 'fileType_DESC',
  FlagAsc = 'flag_ASC',
  FlagDesc = 'flag_DESC',
  HeightAsc = 'height_ASC',
  HeightDesc = 'height_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  KeyAsc = 'key_ASC',
  KeyDesc = 'key_DESC',
  LengthAsc = 'length_ASC',
  LengthDesc = 'length_DESC',
  NameAsc = 'name_ASC',
  NameDesc = 'name_DESC',
  SizeAsc = 'size_ASC',
  SizeDesc = 'size_DESC',
  TypeAsc = 'type_ASC',
  TypeDesc = 'type_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  UrlAsc = 'url_ASC',
  UrlDesc = 'url_DESC',
  WidthAsc = 'width_ASC',
  WidthDesc = 'width_DESC'
}

export enum MediaType {
  Animatedgif = 'ANIMATEDGIF',
  Avatar = 'AVATAR',
  Still = 'STILL',
  Threedee = 'THREEDEE'
}

export type MediaUpdateDataInput = {
  adGroupCreative?: InputMaybe<AdGroupCreativesUpdateManyWithoutMediasInput>;
  brand?: InputMaybe<BrandUpdateOneInput>;
  catalogItem?: InputMaybe<CatalogItemUpdateOneWithoutMediasInput>;
  creatives?: InputMaybe<CreativeUpdateManyWithoutMediaInput>;
  fileType?: InputMaybe<FileType>;
  flag?: InputMaybe<Scalars['Boolean']>;
  height?: InputMaybe<Scalars['Int']>;
  key?: InputMaybe<Scalars['String']>;
  length?: InputMaybe<Scalars['Int']>;
  locationAvatar?: InputMaybe<LocationUpdateOneInput>;
  locationMedia?: InputMaybe<LocationUpdateOneInput>;
  name?: InputMaybe<Scalars['String']>;
  org?: InputMaybe<OrgUpdateOneWithoutLogoInput>;
  product?: InputMaybe<ProductUpdateOneInput>;
  productMedia?: InputMaybe<ProductUpdateOneInput>;
  sharedWith?: InputMaybe<OrgUpdateManyWithoutMediaInput>;
  size?: InputMaybe<Scalars['Int']>;
  type?: InputMaybe<MediaType>;
  url?: InputMaybe<Scalars['String']>;
  width?: InputMaybe<Scalars['Int']>;
};

export type MediaUpdateInput = {
  adGroupCreative?: InputMaybe<AdGroupCreativesUpdateManyWithoutMediasInput>;
  brand?: InputMaybe<BrandUpdateOneInput>;
  catalogItem?: InputMaybe<CatalogItemUpdateOneWithoutMediasInput>;
  creatives?: InputMaybe<CreativeUpdateManyWithoutMediaInput>;
  fileType?: InputMaybe<FileType>;
  flag?: InputMaybe<Scalars['Boolean']>;
  height?: InputMaybe<Scalars['Int']>;
  key?: InputMaybe<Scalars['String']>;
  length?: InputMaybe<Scalars['Int']>;
  locationAvatar?: InputMaybe<LocationUpdateOneInput>;
  locationMedia?: InputMaybe<LocationUpdateOneInput>;
  name?: InputMaybe<Scalars['String']>;
  org?: InputMaybe<OrgUpdateOneWithoutLogoInput>;
  product?: InputMaybe<ProductUpdateOneInput>;
  productMedia?: InputMaybe<ProductUpdateOneInput>;
  sharedWith?: InputMaybe<OrgUpdateManyWithoutMediaInput>;
  size?: InputMaybe<Scalars['Int']>;
  type?: InputMaybe<MediaType>;
  url?: InputMaybe<Scalars['String']>;
  width?: InputMaybe<Scalars['Int']>;
};

export type MediaUpdateManyInput = {
  connect?: InputMaybe<Array<MediaWhereUniqueInput>>;
  create?: InputMaybe<Array<MediaCreateInput>>;
  delete?: InputMaybe<Array<MediaWhereUniqueInput>>;
  disconnect?: InputMaybe<Array<MediaWhereUniqueInput>>;
  update?: InputMaybe<Array<MediaUpdateWithWhereUniqueNestedInput>>;
  upsert?: InputMaybe<Array<MediaUpsertWithWhereUniqueNestedInput>>;
};

export type MediaUpdateManyWithoutAdGroupCreativeInput = {
  connect?: InputMaybe<Array<MediaWhereUniqueInput>>;
  create?: InputMaybe<Array<MediaCreateWithoutAdGroupCreativeInput>>;
  delete?: InputMaybe<Array<MediaWhereUniqueInput>>;
  disconnect?: InputMaybe<Array<MediaWhereUniqueInput>>;
  update?: InputMaybe<Array<MediaUpdateWithWhereUniqueWithoutAdGroupCreativeInput>>;
  upsert?: InputMaybe<Array<MediaUpsertWithWhereUniqueWithoutAdGroupCreativeInput>>;
};

export type MediaUpdateManyWithoutCatalogItemInput = {
  connect?: InputMaybe<Array<MediaWhereUniqueInput>>;
  create?: InputMaybe<Array<MediaCreateWithoutCatalogItemInput>>;
  delete?: InputMaybe<Array<MediaWhereUniqueInput>>;
  disconnect?: InputMaybe<Array<MediaWhereUniqueInput>>;
  update?: InputMaybe<Array<MediaUpdateWithWhereUniqueWithoutCatalogItemInput>>;
  upsert?: InputMaybe<Array<MediaUpsertWithWhereUniqueWithoutCatalogItemInput>>;
};

export type MediaUpdateManyWithoutSharedWithInput = {
  connect?: InputMaybe<Array<MediaWhereUniqueInput>>;
  create?: InputMaybe<Array<MediaCreateWithoutSharedWithInput>>;
  delete?: InputMaybe<Array<MediaWhereUniqueInput>>;
  disconnect?: InputMaybe<Array<MediaWhereUniqueInput>>;
  update?: InputMaybe<Array<MediaUpdateWithWhereUniqueWithoutSharedWithInput>>;
  upsert?: InputMaybe<Array<MediaUpsertWithWhereUniqueWithoutSharedWithInput>>;
};

export type MediaUpdateOneInput = {
  connect?: InputMaybe<MediaWhereUniqueInput>;
  create?: InputMaybe<MediaCreateInput>;
  delete?: InputMaybe<Scalars['Boolean']>;
  disconnect?: InputMaybe<Scalars['Boolean']>;
  update?: InputMaybe<MediaUpdateDataInput>;
  upsert?: InputMaybe<MediaUpsertNestedInput>;
};

export type MediaUpdateOneRequiredWithoutCreativesInput = {
  connect?: InputMaybe<MediaWhereUniqueInput>;
  create?: InputMaybe<MediaCreateWithoutCreativesInput>;
  update?: InputMaybe<MediaUpdateWithoutCreativesDataInput>;
  upsert?: InputMaybe<MediaUpsertWithoutCreativesInput>;
};

export type MediaUpdateOneWithoutOrgInput = {
  connect?: InputMaybe<MediaWhereUniqueInput>;
  create?: InputMaybe<MediaCreateWithoutOrgInput>;
  delete?: InputMaybe<Scalars['Boolean']>;
  disconnect?: InputMaybe<Scalars['Boolean']>;
  update?: InputMaybe<MediaUpdateWithoutOrgDataInput>;
  upsert?: InputMaybe<MediaUpsertWithoutOrgInput>;
};

export type MediaUpdateWithWhereUniqueNestedInput = {
  data: MediaUpdateDataInput;
  where: MediaWhereUniqueInput;
};

export type MediaUpdateWithWhereUniqueWithoutAdGroupCreativeInput = {
  data: MediaUpdateWithoutAdGroupCreativeDataInput;
  where: MediaWhereUniqueInput;
};

export type MediaUpdateWithWhereUniqueWithoutCatalogItemInput = {
  data: MediaUpdateWithoutCatalogItemDataInput;
  where: MediaWhereUniqueInput;
};

export type MediaUpdateWithWhereUniqueWithoutSharedWithInput = {
  data: MediaUpdateWithoutSharedWithDataInput;
  where: MediaWhereUniqueInput;
};

export type MediaUpdateWithoutAdGroupCreativeDataInput = {
  brand?: InputMaybe<BrandUpdateOneInput>;
  catalogItem?: InputMaybe<CatalogItemUpdateOneWithoutMediasInput>;
  creatives?: InputMaybe<CreativeUpdateManyWithoutMediaInput>;
  fileType?: InputMaybe<FileType>;
  flag?: InputMaybe<Scalars['Boolean']>;
  height?: InputMaybe<Scalars['Int']>;
  key?: InputMaybe<Scalars['String']>;
  length?: InputMaybe<Scalars['Int']>;
  locationAvatar?: InputMaybe<LocationUpdateOneInput>;
  locationMedia?: InputMaybe<LocationUpdateOneInput>;
  name?: InputMaybe<Scalars['String']>;
  org?: InputMaybe<OrgUpdateOneWithoutLogoInput>;
  product?: InputMaybe<ProductUpdateOneInput>;
  productMedia?: InputMaybe<ProductUpdateOneInput>;
  sharedWith?: InputMaybe<OrgUpdateManyWithoutMediaInput>;
  size?: InputMaybe<Scalars['Int']>;
  type?: InputMaybe<MediaType>;
  url?: InputMaybe<Scalars['String']>;
  width?: InputMaybe<Scalars['Int']>;
};

export type MediaUpdateWithoutCatalogItemDataInput = {
  adGroupCreative?: InputMaybe<AdGroupCreativesUpdateManyWithoutMediasInput>;
  brand?: InputMaybe<BrandUpdateOneInput>;
  creatives?: InputMaybe<CreativeUpdateManyWithoutMediaInput>;
  fileType?: InputMaybe<FileType>;
  flag?: InputMaybe<Scalars['Boolean']>;
  height?: InputMaybe<Scalars['Int']>;
  key?: InputMaybe<Scalars['String']>;
  length?: InputMaybe<Scalars['Int']>;
  locationAvatar?: InputMaybe<LocationUpdateOneInput>;
  locationMedia?: InputMaybe<LocationUpdateOneInput>;
  name?: InputMaybe<Scalars['String']>;
  org?: InputMaybe<OrgUpdateOneWithoutLogoInput>;
  product?: InputMaybe<ProductUpdateOneInput>;
  productMedia?: InputMaybe<ProductUpdateOneInput>;
  sharedWith?: InputMaybe<OrgUpdateManyWithoutMediaInput>;
  size?: InputMaybe<Scalars['Int']>;
  type?: InputMaybe<MediaType>;
  url?: InputMaybe<Scalars['String']>;
  width?: InputMaybe<Scalars['Int']>;
};

export type MediaUpdateWithoutCreativesDataInput = {
  adGroupCreative?: InputMaybe<AdGroupCreativesUpdateManyWithoutMediasInput>;
  brand?: InputMaybe<BrandUpdateOneInput>;
  catalogItem?: InputMaybe<CatalogItemUpdateOneWithoutMediasInput>;
  fileType?: InputMaybe<FileType>;
  flag?: InputMaybe<Scalars['Boolean']>;
  height?: InputMaybe<Scalars['Int']>;
  key?: InputMaybe<Scalars['String']>;
  length?: InputMaybe<Scalars['Int']>;
  locationAvatar?: InputMaybe<LocationUpdateOneInput>;
  locationMedia?: InputMaybe<LocationUpdateOneInput>;
  name?: InputMaybe<Scalars['String']>;
  org?: InputMaybe<OrgUpdateOneWithoutLogoInput>;
  product?: InputMaybe<ProductUpdateOneInput>;
  productMedia?: InputMaybe<ProductUpdateOneInput>;
  sharedWith?: InputMaybe<OrgUpdateManyWithoutMediaInput>;
  size?: InputMaybe<Scalars['Int']>;
  type?: InputMaybe<MediaType>;
  url?: InputMaybe<Scalars['String']>;
  width?: InputMaybe<Scalars['Int']>;
};

export type MediaUpdateWithoutOrgDataInput = {
  adGroupCreative?: InputMaybe<AdGroupCreativesUpdateManyWithoutMediasInput>;
  brand?: InputMaybe<BrandUpdateOneInput>;
  catalogItem?: InputMaybe<CatalogItemUpdateOneWithoutMediasInput>;
  creatives?: InputMaybe<CreativeUpdateManyWithoutMediaInput>;
  fileType?: InputMaybe<FileType>;
  flag?: InputMaybe<Scalars['Boolean']>;
  height?: InputMaybe<Scalars['Int']>;
  key?: InputMaybe<Scalars['String']>;
  length?: InputMaybe<Scalars['Int']>;
  locationAvatar?: InputMaybe<LocationUpdateOneInput>;
  locationMedia?: InputMaybe<LocationUpdateOneInput>;
  name?: InputMaybe<Scalars['String']>;
  product?: InputMaybe<ProductUpdateOneInput>;
  productMedia?: InputMaybe<ProductUpdateOneInput>;
  sharedWith?: InputMaybe<OrgUpdateManyWithoutMediaInput>;
  size?: InputMaybe<Scalars['Int']>;
  type?: InputMaybe<MediaType>;
  url?: InputMaybe<Scalars['String']>;
  width?: InputMaybe<Scalars['Int']>;
};

export type MediaUpdateWithoutSharedWithDataInput = {
  adGroupCreative?: InputMaybe<AdGroupCreativesUpdateManyWithoutMediasInput>;
  brand?: InputMaybe<BrandUpdateOneInput>;
  catalogItem?: InputMaybe<CatalogItemUpdateOneWithoutMediasInput>;
  creatives?: InputMaybe<CreativeUpdateManyWithoutMediaInput>;
  fileType?: InputMaybe<FileType>;
  flag?: InputMaybe<Scalars['Boolean']>;
  height?: InputMaybe<Scalars['Int']>;
  key?: InputMaybe<Scalars['String']>;
  length?: InputMaybe<Scalars['Int']>;
  locationAvatar?: InputMaybe<LocationUpdateOneInput>;
  locationMedia?: InputMaybe<LocationUpdateOneInput>;
  name?: InputMaybe<Scalars['String']>;
  org?: InputMaybe<OrgUpdateOneWithoutLogoInput>;
  product?: InputMaybe<ProductUpdateOneInput>;
  productMedia?: InputMaybe<ProductUpdateOneInput>;
  size?: InputMaybe<Scalars['Int']>;
  type?: InputMaybe<MediaType>;
  url?: InputMaybe<Scalars['String']>;
  width?: InputMaybe<Scalars['Int']>;
};

export type MediaUpsertNestedInput = {
  create: MediaCreateInput;
  update: MediaUpdateDataInput;
};

export type MediaUpsertWithWhereUniqueNestedInput = {
  create: MediaCreateInput;
  update: MediaUpdateDataInput;
  where: MediaWhereUniqueInput;
};

export type MediaUpsertWithWhereUniqueWithoutAdGroupCreativeInput = {
  create: MediaCreateWithoutAdGroupCreativeInput;
  update: MediaUpdateWithoutAdGroupCreativeDataInput;
  where: MediaWhereUniqueInput;
};

export type MediaUpsertWithWhereUniqueWithoutCatalogItemInput = {
  create: MediaCreateWithoutCatalogItemInput;
  update: MediaUpdateWithoutCatalogItemDataInput;
  where: MediaWhereUniqueInput;
};

export type MediaUpsertWithWhereUniqueWithoutSharedWithInput = {
  create: MediaCreateWithoutSharedWithInput;
  update: MediaUpdateWithoutSharedWithDataInput;
  where: MediaWhereUniqueInput;
};

export type MediaUpsertWithoutCreativesInput = {
  create: MediaCreateWithoutCreativesInput;
  update: MediaUpdateWithoutCreativesDataInput;
};

export type MediaUpsertWithoutOrgInput = {
  create: MediaCreateWithoutOrgInput;
  update: MediaUpdateWithoutOrgDataInput;
};

export type MediaWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<MediaWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<MediaWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<MediaWhereInput>>;
  adGroupCreative_every?: InputMaybe<AdGroupCreativesWhereInput>;
  adGroupCreative_none?: InputMaybe<AdGroupCreativesWhereInput>;
  adGroupCreative_some?: InputMaybe<AdGroupCreativesWhereInput>;
  brand?: InputMaybe<BrandWhereInput>;
  catalogItem?: InputMaybe<CatalogItemWhereInput>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  creatives_every?: InputMaybe<CreativeWhereInput>;
  creatives_none?: InputMaybe<CreativeWhereInput>;
  creatives_some?: InputMaybe<CreativeWhereInput>;
  fileType?: InputMaybe<FileType>;
  /** All values that are contained in given list. */
  fileType_in?: InputMaybe<Array<FileType>>;
  /** All values that are not equal to given value. */
  fileType_not?: InputMaybe<FileType>;
  /** All values that are not contained in given list. */
  fileType_not_in?: InputMaybe<Array<FileType>>;
  flag?: InputMaybe<Scalars['Boolean']>;
  /** All values that are not equal to given value. */
  flag_not?: InputMaybe<Scalars['Boolean']>;
  height?: InputMaybe<Scalars['Int']>;
  /** All values greater than the given value. */
  height_gt?: InputMaybe<Scalars['Int']>;
  /** All values greater than or equal the given value. */
  height_gte?: InputMaybe<Scalars['Int']>;
  /** All values that are contained in given list. */
  height_in?: InputMaybe<Array<Scalars['Int']>>;
  /** All values less than the given value. */
  height_lt?: InputMaybe<Scalars['Int']>;
  /** All values less than or equal the given value. */
  height_lte?: InputMaybe<Scalars['Int']>;
  /** All values that are not equal to given value. */
  height_not?: InputMaybe<Scalars['Int']>;
  /** All values that are not contained in given list. */
  height_not_in?: InputMaybe<Array<Scalars['Int']>>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: InputMaybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: InputMaybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: InputMaybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  key?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  key_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  key_ends_with?: InputMaybe<Scalars['String']>;
  /** All values greater than the given value. */
  key_gt?: InputMaybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  key_gte?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  key_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  key_lt?: InputMaybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  key_lte?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  key_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  key_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string. */
  key_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  key_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  key_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  key_starts_with?: InputMaybe<Scalars['String']>;
  length?: InputMaybe<Scalars['Int']>;
  /** All values greater than the given value. */
  length_gt?: InputMaybe<Scalars['Int']>;
  /** All values greater than or equal the given value. */
  length_gte?: InputMaybe<Scalars['Int']>;
  /** All values that are contained in given list. */
  length_in?: InputMaybe<Array<Scalars['Int']>>;
  /** All values less than the given value. */
  length_lt?: InputMaybe<Scalars['Int']>;
  /** All values less than or equal the given value. */
  length_lte?: InputMaybe<Scalars['Int']>;
  /** All values that are not equal to given value. */
  length_not?: InputMaybe<Scalars['Int']>;
  /** All values that are not contained in given list. */
  length_not_in?: InputMaybe<Array<Scalars['Int']>>;
  locationAvatar?: InputMaybe<LocationWhereInput>;
  locationMedia?: InputMaybe<LocationWhereInput>;
  name?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  name_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  name_ends_with?: InputMaybe<Scalars['String']>;
  /** All values greater than the given value. */
  name_gt?: InputMaybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  name_gte?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  name_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  name_lt?: InputMaybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  name_lte?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  name_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  name_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string. */
  name_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  name_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  name_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  name_starts_with?: InputMaybe<Scalars['String']>;
  org?: InputMaybe<OrgWhereInput>;
  product?: InputMaybe<ProductWhereInput>;
  productMedia?: InputMaybe<ProductWhereInput>;
  sharedWith_every?: InputMaybe<OrgWhereInput>;
  sharedWith_none?: InputMaybe<OrgWhereInput>;
  sharedWith_some?: InputMaybe<OrgWhereInput>;
  size?: InputMaybe<Scalars['Int']>;
  /** All values greater than the given value. */
  size_gt?: InputMaybe<Scalars['Int']>;
  /** All values greater than or equal the given value. */
  size_gte?: InputMaybe<Scalars['Int']>;
  /** All values that are contained in given list. */
  size_in?: InputMaybe<Array<Scalars['Int']>>;
  /** All values less than the given value. */
  size_lt?: InputMaybe<Scalars['Int']>;
  /** All values less than or equal the given value. */
  size_lte?: InputMaybe<Scalars['Int']>;
  /** All values that are not equal to given value. */
  size_not?: InputMaybe<Scalars['Int']>;
  /** All values that are not contained in given list. */
  size_not_in?: InputMaybe<Array<Scalars['Int']>>;
  type?: InputMaybe<MediaType>;
  /** All values that are contained in given list. */
  type_in?: InputMaybe<Array<MediaType>>;
  /** All values that are not equal to given value. */
  type_not?: InputMaybe<MediaType>;
  /** All values that are not contained in given list. */
  type_not_in?: InputMaybe<Array<MediaType>>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  url?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  url_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  url_ends_with?: InputMaybe<Scalars['String']>;
  /** All values greater than the given value. */
  url_gt?: InputMaybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  url_gte?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  url_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  url_lt?: InputMaybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  url_lte?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  url_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  url_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string. */
  url_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  url_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  url_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  url_starts_with?: InputMaybe<Scalars['String']>;
  width?: InputMaybe<Scalars['Int']>;
  /** All values greater than the given value. */
  width_gt?: InputMaybe<Scalars['Int']>;
  /** All values greater than or equal the given value. */
  width_gte?: InputMaybe<Scalars['Int']>;
  /** All values that are contained in given list. */
  width_in?: InputMaybe<Array<Scalars['Int']>>;
  /** All values less than the given value. */
  width_lt?: InputMaybe<Scalars['Int']>;
  /** All values less than or equal the given value. */
  width_lte?: InputMaybe<Scalars['Int']>;
  /** All values that are not equal to given value. */
  width_not?: InputMaybe<Scalars['Int']>;
  /** All values that are not contained in given list. */
  width_not_in?: InputMaybe<Array<Scalars['Int']>>;
};

export type MediaWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export type Message = Node & {
  __typename?: 'Message';
  catalogItems?: Maybe<Array<CatalogItem>>;
  context?: Maybe<Scalars['String']>;
  conversation: Conversation;
  createdAt: Scalars['DateTime'];
  currentOrgID?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  isUser?: Maybe<Scalars['Boolean']>;
  locations?: Maybe<Array<Location>>;
  message: Scalars['String'];
  personality?: Maybe<Scalars['String']>;
  strains?: Maybe<Array<Strain>>;
  updatedAt: Scalars['DateTime'];
  user?: Maybe<User>;
};


export type MessageCatalogItemsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<CatalogItemOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<CatalogItemWhereInput>;
};


export type MessageLocationsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<LocationOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<LocationWhereInput>;
};


export type MessageStrainsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<StrainOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<StrainWhereInput>;
};

export type MessageCreateInput = {
  catalogItems?: InputMaybe<CatalogItemCreateManyInput>;
  context?: InputMaybe<Scalars['String']>;
  conversation: ConversationCreateOneWithoutMessagesInput;
  currentOrgID?: InputMaybe<Scalars['String']>;
  isUser?: InputMaybe<Scalars['Boolean']>;
  locations?: InputMaybe<LocationCreateManyWithoutMessageInput>;
  message: Scalars['String'];
  personality?: InputMaybe<Scalars['String']>;
  strains?: InputMaybe<StrainCreateManyWithoutMessageInput>;
  user?: InputMaybe<UserCreateOneWithoutMessagesInput>;
};

export type MessageCreateManyWithoutConversationInput = {
  connect?: InputMaybe<Array<MessageWhereUniqueInput>>;
  create?: InputMaybe<Array<MessageCreateWithoutConversationInput>>;
};

export type MessageCreateManyWithoutUserInput = {
  connect?: InputMaybe<Array<MessageWhereUniqueInput>>;
  create?: InputMaybe<Array<MessageCreateWithoutUserInput>>;
};

export type MessageCreateOneWithoutLocationsInput = {
  connect?: InputMaybe<MessageWhereUniqueInput>;
  create?: InputMaybe<MessageCreateWithoutLocationsInput>;
};

export type MessageCreateOneWithoutStrainsInput = {
  connect?: InputMaybe<MessageWhereUniqueInput>;
  create?: InputMaybe<MessageCreateWithoutStrainsInput>;
};

export type MessageCreateWithoutConversationInput = {
  catalogItems?: InputMaybe<CatalogItemCreateManyInput>;
  context?: InputMaybe<Scalars['String']>;
  currentOrgID?: InputMaybe<Scalars['String']>;
  isUser?: InputMaybe<Scalars['Boolean']>;
  locations?: InputMaybe<LocationCreateManyWithoutMessageInput>;
  message: Scalars['String'];
  personality?: InputMaybe<Scalars['String']>;
  strains?: InputMaybe<StrainCreateManyWithoutMessageInput>;
  user?: InputMaybe<UserCreateOneWithoutMessagesInput>;
};

export type MessageCreateWithoutLocationsInput = {
  catalogItems?: InputMaybe<CatalogItemCreateManyInput>;
  context?: InputMaybe<Scalars['String']>;
  conversation: ConversationCreateOneWithoutMessagesInput;
  currentOrgID?: InputMaybe<Scalars['String']>;
  isUser?: InputMaybe<Scalars['Boolean']>;
  message: Scalars['String'];
  personality?: InputMaybe<Scalars['String']>;
  strains?: InputMaybe<StrainCreateManyWithoutMessageInput>;
  user?: InputMaybe<UserCreateOneWithoutMessagesInput>;
};

export type MessageCreateWithoutStrainsInput = {
  catalogItems?: InputMaybe<CatalogItemCreateManyInput>;
  context?: InputMaybe<Scalars['String']>;
  conversation: ConversationCreateOneWithoutMessagesInput;
  currentOrgID?: InputMaybe<Scalars['String']>;
  isUser?: InputMaybe<Scalars['Boolean']>;
  locations?: InputMaybe<LocationCreateManyWithoutMessageInput>;
  message: Scalars['String'];
  personality?: InputMaybe<Scalars['String']>;
  user?: InputMaybe<UserCreateOneWithoutMessagesInput>;
};

export type MessageCreateWithoutUserInput = {
  catalogItems?: InputMaybe<CatalogItemCreateManyInput>;
  context?: InputMaybe<Scalars['String']>;
  conversation: ConversationCreateOneWithoutMessagesInput;
  currentOrgID?: InputMaybe<Scalars['String']>;
  isUser?: InputMaybe<Scalars['Boolean']>;
  locations?: InputMaybe<LocationCreateManyWithoutMessageInput>;
  message: Scalars['String'];
  personality?: InputMaybe<Scalars['String']>;
  strains?: InputMaybe<StrainCreateManyWithoutMessageInput>;
};

export enum MessageOrderByInput {
  ContextAsc = 'context_ASC',
  ContextDesc = 'context_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  CurrentOrgIdAsc = 'currentOrgID_ASC',
  CurrentOrgIdDesc = 'currentOrgID_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  IsUserAsc = 'isUser_ASC',
  IsUserDesc = 'isUser_DESC',
  MessageAsc = 'message_ASC',
  MessageDesc = 'message_DESC',
  PersonalityAsc = 'personality_ASC',
  PersonalityDesc = 'personality_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC'
}

export type MessageUpdateInput = {
  catalogItems?: InputMaybe<CatalogItemUpdateManyInput>;
  context?: InputMaybe<Scalars['String']>;
  conversation?: InputMaybe<ConversationUpdateOneRequiredWithoutMessagesInput>;
  currentOrgID?: InputMaybe<Scalars['String']>;
  isUser?: InputMaybe<Scalars['Boolean']>;
  locations?: InputMaybe<LocationUpdateManyWithoutMessageInput>;
  message?: InputMaybe<Scalars['String']>;
  personality?: InputMaybe<Scalars['String']>;
  strains?: InputMaybe<StrainUpdateManyWithoutMessageInput>;
  user?: InputMaybe<UserUpdateOneWithoutMessagesInput>;
};

export type MessageUpdateManyMutationInput = {
  context?: InputMaybe<Scalars['String']>;
  currentOrgID?: InputMaybe<Scalars['String']>;
  isUser?: InputMaybe<Scalars['Boolean']>;
  message?: InputMaybe<Scalars['String']>;
  personality?: InputMaybe<Scalars['String']>;
};

export type MessageUpdateManyWithoutConversationInput = {
  connect?: InputMaybe<Array<MessageWhereUniqueInput>>;
  create?: InputMaybe<Array<MessageCreateWithoutConversationInput>>;
  delete?: InputMaybe<Array<MessageWhereUniqueInput>>;
  disconnect?: InputMaybe<Array<MessageWhereUniqueInput>>;
  update?: InputMaybe<Array<MessageUpdateWithWhereUniqueWithoutConversationInput>>;
  upsert?: InputMaybe<Array<MessageUpsertWithWhereUniqueWithoutConversationInput>>;
};

export type MessageUpdateManyWithoutUserInput = {
  connect?: InputMaybe<Array<MessageWhereUniqueInput>>;
  create?: InputMaybe<Array<MessageCreateWithoutUserInput>>;
  delete?: InputMaybe<Array<MessageWhereUniqueInput>>;
  disconnect?: InputMaybe<Array<MessageWhereUniqueInput>>;
  update?: InputMaybe<Array<MessageUpdateWithWhereUniqueWithoutUserInput>>;
  upsert?: InputMaybe<Array<MessageUpsertWithWhereUniqueWithoutUserInput>>;
};

export type MessageUpdateOneWithoutLocationsInput = {
  connect?: InputMaybe<MessageWhereUniqueInput>;
  create?: InputMaybe<MessageCreateWithoutLocationsInput>;
  delete?: InputMaybe<Scalars['Boolean']>;
  disconnect?: InputMaybe<Scalars['Boolean']>;
  update?: InputMaybe<MessageUpdateWithoutLocationsDataInput>;
  upsert?: InputMaybe<MessageUpsertWithoutLocationsInput>;
};

export type MessageUpdateOneWithoutStrainsInput = {
  connect?: InputMaybe<MessageWhereUniqueInput>;
  create?: InputMaybe<MessageCreateWithoutStrainsInput>;
  delete?: InputMaybe<Scalars['Boolean']>;
  disconnect?: InputMaybe<Scalars['Boolean']>;
  update?: InputMaybe<MessageUpdateWithoutStrainsDataInput>;
  upsert?: InputMaybe<MessageUpsertWithoutStrainsInput>;
};

export type MessageUpdateWithWhereUniqueWithoutConversationInput = {
  data: MessageUpdateWithoutConversationDataInput;
  where: MessageWhereUniqueInput;
};

export type MessageUpdateWithWhereUniqueWithoutUserInput = {
  data: MessageUpdateWithoutUserDataInput;
  where: MessageWhereUniqueInput;
};

export type MessageUpdateWithoutConversationDataInput = {
  catalogItems?: InputMaybe<CatalogItemUpdateManyInput>;
  context?: InputMaybe<Scalars['String']>;
  currentOrgID?: InputMaybe<Scalars['String']>;
  isUser?: InputMaybe<Scalars['Boolean']>;
  locations?: InputMaybe<LocationUpdateManyWithoutMessageInput>;
  message?: InputMaybe<Scalars['String']>;
  personality?: InputMaybe<Scalars['String']>;
  strains?: InputMaybe<StrainUpdateManyWithoutMessageInput>;
  user?: InputMaybe<UserUpdateOneWithoutMessagesInput>;
};

export type MessageUpdateWithoutLocationsDataInput = {
  catalogItems?: InputMaybe<CatalogItemUpdateManyInput>;
  context?: InputMaybe<Scalars['String']>;
  conversation?: InputMaybe<ConversationUpdateOneRequiredWithoutMessagesInput>;
  currentOrgID?: InputMaybe<Scalars['String']>;
  isUser?: InputMaybe<Scalars['Boolean']>;
  message?: InputMaybe<Scalars['String']>;
  personality?: InputMaybe<Scalars['String']>;
  strains?: InputMaybe<StrainUpdateManyWithoutMessageInput>;
  user?: InputMaybe<UserUpdateOneWithoutMessagesInput>;
};

export type MessageUpdateWithoutStrainsDataInput = {
  catalogItems?: InputMaybe<CatalogItemUpdateManyInput>;
  context?: InputMaybe<Scalars['String']>;
  conversation?: InputMaybe<ConversationUpdateOneRequiredWithoutMessagesInput>;
  currentOrgID?: InputMaybe<Scalars['String']>;
  isUser?: InputMaybe<Scalars['Boolean']>;
  locations?: InputMaybe<LocationUpdateManyWithoutMessageInput>;
  message?: InputMaybe<Scalars['String']>;
  personality?: InputMaybe<Scalars['String']>;
  user?: InputMaybe<UserUpdateOneWithoutMessagesInput>;
};

export type MessageUpdateWithoutUserDataInput = {
  catalogItems?: InputMaybe<CatalogItemUpdateManyInput>;
  context?: InputMaybe<Scalars['String']>;
  conversation?: InputMaybe<ConversationUpdateOneRequiredWithoutMessagesInput>;
  currentOrgID?: InputMaybe<Scalars['String']>;
  isUser?: InputMaybe<Scalars['Boolean']>;
  locations?: InputMaybe<LocationUpdateManyWithoutMessageInput>;
  message?: InputMaybe<Scalars['String']>;
  personality?: InputMaybe<Scalars['String']>;
  strains?: InputMaybe<StrainUpdateManyWithoutMessageInput>;
};

export type MessageUpsertWithWhereUniqueWithoutConversationInput = {
  create: MessageCreateWithoutConversationInput;
  update: MessageUpdateWithoutConversationDataInput;
  where: MessageWhereUniqueInput;
};

export type MessageUpsertWithWhereUniqueWithoutUserInput = {
  create: MessageCreateWithoutUserInput;
  update: MessageUpdateWithoutUserDataInput;
  where: MessageWhereUniqueInput;
};

export type MessageUpsertWithoutLocationsInput = {
  create: MessageCreateWithoutLocationsInput;
  update: MessageUpdateWithoutLocationsDataInput;
};

export type MessageUpsertWithoutStrainsInput = {
  create: MessageCreateWithoutStrainsInput;
  update: MessageUpdateWithoutStrainsDataInput;
};

export type MessageWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<MessageWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<MessageWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<MessageWhereInput>>;
  catalogItems_every?: InputMaybe<CatalogItemWhereInput>;
  catalogItems_none?: InputMaybe<CatalogItemWhereInput>;
  catalogItems_some?: InputMaybe<CatalogItemWhereInput>;
  context?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  context_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  context_ends_with?: InputMaybe<Scalars['String']>;
  /** All values greater than the given value. */
  context_gt?: InputMaybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  context_gte?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  context_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  context_lt?: InputMaybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  context_lte?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  context_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  context_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string. */
  context_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  context_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  context_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  context_starts_with?: InputMaybe<Scalars['String']>;
  conversation?: InputMaybe<ConversationWhereInput>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  currentOrgID?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  currentOrgID_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  currentOrgID_ends_with?: InputMaybe<Scalars['String']>;
  /** All values greater than the given value. */
  currentOrgID_gt?: InputMaybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  currentOrgID_gte?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  currentOrgID_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  currentOrgID_lt?: InputMaybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  currentOrgID_lte?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  currentOrgID_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  currentOrgID_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string. */
  currentOrgID_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  currentOrgID_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  currentOrgID_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  currentOrgID_starts_with?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: InputMaybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: InputMaybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: InputMaybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  isUser?: InputMaybe<Scalars['Boolean']>;
  /** All values that are not equal to given value. */
  isUser_not?: InputMaybe<Scalars['Boolean']>;
  locations_every?: InputMaybe<LocationWhereInput>;
  locations_none?: InputMaybe<LocationWhereInput>;
  locations_some?: InputMaybe<LocationWhereInput>;
  message?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  message_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  message_ends_with?: InputMaybe<Scalars['String']>;
  /** All values greater than the given value. */
  message_gt?: InputMaybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  message_gte?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  message_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  message_lt?: InputMaybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  message_lte?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  message_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  message_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string. */
  message_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  message_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  message_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  message_starts_with?: InputMaybe<Scalars['String']>;
  personality?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  personality_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  personality_ends_with?: InputMaybe<Scalars['String']>;
  /** All values greater than the given value. */
  personality_gt?: InputMaybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  personality_gte?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  personality_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  personality_lt?: InputMaybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  personality_lte?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  personality_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  personality_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string. */
  personality_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  personality_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  personality_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  personality_starts_with?: InputMaybe<Scalars['String']>;
  strains_every?: InputMaybe<StrainWhereInput>;
  strains_none?: InputMaybe<StrainWhereInput>;
  strains_some?: InputMaybe<StrainWhereInput>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  user?: InputMaybe<UserWhereInput>;
};

export type MessageWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export type Mutation = {
  __typename?: 'Mutation';
  activateNfdDevicesFromS3FromKey?: Maybe<Scalars['Boolean']>;
  addMappingRecord: Array<AppNexusMappingRecord>;
  authenticatedUser: User;
  createAdGroupCreatives: AdGroupCreatives;
  createAdPublisher?: Maybe<AdPublisher>;
  createAdServerSegment: Scalars['JSON'];
  createAppnexusCampaign?: Maybe<Scalars['JSON']>;
  createAppnexusCreative?: Maybe<Scalars['JSON']>;
  createAppnexusLineItem?: Maybe<Scalars['JSON']>;
  createArticle: Article;
  createArticleCategory: ArticleCategory;
  createAsanaTicket: Scalars['JSON'];
  createAudience: Audience;
  createBaseSegments?: Maybe<Scalars['JSON']>;
  createBrand: Brand;
  createCampaign: Campaign;
  createCampaignOrder: CampaignOrder;
  createCard: Scalars['JSON'];
  createCatalogItem: CatalogItem;
  createConversation: Conversation;
  createCustomer: Customer;
  createDashboardUser: User;
  createEventsTarget: EventsTarget;
  createFacebookUser: User;
  createGeoTarget: GeoTarget;
  createGoogleUser: User;
  createIABCategoryGroup: IabCategoryGroup;
  createLiquidMBannerCreative?: Maybe<Scalars['JSON']>;
  createLiquidMNativeCreative?: Maybe<Scalars['JSON']>;
  createLiquidMScriptTagCreative?: Maybe<Scalars['JSON']>;
  createLiquidMSetting?: Maybe<Scalars['JSON']>;
  createLiquidMSupply?: Maybe<Scalars['JSON']>;
  createLiquidMVideoCreative?: Maybe<Scalars['JSON']>;
  createLocation: Location;
  createLoyaltyCampaign: LoyaltyCampaign;
  createMedia: Media;
  createMessage: Message;
  createNotification: Notification;
  createNotificationEmail: NotificationEmail;
  createOptout: Optout;
  createOrg: Org;
  createOrgSummary: OrgSummary;
  createOrgTagsConfig: OrgTagsConfig;
  createPaidSearchSummary?: Maybe<PaidSearchSummary>;
  createPayment: Scalars['JSON'];
  createProduct: Product;
  createRegionGroup: RegionGroup;
  createReview: Review;
  createRtbiqAsset?: Maybe<Scalars['JSON']>;
  createRtbiqCampaign?: Maybe<Scalars['JSON']>;
  createRtbiqFilter?: Maybe<Scalars['JSON']>;
  createRtbiqPlacement?: Maybe<Scalars['JSON']>;
  createSegment: AppNexusSegment;
  createSharingRecord: AppNexusSharingRecord;
  createSquareCustomer: Scalars['JSON'];
  createStrain: Strain;
  createUser: User;
  deleteAdGroupCreatives?: Maybe<AdGroupCreatives>;
  deleteArticle?: Maybe<Article>;
  deleteArticleCategory?: Maybe<ArticleCategory>;
  deleteAudience?: Maybe<Audience>;
  deleteBrand?: Maybe<Brand>;
  deleteCampaignOrder?: Maybe<CampaignOrder>;
  deleteCard: Scalars['JSON'];
  deleteConversation?: Maybe<Conversation>;
  deleteCreative?: Maybe<Creative>;
  deleteCustomer?: Maybe<Customer>;
  deleteDashboardUser: User;
  deleteEventsTarget?: Maybe<EventsTarget>;
  deleteGeoTarget?: Maybe<GeoTarget>;
  deleteIABCategoryGroup?: Maybe<IabCategoryGroup>;
  deleteLocation?: Maybe<Location>;
  deleteMappingRecord: Scalars['Boolean'];
  deleteMedia?: Maybe<Media>;
  deleteMessage?: Maybe<Message>;
  deleteNotification?: Maybe<Notification>;
  deleteOrg?: Maybe<Org>;
  deleteOrgSummary?: Maybe<OrgSummary>;
  deleteOrgTagsConfig?: Maybe<OrgTagsConfig>;
  deleteProduct?: Maybe<Product>;
  deleteRegionGroup?: Maybe<RegionGroup>;
  deleteRole?: Maybe<Role>;
  deleteRoleItem?: Maybe<RoleItem>;
  deleteSegment: Scalars['Boolean'];
  deleteSharingRecord: Scalars['Boolean'];
  deleteSquareCustomer: Scalars['JSON'];
  deleteStrain?: Maybe<Strain>;
  disableDashboardUser: User;
  disableOrg?: Maybe<Org>;
  editDashboardUser: User;
  editMappingRecord: AppNexusMappingRecord;
  editSegment: AppNexusSegment;
  editSharingRecord: AppNexusSharingRecord;
  enableDashboardUser: User;
  enableOrg?: Maybe<Org>;
  getCustomer: Scalars['JSON'];
  getDashboardUser?: Maybe<Scalars['JSON']>;
  getFullDisplayReport?: Maybe<Scalars['JSON']>;
  getOrgLogo?: Maybe<Scalars['JSON']>;
  launchAmobeeCampaign: Scalars['JSON'];
  launchCampaignReportJob?: Maybe<Scalars['Boolean']>;
  launchLiquidMCampaign?: Maybe<Scalars['JSON']>;
  launchObservationJob: Scalars['JSON'];
  launchObservationJobGeotarget: Scalars['JSON'];
  launchRtbiqCampaign?: Maybe<Scalars['JSON']>;
  listCustomers: Scalars['JSON'];
  listInvoice: Scalars['JSON'];
  listPayments: Scalars['JSON'];
  moveDashboardUser?: Maybe<Scalars['JSON']>;
  patchAdServerProfile: Scalars['JSON'];
  patchLiquidMTargeting?: Maybe<Scalars['JSON']>;
  patchLiquidMTargetingGeoOnly?: Maybe<Scalars['JSON']>;
  provideAiServiceResponse: ConversationResponse;
  provideResponse: ConversationResponse;
  putAdServerProfile: Scalars['JSON'];
  refreshAudienceObservations?: Maybe<Audience>;
  refreshOrgSummary?: Maybe<Scalars['JSON']>;
  resendTempPasswordDashboardUser?: Maybe<Scalars['JSON']>;
  sendSMS: Scalars['Boolean'];
  setPasswordDashboardUser?: Maybe<Scalars['JSON']>;
  snowFlakeConnection?: Maybe<Scalars['Boolean']>;
  snowFlakeGetChartsAmobee?: Maybe<Scalars['JSON']>;
  snowFlakeGetChartsAppNexus?: Maybe<Scalars['JSON']>;
  snowFlakeGetPlacementsAmobee?: Maybe<Scalars['JSON']>;
  snowFlakeGetPlacementsAppNexus?: Maybe<Scalars['JSON']>;
  startAiServiceConversation: ConversationResponse;
  startConversation: ConversationResponse;
  updateAdGroupCreatives?: Maybe<AdGroupCreatives>;
  updateAdServerSegment: Scalars['JSON'];
  updateAmobeeCampaign?: Maybe<Scalars['JSON']>;
  updateArticle?: Maybe<Article>;
  updateArticleCategory?: Maybe<ArticleCategory>;
  updateAudience?: Maybe<Audience>;
  updateBrand?: Maybe<Brand>;
  updateCampaign?: Maybe<Campaign>;
  updateCampaignOrder?: Maybe<CampaignOrder>;
  updateCampaignOrderStatus?: Maybe<CampaignOrder>;
  updateCannatype?: Maybe<Cannatype>;
  updateConversation?: Maybe<Conversation>;
  updateCustomer?: Maybe<Customer>;
  updateEventsTarget?: Maybe<EventsTarget>;
  updateGeoTarget?: Maybe<GeoTarget>;
  updateLicense?: Maybe<License>;
  updateLiquidMSetting?: Maybe<Scalars['JSON']>;
  updateLiquidMSupply?: Maybe<Scalars['JSON']>;
  updateLocation?: Maybe<Location>;
  updateManyMessages: BatchPayload;
  updateMedia?: Maybe<Media>;
  updateMessage?: Maybe<Message>;
  updateNotification?: Maybe<Notification>;
  updateOrg?: Maybe<Org>;
  updateOrgSendEmailConfig?: Maybe<OrgSendEmailConfigData>;
  updateOrgSeoSummary?: Maybe<OrgSeoSummary>;
  updateOrgSummary?: Maybe<OrgSummary>;
  updateOrgTable?: Maybe<OrgTableConfigData>;
  updateOrgTagsConfig?: Maybe<OrgTagsConfig>;
  updateOrgTheme?: Maybe<OrgThemeConfigData>;
  updatePaidSearchSummary?: Maybe<PaidSearchSummary>;
  updateParentOrg?: Maybe<Org>;
  updateProduct?: Maybe<Product>;
  updateSegment?: Maybe<GeoTarget>;
  updateSegmentsWithObservations?: Maybe<Scalars['JSON']>;
  updateSquarePaymentConfig: Scalars['JSON'];
  updateStrain?: Maybe<Strain>;
  updateUser?: Maybe<User>;
  uploadS3Creative?: Maybe<Scalars['JSON']>;
};


export type MutationActivateNfdDevicesFromS3FromKeyArgs = {
  id?: InputMaybe<Scalars['String']>;
  key: Scalars['String'];
  name: Scalars['String'];
};


export type MutationAddMappingRecordArgs = {
  data: CreateAppNexusMappingRecordInput;
};


export type MutationCreateAdGroupCreativesArgs = {
  data: AdGroupCreativesCreateInput;
};


export type MutationCreateAdPublisherArgs = {
  data: AdPublisherCreateInput;
  where?: InputMaybe<AdPublisherWhereInput>;
};


export type MutationCreateAdServerSegmentArgs = {
  requestBody: Scalars['JSON'];
  token: Scalars['String'];
};


export type MutationCreateAppnexusCampaignArgs = {
  advertiserId: Scalars['String'];
  requestBody: Scalars['JSON'];
};


export type MutationCreateAppnexusCreativeArgs = {
  advetiserId: Scalars['String'];
  clickUrl: Scalars['String'];
  fileName: Scalars['String'];
  filePath: Scalars['String'];
  height: Scalars['String'];
  width: Scalars['String'];
};


export type MutationCreateAppnexusLineItemArgs = {
  advertiserId: Scalars['String'];
  requestBody: Scalars['String'];
};


export type MutationCreateArticleArgs = {
  data: ArticleCreateInput;
};


export type MutationCreateArticleCategoryArgs = {
  data: ArticleCategoryCreateInput;
};


export type MutationCreateAsanaTicketArgs = {
  campaignOrderId: Scalars['String'];
};


export type MutationCreateAudienceArgs = {
  data: AudienceCreateInput;
};


export type MutationCreateBrandArgs = {
  data: BrandCreateInput;
};


export type MutationCreateCampaignArgs = {
  data: CampaignCreateInput;
};


export type MutationCreateCampaignOrderArgs = {
  data: CampaignOrderCreateInput;
};


export type MutationCreateCardArgs = {
  customerId: Scalars['String'];
  nonce: Scalars['String'];
};


export type MutationCreateCatalogItemArgs = {
  data: CatalogItemCreateInput;
};


export type MutationCreateConversationArgs = {
  data: ConversationCreateInput;
};


export type MutationCreateCustomerArgs = {
  data: CustomerCreateInput;
};


export type MutationCreateDashboardUserArgs = {
  data: CreateDashboardUserInput;
};


export type MutationCreateEventsTargetArgs = {
  data: EventsTargetCreateInput;
};


export type MutationCreateFacebookUserArgs = {
  email?: InputMaybe<Scalars['String']>;
  name?: InputMaybe<Scalars['String']>;
};


export type MutationCreateGeoTargetArgs = {
  data: GeoTargetCreateInput;
};


export type MutationCreateGoogleUserArgs = {
  email?: InputMaybe<Scalars['String']>;
  name?: InputMaybe<Scalars['String']>;
};


export type MutationCreateIabCategoryGroupArgs = {
  data: IabCategoryGroupCreateInput;
};


export type MutationCreateLiquidMBannerCreativeArgs = {
  campaignId?: InputMaybe<Scalars['Int']>;
  creativeBannerUrl?: InputMaybe<Scalars['String']>;
  creativeHeight?: InputMaybe<Scalars['Float']>;
  creativeWidth?: InputMaybe<Scalars['Float']>;
  dealIds?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  name?: InputMaybe<Scalars['String']>;
  targetUrl?: InputMaybe<Scalars['String']>;
  trackers?: InputMaybe<Array<InputMaybe<LiquidMTrackersInput>>>;
};


export type MutationCreateLiquidMNativeCreativeArgs = {
  attributes?: InputMaybe<LiquidMNativeCreateAttributeInput>;
  settingId?: InputMaybe<Scalars['String']>;
  supplyId?: InputMaybe<Scalars['String']>;
};


export type MutationCreateLiquidMScriptTagCreativeArgs = {
  campaignId?: InputMaybe<Scalars['Int']>;
  creativeHeight?: InputMaybe<Scalars['Float']>;
  creativeScriptTag?: InputMaybe<Scalars['String']>;
  creativeWidth?: InputMaybe<Scalars['Float']>;
  dealIds?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  name?: InputMaybe<Scalars['String']>;
  targetUrl?: InputMaybe<Scalars['String']>;
  trackers?: InputMaybe<Array<InputMaybe<LiquidMTrackersInput>>>;
};


export type MutationCreateLiquidMSettingArgs = {
  accountId?: InputMaybe<Scalars['String']>;
  attributes?: InputMaybe<LiquidMSettingAttributeInput>;
};


export type MutationCreateLiquidMSupplyArgs = {
  accountId?: InputMaybe<Scalars['String']>;
  attributes?: InputMaybe<LiquidMSupplyAttributeInput>;
};


export type MutationCreateLiquidMVideoCreativeArgs = {
  campaignId?: InputMaybe<Scalars['Int']>;
  creativeVideo?: InputMaybe<Scalars['String']>;
  dealIds?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  name?: InputMaybe<Scalars['String']>;
  targetUrl?: InputMaybe<Scalars['String']>;
  trackers?: InputMaybe<Array<InputMaybe<LiquidMTrackersInput>>>;
};


export type MutationCreateLocationArgs = {
  data: LocationCreateInput;
};


export type MutationCreateLoyaltyCampaignArgs = {
  data: LoyaltyCampaignCreateInput;
};


export type MutationCreateMediaArgs = {
  data: MediaCreateInput;
};


export type MutationCreateMessageArgs = {
  data: MessageCreateInput;
};


export type MutationCreateNotificationArgs = {
  data: NotificationCreateInput;
};


export type MutationCreateNotificationEmailArgs = {
  data: NotificationEmailCreateInput;
};


export type MutationCreateOptoutArgs = {
  data: OptoutCreateInput;
};


export type MutationCreateOrgArgs = {
  data: OrgCreateInput;
};


export type MutationCreateOrgSummaryArgs = {
  data: OrgSummaryCreateInput;
};


export type MutationCreateOrgTagsConfigArgs = {
  data: OrgTagsConfigCreateInput;
};


export type MutationCreatePaidSearchSummaryArgs = {
  data: PaidSearchSummaryCreateInput;
};


export type MutationCreatePaymentArgs = {
  customerId: Scalars['String'];
  transactionValue: Scalars['Float'];
};


export type MutationCreateProductArgs = {
  data: ProductCreateInput;
};


export type MutationCreateRegionGroupArgs = {
  data: RegionGroupCreateInput;
};


export type MutationCreateReviewArgs = {
  data: ReviewCreateInput;
};


export type MutationCreateRtbiqAssetArgs = {
  assetType: Scalars['String'];
  creativeName: Scalars['String'];
  key: Scalars['String'];
};


export type MutationCreateRtbiqCampaignArgs = {
  requestBody: Scalars['JSON'];
};


export type MutationCreateRtbiqFilterArgs = {
  dimension: Scalars['String'];
  name: Scalars['String'];
  values: Array<Scalars['String']>;
};


export type MutationCreateRtbiqPlacementArgs = {
  requestBody: Scalars['JSON'];
};


export type MutationCreateSegmentArgs = {
  data: CreateAppNexusSegmentInput;
  where: AppNexusSegmentInput;
};


export type MutationCreateSharingRecordArgs = {
  data: CreateAppNexusSharingRecordInput;
};


export type MutationCreateSquareCustomerArgs = {
  advertiserName: Scalars['String'];
  email: Scalars['String'];
};


export type MutationCreateStrainArgs = {
  data: StrainCreateInput;
};


export type MutationDeleteAdGroupCreativesArgs = {
  where: AdGroupCreativesWhereUniqueInput;
};


export type MutationDeleteArticleArgs = {
  where: ArticleWhereUniqueInput;
};


export type MutationDeleteArticleCategoryArgs = {
  where: ArticleCategoryWhereUniqueInput;
};


export type MutationDeleteAudienceArgs = {
  where: AudienceWhereUniqueInput;
};


export type MutationDeleteBrandArgs = {
  where: BrandWhereUniqueInput;
};


export type MutationDeleteCampaignOrderArgs = {
  where: CampaignOrderWhereUniqueInput;
};


export type MutationDeleteCardArgs = {
  cardId: Scalars['String'];
  customerId: Scalars['String'];
};


export type MutationDeleteConversationArgs = {
  where: ConversationWhereUniqueInput;
};


export type MutationDeleteCreativeArgs = {
  where: CreativeWhereUniqueInput;
};


export type MutationDeleteCustomerArgs = {
  where: CustomerWhereUniqueInput;
};


export type MutationDeleteDashboardUserArgs = {
  where: UserWhereUniqueInput;
};


export type MutationDeleteEventsTargetArgs = {
  where: EventsTargetWhereUniqueInput;
};


export type MutationDeleteGeoTargetArgs = {
  where: GeoTargetWhereUniqueInput;
};


export type MutationDeleteIabCategoryGroupArgs = {
  where: IabCategoryGroupWhereUniqueInput;
};


export type MutationDeleteLocationArgs = {
  where: LocationWhereUniqueInput;
};


export type MutationDeleteMappingRecordArgs = {
  where: ById;
};


export type MutationDeleteMediaArgs = {
  where: MediaWhereUniqueInput;
};


export type MutationDeleteMessageArgs = {
  where: MessageWhereUniqueInput;
};


export type MutationDeleteNotificationArgs = {
  where: NotificationWhereUniqueInput;
};


export type MutationDeleteOrgArgs = {
  where: OrgWhereUniqueInput;
};


export type MutationDeleteOrgSummaryArgs = {
  where: OrgSummaryWhereUniqueInput;
};


export type MutationDeleteOrgTagsConfigArgs = {
  where: OrgTagsConfigWhereUniqueInput;
};


export type MutationDeleteProductArgs = {
  where: ProductWhereUniqueInput;
};


export type MutationDeleteRegionGroupArgs = {
  where: RegionGroupWhereUniqueInput;
};


export type MutationDeleteRoleArgs = {
  where: RoleWhereUniqueInput;
};


export type MutationDeleteRoleItemArgs = {
  where: RoleItemWhereUniqueInput;
};


export type MutationDeleteSegmentArgs = {
  where: AppNexusSegmentInput;
};


export type MutationDeleteSharingRecordArgs = {
  where: ById;
};


export type MutationDeleteSquareCustomerArgs = {
  customerId: Scalars['String'];
};


export type MutationDeleteStrainArgs = {
  where: StrainWhereUniqueInput;
};


export type MutationDisableDashboardUserArgs = {
  where: UserWhereUniqueInput;
};


export type MutationDisableOrgArgs = {
  where: OrgWhereUniqueInput;
};


export type MutationEditDashboardUserArgs = {
  data: EditDashboardUserInput;
  where: UserWhereUniqueInput;
};


export type MutationEditMappingRecordArgs = {
  data: EditAppNexusMappingRecordInput;
  where: ById;
};


export type MutationEditSegmentArgs = {
  data: CreateAppNexusSegmentInput;
  where: AppNexusSegmentInput;
};


export type MutationEditSharingRecordArgs = {
  data: CreateAppNexusSharingRecordInput;
  where: ById;
};


export type MutationEnableDashboardUserArgs = {
  where: UserWhereUniqueInput;
};


export type MutationEnableOrgArgs = {
  where: OrgWhereUniqueInput;
};


export type MutationGetCustomerArgs = {
  customerId: Scalars['String'];
};


export type MutationGetDashboardUserArgs = {
  username: Scalars['String'];
};


export type MutationGetFullDisplayReportArgs = {
  campaignOrderId: Scalars['String'];
};


export type MutationGetOrgLogoArgs = {
  where: OrgWhereUniqueInput;
};


export type MutationLaunchAmobeeCampaignArgs = {
  data: LaunchAmobeeCampaignInput;
};


export type MutationLaunchCampaignReportJobArgs = {
  data: CampaignWhereUniqueInput;
};


export type MutationLaunchLiquidMCampaignArgs = {
  accountId?: InputMaybe<Scalars['Int']>;
  advertiserDomain?: InputMaybe<Scalars['String']>;
  currency?: InputMaybe<Scalars['String']>;
  iabCategory?: InputMaybe<Scalars['String']>;
  name?: InputMaybe<Scalars['String']>;
  timezone?: InputMaybe<Scalars['String']>;
  trustId?: InputMaybe<Scalars['String']>;
  unitType?: InputMaybe<Scalars['String']>;
  withBudgets?: InputMaybe<Array<InputMaybe<LiquidMWithBudgetsInput>>>;
};


export type MutationLaunchObservationJobArgs = {
  id: Scalars['ID'];
};


export type MutationLaunchObservationJobGeotargetArgs = {
  id: Scalars['ID'];
};


export type MutationLaunchRtbiqCampaignArgs = {
  campaignOrderId: Scalars['String'];
};


export type MutationListInvoiceArgs = {
  customerId?: InputMaybe<Scalars['String']>;
};


export type MutationMoveDashboardUserArgs = {
  orgId: Scalars['String'];
  roleId: Scalars['String'];
  userId: Scalars['String'];
  username: Scalars['String'];
};


export type MutationPatchAdServerProfileArgs = {
  profileId: Scalars['String'];
  requestBody: Scalars['JSON'];
  token: Scalars['String'];
};


export type MutationPatchLiquidMTargetingArgs = {
  categories?: InputMaybe<Scalars['String']>;
  geoCoordinates?: InputMaybe<Array<InputMaybe<LiquidMGeoCoordinateInput>>>;
  id?: InputMaybe<Scalars['String']>;
  regionId?: InputMaybe<Scalars['String']>;
};


export type MutationPatchLiquidMTargetingGeoOnlyArgs = {
  categories?: InputMaybe<Scalars['String']>;
  geoCoordinates?: InputMaybe<Array<InputMaybe<LiquidMGeoCoordinateInput>>>;
  id?: InputMaybe<Scalars['String']>;
};


export type MutationProvideAiServiceResponseArgs = {
  data: AiServiceConversationInput;
};


export type MutationProvideResponseArgs = {
  data: ConversationInput;
};


export type MutationPutAdServerProfileArgs = {
  profileId: Scalars['String'];
  requestBody: Scalars['JSON'];
  token: Scalars['String'];
};


export type MutationRefreshAudienceObservationsArgs = {
  audienceId: Scalars['ID'];
};


export type MutationRefreshOrgSummaryArgs = {
  where: OrgWhereUniqueInput;
};


export type MutationResendTempPasswordDashboardUserArgs = {
  username: Scalars['String'];
};


export type MutationSendSmsArgs = {
  data: SendSmsInput;
};


export type MutationSetPasswordDashboardUserArgs = {
  permanent?: InputMaybe<Scalars['Boolean']>;
  username: Scalars['String'];
};


export type MutationSnowFlakeGetChartsAmobeeArgs = {
  insertionOrderId: Scalars['String'];
};


export type MutationSnowFlakeGetChartsAppNexusArgs = {
  campaignName: Scalars['String'];
};


export type MutationSnowFlakeGetPlacementsAmobeeArgs = {
  insertionOrderId: Scalars['String'];
};


export type MutationSnowFlakeGetPlacementsAppNexusArgs = {
  campaignName: Scalars['String'];
};


export type MutationStartAiServiceConversationArgs = {
  data?: InputMaybe<AiServiceStartConversationInput>;
};


export type MutationUpdateAdGroupCreativesArgs = {
  data: AdGroupCreativesUpdateInput;
  where: AdGroupCreativesWhereUniqueInput;
};


export type MutationUpdateAdServerSegmentArgs = {
  requestBody: Scalars['JSON'];
  segmentId: Scalars['String'];
  token: Scalars['String'];
};


export type MutationUpdateArticleArgs = {
  data: ArticleUpdateInput;
  where: ArticleWhereUniqueInput;
};


export type MutationUpdateArticleCategoryArgs = {
  data: ArticleCategoryUpdateInput;
  where: ArticleCategoryWhereUniqueInput;
};


export type MutationUpdateAudienceArgs = {
  data: AudienceUpdateInput;
  where: AudienceWhereUniqueInput;
};


export type MutationUpdateBrandArgs = {
  data: BrandUpdateInput;
  where: BrandWhereUniqueInput;
};


export type MutationUpdateCampaignArgs = {
  data: CampaignUpdateInput;
  where: CampaignWhereUniqueInput;
};


export type MutationUpdateCampaignOrderArgs = {
  data: CampaignOrderUpdateInput;
  where: CampaignOrderWhereUniqueInput;
};


export type MutationUpdateCampaignOrderStatusArgs = {
  data: CampaignOrderUpdateStatusInput;
  where: CampaignOrderWhereUniqueInput;
};


export type MutationUpdateCannatypeArgs = {
  data: CannatypeUpdateInput;
  where: CannatypeWhereUniqueInput;
};


export type MutationUpdateConversationArgs = {
  data: ConversationUpdateInput;
  where: ConversationWhereUniqueInput;
};


export type MutationUpdateCustomerArgs = {
  data: CustomerUpdateInput;
  where: CustomerWhereUniqueInput;
};


export type MutationUpdateEventsTargetArgs = {
  data: EventsTargetUpdateInput;
  where: EventsTargetWhereUniqueInput;
};


export type MutationUpdateGeoTargetArgs = {
  data: GeoTargetUpdateInput;
  where: GeoTargetWhereUniqueInput;
};


export type MutationUpdateLicenseArgs = {
  data: LicenseUpdateInput;
  where: LicenseWhereUniqueInput;
};


export type MutationUpdateLiquidMSettingArgs = {
  accountId?: InputMaybe<Scalars['String']>;
  attributes?: InputMaybe<LiquidMSettingAttributeInput>;
  id: Scalars['String'];
};


export type MutationUpdateLiquidMSupplyArgs = {
  accountId?: InputMaybe<Scalars['String']>;
  attributes?: InputMaybe<LiquidMSupplyAttributeInput>;
  id?: InputMaybe<Scalars['String']>;
};


export type MutationUpdateLocationArgs = {
  data: LocationUpdateInput;
  where: LocationWhereUniqueInput;
};


export type MutationUpdateManyMessagesArgs = {
  data: MessageUpdateManyMutationInput;
  where?: InputMaybe<MessageWhereInput>;
};


export type MutationUpdateMediaArgs = {
  data: MediaUpdateInput;
  where: MediaWhereUniqueInput;
};


export type MutationUpdateMessageArgs = {
  data: MessageUpdateInput;
  where: MessageWhereUniqueInput;
};


export type MutationUpdateNotificationArgs = {
  data: NotificationUpdateInput;
  where: NotificationWhereUniqueInput;
};


export type MutationUpdateOrgArgs = {
  data: OrgUpdateInput;
  where: OrgWhereUniqueInput;
};


export type MutationUpdateOrgSendEmailConfigArgs = {
  data: OrgSendEmailConfigInput;
  where: OrgWhereUniqueInput;
};


export type MutationUpdateOrgSeoSummaryArgs = {
  data: OrgSeoSummaryUpdateInput;
  where: OrgSeoSummaryWhereUniqueInput;
};


export type MutationUpdateOrgSummaryArgs = {
  data: OrgSummaryUpdateInput;
  where: OrgSummaryWhereUniqueInput;
};


export type MutationUpdateOrgTableArgs = {
  data: OrgTableConfigInput;
  where: OrgWhereUniqueInput;
};


export type MutationUpdateOrgTagsConfigArgs = {
  data: OrgTagsConfigUpdateInput;
  where: OrgTagsConfigWhereUniqueInput;
};


export type MutationUpdateOrgThemeArgs = {
  data: OrgThemeConfigInput;
  where: OrgWhereUniqueInput;
};


export type MutationUpdatePaidSearchSummaryArgs = {
  data: PaidSearchSummaryUpdateInput;
  where: PaidSearchSummaryWhereUniqueInput;
};


export type MutationUpdateParentOrgArgs = {
  data: OrgUpdateInput;
  where: OrgWhereUniqueInput;
};


export type MutationUpdateProductArgs = {
  data: ProductUpdateInput;
  where: ProductWhereUniqueInput;
};


export type MutationUpdateSegmentArgs = {
  data: GeoTargetCreateInput;
  where: GeoTargetWhereUniqueInput;
};


export type MutationUpdateSegmentsWithObservationsArgs = {
  ids: Scalars['String'];
};


export type MutationUpdateSquarePaymentConfigArgs = {
  email: Scalars['String'];
  id: Scalars['String'];
  nonce: Scalars['String'];
};


export type MutationUpdateStrainArgs = {
  data: StrainUpdateInput;
  where: StrainWhereUniqueInput;
};


export type MutationUpdateUserArgs = {
  data: UserUpdateInput;
  where: UserWhereUniqueInput;
};


export type MutationUploadS3CreativeArgs = {
  key?: InputMaybe<Scalars['String']>;
};

export enum MutationType {
  Created = 'CREATED',
  Deleted = 'DELETED',
  Updated = 'UPDATED'
}

/** An object with an ID */
export type Node = {
  /** The id of the object. */
  id: Scalars['ID'];
};

export type Notification = Node & {
  __typename?: 'Notification';
  featureID?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  message: Scalars['String'];
  type?: Maybe<Feature>;
  user?: Maybe<User>;
};

export type NotificationCreateInput = {
  featureID?: InputMaybe<Scalars['String']>;
  message: Scalars['String'];
  type?: InputMaybe<Feature>;
  user?: InputMaybe<UserCreateOneWithoutNotificationsInput>;
};

export type NotificationCreateManyWithoutUserInput = {
  connect?: InputMaybe<Array<NotificationWhereUniqueInput>>;
  create?: InputMaybe<Array<NotificationCreateWithoutUserInput>>;
};

export type NotificationCreateWithoutUserInput = {
  featureID?: InputMaybe<Scalars['String']>;
  message: Scalars['String'];
  type?: InputMaybe<Feature>;
};

export type NotificationEmail = Node & {
  __typename?: 'NotificationEmail';
  createdAt: Scalars['DateTime'];
  email: Scalars['String'];
  id: Scalars['ID'];
  updatedAt: Scalars['DateTime'];
};

export type NotificationEmailCreateInput = {
  email: Scalars['String'];
};

export enum NotificationOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  FeatureIdAsc = 'featureID_ASC',
  FeatureIdDesc = 'featureID_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  MessageAsc = 'message_ASC',
  MessageDesc = 'message_DESC',
  TypeAsc = 'type_ASC',
  TypeDesc = 'type_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC'
}

export type NotificationUpdateInput = {
  featureID?: InputMaybe<Scalars['String']>;
  message?: InputMaybe<Scalars['String']>;
  type?: InputMaybe<Feature>;
  user?: InputMaybe<UserUpdateOneWithoutNotificationsInput>;
};

export type NotificationUpdateManyWithoutUserInput = {
  connect?: InputMaybe<Array<NotificationWhereUniqueInput>>;
  create?: InputMaybe<Array<NotificationCreateWithoutUserInput>>;
  delete?: InputMaybe<Array<NotificationWhereUniqueInput>>;
  disconnect?: InputMaybe<Array<NotificationWhereUniqueInput>>;
  update?: InputMaybe<Array<NotificationUpdateWithWhereUniqueWithoutUserInput>>;
  upsert?: InputMaybe<Array<NotificationUpsertWithWhereUniqueWithoutUserInput>>;
};

export type NotificationUpdateWithWhereUniqueWithoutUserInput = {
  data: NotificationUpdateWithoutUserDataInput;
  where: NotificationWhereUniqueInput;
};

export type NotificationUpdateWithoutUserDataInput = {
  featureID?: InputMaybe<Scalars['String']>;
  message?: InputMaybe<Scalars['String']>;
  type?: InputMaybe<Feature>;
};

export type NotificationUpsertWithWhereUniqueWithoutUserInput = {
  create: NotificationCreateWithoutUserInput;
  update: NotificationUpdateWithoutUserDataInput;
  where: NotificationWhereUniqueInput;
};

export type NotificationWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<NotificationWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<NotificationWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<NotificationWhereInput>>;
  featureID?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  featureID_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  featureID_ends_with?: InputMaybe<Scalars['String']>;
  /** All values greater than the given value. */
  featureID_gt?: InputMaybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  featureID_gte?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  featureID_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  featureID_lt?: InputMaybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  featureID_lte?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  featureID_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  featureID_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string. */
  featureID_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  featureID_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  featureID_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  featureID_starts_with?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: InputMaybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: InputMaybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: InputMaybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  message?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  message_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  message_ends_with?: InputMaybe<Scalars['String']>;
  /** All values greater than the given value. */
  message_gt?: InputMaybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  message_gte?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  message_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  message_lt?: InputMaybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  message_lte?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  message_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  message_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string. */
  message_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  message_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  message_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  message_starts_with?: InputMaybe<Scalars['String']>;
  type?: InputMaybe<Feature>;
  /** All values that are contained in given list. */
  type_in?: InputMaybe<Array<Feature>>;
  /** All values that are not equal to given value. */
  type_not?: InputMaybe<Feature>;
  /** All values that are not contained in given list. */
  type_not_in?: InputMaybe<Array<Feature>>;
  user?: InputMaybe<UserWhereInput>;
};

export type NotificationWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export type Offer = Node & {
  __typename?: 'Offer';
  createdAt: Scalars['DateTime'];
  createdBy?: Maybe<User>;
  description: Scalars['String'];
  id: Scalars['ID'];
  isPublished: Scalars['Boolean'];
  name: Scalars['String'];
  org?: Maybe<Org>;
  updatedAt: Scalars['DateTime'];
};

export type OfferCreateManyWithoutCreatedByInput = {
  connect?: InputMaybe<Array<OfferWhereUniqueInput>>;
  create?: InputMaybe<Array<OfferCreateWithoutCreatedByInput>>;
};

export type OfferCreateManyWithoutOrgInput = {
  connect?: InputMaybe<Array<OfferWhereUniqueInput>>;
  create?: InputMaybe<Array<OfferCreateWithoutOrgInput>>;
};

export type OfferCreateWithoutCreatedByInput = {
  description: Scalars['String'];
  isPublished?: InputMaybe<Scalars['Boolean']>;
  name: Scalars['String'];
  org?: InputMaybe<OrgCreateOneWithoutOffersInput>;
};

export type OfferCreateWithoutOrgInput = {
  createdBy?: InputMaybe<UserCreateOneWithoutOffersInput>;
  description: Scalars['String'];
  isPublished?: InputMaybe<Scalars['Boolean']>;
  name: Scalars['String'];
};

export enum OfferOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DescriptionAsc = 'description_ASC',
  DescriptionDesc = 'description_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  IsPublishedAsc = 'isPublished_ASC',
  IsPublishedDesc = 'isPublished_DESC',
  NameAsc = 'name_ASC',
  NameDesc = 'name_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC'
}

export enum OfferType {
  Cashier = 'CASHIER',
  Coupon = 'COUPON',
  Discount = 'DISCOUNT',
  Promotion = 'PROMOTION'
}

export type OfferUpdateManyWithoutCreatedByInput = {
  connect?: InputMaybe<Array<OfferWhereUniqueInput>>;
  create?: InputMaybe<Array<OfferCreateWithoutCreatedByInput>>;
  delete?: InputMaybe<Array<OfferWhereUniqueInput>>;
  disconnect?: InputMaybe<Array<OfferWhereUniqueInput>>;
  update?: InputMaybe<Array<OfferUpdateWithWhereUniqueWithoutCreatedByInput>>;
  upsert?: InputMaybe<Array<OfferUpsertWithWhereUniqueWithoutCreatedByInput>>;
};

export type OfferUpdateManyWithoutOrgInput = {
  connect?: InputMaybe<Array<OfferWhereUniqueInput>>;
  create?: InputMaybe<Array<OfferCreateWithoutOrgInput>>;
  delete?: InputMaybe<Array<OfferWhereUniqueInput>>;
  disconnect?: InputMaybe<Array<OfferWhereUniqueInput>>;
  update?: InputMaybe<Array<OfferUpdateWithWhereUniqueWithoutOrgInput>>;
  upsert?: InputMaybe<Array<OfferUpsertWithWhereUniqueWithoutOrgInput>>;
};

export type OfferUpdateWithWhereUniqueWithoutCreatedByInput = {
  data: OfferUpdateWithoutCreatedByDataInput;
  where: OfferWhereUniqueInput;
};

export type OfferUpdateWithWhereUniqueWithoutOrgInput = {
  data: OfferUpdateWithoutOrgDataInput;
  where: OfferWhereUniqueInput;
};

export type OfferUpdateWithoutCreatedByDataInput = {
  description?: InputMaybe<Scalars['String']>;
  isPublished?: InputMaybe<Scalars['Boolean']>;
  name?: InputMaybe<Scalars['String']>;
  org?: InputMaybe<OrgUpdateOneWithoutOffersInput>;
};

export type OfferUpdateWithoutOrgDataInput = {
  createdBy?: InputMaybe<UserUpdateOneWithoutOffersInput>;
  description?: InputMaybe<Scalars['String']>;
  isPublished?: InputMaybe<Scalars['Boolean']>;
  name?: InputMaybe<Scalars['String']>;
};

export type OfferUpsertWithWhereUniqueWithoutCreatedByInput = {
  create: OfferCreateWithoutCreatedByInput;
  update: OfferUpdateWithoutCreatedByDataInput;
  where: OfferWhereUniqueInput;
};

export type OfferUpsertWithWhereUniqueWithoutOrgInput = {
  create: OfferCreateWithoutOrgInput;
  update: OfferUpdateWithoutOrgDataInput;
  where: OfferWhereUniqueInput;
};

export type OfferWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<OfferWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<OfferWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<OfferWhereInput>>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  createdBy?: InputMaybe<UserWhereInput>;
  description?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  description_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  description_ends_with?: InputMaybe<Scalars['String']>;
  /** All values greater than the given value. */
  description_gt?: InputMaybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  description_gte?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  description_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  description_lt?: InputMaybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  description_lte?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  description_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  description_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string. */
  description_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  description_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  description_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  description_starts_with?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: InputMaybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: InputMaybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: InputMaybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  isPublished?: InputMaybe<Scalars['Boolean']>;
  /** All values that are not equal to given value. */
  isPublished_not?: InputMaybe<Scalars['Boolean']>;
  name?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  name_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  name_ends_with?: InputMaybe<Scalars['String']>;
  /** All values greater than the given value. */
  name_gt?: InputMaybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  name_gte?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  name_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  name_lt?: InputMaybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  name_lte?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  name_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  name_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string. */
  name_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  name_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  name_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  name_starts_with?: InputMaybe<Scalars['String']>;
  org?: InputMaybe<OrgWhereInput>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
};

export type OfferWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export type Optout = Node & {
  __typename?: 'Optout';
  createdAt: Scalars['DateTime'];
  formDetails?: Maybe<Scalars['Json']>;
  id: Scalars['ID'];
  ipAddress?: Maybe<Scalars['String']>;
  isProcessed: Scalars['Boolean'];
  maid?: Maybe<Scalars['String']>;
  token: Scalars['String'];
  updatedAt: Scalars['DateTime'];
};

export type OptoutCreateInput = {
  formDetails?: InputMaybe<Scalars['Json']>;
  ipAddress?: InputMaybe<Scalars['String']>;
  isProcessed?: InputMaybe<Scalars['Boolean']>;
  maid?: InputMaybe<Scalars['String']>;
  token: Scalars['String'];
};

export type Org = Node & {
  __typename?: 'Org';
  SEOSummary?: Maybe<OrgSeoSummary>;
  adGroupCreatives?: Maybe<Array<AdGroupCreatives>>;
  advertiserCampaignOrders?: Maybe<Array<CampaignOrder>>;
  audiences?: Maybe<Array<Audience>>;
  brands?: Maybe<Array<Brand>>;
  campaignOrders?: Maybe<Array<CampaignOrder>>;
  campaigns?: Maybe<Array<Campaign>>;
  chatWootId?: Maybe<Scalars['String']>;
  config?: Maybe<OrgConfig>;
  cpm?: Maybe<Scalars['String']>;
  createdAt: Scalars['DateTime'];
  customers?: Maybe<Array<Customer>>;
  dataConfig?: Maybe<OrgDataConfig>;
  description?: Maybe<Scalars['String']>;
  domain?: Maybe<Scalars['String']>;
  event?: Maybe<Event>;
  eventsTarget?: Maybe<EventsTarget>;
  iabCategoryGroup?: Maybe<Array<IabCategoryGroup>>;
  id: Scalars['ID'];
  isAllTimeFiltered?: Maybe<Scalars['Boolean']>;
  level: PartnerLevel;
  locations?: Maybe<Array<Location>>;
  logo?: Maybe<Media>;
  loyaltyCampaigns?: Maybe<Array<LoyaltyCampaign>>;
  media?: Maybe<Array<Media>>;
  name: Scalars['String'];
  offers?: Maybe<Array<Offer>>;
  orgSummary?: Maybe<OrgSummary>;
  paidSearchSummary?: Maybe<PaidSearchSummary>;
  paidSearchSummarySharedOrgs?: Maybe<Array<PaidSearchSummary>>;
  parentOrg?: Maybe<Array<Org>>;
  paymentConfig?: Maybe<PaymentConfig>;
  phone?: Maybe<Scalars['String']>;
  posConfig?: Maybe<Array<PosConfig>>;
  regionGroup?: Maybe<Array<RegionGroup>>;
  roles?: Maybe<Array<Role>>;
  salesforceId?: Maybe<Scalars['String']>;
  sendEmailConfig?: Maybe<SendEmailConfig>;
  signInLogo?: Maybe<Media>;
  tableConfig?: Maybe<OrgTableConfig>;
  tagsConfig?: Maybe<OrgTagsConfig>;
  themeConfig?: Maybe<OrgThemeConfig>;
  updatedAt: Scalars['DateTime'];
  website?: Maybe<Scalars['String']>;
  zone?: Maybe<Scalars['String']>;
};


export type OrgAdGroupCreativesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<AdGroupCreativesOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<AdGroupCreativesWhereInput>;
};


export type OrgAdvertiserCampaignOrdersArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<CampaignOrderOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<CampaignOrderWhereInput>;
};


export type OrgAudiencesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<AudienceOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<AudienceWhereInput>;
};


export type OrgBrandsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<BrandOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<BrandWhereInput>;
};


export type OrgCampaignOrdersArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<CampaignOrderOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<CampaignOrderWhereInput>;
};


export type OrgCampaignsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<CampaignOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<CampaignWhereInput>;
};


export type OrgCustomersArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<CustomerOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<CustomerWhereInput>;
};


export type OrgIabCategoryGroupArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<IabCategoryGroupOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<IabCategoryGroupWhereInput>;
};


export type OrgLocationsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<LocationOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<LocationWhereInput>;
};


export type OrgLoyaltyCampaignsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<LoyaltyCampaignOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<LoyaltyCampaignWhereInput>;
};


export type OrgMediaArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MediaOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<MediaWhereInput>;
};


export type OrgOffersArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<OfferOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<OfferWhereInput>;
};


export type OrgPaidSearchSummarySharedOrgsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<PaidSearchSummaryOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<PaidSearchSummaryWhereInput>;
};


export type OrgParentOrgArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<OrgOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<OrgWhereInput>;
};


export type OrgPosConfigArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<PosConfigOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<PosConfigWhereInput>;
};


export type OrgRegionGroupArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<RegionGroupOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<RegionGroupWhereInput>;
};


export type OrgRolesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<RoleOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<RoleWhereInput>;
};

export type OrgConfig = Node & {
  __typename?: 'OrgConfig';
  articles?: Maybe<Scalars['Boolean']>;
  campaignSummary?: Maybe<Scalars['Boolean']>;
  canResetPasswords?: Maybe<Scalars['Boolean']>;
  createdAt: Scalars['DateTime'];
  exportData?: Maybe<Scalars['Boolean']>;
  hasInsights?: Maybe<Scalars['Boolean']>;
  id: Scalars['ID'];
  isAdmin?: Maybe<Scalars['Boolean']>;
  isDemo?: Maybe<Scalars['Boolean']>;
  isPacing?: Maybe<Scalars['Boolean']>;
  isPartner?: Maybe<Scalars['Boolean']>;
  isProcessor?: Maybe<Scalars['Boolean']>;
  isSelfService?: Maybe<Scalars['Boolean']>;
  isTrafficker?: Maybe<Scalars['Boolean']>;
  orgs?: Maybe<Array<Org>>;
  pastData?: Maybe<Scalars['Boolean']>;
  priceVisible?: Maybe<Scalars['Boolean']>;
  providersVisible?: Maybe<Scalars['Boolean']>;
  regulated?: Maybe<Scalars['Boolean']>;
  segment?: Maybe<Scalars['Boolean']>;
  technicalSupport?: Maybe<Scalars['Boolean']>;
  updatedAt: Scalars['DateTime'];
};


export type OrgConfigOrgsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<OrgOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<OrgWhereInput>;
};

export type OrgConfigCreateOneWithoutOrgsInput = {
  connect?: InputMaybe<OrgConfigWhereUniqueInput>;
  create?: InputMaybe<OrgConfigCreateWithoutOrgsInput>;
};

export type OrgConfigCreateWithoutOrgsInput = {
  articles?: InputMaybe<Scalars['Boolean']>;
  campaignSummary?: InputMaybe<Scalars['Boolean']>;
  canResetPasswords?: InputMaybe<Scalars['Boolean']>;
  exportData?: InputMaybe<Scalars['Boolean']>;
  hasInsights?: InputMaybe<Scalars['Boolean']>;
  isAdmin?: InputMaybe<Scalars['Boolean']>;
  isDemo?: InputMaybe<Scalars['Boolean']>;
  isPacing?: InputMaybe<Scalars['Boolean']>;
  isPartner?: InputMaybe<Scalars['Boolean']>;
  isProcessor?: InputMaybe<Scalars['Boolean']>;
  isSelfService?: InputMaybe<Scalars['Boolean']>;
  isTrafficker?: InputMaybe<Scalars['Boolean']>;
  pastData?: InputMaybe<Scalars['Boolean']>;
  priceVisible?: InputMaybe<Scalars['Boolean']>;
  providersVisible?: InputMaybe<Scalars['Boolean']>;
  regulated?: InputMaybe<Scalars['Boolean']>;
  segment?: InputMaybe<Scalars['Boolean']>;
  technicalSupport?: InputMaybe<Scalars['Boolean']>;
};

export type OrgConfigUpdateOneWithoutOrgsInput = {
  connect?: InputMaybe<OrgConfigWhereUniqueInput>;
  create?: InputMaybe<OrgConfigCreateWithoutOrgsInput>;
  delete?: InputMaybe<Scalars['Boolean']>;
  disconnect?: InputMaybe<Scalars['Boolean']>;
  update?: InputMaybe<OrgConfigUpdateWithoutOrgsDataInput>;
  upsert?: InputMaybe<OrgConfigUpsertWithoutOrgsInput>;
};

export type OrgConfigUpdateWithoutOrgsDataInput = {
  articles?: InputMaybe<Scalars['Boolean']>;
  campaignSummary?: InputMaybe<Scalars['Boolean']>;
  canResetPasswords?: InputMaybe<Scalars['Boolean']>;
  exportData?: InputMaybe<Scalars['Boolean']>;
  hasInsights?: InputMaybe<Scalars['Boolean']>;
  isAdmin?: InputMaybe<Scalars['Boolean']>;
  isDemo?: InputMaybe<Scalars['Boolean']>;
  isPacing?: InputMaybe<Scalars['Boolean']>;
  isPartner?: InputMaybe<Scalars['Boolean']>;
  isProcessor?: InputMaybe<Scalars['Boolean']>;
  isSelfService?: InputMaybe<Scalars['Boolean']>;
  isTrafficker?: InputMaybe<Scalars['Boolean']>;
  pastData?: InputMaybe<Scalars['Boolean']>;
  priceVisible?: InputMaybe<Scalars['Boolean']>;
  providersVisible?: InputMaybe<Scalars['Boolean']>;
  regulated?: InputMaybe<Scalars['Boolean']>;
  segment?: InputMaybe<Scalars['Boolean']>;
  technicalSupport?: InputMaybe<Scalars['Boolean']>;
};

export type OrgConfigUpsertWithoutOrgsInput = {
  create: OrgConfigCreateWithoutOrgsInput;
  update: OrgConfigUpdateWithoutOrgsDataInput;
};

export type OrgConfigWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<OrgConfigWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<OrgConfigWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<OrgConfigWhereInput>>;
  articles?: InputMaybe<Scalars['Boolean']>;
  /** All values that are not equal to given value. */
  articles_not?: InputMaybe<Scalars['Boolean']>;
  campaignSummary?: InputMaybe<Scalars['Boolean']>;
  /** All values that are not equal to given value. */
  campaignSummary_not?: InputMaybe<Scalars['Boolean']>;
  canResetPasswords?: InputMaybe<Scalars['Boolean']>;
  /** All values that are not equal to given value. */
  canResetPasswords_not?: InputMaybe<Scalars['Boolean']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  exportData?: InputMaybe<Scalars['Boolean']>;
  /** All values that are not equal to given value. */
  exportData_not?: InputMaybe<Scalars['Boolean']>;
  hasInsights?: InputMaybe<Scalars['Boolean']>;
  /** All values that are not equal to given value. */
  hasInsights_not?: InputMaybe<Scalars['Boolean']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: InputMaybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: InputMaybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: InputMaybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  isAdmin?: InputMaybe<Scalars['Boolean']>;
  /** All values that are not equal to given value. */
  isAdmin_not?: InputMaybe<Scalars['Boolean']>;
  isDemo?: InputMaybe<Scalars['Boolean']>;
  /** All values that are not equal to given value. */
  isDemo_not?: InputMaybe<Scalars['Boolean']>;
  isPacing?: InputMaybe<Scalars['Boolean']>;
  /** All values that are not equal to given value. */
  isPacing_not?: InputMaybe<Scalars['Boolean']>;
  isPartner?: InputMaybe<Scalars['Boolean']>;
  /** All values that are not equal to given value. */
  isPartner_not?: InputMaybe<Scalars['Boolean']>;
  isProcessor?: InputMaybe<Scalars['Boolean']>;
  /** All values that are not equal to given value. */
  isProcessor_not?: InputMaybe<Scalars['Boolean']>;
  isSelfService?: InputMaybe<Scalars['Boolean']>;
  /** All values that are not equal to given value. */
  isSelfService_not?: InputMaybe<Scalars['Boolean']>;
  isTrafficker?: InputMaybe<Scalars['Boolean']>;
  /** All values that are not equal to given value. */
  isTrafficker_not?: InputMaybe<Scalars['Boolean']>;
  orgs_every?: InputMaybe<OrgWhereInput>;
  orgs_none?: InputMaybe<OrgWhereInput>;
  orgs_some?: InputMaybe<OrgWhereInput>;
  pastData?: InputMaybe<Scalars['Boolean']>;
  /** All values that are not equal to given value. */
  pastData_not?: InputMaybe<Scalars['Boolean']>;
  priceVisible?: InputMaybe<Scalars['Boolean']>;
  /** All values that are not equal to given value. */
  priceVisible_not?: InputMaybe<Scalars['Boolean']>;
  providersVisible?: InputMaybe<Scalars['Boolean']>;
  /** All values that are not equal to given value. */
  providersVisible_not?: InputMaybe<Scalars['Boolean']>;
  regulated?: InputMaybe<Scalars['Boolean']>;
  /** All values that are not equal to given value. */
  regulated_not?: InputMaybe<Scalars['Boolean']>;
  segment?: InputMaybe<Scalars['Boolean']>;
  /** All values that are not equal to given value. */
  segment_not?: InputMaybe<Scalars['Boolean']>;
  technicalSupport?: InputMaybe<Scalars['Boolean']>;
  /** All values that are not equal to given value. */
  technicalSupport_not?: InputMaybe<Scalars['Boolean']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
};

export type OrgConfigWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

/** A connection to a list of items. */
export type OrgConnection = {
  __typename?: 'OrgConnection';
  aggregate: AggregateOrg;
  /** A list of edges. */
  edges: Array<Maybe<OrgEdge>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type OrgCreateInput = {
  SEOSummary?: InputMaybe<OrgSeoSummaryCreateOneWithoutOrgInput>;
  adGroupCreatives?: InputMaybe<AdGroupCreativesCreateManyWithoutOrgInput>;
  advertiserCampaignOrders?: InputMaybe<CampaignOrderCreateManyWithoutAdvertiserInput>;
  audiences?: InputMaybe<AudienceCreateManyWithoutOrgsInput>;
  brands?: InputMaybe<BrandCreateManyInput>;
  campaignOrders?: InputMaybe<CampaignOrderCreateManyWithoutOrgsInput>;
  campaigns?: InputMaybe<CampaignCreateManyWithoutOrgsInput>;
  chatWootId?: InputMaybe<Scalars['String']>;
  config?: InputMaybe<OrgConfigCreateOneWithoutOrgsInput>;
  cpm?: InputMaybe<Scalars['String']>;
  customers?: InputMaybe<CustomerCreateManyWithoutOrgInput>;
  dataConfig?: InputMaybe<OrgDataConfigCreateOneWithoutOrgsInput>;
  description?: InputMaybe<Scalars['String']>;
  domain?: InputMaybe<Scalars['String']>;
  event?: InputMaybe<EventCreateOneWithoutOrgsInput>;
  eventsTarget?: InputMaybe<EventsTargetCreateOneWithoutOrgsInput>;
  iabCategoryGroup?: InputMaybe<IabCategoryGroupCreateManyWithoutOrgsInput>;
  isAllTimeFiltered?: InputMaybe<Scalars['Boolean']>;
  level: PartnerLevel;
  locations?: InputMaybe<LocationCreateManyInput>;
  logo?: InputMaybe<MediaCreateOneWithoutOrgInput>;
  loyaltyCampaigns?: InputMaybe<LoyaltyCampaignCreateManyWithoutOrgInput>;
  media?: InputMaybe<MediaCreateManyWithoutSharedWithInput>;
  name: Scalars['String'];
  offers?: InputMaybe<OfferCreateManyWithoutOrgInput>;
  orgSummary?: InputMaybe<OrgSummaryCreateOneWithoutOrgInput>;
  paidSearchSummary?: InputMaybe<PaidSearchSummaryCreateOneWithoutOrgInput>;
  paidSearchSummarySharedOrgs?: InputMaybe<PaidSearchSummaryCreateManyWithoutSharedOrgsInput>;
  parentOrg?: InputMaybe<OrgCreateManyInput>;
  paymentConfig?: InputMaybe<PaymentConfigCreateOneWithoutOrgsInput>;
  phone?: InputMaybe<Scalars['String']>;
  posConfig?: InputMaybe<PosConfigCreateManyWithoutOrgInput>;
  regionGroup?: InputMaybe<RegionGroupCreateManyWithoutOrgsInput>;
  roles?: InputMaybe<RoleCreateManyWithoutOrgInput>;
  salesforceId?: InputMaybe<Scalars['String']>;
  sendEmailConfig?: InputMaybe<SendEmailConfigCreateOneWithoutOrgsInput>;
  signInLogo?: InputMaybe<MediaCreateOneInput>;
  tableConfig?: InputMaybe<OrgTableConfigCreateOneWithoutOrgsInput>;
  tagsConfig?: InputMaybe<OrgTagsConfigCreateOneWithoutOrgsInput>;
  themeConfig?: InputMaybe<OrgThemeConfigCreateOneWithoutOrgsInput>;
  website?: InputMaybe<Scalars['String']>;
  zone?: InputMaybe<Scalars['String']>;
};

export type OrgCreateManyInput = {
  connect?: InputMaybe<Array<OrgWhereUniqueInput>>;
  create?: InputMaybe<Array<OrgCreateInput>>;
};

export type OrgCreateManyWithoutAdGroupCreativesInput = {
  connect?: InputMaybe<Array<OrgWhereUniqueInput>>;
  create?: InputMaybe<Array<OrgCreateWithoutAdGroupCreativesInput>>;
};

export type OrgCreateManyWithoutAudiencesInput = {
  connect?: InputMaybe<Array<OrgWhereUniqueInput>>;
  create?: InputMaybe<Array<OrgCreateWithoutAudiencesInput>>;
};

export type OrgCreateManyWithoutCampaignOrdersInput = {
  connect?: InputMaybe<Array<OrgWhereUniqueInput>>;
  create?: InputMaybe<Array<OrgCreateWithoutCampaignOrdersInput>>;
};

export type OrgCreateManyWithoutCampaignsInput = {
  connect?: InputMaybe<Array<OrgWhereUniqueInput>>;
  create?: InputMaybe<Array<OrgCreateWithoutCampaignsInput>>;
};

export type OrgCreateManyWithoutDataConfigInput = {
  connect?: InputMaybe<Array<OrgWhereUniqueInput>>;
  create?: InputMaybe<Array<OrgCreateWithoutDataConfigInput>>;
};

export type OrgCreateManyWithoutEventInput = {
  connect?: InputMaybe<Array<OrgWhereUniqueInput>>;
  create?: InputMaybe<Array<OrgCreateWithoutEventInput>>;
};

export type OrgCreateManyWithoutEventsTargetInput = {
  connect?: InputMaybe<Array<OrgWhereUniqueInput>>;
  create?: InputMaybe<Array<OrgCreateWithoutEventsTargetInput>>;
};

export type OrgCreateManyWithoutIabCategoryGroupInput = {
  connect?: InputMaybe<Array<OrgWhereUniqueInput>>;
  create?: InputMaybe<Array<OrgCreateWithoutIabCategoryGroupInput>>;
};

export type OrgCreateManyWithoutMediaInput = {
  connect?: InputMaybe<Array<OrgWhereUniqueInput>>;
  create?: InputMaybe<Array<OrgCreateWithoutMediaInput>>;
};

export type OrgCreateManyWithoutPaidSearchSummarySharedOrgsInput = {
  connect?: InputMaybe<Array<OrgWhereUniqueInput>>;
  create?: InputMaybe<Array<OrgCreateWithoutPaidSearchSummarySharedOrgsInput>>;
};

export type OrgCreateManyWithoutRegionGroupInput = {
  connect?: InputMaybe<Array<OrgWhereUniqueInput>>;
  create?: InputMaybe<Array<OrgCreateWithoutRegionGroupInput>>;
};

export type OrgCreateManyWithoutTagsConfigInput = {
  connect?: InputMaybe<Array<OrgWhereUniqueInput>>;
  create?: InputMaybe<Array<OrgCreateWithoutTagsConfigInput>>;
};

export type OrgCreateOneInput = {
  connect?: InputMaybe<OrgWhereUniqueInput>;
  create?: InputMaybe<OrgCreateInput>;
};

export type OrgCreateOneWithoutAdvertiserCampaignOrdersInput = {
  connect?: InputMaybe<OrgWhereUniqueInput>;
  create?: InputMaybe<OrgCreateWithoutAdvertiserCampaignOrdersInput>;
};

export type OrgCreateOneWithoutCustomersInput = {
  connect?: InputMaybe<OrgWhereUniqueInput>;
  create?: InputMaybe<OrgCreateWithoutCustomersInput>;
};

export type OrgCreateOneWithoutLogoInput = {
  connect?: InputMaybe<OrgWhereUniqueInput>;
  create?: InputMaybe<OrgCreateWithoutLogoInput>;
};

export type OrgCreateOneWithoutLoyaltyCampaignsInput = {
  connect?: InputMaybe<OrgWhereUniqueInput>;
  create?: InputMaybe<OrgCreateWithoutLoyaltyCampaignsInput>;
};

export type OrgCreateOneWithoutOffersInput = {
  connect?: InputMaybe<OrgWhereUniqueInput>;
  create?: InputMaybe<OrgCreateWithoutOffersInput>;
};

export type OrgCreateOneWithoutOrgSummaryInput = {
  connect?: InputMaybe<OrgWhereUniqueInput>;
  create?: InputMaybe<OrgCreateWithoutOrgSummaryInput>;
};

export type OrgCreateOneWithoutPaidSearchSummaryInput = {
  connect?: InputMaybe<OrgWhereUniqueInput>;
  create?: InputMaybe<OrgCreateWithoutPaidSearchSummaryInput>;
};

export type OrgCreateOneWithoutRolesInput = {
  connect?: InputMaybe<OrgWhereUniqueInput>;
  create?: InputMaybe<OrgCreateWithoutRolesInput>;
};

export type OrgCreateWithoutAdGroupCreativesInput = {
  SEOSummary?: InputMaybe<OrgSeoSummaryCreateOneWithoutOrgInput>;
  advertiserCampaignOrders?: InputMaybe<CampaignOrderCreateManyWithoutAdvertiserInput>;
  audiences?: InputMaybe<AudienceCreateManyWithoutOrgsInput>;
  brands?: InputMaybe<BrandCreateManyInput>;
  campaignOrders?: InputMaybe<CampaignOrderCreateManyWithoutOrgsInput>;
  campaigns?: InputMaybe<CampaignCreateManyWithoutOrgsInput>;
  chatWootId?: InputMaybe<Scalars['String']>;
  config?: InputMaybe<OrgConfigCreateOneWithoutOrgsInput>;
  cpm?: InputMaybe<Scalars['String']>;
  customers?: InputMaybe<CustomerCreateManyWithoutOrgInput>;
  dataConfig?: InputMaybe<OrgDataConfigCreateOneWithoutOrgsInput>;
  description?: InputMaybe<Scalars['String']>;
  domain?: InputMaybe<Scalars['String']>;
  event?: InputMaybe<EventCreateOneWithoutOrgsInput>;
  eventsTarget?: InputMaybe<EventsTargetCreateOneWithoutOrgsInput>;
  iabCategoryGroup?: InputMaybe<IabCategoryGroupCreateManyWithoutOrgsInput>;
  isAllTimeFiltered?: InputMaybe<Scalars['Boolean']>;
  level: PartnerLevel;
  locations?: InputMaybe<LocationCreateManyInput>;
  logo?: InputMaybe<MediaCreateOneWithoutOrgInput>;
  loyaltyCampaigns?: InputMaybe<LoyaltyCampaignCreateManyWithoutOrgInput>;
  media?: InputMaybe<MediaCreateManyWithoutSharedWithInput>;
  name: Scalars['String'];
  offers?: InputMaybe<OfferCreateManyWithoutOrgInput>;
  orgSummary?: InputMaybe<OrgSummaryCreateOneWithoutOrgInput>;
  paidSearchSummary?: InputMaybe<PaidSearchSummaryCreateOneWithoutOrgInput>;
  paidSearchSummarySharedOrgs?: InputMaybe<PaidSearchSummaryCreateManyWithoutSharedOrgsInput>;
  parentOrg?: InputMaybe<OrgCreateManyInput>;
  paymentConfig?: InputMaybe<PaymentConfigCreateOneWithoutOrgsInput>;
  phone?: InputMaybe<Scalars['String']>;
  posConfig?: InputMaybe<PosConfigCreateManyWithoutOrgInput>;
  regionGroup?: InputMaybe<RegionGroupCreateManyWithoutOrgsInput>;
  roles?: InputMaybe<RoleCreateManyWithoutOrgInput>;
  salesforceId?: InputMaybe<Scalars['String']>;
  sendEmailConfig?: InputMaybe<SendEmailConfigCreateOneWithoutOrgsInput>;
  signInLogo?: InputMaybe<MediaCreateOneInput>;
  tableConfig?: InputMaybe<OrgTableConfigCreateOneWithoutOrgsInput>;
  tagsConfig?: InputMaybe<OrgTagsConfigCreateOneWithoutOrgsInput>;
  themeConfig?: InputMaybe<OrgThemeConfigCreateOneWithoutOrgsInput>;
  website?: InputMaybe<Scalars['String']>;
  zone?: InputMaybe<Scalars['String']>;
};

export type OrgCreateWithoutAdvertiserCampaignOrdersInput = {
  SEOSummary?: InputMaybe<OrgSeoSummaryCreateOneWithoutOrgInput>;
  adGroupCreatives?: InputMaybe<AdGroupCreativesCreateManyWithoutOrgInput>;
  audiences?: InputMaybe<AudienceCreateManyWithoutOrgsInput>;
  brands?: InputMaybe<BrandCreateManyInput>;
  campaignOrders?: InputMaybe<CampaignOrderCreateManyWithoutOrgsInput>;
  campaigns?: InputMaybe<CampaignCreateManyWithoutOrgsInput>;
  chatWootId?: InputMaybe<Scalars['String']>;
  config?: InputMaybe<OrgConfigCreateOneWithoutOrgsInput>;
  cpm?: InputMaybe<Scalars['String']>;
  customers?: InputMaybe<CustomerCreateManyWithoutOrgInput>;
  dataConfig?: InputMaybe<OrgDataConfigCreateOneWithoutOrgsInput>;
  description?: InputMaybe<Scalars['String']>;
  domain?: InputMaybe<Scalars['String']>;
  event?: InputMaybe<EventCreateOneWithoutOrgsInput>;
  eventsTarget?: InputMaybe<EventsTargetCreateOneWithoutOrgsInput>;
  iabCategoryGroup?: InputMaybe<IabCategoryGroupCreateManyWithoutOrgsInput>;
  isAllTimeFiltered?: InputMaybe<Scalars['Boolean']>;
  level: PartnerLevel;
  locations?: InputMaybe<LocationCreateManyInput>;
  logo?: InputMaybe<MediaCreateOneWithoutOrgInput>;
  loyaltyCampaigns?: InputMaybe<LoyaltyCampaignCreateManyWithoutOrgInput>;
  media?: InputMaybe<MediaCreateManyWithoutSharedWithInput>;
  name: Scalars['String'];
  offers?: InputMaybe<OfferCreateManyWithoutOrgInput>;
  orgSummary?: InputMaybe<OrgSummaryCreateOneWithoutOrgInput>;
  paidSearchSummary?: InputMaybe<PaidSearchSummaryCreateOneWithoutOrgInput>;
  paidSearchSummarySharedOrgs?: InputMaybe<PaidSearchSummaryCreateManyWithoutSharedOrgsInput>;
  parentOrg?: InputMaybe<OrgCreateManyInput>;
  paymentConfig?: InputMaybe<PaymentConfigCreateOneWithoutOrgsInput>;
  phone?: InputMaybe<Scalars['String']>;
  posConfig?: InputMaybe<PosConfigCreateManyWithoutOrgInput>;
  regionGroup?: InputMaybe<RegionGroupCreateManyWithoutOrgsInput>;
  roles?: InputMaybe<RoleCreateManyWithoutOrgInput>;
  salesforceId?: InputMaybe<Scalars['String']>;
  sendEmailConfig?: InputMaybe<SendEmailConfigCreateOneWithoutOrgsInput>;
  signInLogo?: InputMaybe<MediaCreateOneInput>;
  tableConfig?: InputMaybe<OrgTableConfigCreateOneWithoutOrgsInput>;
  tagsConfig?: InputMaybe<OrgTagsConfigCreateOneWithoutOrgsInput>;
  themeConfig?: InputMaybe<OrgThemeConfigCreateOneWithoutOrgsInput>;
  website?: InputMaybe<Scalars['String']>;
  zone?: InputMaybe<Scalars['String']>;
};

export type OrgCreateWithoutAudiencesInput = {
  SEOSummary?: InputMaybe<OrgSeoSummaryCreateOneWithoutOrgInput>;
  adGroupCreatives?: InputMaybe<AdGroupCreativesCreateManyWithoutOrgInput>;
  advertiserCampaignOrders?: InputMaybe<CampaignOrderCreateManyWithoutAdvertiserInput>;
  brands?: InputMaybe<BrandCreateManyInput>;
  campaignOrders?: InputMaybe<CampaignOrderCreateManyWithoutOrgsInput>;
  campaigns?: InputMaybe<CampaignCreateManyWithoutOrgsInput>;
  chatWootId?: InputMaybe<Scalars['String']>;
  config?: InputMaybe<OrgConfigCreateOneWithoutOrgsInput>;
  cpm?: InputMaybe<Scalars['String']>;
  customers?: InputMaybe<CustomerCreateManyWithoutOrgInput>;
  dataConfig?: InputMaybe<OrgDataConfigCreateOneWithoutOrgsInput>;
  description?: InputMaybe<Scalars['String']>;
  domain?: InputMaybe<Scalars['String']>;
  event?: InputMaybe<EventCreateOneWithoutOrgsInput>;
  eventsTarget?: InputMaybe<EventsTargetCreateOneWithoutOrgsInput>;
  iabCategoryGroup?: InputMaybe<IabCategoryGroupCreateManyWithoutOrgsInput>;
  isAllTimeFiltered?: InputMaybe<Scalars['Boolean']>;
  level: PartnerLevel;
  locations?: InputMaybe<LocationCreateManyInput>;
  logo?: InputMaybe<MediaCreateOneWithoutOrgInput>;
  loyaltyCampaigns?: InputMaybe<LoyaltyCampaignCreateManyWithoutOrgInput>;
  media?: InputMaybe<MediaCreateManyWithoutSharedWithInput>;
  name: Scalars['String'];
  offers?: InputMaybe<OfferCreateManyWithoutOrgInput>;
  orgSummary?: InputMaybe<OrgSummaryCreateOneWithoutOrgInput>;
  paidSearchSummary?: InputMaybe<PaidSearchSummaryCreateOneWithoutOrgInput>;
  paidSearchSummarySharedOrgs?: InputMaybe<PaidSearchSummaryCreateManyWithoutSharedOrgsInput>;
  parentOrg?: InputMaybe<OrgCreateManyInput>;
  paymentConfig?: InputMaybe<PaymentConfigCreateOneWithoutOrgsInput>;
  phone?: InputMaybe<Scalars['String']>;
  posConfig?: InputMaybe<PosConfigCreateManyWithoutOrgInput>;
  regionGroup?: InputMaybe<RegionGroupCreateManyWithoutOrgsInput>;
  roles?: InputMaybe<RoleCreateManyWithoutOrgInput>;
  salesforceId?: InputMaybe<Scalars['String']>;
  sendEmailConfig?: InputMaybe<SendEmailConfigCreateOneWithoutOrgsInput>;
  signInLogo?: InputMaybe<MediaCreateOneInput>;
  tableConfig?: InputMaybe<OrgTableConfigCreateOneWithoutOrgsInput>;
  tagsConfig?: InputMaybe<OrgTagsConfigCreateOneWithoutOrgsInput>;
  themeConfig?: InputMaybe<OrgThemeConfigCreateOneWithoutOrgsInput>;
  website?: InputMaybe<Scalars['String']>;
  zone?: InputMaybe<Scalars['String']>;
};

export type OrgCreateWithoutCampaignOrdersInput = {
  SEOSummary?: InputMaybe<OrgSeoSummaryCreateOneWithoutOrgInput>;
  adGroupCreatives?: InputMaybe<AdGroupCreativesCreateManyWithoutOrgInput>;
  advertiserCampaignOrders?: InputMaybe<CampaignOrderCreateManyWithoutAdvertiserInput>;
  audiences?: InputMaybe<AudienceCreateManyWithoutOrgsInput>;
  brands?: InputMaybe<BrandCreateManyInput>;
  campaigns?: InputMaybe<CampaignCreateManyWithoutOrgsInput>;
  chatWootId?: InputMaybe<Scalars['String']>;
  config?: InputMaybe<OrgConfigCreateOneWithoutOrgsInput>;
  cpm?: InputMaybe<Scalars['String']>;
  customers?: InputMaybe<CustomerCreateManyWithoutOrgInput>;
  dataConfig?: InputMaybe<OrgDataConfigCreateOneWithoutOrgsInput>;
  description?: InputMaybe<Scalars['String']>;
  domain?: InputMaybe<Scalars['String']>;
  event?: InputMaybe<EventCreateOneWithoutOrgsInput>;
  eventsTarget?: InputMaybe<EventsTargetCreateOneWithoutOrgsInput>;
  iabCategoryGroup?: InputMaybe<IabCategoryGroupCreateManyWithoutOrgsInput>;
  isAllTimeFiltered?: InputMaybe<Scalars['Boolean']>;
  level: PartnerLevel;
  locations?: InputMaybe<LocationCreateManyInput>;
  logo?: InputMaybe<MediaCreateOneWithoutOrgInput>;
  loyaltyCampaigns?: InputMaybe<LoyaltyCampaignCreateManyWithoutOrgInput>;
  media?: InputMaybe<MediaCreateManyWithoutSharedWithInput>;
  name: Scalars['String'];
  offers?: InputMaybe<OfferCreateManyWithoutOrgInput>;
  orgSummary?: InputMaybe<OrgSummaryCreateOneWithoutOrgInput>;
  paidSearchSummary?: InputMaybe<PaidSearchSummaryCreateOneWithoutOrgInput>;
  paidSearchSummarySharedOrgs?: InputMaybe<PaidSearchSummaryCreateManyWithoutSharedOrgsInput>;
  parentOrg?: InputMaybe<OrgCreateManyInput>;
  paymentConfig?: InputMaybe<PaymentConfigCreateOneWithoutOrgsInput>;
  phone?: InputMaybe<Scalars['String']>;
  posConfig?: InputMaybe<PosConfigCreateManyWithoutOrgInput>;
  regionGroup?: InputMaybe<RegionGroupCreateManyWithoutOrgsInput>;
  roles?: InputMaybe<RoleCreateManyWithoutOrgInput>;
  salesforceId?: InputMaybe<Scalars['String']>;
  sendEmailConfig?: InputMaybe<SendEmailConfigCreateOneWithoutOrgsInput>;
  signInLogo?: InputMaybe<MediaCreateOneInput>;
  tableConfig?: InputMaybe<OrgTableConfigCreateOneWithoutOrgsInput>;
  tagsConfig?: InputMaybe<OrgTagsConfigCreateOneWithoutOrgsInput>;
  themeConfig?: InputMaybe<OrgThemeConfigCreateOneWithoutOrgsInput>;
  website?: InputMaybe<Scalars['String']>;
  zone?: InputMaybe<Scalars['String']>;
};

export type OrgCreateWithoutCampaignsInput = {
  SEOSummary?: InputMaybe<OrgSeoSummaryCreateOneWithoutOrgInput>;
  adGroupCreatives?: InputMaybe<AdGroupCreativesCreateManyWithoutOrgInput>;
  advertiserCampaignOrders?: InputMaybe<CampaignOrderCreateManyWithoutAdvertiserInput>;
  audiences?: InputMaybe<AudienceCreateManyWithoutOrgsInput>;
  brands?: InputMaybe<BrandCreateManyInput>;
  campaignOrders?: InputMaybe<CampaignOrderCreateManyWithoutOrgsInput>;
  chatWootId?: InputMaybe<Scalars['String']>;
  config?: InputMaybe<OrgConfigCreateOneWithoutOrgsInput>;
  cpm?: InputMaybe<Scalars['String']>;
  customers?: InputMaybe<CustomerCreateManyWithoutOrgInput>;
  dataConfig?: InputMaybe<OrgDataConfigCreateOneWithoutOrgsInput>;
  description?: InputMaybe<Scalars['String']>;
  domain?: InputMaybe<Scalars['String']>;
  event?: InputMaybe<EventCreateOneWithoutOrgsInput>;
  eventsTarget?: InputMaybe<EventsTargetCreateOneWithoutOrgsInput>;
  iabCategoryGroup?: InputMaybe<IabCategoryGroupCreateManyWithoutOrgsInput>;
  isAllTimeFiltered?: InputMaybe<Scalars['Boolean']>;
  level: PartnerLevel;
  locations?: InputMaybe<LocationCreateManyInput>;
  logo?: InputMaybe<MediaCreateOneWithoutOrgInput>;
  loyaltyCampaigns?: InputMaybe<LoyaltyCampaignCreateManyWithoutOrgInput>;
  media?: InputMaybe<MediaCreateManyWithoutSharedWithInput>;
  name: Scalars['String'];
  offers?: InputMaybe<OfferCreateManyWithoutOrgInput>;
  orgSummary?: InputMaybe<OrgSummaryCreateOneWithoutOrgInput>;
  paidSearchSummary?: InputMaybe<PaidSearchSummaryCreateOneWithoutOrgInput>;
  paidSearchSummarySharedOrgs?: InputMaybe<PaidSearchSummaryCreateManyWithoutSharedOrgsInput>;
  parentOrg?: InputMaybe<OrgCreateManyInput>;
  paymentConfig?: InputMaybe<PaymentConfigCreateOneWithoutOrgsInput>;
  phone?: InputMaybe<Scalars['String']>;
  posConfig?: InputMaybe<PosConfigCreateManyWithoutOrgInput>;
  regionGroup?: InputMaybe<RegionGroupCreateManyWithoutOrgsInput>;
  roles?: InputMaybe<RoleCreateManyWithoutOrgInput>;
  salesforceId?: InputMaybe<Scalars['String']>;
  sendEmailConfig?: InputMaybe<SendEmailConfigCreateOneWithoutOrgsInput>;
  signInLogo?: InputMaybe<MediaCreateOneInput>;
  tableConfig?: InputMaybe<OrgTableConfigCreateOneWithoutOrgsInput>;
  tagsConfig?: InputMaybe<OrgTagsConfigCreateOneWithoutOrgsInput>;
  themeConfig?: InputMaybe<OrgThemeConfigCreateOneWithoutOrgsInput>;
  website?: InputMaybe<Scalars['String']>;
  zone?: InputMaybe<Scalars['String']>;
};

export type OrgCreateWithoutCustomersInput = {
  SEOSummary?: InputMaybe<OrgSeoSummaryCreateOneWithoutOrgInput>;
  adGroupCreatives?: InputMaybe<AdGroupCreativesCreateManyWithoutOrgInput>;
  advertiserCampaignOrders?: InputMaybe<CampaignOrderCreateManyWithoutAdvertiserInput>;
  audiences?: InputMaybe<AudienceCreateManyWithoutOrgsInput>;
  brands?: InputMaybe<BrandCreateManyInput>;
  campaignOrders?: InputMaybe<CampaignOrderCreateManyWithoutOrgsInput>;
  campaigns?: InputMaybe<CampaignCreateManyWithoutOrgsInput>;
  chatWootId?: InputMaybe<Scalars['String']>;
  config?: InputMaybe<OrgConfigCreateOneWithoutOrgsInput>;
  cpm?: InputMaybe<Scalars['String']>;
  dataConfig?: InputMaybe<OrgDataConfigCreateOneWithoutOrgsInput>;
  description?: InputMaybe<Scalars['String']>;
  domain?: InputMaybe<Scalars['String']>;
  event?: InputMaybe<EventCreateOneWithoutOrgsInput>;
  eventsTarget?: InputMaybe<EventsTargetCreateOneWithoutOrgsInput>;
  iabCategoryGroup?: InputMaybe<IabCategoryGroupCreateManyWithoutOrgsInput>;
  isAllTimeFiltered?: InputMaybe<Scalars['Boolean']>;
  level: PartnerLevel;
  locations?: InputMaybe<LocationCreateManyInput>;
  logo?: InputMaybe<MediaCreateOneWithoutOrgInput>;
  loyaltyCampaigns?: InputMaybe<LoyaltyCampaignCreateManyWithoutOrgInput>;
  media?: InputMaybe<MediaCreateManyWithoutSharedWithInput>;
  name: Scalars['String'];
  offers?: InputMaybe<OfferCreateManyWithoutOrgInput>;
  orgSummary?: InputMaybe<OrgSummaryCreateOneWithoutOrgInput>;
  paidSearchSummary?: InputMaybe<PaidSearchSummaryCreateOneWithoutOrgInput>;
  paidSearchSummarySharedOrgs?: InputMaybe<PaidSearchSummaryCreateManyWithoutSharedOrgsInput>;
  parentOrg?: InputMaybe<OrgCreateManyInput>;
  paymentConfig?: InputMaybe<PaymentConfigCreateOneWithoutOrgsInput>;
  phone?: InputMaybe<Scalars['String']>;
  posConfig?: InputMaybe<PosConfigCreateManyWithoutOrgInput>;
  regionGroup?: InputMaybe<RegionGroupCreateManyWithoutOrgsInput>;
  roles?: InputMaybe<RoleCreateManyWithoutOrgInput>;
  salesforceId?: InputMaybe<Scalars['String']>;
  sendEmailConfig?: InputMaybe<SendEmailConfigCreateOneWithoutOrgsInput>;
  signInLogo?: InputMaybe<MediaCreateOneInput>;
  tableConfig?: InputMaybe<OrgTableConfigCreateOneWithoutOrgsInput>;
  tagsConfig?: InputMaybe<OrgTagsConfigCreateOneWithoutOrgsInput>;
  themeConfig?: InputMaybe<OrgThemeConfigCreateOneWithoutOrgsInput>;
  website?: InputMaybe<Scalars['String']>;
  zone?: InputMaybe<Scalars['String']>;
};

export type OrgCreateWithoutDataConfigInput = {
  SEOSummary?: InputMaybe<OrgSeoSummaryCreateOneWithoutOrgInput>;
  adGroupCreatives?: InputMaybe<AdGroupCreativesCreateManyWithoutOrgInput>;
  advertiserCampaignOrders?: InputMaybe<CampaignOrderCreateManyWithoutAdvertiserInput>;
  audiences?: InputMaybe<AudienceCreateManyWithoutOrgsInput>;
  brands?: InputMaybe<BrandCreateManyInput>;
  campaignOrders?: InputMaybe<CampaignOrderCreateManyWithoutOrgsInput>;
  campaigns?: InputMaybe<CampaignCreateManyWithoutOrgsInput>;
  chatWootId?: InputMaybe<Scalars['String']>;
  config?: InputMaybe<OrgConfigCreateOneWithoutOrgsInput>;
  cpm?: InputMaybe<Scalars['String']>;
  customers?: InputMaybe<CustomerCreateManyWithoutOrgInput>;
  description?: InputMaybe<Scalars['String']>;
  domain?: InputMaybe<Scalars['String']>;
  event?: InputMaybe<EventCreateOneWithoutOrgsInput>;
  eventsTarget?: InputMaybe<EventsTargetCreateOneWithoutOrgsInput>;
  iabCategoryGroup?: InputMaybe<IabCategoryGroupCreateManyWithoutOrgsInput>;
  isAllTimeFiltered?: InputMaybe<Scalars['Boolean']>;
  level: PartnerLevel;
  locations?: InputMaybe<LocationCreateManyInput>;
  logo?: InputMaybe<MediaCreateOneWithoutOrgInput>;
  loyaltyCampaigns?: InputMaybe<LoyaltyCampaignCreateManyWithoutOrgInput>;
  media?: InputMaybe<MediaCreateManyWithoutSharedWithInput>;
  name: Scalars['String'];
  offers?: InputMaybe<OfferCreateManyWithoutOrgInput>;
  orgSummary?: InputMaybe<OrgSummaryCreateOneWithoutOrgInput>;
  paidSearchSummary?: InputMaybe<PaidSearchSummaryCreateOneWithoutOrgInput>;
  paidSearchSummarySharedOrgs?: InputMaybe<PaidSearchSummaryCreateManyWithoutSharedOrgsInput>;
  parentOrg?: InputMaybe<OrgCreateManyInput>;
  paymentConfig?: InputMaybe<PaymentConfigCreateOneWithoutOrgsInput>;
  phone?: InputMaybe<Scalars['String']>;
  posConfig?: InputMaybe<PosConfigCreateManyWithoutOrgInput>;
  regionGroup?: InputMaybe<RegionGroupCreateManyWithoutOrgsInput>;
  roles?: InputMaybe<RoleCreateManyWithoutOrgInput>;
  salesforceId?: InputMaybe<Scalars['String']>;
  sendEmailConfig?: InputMaybe<SendEmailConfigCreateOneWithoutOrgsInput>;
  signInLogo?: InputMaybe<MediaCreateOneInput>;
  tableConfig?: InputMaybe<OrgTableConfigCreateOneWithoutOrgsInput>;
  tagsConfig?: InputMaybe<OrgTagsConfigCreateOneWithoutOrgsInput>;
  themeConfig?: InputMaybe<OrgThemeConfigCreateOneWithoutOrgsInput>;
  website?: InputMaybe<Scalars['String']>;
  zone?: InputMaybe<Scalars['String']>;
};

export type OrgCreateWithoutEventInput = {
  SEOSummary?: InputMaybe<OrgSeoSummaryCreateOneWithoutOrgInput>;
  adGroupCreatives?: InputMaybe<AdGroupCreativesCreateManyWithoutOrgInput>;
  advertiserCampaignOrders?: InputMaybe<CampaignOrderCreateManyWithoutAdvertiserInput>;
  audiences?: InputMaybe<AudienceCreateManyWithoutOrgsInput>;
  brands?: InputMaybe<BrandCreateManyInput>;
  campaignOrders?: InputMaybe<CampaignOrderCreateManyWithoutOrgsInput>;
  campaigns?: InputMaybe<CampaignCreateManyWithoutOrgsInput>;
  chatWootId?: InputMaybe<Scalars['String']>;
  config?: InputMaybe<OrgConfigCreateOneWithoutOrgsInput>;
  cpm?: InputMaybe<Scalars['String']>;
  customers?: InputMaybe<CustomerCreateManyWithoutOrgInput>;
  dataConfig?: InputMaybe<OrgDataConfigCreateOneWithoutOrgsInput>;
  description?: InputMaybe<Scalars['String']>;
  domain?: InputMaybe<Scalars['String']>;
  eventsTarget?: InputMaybe<EventsTargetCreateOneWithoutOrgsInput>;
  iabCategoryGroup?: InputMaybe<IabCategoryGroupCreateManyWithoutOrgsInput>;
  isAllTimeFiltered?: InputMaybe<Scalars['Boolean']>;
  level: PartnerLevel;
  locations?: InputMaybe<LocationCreateManyInput>;
  logo?: InputMaybe<MediaCreateOneWithoutOrgInput>;
  loyaltyCampaigns?: InputMaybe<LoyaltyCampaignCreateManyWithoutOrgInput>;
  media?: InputMaybe<MediaCreateManyWithoutSharedWithInput>;
  name: Scalars['String'];
  offers?: InputMaybe<OfferCreateManyWithoutOrgInput>;
  orgSummary?: InputMaybe<OrgSummaryCreateOneWithoutOrgInput>;
  paidSearchSummary?: InputMaybe<PaidSearchSummaryCreateOneWithoutOrgInput>;
  paidSearchSummarySharedOrgs?: InputMaybe<PaidSearchSummaryCreateManyWithoutSharedOrgsInput>;
  parentOrg?: InputMaybe<OrgCreateManyInput>;
  paymentConfig?: InputMaybe<PaymentConfigCreateOneWithoutOrgsInput>;
  phone?: InputMaybe<Scalars['String']>;
  posConfig?: InputMaybe<PosConfigCreateManyWithoutOrgInput>;
  regionGroup?: InputMaybe<RegionGroupCreateManyWithoutOrgsInput>;
  roles?: InputMaybe<RoleCreateManyWithoutOrgInput>;
  salesforceId?: InputMaybe<Scalars['String']>;
  sendEmailConfig?: InputMaybe<SendEmailConfigCreateOneWithoutOrgsInput>;
  signInLogo?: InputMaybe<MediaCreateOneInput>;
  tableConfig?: InputMaybe<OrgTableConfigCreateOneWithoutOrgsInput>;
  tagsConfig?: InputMaybe<OrgTagsConfigCreateOneWithoutOrgsInput>;
  themeConfig?: InputMaybe<OrgThemeConfigCreateOneWithoutOrgsInput>;
  website?: InputMaybe<Scalars['String']>;
  zone?: InputMaybe<Scalars['String']>;
};

export type OrgCreateWithoutEventsTargetInput = {
  SEOSummary?: InputMaybe<OrgSeoSummaryCreateOneWithoutOrgInput>;
  adGroupCreatives?: InputMaybe<AdGroupCreativesCreateManyWithoutOrgInput>;
  advertiserCampaignOrders?: InputMaybe<CampaignOrderCreateManyWithoutAdvertiserInput>;
  audiences?: InputMaybe<AudienceCreateManyWithoutOrgsInput>;
  brands?: InputMaybe<BrandCreateManyInput>;
  campaignOrders?: InputMaybe<CampaignOrderCreateManyWithoutOrgsInput>;
  campaigns?: InputMaybe<CampaignCreateManyWithoutOrgsInput>;
  chatWootId?: InputMaybe<Scalars['String']>;
  config?: InputMaybe<OrgConfigCreateOneWithoutOrgsInput>;
  cpm?: InputMaybe<Scalars['String']>;
  customers?: InputMaybe<CustomerCreateManyWithoutOrgInput>;
  dataConfig?: InputMaybe<OrgDataConfigCreateOneWithoutOrgsInput>;
  description?: InputMaybe<Scalars['String']>;
  domain?: InputMaybe<Scalars['String']>;
  event?: InputMaybe<EventCreateOneWithoutOrgsInput>;
  iabCategoryGroup?: InputMaybe<IabCategoryGroupCreateManyWithoutOrgsInput>;
  isAllTimeFiltered?: InputMaybe<Scalars['Boolean']>;
  level: PartnerLevel;
  locations?: InputMaybe<LocationCreateManyInput>;
  logo?: InputMaybe<MediaCreateOneWithoutOrgInput>;
  loyaltyCampaigns?: InputMaybe<LoyaltyCampaignCreateManyWithoutOrgInput>;
  media?: InputMaybe<MediaCreateManyWithoutSharedWithInput>;
  name: Scalars['String'];
  offers?: InputMaybe<OfferCreateManyWithoutOrgInput>;
  orgSummary?: InputMaybe<OrgSummaryCreateOneWithoutOrgInput>;
  paidSearchSummary?: InputMaybe<PaidSearchSummaryCreateOneWithoutOrgInput>;
  paidSearchSummarySharedOrgs?: InputMaybe<PaidSearchSummaryCreateManyWithoutSharedOrgsInput>;
  parentOrg?: InputMaybe<OrgCreateManyInput>;
  paymentConfig?: InputMaybe<PaymentConfigCreateOneWithoutOrgsInput>;
  phone?: InputMaybe<Scalars['String']>;
  posConfig?: InputMaybe<PosConfigCreateManyWithoutOrgInput>;
  regionGroup?: InputMaybe<RegionGroupCreateManyWithoutOrgsInput>;
  roles?: InputMaybe<RoleCreateManyWithoutOrgInput>;
  salesforceId?: InputMaybe<Scalars['String']>;
  sendEmailConfig?: InputMaybe<SendEmailConfigCreateOneWithoutOrgsInput>;
  signInLogo?: InputMaybe<MediaCreateOneInput>;
  tableConfig?: InputMaybe<OrgTableConfigCreateOneWithoutOrgsInput>;
  tagsConfig?: InputMaybe<OrgTagsConfigCreateOneWithoutOrgsInput>;
  themeConfig?: InputMaybe<OrgThemeConfigCreateOneWithoutOrgsInput>;
  website?: InputMaybe<Scalars['String']>;
  zone?: InputMaybe<Scalars['String']>;
};

export type OrgCreateWithoutIabCategoryGroupInput = {
  SEOSummary?: InputMaybe<OrgSeoSummaryCreateOneWithoutOrgInput>;
  adGroupCreatives?: InputMaybe<AdGroupCreativesCreateManyWithoutOrgInput>;
  advertiserCampaignOrders?: InputMaybe<CampaignOrderCreateManyWithoutAdvertiserInput>;
  audiences?: InputMaybe<AudienceCreateManyWithoutOrgsInput>;
  brands?: InputMaybe<BrandCreateManyInput>;
  campaignOrders?: InputMaybe<CampaignOrderCreateManyWithoutOrgsInput>;
  campaigns?: InputMaybe<CampaignCreateManyWithoutOrgsInput>;
  chatWootId?: InputMaybe<Scalars['String']>;
  config?: InputMaybe<OrgConfigCreateOneWithoutOrgsInput>;
  cpm?: InputMaybe<Scalars['String']>;
  customers?: InputMaybe<CustomerCreateManyWithoutOrgInput>;
  dataConfig?: InputMaybe<OrgDataConfigCreateOneWithoutOrgsInput>;
  description?: InputMaybe<Scalars['String']>;
  domain?: InputMaybe<Scalars['String']>;
  event?: InputMaybe<EventCreateOneWithoutOrgsInput>;
  eventsTarget?: InputMaybe<EventsTargetCreateOneWithoutOrgsInput>;
  isAllTimeFiltered?: InputMaybe<Scalars['Boolean']>;
  level: PartnerLevel;
  locations?: InputMaybe<LocationCreateManyInput>;
  logo?: InputMaybe<MediaCreateOneWithoutOrgInput>;
  loyaltyCampaigns?: InputMaybe<LoyaltyCampaignCreateManyWithoutOrgInput>;
  media?: InputMaybe<MediaCreateManyWithoutSharedWithInput>;
  name: Scalars['String'];
  offers?: InputMaybe<OfferCreateManyWithoutOrgInput>;
  orgSummary?: InputMaybe<OrgSummaryCreateOneWithoutOrgInput>;
  paidSearchSummary?: InputMaybe<PaidSearchSummaryCreateOneWithoutOrgInput>;
  paidSearchSummarySharedOrgs?: InputMaybe<PaidSearchSummaryCreateManyWithoutSharedOrgsInput>;
  parentOrg?: InputMaybe<OrgCreateManyInput>;
  paymentConfig?: InputMaybe<PaymentConfigCreateOneWithoutOrgsInput>;
  phone?: InputMaybe<Scalars['String']>;
  posConfig?: InputMaybe<PosConfigCreateManyWithoutOrgInput>;
  regionGroup?: InputMaybe<RegionGroupCreateManyWithoutOrgsInput>;
  roles?: InputMaybe<RoleCreateManyWithoutOrgInput>;
  salesforceId?: InputMaybe<Scalars['String']>;
  sendEmailConfig?: InputMaybe<SendEmailConfigCreateOneWithoutOrgsInput>;
  signInLogo?: InputMaybe<MediaCreateOneInput>;
  tableConfig?: InputMaybe<OrgTableConfigCreateOneWithoutOrgsInput>;
  tagsConfig?: InputMaybe<OrgTagsConfigCreateOneWithoutOrgsInput>;
  themeConfig?: InputMaybe<OrgThemeConfigCreateOneWithoutOrgsInput>;
  website?: InputMaybe<Scalars['String']>;
  zone?: InputMaybe<Scalars['String']>;
};

export type OrgCreateWithoutLogoInput = {
  SEOSummary?: InputMaybe<OrgSeoSummaryCreateOneWithoutOrgInput>;
  adGroupCreatives?: InputMaybe<AdGroupCreativesCreateManyWithoutOrgInput>;
  advertiserCampaignOrders?: InputMaybe<CampaignOrderCreateManyWithoutAdvertiserInput>;
  audiences?: InputMaybe<AudienceCreateManyWithoutOrgsInput>;
  brands?: InputMaybe<BrandCreateManyInput>;
  campaignOrders?: InputMaybe<CampaignOrderCreateManyWithoutOrgsInput>;
  campaigns?: InputMaybe<CampaignCreateManyWithoutOrgsInput>;
  chatWootId?: InputMaybe<Scalars['String']>;
  config?: InputMaybe<OrgConfigCreateOneWithoutOrgsInput>;
  cpm?: InputMaybe<Scalars['String']>;
  customers?: InputMaybe<CustomerCreateManyWithoutOrgInput>;
  dataConfig?: InputMaybe<OrgDataConfigCreateOneWithoutOrgsInput>;
  description?: InputMaybe<Scalars['String']>;
  domain?: InputMaybe<Scalars['String']>;
  event?: InputMaybe<EventCreateOneWithoutOrgsInput>;
  eventsTarget?: InputMaybe<EventsTargetCreateOneWithoutOrgsInput>;
  iabCategoryGroup?: InputMaybe<IabCategoryGroupCreateManyWithoutOrgsInput>;
  isAllTimeFiltered?: InputMaybe<Scalars['Boolean']>;
  level: PartnerLevel;
  locations?: InputMaybe<LocationCreateManyInput>;
  loyaltyCampaigns?: InputMaybe<LoyaltyCampaignCreateManyWithoutOrgInput>;
  media?: InputMaybe<MediaCreateManyWithoutSharedWithInput>;
  name: Scalars['String'];
  offers?: InputMaybe<OfferCreateManyWithoutOrgInput>;
  orgSummary?: InputMaybe<OrgSummaryCreateOneWithoutOrgInput>;
  paidSearchSummary?: InputMaybe<PaidSearchSummaryCreateOneWithoutOrgInput>;
  paidSearchSummarySharedOrgs?: InputMaybe<PaidSearchSummaryCreateManyWithoutSharedOrgsInput>;
  parentOrg?: InputMaybe<OrgCreateManyInput>;
  paymentConfig?: InputMaybe<PaymentConfigCreateOneWithoutOrgsInput>;
  phone?: InputMaybe<Scalars['String']>;
  posConfig?: InputMaybe<PosConfigCreateManyWithoutOrgInput>;
  regionGroup?: InputMaybe<RegionGroupCreateManyWithoutOrgsInput>;
  roles?: InputMaybe<RoleCreateManyWithoutOrgInput>;
  salesforceId?: InputMaybe<Scalars['String']>;
  sendEmailConfig?: InputMaybe<SendEmailConfigCreateOneWithoutOrgsInput>;
  signInLogo?: InputMaybe<MediaCreateOneInput>;
  tableConfig?: InputMaybe<OrgTableConfigCreateOneWithoutOrgsInput>;
  tagsConfig?: InputMaybe<OrgTagsConfigCreateOneWithoutOrgsInput>;
  themeConfig?: InputMaybe<OrgThemeConfigCreateOneWithoutOrgsInput>;
  website?: InputMaybe<Scalars['String']>;
  zone?: InputMaybe<Scalars['String']>;
};

export type OrgCreateWithoutLoyaltyCampaignsInput = {
  SEOSummary?: InputMaybe<OrgSeoSummaryCreateOneWithoutOrgInput>;
  adGroupCreatives?: InputMaybe<AdGroupCreativesCreateManyWithoutOrgInput>;
  advertiserCampaignOrders?: InputMaybe<CampaignOrderCreateManyWithoutAdvertiserInput>;
  audiences?: InputMaybe<AudienceCreateManyWithoutOrgsInput>;
  brands?: InputMaybe<BrandCreateManyInput>;
  campaignOrders?: InputMaybe<CampaignOrderCreateManyWithoutOrgsInput>;
  campaigns?: InputMaybe<CampaignCreateManyWithoutOrgsInput>;
  chatWootId?: InputMaybe<Scalars['String']>;
  config?: InputMaybe<OrgConfigCreateOneWithoutOrgsInput>;
  cpm?: InputMaybe<Scalars['String']>;
  customers?: InputMaybe<CustomerCreateManyWithoutOrgInput>;
  dataConfig?: InputMaybe<OrgDataConfigCreateOneWithoutOrgsInput>;
  description?: InputMaybe<Scalars['String']>;
  domain?: InputMaybe<Scalars['String']>;
  event?: InputMaybe<EventCreateOneWithoutOrgsInput>;
  eventsTarget?: InputMaybe<EventsTargetCreateOneWithoutOrgsInput>;
  iabCategoryGroup?: InputMaybe<IabCategoryGroupCreateManyWithoutOrgsInput>;
  isAllTimeFiltered?: InputMaybe<Scalars['Boolean']>;
  level: PartnerLevel;
  locations?: InputMaybe<LocationCreateManyInput>;
  logo?: InputMaybe<MediaCreateOneWithoutOrgInput>;
  media?: InputMaybe<MediaCreateManyWithoutSharedWithInput>;
  name: Scalars['String'];
  offers?: InputMaybe<OfferCreateManyWithoutOrgInput>;
  orgSummary?: InputMaybe<OrgSummaryCreateOneWithoutOrgInput>;
  paidSearchSummary?: InputMaybe<PaidSearchSummaryCreateOneWithoutOrgInput>;
  paidSearchSummarySharedOrgs?: InputMaybe<PaidSearchSummaryCreateManyWithoutSharedOrgsInput>;
  parentOrg?: InputMaybe<OrgCreateManyInput>;
  paymentConfig?: InputMaybe<PaymentConfigCreateOneWithoutOrgsInput>;
  phone?: InputMaybe<Scalars['String']>;
  posConfig?: InputMaybe<PosConfigCreateManyWithoutOrgInput>;
  regionGroup?: InputMaybe<RegionGroupCreateManyWithoutOrgsInput>;
  roles?: InputMaybe<RoleCreateManyWithoutOrgInput>;
  salesforceId?: InputMaybe<Scalars['String']>;
  sendEmailConfig?: InputMaybe<SendEmailConfigCreateOneWithoutOrgsInput>;
  signInLogo?: InputMaybe<MediaCreateOneInput>;
  tableConfig?: InputMaybe<OrgTableConfigCreateOneWithoutOrgsInput>;
  tagsConfig?: InputMaybe<OrgTagsConfigCreateOneWithoutOrgsInput>;
  themeConfig?: InputMaybe<OrgThemeConfigCreateOneWithoutOrgsInput>;
  website?: InputMaybe<Scalars['String']>;
  zone?: InputMaybe<Scalars['String']>;
};

export type OrgCreateWithoutMediaInput = {
  SEOSummary?: InputMaybe<OrgSeoSummaryCreateOneWithoutOrgInput>;
  adGroupCreatives?: InputMaybe<AdGroupCreativesCreateManyWithoutOrgInput>;
  advertiserCampaignOrders?: InputMaybe<CampaignOrderCreateManyWithoutAdvertiserInput>;
  audiences?: InputMaybe<AudienceCreateManyWithoutOrgsInput>;
  brands?: InputMaybe<BrandCreateManyInput>;
  campaignOrders?: InputMaybe<CampaignOrderCreateManyWithoutOrgsInput>;
  campaigns?: InputMaybe<CampaignCreateManyWithoutOrgsInput>;
  chatWootId?: InputMaybe<Scalars['String']>;
  config?: InputMaybe<OrgConfigCreateOneWithoutOrgsInput>;
  cpm?: InputMaybe<Scalars['String']>;
  customers?: InputMaybe<CustomerCreateManyWithoutOrgInput>;
  dataConfig?: InputMaybe<OrgDataConfigCreateOneWithoutOrgsInput>;
  description?: InputMaybe<Scalars['String']>;
  domain?: InputMaybe<Scalars['String']>;
  event?: InputMaybe<EventCreateOneWithoutOrgsInput>;
  eventsTarget?: InputMaybe<EventsTargetCreateOneWithoutOrgsInput>;
  iabCategoryGroup?: InputMaybe<IabCategoryGroupCreateManyWithoutOrgsInput>;
  isAllTimeFiltered?: InputMaybe<Scalars['Boolean']>;
  level: PartnerLevel;
  locations?: InputMaybe<LocationCreateManyInput>;
  logo?: InputMaybe<MediaCreateOneWithoutOrgInput>;
  loyaltyCampaigns?: InputMaybe<LoyaltyCampaignCreateManyWithoutOrgInput>;
  name: Scalars['String'];
  offers?: InputMaybe<OfferCreateManyWithoutOrgInput>;
  orgSummary?: InputMaybe<OrgSummaryCreateOneWithoutOrgInput>;
  paidSearchSummary?: InputMaybe<PaidSearchSummaryCreateOneWithoutOrgInput>;
  paidSearchSummarySharedOrgs?: InputMaybe<PaidSearchSummaryCreateManyWithoutSharedOrgsInput>;
  parentOrg?: InputMaybe<OrgCreateManyInput>;
  paymentConfig?: InputMaybe<PaymentConfigCreateOneWithoutOrgsInput>;
  phone?: InputMaybe<Scalars['String']>;
  posConfig?: InputMaybe<PosConfigCreateManyWithoutOrgInput>;
  regionGroup?: InputMaybe<RegionGroupCreateManyWithoutOrgsInput>;
  roles?: InputMaybe<RoleCreateManyWithoutOrgInput>;
  salesforceId?: InputMaybe<Scalars['String']>;
  sendEmailConfig?: InputMaybe<SendEmailConfigCreateOneWithoutOrgsInput>;
  signInLogo?: InputMaybe<MediaCreateOneInput>;
  tableConfig?: InputMaybe<OrgTableConfigCreateOneWithoutOrgsInput>;
  tagsConfig?: InputMaybe<OrgTagsConfigCreateOneWithoutOrgsInput>;
  themeConfig?: InputMaybe<OrgThemeConfigCreateOneWithoutOrgsInput>;
  website?: InputMaybe<Scalars['String']>;
  zone?: InputMaybe<Scalars['String']>;
};

export type OrgCreateWithoutOffersInput = {
  SEOSummary?: InputMaybe<OrgSeoSummaryCreateOneWithoutOrgInput>;
  adGroupCreatives?: InputMaybe<AdGroupCreativesCreateManyWithoutOrgInput>;
  advertiserCampaignOrders?: InputMaybe<CampaignOrderCreateManyWithoutAdvertiserInput>;
  audiences?: InputMaybe<AudienceCreateManyWithoutOrgsInput>;
  brands?: InputMaybe<BrandCreateManyInput>;
  campaignOrders?: InputMaybe<CampaignOrderCreateManyWithoutOrgsInput>;
  campaigns?: InputMaybe<CampaignCreateManyWithoutOrgsInput>;
  chatWootId?: InputMaybe<Scalars['String']>;
  config?: InputMaybe<OrgConfigCreateOneWithoutOrgsInput>;
  cpm?: InputMaybe<Scalars['String']>;
  customers?: InputMaybe<CustomerCreateManyWithoutOrgInput>;
  dataConfig?: InputMaybe<OrgDataConfigCreateOneWithoutOrgsInput>;
  description?: InputMaybe<Scalars['String']>;
  domain?: InputMaybe<Scalars['String']>;
  event?: InputMaybe<EventCreateOneWithoutOrgsInput>;
  eventsTarget?: InputMaybe<EventsTargetCreateOneWithoutOrgsInput>;
  iabCategoryGroup?: InputMaybe<IabCategoryGroupCreateManyWithoutOrgsInput>;
  isAllTimeFiltered?: InputMaybe<Scalars['Boolean']>;
  level: PartnerLevel;
  locations?: InputMaybe<LocationCreateManyInput>;
  logo?: InputMaybe<MediaCreateOneWithoutOrgInput>;
  loyaltyCampaigns?: InputMaybe<LoyaltyCampaignCreateManyWithoutOrgInput>;
  media?: InputMaybe<MediaCreateManyWithoutSharedWithInput>;
  name: Scalars['String'];
  orgSummary?: InputMaybe<OrgSummaryCreateOneWithoutOrgInput>;
  paidSearchSummary?: InputMaybe<PaidSearchSummaryCreateOneWithoutOrgInput>;
  paidSearchSummarySharedOrgs?: InputMaybe<PaidSearchSummaryCreateManyWithoutSharedOrgsInput>;
  parentOrg?: InputMaybe<OrgCreateManyInput>;
  paymentConfig?: InputMaybe<PaymentConfigCreateOneWithoutOrgsInput>;
  phone?: InputMaybe<Scalars['String']>;
  posConfig?: InputMaybe<PosConfigCreateManyWithoutOrgInput>;
  regionGroup?: InputMaybe<RegionGroupCreateManyWithoutOrgsInput>;
  roles?: InputMaybe<RoleCreateManyWithoutOrgInput>;
  salesforceId?: InputMaybe<Scalars['String']>;
  sendEmailConfig?: InputMaybe<SendEmailConfigCreateOneWithoutOrgsInput>;
  signInLogo?: InputMaybe<MediaCreateOneInput>;
  tableConfig?: InputMaybe<OrgTableConfigCreateOneWithoutOrgsInput>;
  tagsConfig?: InputMaybe<OrgTagsConfigCreateOneWithoutOrgsInput>;
  themeConfig?: InputMaybe<OrgThemeConfigCreateOneWithoutOrgsInput>;
  website?: InputMaybe<Scalars['String']>;
  zone?: InputMaybe<Scalars['String']>;
};

export type OrgCreateWithoutOrgSummaryInput = {
  SEOSummary?: InputMaybe<OrgSeoSummaryCreateOneWithoutOrgInput>;
  adGroupCreatives?: InputMaybe<AdGroupCreativesCreateManyWithoutOrgInput>;
  advertiserCampaignOrders?: InputMaybe<CampaignOrderCreateManyWithoutAdvertiserInput>;
  audiences?: InputMaybe<AudienceCreateManyWithoutOrgsInput>;
  brands?: InputMaybe<BrandCreateManyInput>;
  campaignOrders?: InputMaybe<CampaignOrderCreateManyWithoutOrgsInput>;
  campaigns?: InputMaybe<CampaignCreateManyWithoutOrgsInput>;
  chatWootId?: InputMaybe<Scalars['String']>;
  config?: InputMaybe<OrgConfigCreateOneWithoutOrgsInput>;
  cpm?: InputMaybe<Scalars['String']>;
  customers?: InputMaybe<CustomerCreateManyWithoutOrgInput>;
  dataConfig?: InputMaybe<OrgDataConfigCreateOneWithoutOrgsInput>;
  description?: InputMaybe<Scalars['String']>;
  domain?: InputMaybe<Scalars['String']>;
  event?: InputMaybe<EventCreateOneWithoutOrgsInput>;
  eventsTarget?: InputMaybe<EventsTargetCreateOneWithoutOrgsInput>;
  iabCategoryGroup?: InputMaybe<IabCategoryGroupCreateManyWithoutOrgsInput>;
  isAllTimeFiltered?: InputMaybe<Scalars['Boolean']>;
  level: PartnerLevel;
  locations?: InputMaybe<LocationCreateManyInput>;
  logo?: InputMaybe<MediaCreateOneWithoutOrgInput>;
  loyaltyCampaigns?: InputMaybe<LoyaltyCampaignCreateManyWithoutOrgInput>;
  media?: InputMaybe<MediaCreateManyWithoutSharedWithInput>;
  name: Scalars['String'];
  offers?: InputMaybe<OfferCreateManyWithoutOrgInput>;
  paidSearchSummary?: InputMaybe<PaidSearchSummaryCreateOneWithoutOrgInput>;
  paidSearchSummarySharedOrgs?: InputMaybe<PaidSearchSummaryCreateManyWithoutSharedOrgsInput>;
  parentOrg?: InputMaybe<OrgCreateManyInput>;
  paymentConfig?: InputMaybe<PaymentConfigCreateOneWithoutOrgsInput>;
  phone?: InputMaybe<Scalars['String']>;
  posConfig?: InputMaybe<PosConfigCreateManyWithoutOrgInput>;
  regionGroup?: InputMaybe<RegionGroupCreateManyWithoutOrgsInput>;
  roles?: InputMaybe<RoleCreateManyWithoutOrgInput>;
  salesforceId?: InputMaybe<Scalars['String']>;
  sendEmailConfig?: InputMaybe<SendEmailConfigCreateOneWithoutOrgsInput>;
  signInLogo?: InputMaybe<MediaCreateOneInput>;
  tableConfig?: InputMaybe<OrgTableConfigCreateOneWithoutOrgsInput>;
  tagsConfig?: InputMaybe<OrgTagsConfigCreateOneWithoutOrgsInput>;
  themeConfig?: InputMaybe<OrgThemeConfigCreateOneWithoutOrgsInput>;
  website?: InputMaybe<Scalars['String']>;
  zone?: InputMaybe<Scalars['String']>;
};

export type OrgCreateWithoutPaidSearchSummaryInput = {
  SEOSummary?: InputMaybe<OrgSeoSummaryCreateOneWithoutOrgInput>;
  adGroupCreatives?: InputMaybe<AdGroupCreativesCreateManyWithoutOrgInput>;
  advertiserCampaignOrders?: InputMaybe<CampaignOrderCreateManyWithoutAdvertiserInput>;
  audiences?: InputMaybe<AudienceCreateManyWithoutOrgsInput>;
  brands?: InputMaybe<BrandCreateManyInput>;
  campaignOrders?: InputMaybe<CampaignOrderCreateManyWithoutOrgsInput>;
  campaigns?: InputMaybe<CampaignCreateManyWithoutOrgsInput>;
  chatWootId?: InputMaybe<Scalars['String']>;
  config?: InputMaybe<OrgConfigCreateOneWithoutOrgsInput>;
  cpm?: InputMaybe<Scalars['String']>;
  customers?: InputMaybe<CustomerCreateManyWithoutOrgInput>;
  dataConfig?: InputMaybe<OrgDataConfigCreateOneWithoutOrgsInput>;
  description?: InputMaybe<Scalars['String']>;
  domain?: InputMaybe<Scalars['String']>;
  event?: InputMaybe<EventCreateOneWithoutOrgsInput>;
  eventsTarget?: InputMaybe<EventsTargetCreateOneWithoutOrgsInput>;
  iabCategoryGroup?: InputMaybe<IabCategoryGroupCreateManyWithoutOrgsInput>;
  isAllTimeFiltered?: InputMaybe<Scalars['Boolean']>;
  level: PartnerLevel;
  locations?: InputMaybe<LocationCreateManyInput>;
  logo?: InputMaybe<MediaCreateOneWithoutOrgInput>;
  loyaltyCampaigns?: InputMaybe<LoyaltyCampaignCreateManyWithoutOrgInput>;
  media?: InputMaybe<MediaCreateManyWithoutSharedWithInput>;
  name: Scalars['String'];
  offers?: InputMaybe<OfferCreateManyWithoutOrgInput>;
  orgSummary?: InputMaybe<OrgSummaryCreateOneWithoutOrgInput>;
  paidSearchSummarySharedOrgs?: InputMaybe<PaidSearchSummaryCreateManyWithoutSharedOrgsInput>;
  parentOrg?: InputMaybe<OrgCreateManyInput>;
  paymentConfig?: InputMaybe<PaymentConfigCreateOneWithoutOrgsInput>;
  phone?: InputMaybe<Scalars['String']>;
  posConfig?: InputMaybe<PosConfigCreateManyWithoutOrgInput>;
  regionGroup?: InputMaybe<RegionGroupCreateManyWithoutOrgsInput>;
  roles?: InputMaybe<RoleCreateManyWithoutOrgInput>;
  salesforceId?: InputMaybe<Scalars['String']>;
  sendEmailConfig?: InputMaybe<SendEmailConfigCreateOneWithoutOrgsInput>;
  signInLogo?: InputMaybe<MediaCreateOneInput>;
  tableConfig?: InputMaybe<OrgTableConfigCreateOneWithoutOrgsInput>;
  tagsConfig?: InputMaybe<OrgTagsConfigCreateOneWithoutOrgsInput>;
  themeConfig?: InputMaybe<OrgThemeConfigCreateOneWithoutOrgsInput>;
  website?: InputMaybe<Scalars['String']>;
  zone?: InputMaybe<Scalars['String']>;
};

export type OrgCreateWithoutPaidSearchSummarySharedOrgsInput = {
  SEOSummary?: InputMaybe<OrgSeoSummaryCreateOneWithoutOrgInput>;
  adGroupCreatives?: InputMaybe<AdGroupCreativesCreateManyWithoutOrgInput>;
  advertiserCampaignOrders?: InputMaybe<CampaignOrderCreateManyWithoutAdvertiserInput>;
  audiences?: InputMaybe<AudienceCreateManyWithoutOrgsInput>;
  brands?: InputMaybe<BrandCreateManyInput>;
  campaignOrders?: InputMaybe<CampaignOrderCreateManyWithoutOrgsInput>;
  campaigns?: InputMaybe<CampaignCreateManyWithoutOrgsInput>;
  chatWootId?: InputMaybe<Scalars['String']>;
  config?: InputMaybe<OrgConfigCreateOneWithoutOrgsInput>;
  cpm?: InputMaybe<Scalars['String']>;
  customers?: InputMaybe<CustomerCreateManyWithoutOrgInput>;
  dataConfig?: InputMaybe<OrgDataConfigCreateOneWithoutOrgsInput>;
  description?: InputMaybe<Scalars['String']>;
  domain?: InputMaybe<Scalars['String']>;
  event?: InputMaybe<EventCreateOneWithoutOrgsInput>;
  eventsTarget?: InputMaybe<EventsTargetCreateOneWithoutOrgsInput>;
  iabCategoryGroup?: InputMaybe<IabCategoryGroupCreateManyWithoutOrgsInput>;
  isAllTimeFiltered?: InputMaybe<Scalars['Boolean']>;
  level: PartnerLevel;
  locations?: InputMaybe<LocationCreateManyInput>;
  logo?: InputMaybe<MediaCreateOneWithoutOrgInput>;
  loyaltyCampaigns?: InputMaybe<LoyaltyCampaignCreateManyWithoutOrgInput>;
  media?: InputMaybe<MediaCreateManyWithoutSharedWithInput>;
  name: Scalars['String'];
  offers?: InputMaybe<OfferCreateManyWithoutOrgInput>;
  orgSummary?: InputMaybe<OrgSummaryCreateOneWithoutOrgInput>;
  paidSearchSummary?: InputMaybe<PaidSearchSummaryCreateOneWithoutOrgInput>;
  parentOrg?: InputMaybe<OrgCreateManyInput>;
  paymentConfig?: InputMaybe<PaymentConfigCreateOneWithoutOrgsInput>;
  phone?: InputMaybe<Scalars['String']>;
  posConfig?: InputMaybe<PosConfigCreateManyWithoutOrgInput>;
  regionGroup?: InputMaybe<RegionGroupCreateManyWithoutOrgsInput>;
  roles?: InputMaybe<RoleCreateManyWithoutOrgInput>;
  salesforceId?: InputMaybe<Scalars['String']>;
  sendEmailConfig?: InputMaybe<SendEmailConfigCreateOneWithoutOrgsInput>;
  signInLogo?: InputMaybe<MediaCreateOneInput>;
  tableConfig?: InputMaybe<OrgTableConfigCreateOneWithoutOrgsInput>;
  tagsConfig?: InputMaybe<OrgTagsConfigCreateOneWithoutOrgsInput>;
  themeConfig?: InputMaybe<OrgThemeConfigCreateOneWithoutOrgsInput>;
  website?: InputMaybe<Scalars['String']>;
  zone?: InputMaybe<Scalars['String']>;
};

export type OrgCreateWithoutRegionGroupInput = {
  SEOSummary?: InputMaybe<OrgSeoSummaryCreateOneWithoutOrgInput>;
  adGroupCreatives?: InputMaybe<AdGroupCreativesCreateManyWithoutOrgInput>;
  advertiserCampaignOrders?: InputMaybe<CampaignOrderCreateManyWithoutAdvertiserInput>;
  audiences?: InputMaybe<AudienceCreateManyWithoutOrgsInput>;
  brands?: InputMaybe<BrandCreateManyInput>;
  campaignOrders?: InputMaybe<CampaignOrderCreateManyWithoutOrgsInput>;
  campaigns?: InputMaybe<CampaignCreateManyWithoutOrgsInput>;
  chatWootId?: InputMaybe<Scalars['String']>;
  config?: InputMaybe<OrgConfigCreateOneWithoutOrgsInput>;
  cpm?: InputMaybe<Scalars['String']>;
  customers?: InputMaybe<CustomerCreateManyWithoutOrgInput>;
  dataConfig?: InputMaybe<OrgDataConfigCreateOneWithoutOrgsInput>;
  description?: InputMaybe<Scalars['String']>;
  domain?: InputMaybe<Scalars['String']>;
  event?: InputMaybe<EventCreateOneWithoutOrgsInput>;
  eventsTarget?: InputMaybe<EventsTargetCreateOneWithoutOrgsInput>;
  iabCategoryGroup?: InputMaybe<IabCategoryGroupCreateManyWithoutOrgsInput>;
  isAllTimeFiltered?: InputMaybe<Scalars['Boolean']>;
  level: PartnerLevel;
  locations?: InputMaybe<LocationCreateManyInput>;
  logo?: InputMaybe<MediaCreateOneWithoutOrgInput>;
  loyaltyCampaigns?: InputMaybe<LoyaltyCampaignCreateManyWithoutOrgInput>;
  media?: InputMaybe<MediaCreateManyWithoutSharedWithInput>;
  name: Scalars['String'];
  offers?: InputMaybe<OfferCreateManyWithoutOrgInput>;
  orgSummary?: InputMaybe<OrgSummaryCreateOneWithoutOrgInput>;
  paidSearchSummary?: InputMaybe<PaidSearchSummaryCreateOneWithoutOrgInput>;
  paidSearchSummarySharedOrgs?: InputMaybe<PaidSearchSummaryCreateManyWithoutSharedOrgsInput>;
  parentOrg?: InputMaybe<OrgCreateManyInput>;
  paymentConfig?: InputMaybe<PaymentConfigCreateOneWithoutOrgsInput>;
  phone?: InputMaybe<Scalars['String']>;
  posConfig?: InputMaybe<PosConfigCreateManyWithoutOrgInput>;
  roles?: InputMaybe<RoleCreateManyWithoutOrgInput>;
  salesforceId?: InputMaybe<Scalars['String']>;
  sendEmailConfig?: InputMaybe<SendEmailConfigCreateOneWithoutOrgsInput>;
  signInLogo?: InputMaybe<MediaCreateOneInput>;
  tableConfig?: InputMaybe<OrgTableConfigCreateOneWithoutOrgsInput>;
  tagsConfig?: InputMaybe<OrgTagsConfigCreateOneWithoutOrgsInput>;
  themeConfig?: InputMaybe<OrgThemeConfigCreateOneWithoutOrgsInput>;
  website?: InputMaybe<Scalars['String']>;
  zone?: InputMaybe<Scalars['String']>;
};

export type OrgCreateWithoutRolesInput = {
  SEOSummary?: InputMaybe<OrgSeoSummaryCreateOneWithoutOrgInput>;
  adGroupCreatives?: InputMaybe<AdGroupCreativesCreateManyWithoutOrgInput>;
  advertiserCampaignOrders?: InputMaybe<CampaignOrderCreateManyWithoutAdvertiserInput>;
  audiences?: InputMaybe<AudienceCreateManyWithoutOrgsInput>;
  brands?: InputMaybe<BrandCreateManyInput>;
  campaignOrders?: InputMaybe<CampaignOrderCreateManyWithoutOrgsInput>;
  campaigns?: InputMaybe<CampaignCreateManyWithoutOrgsInput>;
  chatWootId?: InputMaybe<Scalars['String']>;
  config?: InputMaybe<OrgConfigCreateOneWithoutOrgsInput>;
  cpm?: InputMaybe<Scalars['String']>;
  customers?: InputMaybe<CustomerCreateManyWithoutOrgInput>;
  dataConfig?: InputMaybe<OrgDataConfigCreateOneWithoutOrgsInput>;
  description?: InputMaybe<Scalars['String']>;
  domain?: InputMaybe<Scalars['String']>;
  event?: InputMaybe<EventCreateOneWithoutOrgsInput>;
  eventsTarget?: InputMaybe<EventsTargetCreateOneWithoutOrgsInput>;
  iabCategoryGroup?: InputMaybe<IabCategoryGroupCreateManyWithoutOrgsInput>;
  isAllTimeFiltered?: InputMaybe<Scalars['Boolean']>;
  level: PartnerLevel;
  locations?: InputMaybe<LocationCreateManyInput>;
  logo?: InputMaybe<MediaCreateOneWithoutOrgInput>;
  loyaltyCampaigns?: InputMaybe<LoyaltyCampaignCreateManyWithoutOrgInput>;
  media?: InputMaybe<MediaCreateManyWithoutSharedWithInput>;
  name: Scalars['String'];
  offers?: InputMaybe<OfferCreateManyWithoutOrgInput>;
  orgSummary?: InputMaybe<OrgSummaryCreateOneWithoutOrgInput>;
  paidSearchSummary?: InputMaybe<PaidSearchSummaryCreateOneWithoutOrgInput>;
  paidSearchSummarySharedOrgs?: InputMaybe<PaidSearchSummaryCreateManyWithoutSharedOrgsInput>;
  parentOrg?: InputMaybe<OrgCreateManyInput>;
  paymentConfig?: InputMaybe<PaymentConfigCreateOneWithoutOrgsInput>;
  phone?: InputMaybe<Scalars['String']>;
  posConfig?: InputMaybe<PosConfigCreateManyWithoutOrgInput>;
  regionGroup?: InputMaybe<RegionGroupCreateManyWithoutOrgsInput>;
  salesforceId?: InputMaybe<Scalars['String']>;
  sendEmailConfig?: InputMaybe<SendEmailConfigCreateOneWithoutOrgsInput>;
  signInLogo?: InputMaybe<MediaCreateOneInput>;
  tableConfig?: InputMaybe<OrgTableConfigCreateOneWithoutOrgsInput>;
  tagsConfig?: InputMaybe<OrgTagsConfigCreateOneWithoutOrgsInput>;
  themeConfig?: InputMaybe<OrgThemeConfigCreateOneWithoutOrgsInput>;
  website?: InputMaybe<Scalars['String']>;
  zone?: InputMaybe<Scalars['String']>;
};

export type OrgCreateWithoutSeoSummaryInput = {
  adGroupCreatives?: InputMaybe<AdGroupCreativesCreateManyWithoutOrgInput>;
  advertiserCampaignOrders?: InputMaybe<CampaignOrderCreateManyWithoutAdvertiserInput>;
  audiences?: InputMaybe<AudienceCreateManyWithoutOrgsInput>;
  brands?: InputMaybe<BrandCreateManyInput>;
  campaignOrders?: InputMaybe<CampaignOrderCreateManyWithoutOrgsInput>;
  campaigns?: InputMaybe<CampaignCreateManyWithoutOrgsInput>;
  chatWootId?: InputMaybe<Scalars['String']>;
  config?: InputMaybe<OrgConfigCreateOneWithoutOrgsInput>;
  cpm?: InputMaybe<Scalars['String']>;
  customers?: InputMaybe<CustomerCreateManyWithoutOrgInput>;
  dataConfig?: InputMaybe<OrgDataConfigCreateOneWithoutOrgsInput>;
  description?: InputMaybe<Scalars['String']>;
  domain?: InputMaybe<Scalars['String']>;
  event?: InputMaybe<EventCreateOneWithoutOrgsInput>;
  eventsTarget?: InputMaybe<EventsTargetCreateOneWithoutOrgsInput>;
  iabCategoryGroup?: InputMaybe<IabCategoryGroupCreateManyWithoutOrgsInput>;
  isAllTimeFiltered?: InputMaybe<Scalars['Boolean']>;
  level: PartnerLevel;
  locations?: InputMaybe<LocationCreateManyInput>;
  logo?: InputMaybe<MediaCreateOneWithoutOrgInput>;
  loyaltyCampaigns?: InputMaybe<LoyaltyCampaignCreateManyWithoutOrgInput>;
  media?: InputMaybe<MediaCreateManyWithoutSharedWithInput>;
  name: Scalars['String'];
  offers?: InputMaybe<OfferCreateManyWithoutOrgInput>;
  orgSummary?: InputMaybe<OrgSummaryCreateOneWithoutOrgInput>;
  paidSearchSummary?: InputMaybe<PaidSearchSummaryCreateOneWithoutOrgInput>;
  paidSearchSummarySharedOrgs?: InputMaybe<PaidSearchSummaryCreateManyWithoutSharedOrgsInput>;
  parentOrg?: InputMaybe<OrgCreateManyInput>;
  paymentConfig?: InputMaybe<PaymentConfigCreateOneWithoutOrgsInput>;
  phone?: InputMaybe<Scalars['String']>;
  posConfig?: InputMaybe<PosConfigCreateManyWithoutOrgInput>;
  regionGroup?: InputMaybe<RegionGroupCreateManyWithoutOrgsInput>;
  roles?: InputMaybe<RoleCreateManyWithoutOrgInput>;
  salesforceId?: InputMaybe<Scalars['String']>;
  sendEmailConfig?: InputMaybe<SendEmailConfigCreateOneWithoutOrgsInput>;
  signInLogo?: InputMaybe<MediaCreateOneInput>;
  tableConfig?: InputMaybe<OrgTableConfigCreateOneWithoutOrgsInput>;
  tagsConfig?: InputMaybe<OrgTagsConfigCreateOneWithoutOrgsInput>;
  themeConfig?: InputMaybe<OrgThemeConfigCreateOneWithoutOrgsInput>;
  website?: InputMaybe<Scalars['String']>;
  zone?: InputMaybe<Scalars['String']>;
};

export type OrgCreateWithoutTagsConfigInput = {
  SEOSummary?: InputMaybe<OrgSeoSummaryCreateOneWithoutOrgInput>;
  adGroupCreatives?: InputMaybe<AdGroupCreativesCreateManyWithoutOrgInput>;
  advertiserCampaignOrders?: InputMaybe<CampaignOrderCreateManyWithoutAdvertiserInput>;
  audiences?: InputMaybe<AudienceCreateManyWithoutOrgsInput>;
  brands?: InputMaybe<BrandCreateManyInput>;
  campaignOrders?: InputMaybe<CampaignOrderCreateManyWithoutOrgsInput>;
  campaigns?: InputMaybe<CampaignCreateManyWithoutOrgsInput>;
  chatWootId?: InputMaybe<Scalars['String']>;
  config?: InputMaybe<OrgConfigCreateOneWithoutOrgsInput>;
  cpm?: InputMaybe<Scalars['String']>;
  customers?: InputMaybe<CustomerCreateManyWithoutOrgInput>;
  dataConfig?: InputMaybe<OrgDataConfigCreateOneWithoutOrgsInput>;
  description?: InputMaybe<Scalars['String']>;
  domain?: InputMaybe<Scalars['String']>;
  event?: InputMaybe<EventCreateOneWithoutOrgsInput>;
  eventsTarget?: InputMaybe<EventsTargetCreateOneWithoutOrgsInput>;
  iabCategoryGroup?: InputMaybe<IabCategoryGroupCreateManyWithoutOrgsInput>;
  isAllTimeFiltered?: InputMaybe<Scalars['Boolean']>;
  level: PartnerLevel;
  locations?: InputMaybe<LocationCreateManyInput>;
  logo?: InputMaybe<MediaCreateOneWithoutOrgInput>;
  loyaltyCampaigns?: InputMaybe<LoyaltyCampaignCreateManyWithoutOrgInput>;
  media?: InputMaybe<MediaCreateManyWithoutSharedWithInput>;
  name: Scalars['String'];
  offers?: InputMaybe<OfferCreateManyWithoutOrgInput>;
  orgSummary?: InputMaybe<OrgSummaryCreateOneWithoutOrgInput>;
  paidSearchSummary?: InputMaybe<PaidSearchSummaryCreateOneWithoutOrgInput>;
  paidSearchSummarySharedOrgs?: InputMaybe<PaidSearchSummaryCreateManyWithoutSharedOrgsInput>;
  parentOrg?: InputMaybe<OrgCreateManyInput>;
  paymentConfig?: InputMaybe<PaymentConfigCreateOneWithoutOrgsInput>;
  phone?: InputMaybe<Scalars['String']>;
  posConfig?: InputMaybe<PosConfigCreateManyWithoutOrgInput>;
  regionGroup?: InputMaybe<RegionGroupCreateManyWithoutOrgsInput>;
  roles?: InputMaybe<RoleCreateManyWithoutOrgInput>;
  salesforceId?: InputMaybe<Scalars['String']>;
  sendEmailConfig?: InputMaybe<SendEmailConfigCreateOneWithoutOrgsInput>;
  signInLogo?: InputMaybe<MediaCreateOneInput>;
  tableConfig?: InputMaybe<OrgTableConfigCreateOneWithoutOrgsInput>;
  themeConfig?: InputMaybe<OrgThemeConfigCreateOneWithoutOrgsInput>;
  website?: InputMaybe<Scalars['String']>;
  zone?: InputMaybe<Scalars['String']>;
};

export type OrgDataConfig = {
  __typename?: 'OrgDataConfig';
  activeToken?: Maybe<Scalars['String']>;
  appIds: Array<Scalars['String']>;
  attributionWindow?: Maybe<Scalars['Int']>;
  bing?: Maybe<BingConfig>;
  clientSecret?: Maybe<Scalars['String']>;
  dspAdvertiserId?: Maybe<Scalars['String']>;
  googleAnalytics?: Maybe<GoogleAnalytics>;
  googleCustomerId?: Maybe<Scalars['String']>;
  menuId?: Maybe<Scalars['String']>;
  orgs?: Maybe<Array<Org>>;
  paidSearchDataConfig?: Maybe<PaidSearchDataConfig>;
  reTargeting: Scalars['Boolean'];
  retargetingAudience?: Maybe<Audience>;
  roasFormat?: Maybe<RoasFormat>;
  segment?: Maybe<Scalars['Boolean']>;
  seo?: Maybe<Scalars['Boolean']>;
  seoAudience?: Maybe<Audience>;
  storageBucket?: Maybe<Scalars['String']>;
  tokenEnabled?: Maybe<Scalars['Boolean']>;
  tradeDeskIdentifier?: Maybe<Scalars['String']>;
};


export type OrgDataConfigOrgsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<OrgOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<OrgWhereInput>;
};

export type OrgDataConfigCreateManyWithoutGoogleAnalyticsInput = {
  create?: InputMaybe<Array<OrgDataConfigCreateWithoutGoogleAnalyticsInput>>;
};

export type OrgDataConfigCreateManyWithoutRetargetingAudienceInput = {
  create?: InputMaybe<Array<OrgDataConfigCreateWithoutRetargetingAudienceInput>>;
};

export type OrgDataConfigCreateOneWithoutOrgsInput = {
  create?: InputMaybe<OrgDataConfigCreateWithoutOrgsInput>;
};

export type OrgDataConfigCreateWithoutGoogleAnalyticsInput = {
  activeToken?: InputMaybe<Scalars['String']>;
  appIds?: InputMaybe<OrgDataConfigCreateappIdsInput>;
  attributionWindow?: InputMaybe<Scalars['Int']>;
  bing?: InputMaybe<BingConfigCreateOneWithoutOrgDataConfigsInput>;
  clientSecret?: InputMaybe<Scalars['String']>;
  dspAdvertiserId?: InputMaybe<Scalars['String']>;
  googleCustomerId?: InputMaybe<Scalars['String']>;
  menuId?: InputMaybe<Scalars['String']>;
  orgs?: InputMaybe<OrgCreateManyWithoutDataConfigInput>;
  paidSearchDataConfig?: InputMaybe<PaidSearchDataConfigCreateOneWithoutOrgDataConfigsInput>;
  reTargeting?: InputMaybe<Scalars['Boolean']>;
  retargetingAudience?: InputMaybe<AudienceCreateOneWithoutRetargetAudiencesInput>;
  roasFormat?: InputMaybe<RoasFormat>;
  segment?: InputMaybe<Scalars['Boolean']>;
  seo?: InputMaybe<Scalars['Boolean']>;
  seoAudience?: InputMaybe<AudienceCreateOneInput>;
  storageBucket?: InputMaybe<Scalars['String']>;
  tokenEnabled?: InputMaybe<Scalars['Boolean']>;
  tradeDeskIdentifier?: InputMaybe<Scalars['String']>;
};

export type OrgDataConfigCreateWithoutOrgsInput = {
  activeToken?: InputMaybe<Scalars['String']>;
  appIds?: InputMaybe<OrgDataConfigCreateappIdsInput>;
  attributionWindow?: InputMaybe<Scalars['Int']>;
  bing?: InputMaybe<BingConfigCreateOneWithoutOrgDataConfigsInput>;
  clientSecret?: InputMaybe<Scalars['String']>;
  dspAdvertiserId?: InputMaybe<Scalars['String']>;
  googleAnalytics?: InputMaybe<GoogleAnalyticsCreateOneWithoutOrgDataConfigsInput>;
  googleCustomerId?: InputMaybe<Scalars['String']>;
  menuId?: InputMaybe<Scalars['String']>;
  paidSearchDataConfig?: InputMaybe<PaidSearchDataConfigCreateOneWithoutOrgDataConfigsInput>;
  reTargeting?: InputMaybe<Scalars['Boolean']>;
  retargetingAudience?: InputMaybe<AudienceCreateOneWithoutRetargetAudiencesInput>;
  roasFormat?: InputMaybe<RoasFormat>;
  segment?: InputMaybe<Scalars['Boolean']>;
  seo?: InputMaybe<Scalars['Boolean']>;
  seoAudience?: InputMaybe<AudienceCreateOneInput>;
  storageBucket?: InputMaybe<Scalars['String']>;
  tokenEnabled?: InputMaybe<Scalars['Boolean']>;
  tradeDeskIdentifier?: InputMaybe<Scalars['String']>;
};

export type OrgDataConfigCreateWithoutRetargetingAudienceInput = {
  activeToken?: InputMaybe<Scalars['String']>;
  appIds?: InputMaybe<OrgDataConfigCreateappIdsInput>;
  attributionWindow?: InputMaybe<Scalars['Int']>;
  bing?: InputMaybe<BingConfigCreateOneWithoutOrgDataConfigsInput>;
  clientSecret?: InputMaybe<Scalars['String']>;
  dspAdvertiserId?: InputMaybe<Scalars['String']>;
  googleAnalytics?: InputMaybe<GoogleAnalyticsCreateOneWithoutOrgDataConfigsInput>;
  googleCustomerId?: InputMaybe<Scalars['String']>;
  menuId?: InputMaybe<Scalars['String']>;
  orgs?: InputMaybe<OrgCreateManyWithoutDataConfigInput>;
  paidSearchDataConfig?: InputMaybe<PaidSearchDataConfigCreateOneWithoutOrgDataConfigsInput>;
  reTargeting?: InputMaybe<Scalars['Boolean']>;
  roasFormat?: InputMaybe<RoasFormat>;
  segment?: InputMaybe<Scalars['Boolean']>;
  seo?: InputMaybe<Scalars['Boolean']>;
  seoAudience?: InputMaybe<AudienceCreateOneInput>;
  storageBucket?: InputMaybe<Scalars['String']>;
  tokenEnabled?: InputMaybe<Scalars['Boolean']>;
  tradeDeskIdentifier?: InputMaybe<Scalars['String']>;
};

export type OrgDataConfigCreateappIdsInput = {
  set?: InputMaybe<Array<Scalars['String']>>;
};

export enum OrgDataConfigOrderByInput {
  ActiveTokenAsc = 'activeToken_ASC',
  ActiveTokenDesc = 'activeToken_DESC',
  AttributionWindowAsc = 'attributionWindow_ASC',
  AttributionWindowDesc = 'attributionWindow_DESC',
  ClientSecretAsc = 'clientSecret_ASC',
  ClientSecretDesc = 'clientSecret_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DspAdvertiserIdAsc = 'dspAdvertiserId_ASC',
  DspAdvertiserIdDesc = 'dspAdvertiserId_DESC',
  GoogleCustomerIdAsc = 'googleCustomerId_ASC',
  GoogleCustomerIdDesc = 'googleCustomerId_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  MenuIdAsc = 'menuId_ASC',
  MenuIdDesc = 'menuId_DESC',
  ReTargetingAsc = 'reTargeting_ASC',
  ReTargetingDesc = 'reTargeting_DESC',
  RoasFormatAsc = 'roasFormat_ASC',
  RoasFormatDesc = 'roasFormat_DESC',
  SegmentAsc = 'segment_ASC',
  SegmentDesc = 'segment_DESC',
  SeoAsc = 'seo_ASC',
  SeoDesc = 'seo_DESC',
  StorageBucketAsc = 'storageBucket_ASC',
  StorageBucketDesc = 'storageBucket_DESC',
  TokenEnabledAsc = 'tokenEnabled_ASC',
  TokenEnabledDesc = 'tokenEnabled_DESC',
  TradeDeskIdentifierAsc = 'tradeDeskIdentifier_ASC',
  TradeDeskIdentifierDesc = 'tradeDeskIdentifier_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC'
}

export type OrgDataConfigUpdateManyWithoutGoogleAnalyticsInput = {
  create?: InputMaybe<Array<OrgDataConfigCreateWithoutGoogleAnalyticsInput>>;
};

export type OrgDataConfigUpdateManyWithoutRetargetingAudienceInput = {
  create?: InputMaybe<Array<OrgDataConfigCreateWithoutRetargetingAudienceInput>>;
};

export type OrgDataConfigUpdateOneWithoutOrgsInput = {
  create?: InputMaybe<OrgDataConfigCreateWithoutOrgsInput>;
  delete?: InputMaybe<Scalars['Boolean']>;
  disconnect?: InputMaybe<Scalars['Boolean']>;
  update?: InputMaybe<OrgDataConfigUpdateWithoutOrgsDataInput>;
  upsert?: InputMaybe<OrgDataConfigUpsertWithoutOrgsInput>;
};

export type OrgDataConfigUpdateWithoutOrgsDataInput = {
  activeToken?: InputMaybe<Scalars['String']>;
  appIds?: InputMaybe<OrgDataConfigUpdateappIdsInput>;
  attributionWindow?: InputMaybe<Scalars['Int']>;
  bing?: InputMaybe<BingConfigUpdateOneWithoutOrgDataConfigsInput>;
  clientSecret?: InputMaybe<Scalars['String']>;
  dspAdvertiserId?: InputMaybe<Scalars['String']>;
  googleAnalytics?: InputMaybe<GoogleAnalyticsUpdateOneWithoutOrgDataConfigsInput>;
  googleCustomerId?: InputMaybe<Scalars['String']>;
  menuId?: InputMaybe<Scalars['String']>;
  paidSearchDataConfig?: InputMaybe<PaidSearchDataConfigUpdateOneWithoutOrgDataConfigsInput>;
  reTargeting?: InputMaybe<Scalars['Boolean']>;
  retargetingAudience?: InputMaybe<AudienceUpdateOneWithoutRetargetAudiencesInput>;
  roasFormat?: InputMaybe<RoasFormat>;
  segment?: InputMaybe<Scalars['Boolean']>;
  seo?: InputMaybe<Scalars['Boolean']>;
  seoAudience?: InputMaybe<AudienceUpdateOneInput>;
  storageBucket?: InputMaybe<Scalars['String']>;
  tokenEnabled?: InputMaybe<Scalars['Boolean']>;
  tradeDeskIdentifier?: InputMaybe<Scalars['String']>;
};

export type OrgDataConfigUpdateappIdsInput = {
  set?: InputMaybe<Array<Scalars['String']>>;
};

export type OrgDataConfigUpsertWithoutOrgsInput = {
  create: OrgDataConfigCreateWithoutOrgsInput;
  update: OrgDataConfigUpdateWithoutOrgsDataInput;
};

export type OrgDataConfigWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<OrgDataConfigWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<OrgDataConfigWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<OrgDataConfigWhereInput>>;
  activeToken?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  activeToken_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  activeToken_ends_with?: InputMaybe<Scalars['String']>;
  /** All values greater than the given value. */
  activeToken_gt?: InputMaybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  activeToken_gte?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  activeToken_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  activeToken_lt?: InputMaybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  activeToken_lte?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  activeToken_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  activeToken_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string. */
  activeToken_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  activeToken_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  activeToken_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  activeToken_starts_with?: InputMaybe<Scalars['String']>;
  attributionWindow?: InputMaybe<Scalars['Int']>;
  /** All values greater than the given value. */
  attributionWindow_gt?: InputMaybe<Scalars['Int']>;
  /** All values greater than or equal the given value. */
  attributionWindow_gte?: InputMaybe<Scalars['Int']>;
  /** All values that are contained in given list. */
  attributionWindow_in?: InputMaybe<Array<Scalars['Int']>>;
  /** All values less than the given value. */
  attributionWindow_lt?: InputMaybe<Scalars['Int']>;
  /** All values less than or equal the given value. */
  attributionWindow_lte?: InputMaybe<Scalars['Int']>;
  /** All values that are not equal to given value. */
  attributionWindow_not?: InputMaybe<Scalars['Int']>;
  /** All values that are not contained in given list. */
  attributionWindow_not_in?: InputMaybe<Array<Scalars['Int']>>;
  bing?: InputMaybe<BingConfigWhereInput>;
  clientSecret?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  clientSecret_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  clientSecret_ends_with?: InputMaybe<Scalars['String']>;
  /** All values greater than the given value. */
  clientSecret_gt?: InputMaybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  clientSecret_gte?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  clientSecret_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  clientSecret_lt?: InputMaybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  clientSecret_lte?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  clientSecret_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  clientSecret_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string. */
  clientSecret_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  clientSecret_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  clientSecret_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  clientSecret_starts_with?: InputMaybe<Scalars['String']>;
  dspAdvertiserId?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  dspAdvertiserId_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  dspAdvertiserId_ends_with?: InputMaybe<Scalars['String']>;
  /** All values greater than the given value. */
  dspAdvertiserId_gt?: InputMaybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  dspAdvertiserId_gte?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  dspAdvertiserId_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  dspAdvertiserId_lt?: InputMaybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  dspAdvertiserId_lte?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  dspAdvertiserId_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  dspAdvertiserId_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string. */
  dspAdvertiserId_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  dspAdvertiserId_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  dspAdvertiserId_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  dspAdvertiserId_starts_with?: InputMaybe<Scalars['String']>;
  googleAnalytics?: InputMaybe<GoogleAnalyticsWhereInput>;
  googleCustomerId?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  googleCustomerId_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  googleCustomerId_ends_with?: InputMaybe<Scalars['String']>;
  /** All values greater than the given value. */
  googleCustomerId_gt?: InputMaybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  googleCustomerId_gte?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  googleCustomerId_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  googleCustomerId_lt?: InputMaybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  googleCustomerId_lte?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  googleCustomerId_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  googleCustomerId_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string. */
  googleCustomerId_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  googleCustomerId_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  googleCustomerId_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  googleCustomerId_starts_with?: InputMaybe<Scalars['String']>;
  menuId?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  menuId_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  menuId_ends_with?: InputMaybe<Scalars['String']>;
  /** All values greater than the given value. */
  menuId_gt?: InputMaybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  menuId_gte?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  menuId_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  menuId_lt?: InputMaybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  menuId_lte?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  menuId_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  menuId_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string. */
  menuId_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  menuId_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  menuId_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  menuId_starts_with?: InputMaybe<Scalars['String']>;
  orgs_every?: InputMaybe<OrgWhereInput>;
  orgs_none?: InputMaybe<OrgWhereInput>;
  orgs_some?: InputMaybe<OrgWhereInput>;
  paidSearchDataConfig?: InputMaybe<PaidSearchDataConfigWhereInput>;
  reTargeting?: InputMaybe<Scalars['Boolean']>;
  /** All values that are not equal to given value. */
  reTargeting_not?: InputMaybe<Scalars['Boolean']>;
  retargetingAudience?: InputMaybe<AudienceWhereInput>;
  roasFormat?: InputMaybe<RoasFormat>;
  /** All values that are contained in given list. */
  roasFormat_in?: InputMaybe<Array<RoasFormat>>;
  /** All values that are not equal to given value. */
  roasFormat_not?: InputMaybe<RoasFormat>;
  /** All values that are not contained in given list. */
  roasFormat_not_in?: InputMaybe<Array<RoasFormat>>;
  segment?: InputMaybe<Scalars['Boolean']>;
  /** All values that are not equal to given value. */
  segment_not?: InputMaybe<Scalars['Boolean']>;
  seo?: InputMaybe<Scalars['Boolean']>;
  seoAudience?: InputMaybe<AudienceWhereInput>;
  /** All values that are not equal to given value. */
  seo_not?: InputMaybe<Scalars['Boolean']>;
  storageBucket?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  storageBucket_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  storageBucket_ends_with?: InputMaybe<Scalars['String']>;
  /** All values greater than the given value. */
  storageBucket_gt?: InputMaybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  storageBucket_gte?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  storageBucket_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  storageBucket_lt?: InputMaybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  storageBucket_lte?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  storageBucket_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  storageBucket_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string. */
  storageBucket_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  storageBucket_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  storageBucket_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  storageBucket_starts_with?: InputMaybe<Scalars['String']>;
  tokenEnabled?: InputMaybe<Scalars['Boolean']>;
  /** All values that are not equal to given value. */
  tokenEnabled_not?: InputMaybe<Scalars['Boolean']>;
  tradeDeskIdentifier?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  tradeDeskIdentifier_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  tradeDeskIdentifier_ends_with?: InputMaybe<Scalars['String']>;
  /** All values greater than the given value. */
  tradeDeskIdentifier_gt?: InputMaybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  tradeDeskIdentifier_gte?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  tradeDeskIdentifier_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  tradeDeskIdentifier_lt?: InputMaybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  tradeDeskIdentifier_lte?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  tradeDeskIdentifier_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  tradeDeskIdentifier_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string. */
  tradeDeskIdentifier_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  tradeDeskIdentifier_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  tradeDeskIdentifier_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  tradeDeskIdentifier_starts_with?: InputMaybe<Scalars['String']>;
};

/** An edge in a connection. */
export type OrgEdge = {
  __typename?: 'OrgEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: Org;
};

export enum OrgOrderByInput {
  ChatWootIdAsc = 'chatWootId_ASC',
  ChatWootIdDesc = 'chatWootId_DESC',
  CpmAsc = 'cpm_ASC',
  CpmDesc = 'cpm_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DescriptionAsc = 'description_ASC',
  DescriptionDesc = 'description_DESC',
  DomainAsc = 'domain_ASC',
  DomainDesc = 'domain_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  IsAllTimeFilteredAsc = 'isAllTimeFiltered_ASC',
  IsAllTimeFilteredDesc = 'isAllTimeFiltered_DESC',
  LevelAsc = 'level_ASC',
  LevelDesc = 'level_DESC',
  NameAsc = 'name_ASC',
  NameDesc = 'name_DESC',
  PhoneAsc = 'phone_ASC',
  PhoneDesc = 'phone_DESC',
  SalesforceIdAsc = 'salesforceId_ASC',
  SalesforceIdDesc = 'salesforceId_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  WebsiteAsc = 'website_ASC',
  WebsiteDesc = 'website_DESC',
  ZoneAsc = 'zone_ASC',
  ZoneDesc = 'zone_DESC'
}

export type OrgPreviousValues = {
  __typename?: 'OrgPreviousValues';
  chatWootId?: Maybe<Scalars['String']>;
  cpm?: Maybe<Scalars['String']>;
  createdAt: Scalars['DateTime'];
  description?: Maybe<Scalars['String']>;
  domain?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  isAllTimeFiltered?: Maybe<Scalars['Boolean']>;
  level: PartnerLevel;
  name: Scalars['String'];
  phone?: Maybe<Scalars['String']>;
  salesforceId?: Maybe<Scalars['String']>;
  updatedAt: Scalars['DateTime'];
  website?: Maybe<Scalars['String']>;
  zone?: Maybe<Scalars['String']>;
};

export type OrgReport = Node & {
  __typename?: 'OrgReport';
  createdAt: Scalars['DateTime'];
  id: Scalars['ID'];
  key: Scalars['String'];
  orgSummary?: Maybe<OrgSummary>;
  reportName: Scalars['String'];
  type: ReportType;
};

export type OrgReportCreateManyWithoutOrgSummaryInput = {
  connect?: InputMaybe<Array<OrgReportWhereUniqueInput>>;
  create?: InputMaybe<Array<OrgReportCreateWithoutOrgSummaryInput>>;
};

export type OrgReportCreateWithoutOrgSummaryInput = {
  key: Scalars['String'];
  reportName: Scalars['String'];
  type: ReportType;
};

export enum OrgReportOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  KeyAsc = 'key_ASC',
  KeyDesc = 'key_DESC',
  ReportNameAsc = 'reportName_ASC',
  ReportNameDesc = 'reportName_DESC',
  TypeAsc = 'type_ASC',
  TypeDesc = 'type_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC'
}

export type OrgReportSignedUrl = {
  __typename?: 'OrgReportSignedURL';
  error?: Maybe<Scalars['String']>;
  expiresAt: Scalars['String'];
  url: Scalars['String'];
};

export type OrgReportUpdateManyWithoutOrgSummaryInput = {
  connect?: InputMaybe<Array<OrgReportWhereUniqueInput>>;
  create?: InputMaybe<Array<OrgReportCreateWithoutOrgSummaryInput>>;
  delete?: InputMaybe<Array<OrgReportWhereUniqueInput>>;
  disconnect?: InputMaybe<Array<OrgReportWhereUniqueInput>>;
  update?: InputMaybe<Array<OrgReportUpdateWithWhereUniqueWithoutOrgSummaryInput>>;
  upsert?: InputMaybe<Array<OrgReportUpsertWithWhereUniqueWithoutOrgSummaryInput>>;
};

export type OrgReportUpdateWithWhereUniqueWithoutOrgSummaryInput = {
  data: OrgReportUpdateWithoutOrgSummaryDataInput;
  where: OrgReportWhereUniqueInput;
};

export type OrgReportUpdateWithoutOrgSummaryDataInput = {
  key?: InputMaybe<Scalars['String']>;
  reportName?: InputMaybe<Scalars['String']>;
  type?: InputMaybe<ReportType>;
};

export type OrgReportUpsertWithWhereUniqueWithoutOrgSummaryInput = {
  create: OrgReportCreateWithoutOrgSummaryInput;
  update: OrgReportUpdateWithoutOrgSummaryDataInput;
  where: OrgReportWhereUniqueInput;
};

export type OrgReportWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<OrgReportWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<OrgReportWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<OrgReportWhereInput>>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: InputMaybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: InputMaybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: InputMaybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  key?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  key_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  key_ends_with?: InputMaybe<Scalars['String']>;
  /** All values greater than the given value. */
  key_gt?: InputMaybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  key_gte?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  key_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  key_lt?: InputMaybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  key_lte?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  key_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  key_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string. */
  key_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  key_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  key_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  key_starts_with?: InputMaybe<Scalars['String']>;
  orgSummary?: InputMaybe<OrgSummaryWhereInput>;
  reportName?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  reportName_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  reportName_ends_with?: InputMaybe<Scalars['String']>;
  /** All values greater than the given value. */
  reportName_gt?: InputMaybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  reportName_gte?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  reportName_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  reportName_lt?: InputMaybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  reportName_lte?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  reportName_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  reportName_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string. */
  reportName_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  reportName_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  reportName_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  reportName_starts_with?: InputMaybe<Scalars['String']>;
  type?: InputMaybe<ReportType>;
  /** All values that are contained in given list. */
  type_in?: InputMaybe<Array<ReportType>>;
  /** All values that are not equal to given value. */
  type_not?: InputMaybe<ReportType>;
  /** All values that are not contained in given list. */
  type_not_in?: InputMaybe<Array<ReportType>>;
};

export type OrgReportWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
  key?: InputMaybe<Scalars['String']>;
};

export type OrgSendEmailConfigData = {
  __typename?: 'OrgSendEmailConfigData';
  campaignOrders?: Maybe<Scalars['String']>;
  dayOfWeek?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  frequency?: Maybe<Scalars['String']>;
  frequencyValue?: Maybe<Scalars['String']>;
};

export type OrgSendEmailConfigInput = {
  campaignOrders?: InputMaybe<Scalars['String']>;
  dayOfWeek?: InputMaybe<Scalars['String']>;
  email?: InputMaybe<Scalars['String']>;
  frequency?: InputMaybe<Scalars['String']>;
  frequencyValue?: InputMaybe<Scalars['String']>;
};

export type OrgSeoSummary = Node & {
  __typename?: 'OrgSeoSummary';
  byDate?: Maybe<Array<SeoUnit>>;
  commerceKey?: Maybe<Scalars['String']>;
  config?: Maybe<SeoConfig>;
  createdAt: Scalars['DateTime'];
  eCommerceTracking: Scalars['Boolean'];
  endDate: Scalars['DateTime'];
  enhancedECommerceTracking: Scalars['Boolean'];
  id: Scalars['ID'];
  key?: Maybe<Scalars['String']>;
  org?: Maybe<Org>;
  seoSummaryData?: Maybe<Scalars['Json']>;
  sharedOrgs?: Maybe<Array<Org>>;
  startDate: Scalars['DateTime'];
  updatedAt: Scalars['DateTime'];
};


export type OrgSeoSummaryByDateArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<SeoUnitOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<SeoUnitWhereInput>;
};


export type OrgSeoSummarySharedOrgsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<OrgOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<OrgWhereInput>;
};

export type OrgSeoSummaryCreateOneWithoutOrgInput = {
  connect?: InputMaybe<OrgSeoSummaryWhereUniqueInput>;
  create?: InputMaybe<OrgSeoSummaryCreateWithoutOrgInput>;
};

export type OrgSeoSummaryCreateWithoutOrgInput = {
  byDate?: InputMaybe<SeoUnitCreateManyWithoutOrgSeoSummaryInput>;
  commerceKey?: InputMaybe<Scalars['String']>;
  config?: InputMaybe<SeoConfigCreateOneWithoutOrgSeoSummariesInput>;
  eCommerceTracking: Scalars['Boolean'];
  endDate: Scalars['DateTime'];
  enhancedECommerceTracking: Scalars['Boolean'];
  key?: InputMaybe<Scalars['String']>;
  seoSummaryData?: InputMaybe<Scalars['Json']>;
  sharedOrgs?: InputMaybe<OrgCreateManyInput>;
  startDate: Scalars['DateTime'];
};

export enum OrgSeoSummaryOrderByInput {
  CommerceKeyAsc = 'commerceKey_ASC',
  CommerceKeyDesc = 'commerceKey_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  ECommerceTrackingAsc = 'eCommerceTracking_ASC',
  ECommerceTrackingDesc = 'eCommerceTracking_DESC',
  EndDateAsc = 'endDate_ASC',
  EndDateDesc = 'endDate_DESC',
  EnhancedECommerceTrackingAsc = 'enhancedECommerceTracking_ASC',
  EnhancedECommerceTrackingDesc = 'enhancedECommerceTracking_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  KeyAsc = 'key_ASC',
  KeyDesc = 'key_DESC',
  SeoSummaryDataAsc = 'seoSummaryData_ASC',
  SeoSummaryDataDesc = 'seoSummaryData_DESC',
  StartDateAsc = 'startDate_ASC',
  StartDateDesc = 'startDate_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC'
}

export type OrgSeoSummaryUpdateInput = {
  byDate?: InputMaybe<SeoUnitUpdateManyWithoutOrgSeoSummaryInput>;
  commerceKey?: InputMaybe<Scalars['String']>;
  config?: InputMaybe<SeoConfigUpdateOneWithoutOrgSeoSummariesInput>;
  eCommerceTracking?: InputMaybe<Scalars['Boolean']>;
  endDate?: InputMaybe<Scalars['DateTime']>;
  enhancedECommerceTracking?: InputMaybe<Scalars['Boolean']>;
  key?: InputMaybe<Scalars['String']>;
  org?: InputMaybe<OrgUpdateOneWithoutSeoSummaryInput>;
  seoSummaryData?: InputMaybe<Scalars['Json']>;
  sharedOrgs?: InputMaybe<OrgUpdateManyInput>;
  startDate?: InputMaybe<Scalars['DateTime']>;
};

export type OrgSeoSummaryUpdateOneWithoutOrgInput = {
  connect?: InputMaybe<OrgSeoSummaryWhereUniqueInput>;
  create?: InputMaybe<OrgSeoSummaryCreateWithoutOrgInput>;
  delete?: InputMaybe<Scalars['Boolean']>;
  disconnect?: InputMaybe<Scalars['Boolean']>;
  update?: InputMaybe<OrgSeoSummaryUpdateWithoutOrgDataInput>;
  upsert?: InputMaybe<OrgSeoSummaryUpsertWithoutOrgInput>;
};

export type OrgSeoSummaryUpdateWithoutOrgDataInput = {
  byDate?: InputMaybe<SeoUnitUpdateManyWithoutOrgSeoSummaryInput>;
  commerceKey?: InputMaybe<Scalars['String']>;
  config?: InputMaybe<SeoConfigUpdateOneWithoutOrgSeoSummariesInput>;
  eCommerceTracking?: InputMaybe<Scalars['Boolean']>;
  endDate?: InputMaybe<Scalars['DateTime']>;
  enhancedECommerceTracking?: InputMaybe<Scalars['Boolean']>;
  key?: InputMaybe<Scalars['String']>;
  seoSummaryData?: InputMaybe<Scalars['Json']>;
  sharedOrgs?: InputMaybe<OrgUpdateManyInput>;
  startDate?: InputMaybe<Scalars['DateTime']>;
};

export type OrgSeoSummaryUpsertWithoutOrgInput = {
  create: OrgSeoSummaryCreateWithoutOrgInput;
  update: OrgSeoSummaryUpdateWithoutOrgDataInput;
};

export type OrgSeoSummaryWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<OrgSeoSummaryWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<OrgSeoSummaryWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<OrgSeoSummaryWhereInput>>;
  byDate_every?: InputMaybe<SeoUnitWhereInput>;
  byDate_none?: InputMaybe<SeoUnitWhereInput>;
  byDate_some?: InputMaybe<SeoUnitWhereInput>;
  commerceKey?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  commerceKey_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  commerceKey_ends_with?: InputMaybe<Scalars['String']>;
  /** All values greater than the given value. */
  commerceKey_gt?: InputMaybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  commerceKey_gte?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  commerceKey_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  commerceKey_lt?: InputMaybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  commerceKey_lte?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  commerceKey_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  commerceKey_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string. */
  commerceKey_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  commerceKey_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  commerceKey_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  commerceKey_starts_with?: InputMaybe<Scalars['String']>;
  config?: InputMaybe<SeoConfigWhereInput>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  eCommerceTracking?: InputMaybe<Scalars['Boolean']>;
  /** All values that are not equal to given value. */
  eCommerceTracking_not?: InputMaybe<Scalars['Boolean']>;
  endDate?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  endDate_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  endDate_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  endDate_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  endDate_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  endDate_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  endDate_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  endDate_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  enhancedECommerceTracking?: InputMaybe<Scalars['Boolean']>;
  /** All values that are not equal to given value. */
  enhancedECommerceTracking_not?: InputMaybe<Scalars['Boolean']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: InputMaybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: InputMaybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: InputMaybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  key?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  key_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  key_ends_with?: InputMaybe<Scalars['String']>;
  /** All values greater than the given value. */
  key_gt?: InputMaybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  key_gte?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  key_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  key_lt?: InputMaybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  key_lte?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  key_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  key_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string. */
  key_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  key_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  key_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  key_starts_with?: InputMaybe<Scalars['String']>;
  org?: InputMaybe<OrgWhereInput>;
  sharedOrgs_every?: InputMaybe<OrgWhereInput>;
  sharedOrgs_none?: InputMaybe<OrgWhereInput>;
  sharedOrgs_some?: InputMaybe<OrgWhereInput>;
  startDate?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  startDate_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  startDate_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  startDate_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  startDate_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  startDate_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  startDate_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  startDate_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
};

export type OrgSeoSummaryWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export type OrgSubscriptionPayload = {
  __typename?: 'OrgSubscriptionPayload';
  mutation: MutationType;
  node?: Maybe<Org>;
  previousValues?: Maybe<OrgPreviousValues>;
  updatedFields?: Maybe<Array<Scalars['String']>>;
};

export type OrgSubscriptionWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<OrgSubscriptionWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<OrgSubscriptionWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<OrgSubscriptionWhereInput>>;
  /** The subscription event gets dispatched when it's listed in mutation_in */
  mutation_in?: InputMaybe<Array<MutationType>>;
  node?: InputMaybe<OrgWhereInput>;
  /** The subscription event gets only dispatched when one of the updated fields names is included in this list */
  updatedFields_contains?: InputMaybe<Scalars['String']>;
  /** The subscription event gets only dispatched when all of the field names included in this list have been updated */
  updatedFields_contains_every?: InputMaybe<Array<Scalars['String']>>;
  /** The subscription event gets only dispatched when some of the field names included in this list have been updated */
  updatedFields_contains_some?: InputMaybe<Array<Scalars['String']>>;
};

export type OrgSummary = Node & {
  __typename?: 'OrgSummary';
  activeCampaigns?: Maybe<Scalars['Int']>;
  budget?: Maybe<Scalars['Float']>;
  createdAt: Scalars['DateTime'];
  goal?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  impressions?: Maybe<Scalars['String']>;
  inAttributionCampaigns?: Maybe<Scalars['Int']>;
  liveCampaigns?: Maybe<Scalars['Int']>;
  mediaSpendBudgetSpent?: Maybe<Scalars['Float']>;
  mediaSpendCTR?: Maybe<Scalars['Float']>;
  mediaSpendClicks?: Maybe<Scalars['String']>;
  mediaSpendImpressionsServed?: Maybe<Scalars['String']>;
  org?: Maybe<Org>;
  reports?: Maybe<Array<OrgReport>>;
  roas?: Maybe<Scalars['Float']>;
  totalCampaigns?: Maybe<Scalars['Int']>;
  totalObservations?: Maybe<Scalars['Int']>;
  totalOrders?: Maybe<Scalars['Int']>;
  totalRevenue?: Maybe<Scalars['Float']>;
  totalWalkIns?: Maybe<Scalars['Int']>;
  updatedAt: Scalars['DateTime'];
};


export type OrgSummaryReportsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<OrgReportOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<OrgReportWhereInput>;
};

export type OrgSummaryCreateInput = {
  activeCampaigns?: InputMaybe<Scalars['Int']>;
  budget?: InputMaybe<Scalars['Float']>;
  goal?: InputMaybe<Scalars['String']>;
  impressions?: InputMaybe<Scalars['String']>;
  inAttributionCampaigns?: InputMaybe<Scalars['Int']>;
  liveCampaigns?: InputMaybe<Scalars['Int']>;
  mediaSpendBudgetSpent?: InputMaybe<Scalars['Float']>;
  mediaSpendCTR?: InputMaybe<Scalars['Float']>;
  mediaSpendClicks?: InputMaybe<Scalars['String']>;
  mediaSpendImpressionsServed?: InputMaybe<Scalars['String']>;
  org?: InputMaybe<OrgCreateOneWithoutOrgSummaryInput>;
  reports?: InputMaybe<OrgReportCreateManyWithoutOrgSummaryInput>;
  roas?: InputMaybe<Scalars['Float']>;
  totalCampaigns?: InputMaybe<Scalars['Int']>;
  totalObservations?: InputMaybe<Scalars['Int']>;
  totalOrders?: InputMaybe<Scalars['Int']>;
  totalRevenue?: InputMaybe<Scalars['Float']>;
  totalWalkIns?: InputMaybe<Scalars['Int']>;
};

export type OrgSummaryCreateOneWithoutOrgInput = {
  connect?: InputMaybe<OrgSummaryWhereUniqueInput>;
  create?: InputMaybe<OrgSummaryCreateWithoutOrgInput>;
};

export type OrgSummaryCreateWithoutOrgInput = {
  activeCampaigns?: InputMaybe<Scalars['Int']>;
  budget?: InputMaybe<Scalars['Float']>;
  goal?: InputMaybe<Scalars['String']>;
  impressions?: InputMaybe<Scalars['String']>;
  inAttributionCampaigns?: InputMaybe<Scalars['Int']>;
  liveCampaigns?: InputMaybe<Scalars['Int']>;
  mediaSpendBudgetSpent?: InputMaybe<Scalars['Float']>;
  mediaSpendCTR?: InputMaybe<Scalars['Float']>;
  mediaSpendClicks?: InputMaybe<Scalars['String']>;
  mediaSpendImpressionsServed?: InputMaybe<Scalars['String']>;
  reports?: InputMaybe<OrgReportCreateManyWithoutOrgSummaryInput>;
  roas?: InputMaybe<Scalars['Float']>;
  totalCampaigns?: InputMaybe<Scalars['Int']>;
  totalObservations?: InputMaybe<Scalars['Int']>;
  totalOrders?: InputMaybe<Scalars['Int']>;
  totalRevenue?: InputMaybe<Scalars['Float']>;
  totalWalkIns?: InputMaybe<Scalars['Int']>;
};

export enum OrgSummaryOrderByInput {
  ActiveCampaignsAsc = 'activeCampaigns_ASC',
  ActiveCampaignsDesc = 'activeCampaigns_DESC',
  BudgetAsc = 'budget_ASC',
  BudgetDesc = 'budget_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  GoalAsc = 'goal_ASC',
  GoalDesc = 'goal_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  ImpressionsAsc = 'impressions_ASC',
  ImpressionsDesc = 'impressions_DESC',
  InAttributionCampaignsAsc = 'inAttributionCampaigns_ASC',
  InAttributionCampaignsDesc = 'inAttributionCampaigns_DESC',
  LiveCampaignsAsc = 'liveCampaigns_ASC',
  LiveCampaignsDesc = 'liveCampaigns_DESC',
  MediaSpendBudgetSpentAsc = 'mediaSpendBudgetSpent_ASC',
  MediaSpendBudgetSpentDesc = 'mediaSpendBudgetSpent_DESC',
  MediaSpendCtrAsc = 'mediaSpendCTR_ASC',
  MediaSpendCtrDesc = 'mediaSpendCTR_DESC',
  MediaSpendClicksAsc = 'mediaSpendClicks_ASC',
  MediaSpendClicksDesc = 'mediaSpendClicks_DESC',
  MediaSpendImpressionsServedAsc = 'mediaSpendImpressionsServed_ASC',
  MediaSpendImpressionsServedDesc = 'mediaSpendImpressionsServed_DESC',
  RoasAsc = 'roas_ASC',
  RoasDesc = 'roas_DESC',
  TotalCampaignsAsc = 'totalCampaigns_ASC',
  TotalCampaignsDesc = 'totalCampaigns_DESC',
  TotalObservationsAsc = 'totalObservations_ASC',
  TotalObservationsDesc = 'totalObservations_DESC',
  TotalOrdersAsc = 'totalOrders_ASC',
  TotalOrdersDesc = 'totalOrders_DESC',
  TotalRevenueAsc = 'totalRevenue_ASC',
  TotalRevenueDesc = 'totalRevenue_DESC',
  TotalWalkInsAsc = 'totalWalkIns_ASC',
  TotalWalkInsDesc = 'totalWalkIns_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC'
}

export type OrgSummaryUpdateInput = {
  activeCampaigns?: InputMaybe<Scalars['Int']>;
  budget?: InputMaybe<Scalars['Float']>;
  goal?: InputMaybe<Scalars['String']>;
  impressions?: InputMaybe<Scalars['String']>;
  inAttributionCampaigns?: InputMaybe<Scalars['Int']>;
  liveCampaigns?: InputMaybe<Scalars['Int']>;
  mediaSpendBudgetSpent?: InputMaybe<Scalars['Float']>;
  mediaSpendCTR?: InputMaybe<Scalars['Float']>;
  mediaSpendClicks?: InputMaybe<Scalars['String']>;
  mediaSpendImpressionsServed?: InputMaybe<Scalars['String']>;
  org?: InputMaybe<OrgUpdateOneWithoutOrgSummaryInput>;
  reports?: InputMaybe<OrgReportUpdateManyWithoutOrgSummaryInput>;
  roas?: InputMaybe<Scalars['Float']>;
  totalCampaigns?: InputMaybe<Scalars['Int']>;
  totalObservations?: InputMaybe<Scalars['Int']>;
  totalOrders?: InputMaybe<Scalars['Int']>;
  totalRevenue?: InputMaybe<Scalars['Float']>;
  totalWalkIns?: InputMaybe<Scalars['Int']>;
};

export type OrgSummaryUpdateOneWithoutOrgInput = {
  connect?: InputMaybe<OrgSummaryWhereUniqueInput>;
  create?: InputMaybe<OrgSummaryCreateWithoutOrgInput>;
  delete?: InputMaybe<Scalars['Boolean']>;
  disconnect?: InputMaybe<Scalars['Boolean']>;
  update?: InputMaybe<OrgSummaryUpdateWithoutOrgDataInput>;
  upsert?: InputMaybe<OrgSummaryUpsertWithoutOrgInput>;
};

export type OrgSummaryUpdateWithoutOrgDataInput = {
  activeCampaigns?: InputMaybe<Scalars['Int']>;
  budget?: InputMaybe<Scalars['Float']>;
  goal?: InputMaybe<Scalars['String']>;
  impressions?: InputMaybe<Scalars['String']>;
  inAttributionCampaigns?: InputMaybe<Scalars['Int']>;
  liveCampaigns?: InputMaybe<Scalars['Int']>;
  mediaSpendBudgetSpent?: InputMaybe<Scalars['Float']>;
  mediaSpendCTR?: InputMaybe<Scalars['Float']>;
  mediaSpendClicks?: InputMaybe<Scalars['String']>;
  mediaSpendImpressionsServed?: InputMaybe<Scalars['String']>;
  reports?: InputMaybe<OrgReportUpdateManyWithoutOrgSummaryInput>;
  roas?: InputMaybe<Scalars['Float']>;
  totalCampaigns?: InputMaybe<Scalars['Int']>;
  totalObservations?: InputMaybe<Scalars['Int']>;
  totalOrders?: InputMaybe<Scalars['Int']>;
  totalRevenue?: InputMaybe<Scalars['Float']>;
  totalWalkIns?: InputMaybe<Scalars['Int']>;
};

export type OrgSummaryUpsertWithoutOrgInput = {
  create: OrgSummaryCreateWithoutOrgInput;
  update: OrgSummaryUpdateWithoutOrgDataInput;
};

export type OrgSummaryWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<OrgSummaryWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<OrgSummaryWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<OrgSummaryWhereInput>>;
  activeCampaigns?: InputMaybe<Scalars['Int']>;
  /** All values greater than the given value. */
  activeCampaigns_gt?: InputMaybe<Scalars['Int']>;
  /** All values greater than or equal the given value. */
  activeCampaigns_gte?: InputMaybe<Scalars['Int']>;
  /** All values that are contained in given list. */
  activeCampaigns_in?: InputMaybe<Array<Scalars['Int']>>;
  /** All values less than the given value. */
  activeCampaigns_lt?: InputMaybe<Scalars['Int']>;
  /** All values less than or equal the given value. */
  activeCampaigns_lte?: InputMaybe<Scalars['Int']>;
  /** All values that are not equal to given value. */
  activeCampaigns_not?: InputMaybe<Scalars['Int']>;
  /** All values that are not contained in given list. */
  activeCampaigns_not_in?: InputMaybe<Array<Scalars['Int']>>;
  budget?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  budget_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  budget_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  budget_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  budget_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  budget_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  budget_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  budget_not_in?: InputMaybe<Array<Scalars['Float']>>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  goal?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  goal_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  goal_ends_with?: InputMaybe<Scalars['String']>;
  /** All values greater than the given value. */
  goal_gt?: InputMaybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  goal_gte?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  goal_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  goal_lt?: InputMaybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  goal_lte?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  goal_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  goal_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string. */
  goal_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  goal_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  goal_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  goal_starts_with?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: InputMaybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: InputMaybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: InputMaybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  impressions?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  impressions_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  impressions_ends_with?: InputMaybe<Scalars['String']>;
  /** All values greater than the given value. */
  impressions_gt?: InputMaybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  impressions_gte?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  impressions_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  impressions_lt?: InputMaybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  impressions_lte?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  impressions_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  impressions_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string. */
  impressions_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  impressions_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  impressions_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  impressions_starts_with?: InputMaybe<Scalars['String']>;
  inAttributionCampaigns?: InputMaybe<Scalars['Int']>;
  /** All values greater than the given value. */
  inAttributionCampaigns_gt?: InputMaybe<Scalars['Int']>;
  /** All values greater than or equal the given value. */
  inAttributionCampaigns_gte?: InputMaybe<Scalars['Int']>;
  /** All values that are contained in given list. */
  inAttributionCampaigns_in?: InputMaybe<Array<Scalars['Int']>>;
  /** All values less than the given value. */
  inAttributionCampaigns_lt?: InputMaybe<Scalars['Int']>;
  /** All values less than or equal the given value. */
  inAttributionCampaigns_lte?: InputMaybe<Scalars['Int']>;
  /** All values that are not equal to given value. */
  inAttributionCampaigns_not?: InputMaybe<Scalars['Int']>;
  /** All values that are not contained in given list. */
  inAttributionCampaigns_not_in?: InputMaybe<Array<Scalars['Int']>>;
  liveCampaigns?: InputMaybe<Scalars['Int']>;
  /** All values greater than the given value. */
  liveCampaigns_gt?: InputMaybe<Scalars['Int']>;
  /** All values greater than or equal the given value. */
  liveCampaigns_gte?: InputMaybe<Scalars['Int']>;
  /** All values that are contained in given list. */
  liveCampaigns_in?: InputMaybe<Array<Scalars['Int']>>;
  /** All values less than the given value. */
  liveCampaigns_lt?: InputMaybe<Scalars['Int']>;
  /** All values less than or equal the given value. */
  liveCampaigns_lte?: InputMaybe<Scalars['Int']>;
  /** All values that are not equal to given value. */
  liveCampaigns_not?: InputMaybe<Scalars['Int']>;
  /** All values that are not contained in given list. */
  liveCampaigns_not_in?: InputMaybe<Array<Scalars['Int']>>;
  mediaSpendBudgetSpent?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  mediaSpendBudgetSpent_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  mediaSpendBudgetSpent_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  mediaSpendBudgetSpent_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  mediaSpendBudgetSpent_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  mediaSpendBudgetSpent_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  mediaSpendBudgetSpent_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  mediaSpendBudgetSpent_not_in?: InputMaybe<Array<Scalars['Float']>>;
  mediaSpendCTR?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  mediaSpendCTR_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  mediaSpendCTR_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  mediaSpendCTR_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  mediaSpendCTR_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  mediaSpendCTR_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  mediaSpendCTR_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  mediaSpendCTR_not_in?: InputMaybe<Array<Scalars['Float']>>;
  mediaSpendClicks?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  mediaSpendClicks_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  mediaSpendClicks_ends_with?: InputMaybe<Scalars['String']>;
  /** All values greater than the given value. */
  mediaSpendClicks_gt?: InputMaybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  mediaSpendClicks_gte?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  mediaSpendClicks_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  mediaSpendClicks_lt?: InputMaybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  mediaSpendClicks_lte?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  mediaSpendClicks_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  mediaSpendClicks_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string. */
  mediaSpendClicks_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  mediaSpendClicks_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  mediaSpendClicks_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  mediaSpendClicks_starts_with?: InputMaybe<Scalars['String']>;
  mediaSpendImpressionsServed?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  mediaSpendImpressionsServed_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  mediaSpendImpressionsServed_ends_with?: InputMaybe<Scalars['String']>;
  /** All values greater than the given value. */
  mediaSpendImpressionsServed_gt?: InputMaybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  mediaSpendImpressionsServed_gte?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  mediaSpendImpressionsServed_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  mediaSpendImpressionsServed_lt?: InputMaybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  mediaSpendImpressionsServed_lte?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  mediaSpendImpressionsServed_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  mediaSpendImpressionsServed_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string. */
  mediaSpendImpressionsServed_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  mediaSpendImpressionsServed_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  mediaSpendImpressionsServed_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  mediaSpendImpressionsServed_starts_with?: InputMaybe<Scalars['String']>;
  org?: InputMaybe<OrgWhereInput>;
  reports_every?: InputMaybe<OrgReportWhereInput>;
  reports_none?: InputMaybe<OrgReportWhereInput>;
  reports_some?: InputMaybe<OrgReportWhereInput>;
  roas?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  roas_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  roas_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  roas_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  roas_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  roas_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  roas_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  roas_not_in?: InputMaybe<Array<Scalars['Float']>>;
  totalCampaigns?: InputMaybe<Scalars['Int']>;
  /** All values greater than the given value. */
  totalCampaigns_gt?: InputMaybe<Scalars['Int']>;
  /** All values greater than or equal the given value. */
  totalCampaigns_gte?: InputMaybe<Scalars['Int']>;
  /** All values that are contained in given list. */
  totalCampaigns_in?: InputMaybe<Array<Scalars['Int']>>;
  /** All values less than the given value. */
  totalCampaigns_lt?: InputMaybe<Scalars['Int']>;
  /** All values less than or equal the given value. */
  totalCampaigns_lte?: InputMaybe<Scalars['Int']>;
  /** All values that are not equal to given value. */
  totalCampaigns_not?: InputMaybe<Scalars['Int']>;
  /** All values that are not contained in given list. */
  totalCampaigns_not_in?: InputMaybe<Array<Scalars['Int']>>;
  totalObservations?: InputMaybe<Scalars['Int']>;
  /** All values greater than the given value. */
  totalObservations_gt?: InputMaybe<Scalars['Int']>;
  /** All values greater than or equal the given value. */
  totalObservations_gte?: InputMaybe<Scalars['Int']>;
  /** All values that are contained in given list. */
  totalObservations_in?: InputMaybe<Array<Scalars['Int']>>;
  /** All values less than the given value. */
  totalObservations_lt?: InputMaybe<Scalars['Int']>;
  /** All values less than or equal the given value. */
  totalObservations_lte?: InputMaybe<Scalars['Int']>;
  /** All values that are not equal to given value. */
  totalObservations_not?: InputMaybe<Scalars['Int']>;
  /** All values that are not contained in given list. */
  totalObservations_not_in?: InputMaybe<Array<Scalars['Int']>>;
  totalOrders?: InputMaybe<Scalars['Int']>;
  /** All values greater than the given value. */
  totalOrders_gt?: InputMaybe<Scalars['Int']>;
  /** All values greater than or equal the given value. */
  totalOrders_gte?: InputMaybe<Scalars['Int']>;
  /** All values that are contained in given list. */
  totalOrders_in?: InputMaybe<Array<Scalars['Int']>>;
  /** All values less than the given value. */
  totalOrders_lt?: InputMaybe<Scalars['Int']>;
  /** All values less than or equal the given value. */
  totalOrders_lte?: InputMaybe<Scalars['Int']>;
  /** All values that are not equal to given value. */
  totalOrders_not?: InputMaybe<Scalars['Int']>;
  /** All values that are not contained in given list. */
  totalOrders_not_in?: InputMaybe<Array<Scalars['Int']>>;
  totalRevenue?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  totalRevenue_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  totalRevenue_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  totalRevenue_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  totalRevenue_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  totalRevenue_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  totalRevenue_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  totalRevenue_not_in?: InputMaybe<Array<Scalars['Float']>>;
  totalWalkIns?: InputMaybe<Scalars['Int']>;
  /** All values greater than the given value. */
  totalWalkIns_gt?: InputMaybe<Scalars['Int']>;
  /** All values greater than or equal the given value. */
  totalWalkIns_gte?: InputMaybe<Scalars['Int']>;
  /** All values that are contained in given list. */
  totalWalkIns_in?: InputMaybe<Array<Scalars['Int']>>;
  /** All values less than the given value. */
  totalWalkIns_lt?: InputMaybe<Scalars['Int']>;
  /** All values less than or equal the given value. */
  totalWalkIns_lte?: InputMaybe<Scalars['Int']>;
  /** All values that are not equal to given value. */
  totalWalkIns_not?: InputMaybe<Scalars['Int']>;
  /** All values that are not contained in given list. */
  totalWalkIns_not_in?: InputMaybe<Array<Scalars['Int']>>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
};

export type OrgSummaryWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export type OrgTableConfig = Node & {
  __typename?: 'OrgTableConfig';
  id: Scalars['ID'];
  isShowAttribution?: Maybe<Scalars['Boolean']>;
  isShowBudget?: Maybe<Scalars['Boolean']>;
  isShowFlight?: Maybe<Scalars['Boolean']>;
  isShowImpressions?: Maybe<Scalars['Boolean']>;
  isShowPacing?: Maybe<Scalars['Boolean']>;
  isShowPerformance?: Maybe<Scalars['Boolean']>;
  isShowSales?: Maybe<Scalars['Boolean']>;
  isShowSignUps?: Maybe<Scalars['Boolean']>;
  isShowWalkins?: Maybe<Scalars['Boolean']>;
  orgs?: Maybe<Array<Org>>;
};


export type OrgTableConfigOrgsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<OrgOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<OrgWhereInput>;
};

export type OrgTableConfigCreateOneWithoutOrgsInput = {
  connect?: InputMaybe<OrgTableConfigWhereUniqueInput>;
  create?: InputMaybe<OrgTableConfigCreateWithoutOrgsInput>;
};

export type OrgTableConfigCreateWithoutOrgsInput = {
  isShowAttribution?: InputMaybe<Scalars['Boolean']>;
  isShowBudget?: InputMaybe<Scalars['Boolean']>;
  isShowFlight?: InputMaybe<Scalars['Boolean']>;
  isShowImpressions?: InputMaybe<Scalars['Boolean']>;
  isShowPacing?: InputMaybe<Scalars['Boolean']>;
  isShowPerformance?: InputMaybe<Scalars['Boolean']>;
  isShowSales?: InputMaybe<Scalars['Boolean']>;
  isShowSignUps?: InputMaybe<Scalars['Boolean']>;
  isShowWalkins?: InputMaybe<Scalars['Boolean']>;
};

export type OrgTableConfigData = {
  __typename?: 'OrgTableConfigData';
  isShowAttribution?: Maybe<Scalars['Boolean']>;
  isShowBudget?: Maybe<Scalars['Boolean']>;
  isShowFlight?: Maybe<Scalars['Boolean']>;
  isShowImpressions?: Maybe<Scalars['Boolean']>;
  isShowPacing?: Maybe<Scalars['Boolean']>;
  isShowPerformance?: Maybe<Scalars['Boolean']>;
  isShowSales?: Maybe<Scalars['Boolean']>;
  isShowSignUps?: Maybe<Scalars['Boolean']>;
  isShowWalkins?: Maybe<Scalars['Boolean']>;
};

export type OrgTableConfigInput = {
  isShowAttribution?: InputMaybe<Scalars['Boolean']>;
  isShowBudget?: InputMaybe<Scalars['Boolean']>;
  isShowFlight?: InputMaybe<Scalars['Boolean']>;
  isShowImpressions?: InputMaybe<Scalars['Boolean']>;
  isShowPacing?: InputMaybe<Scalars['Boolean']>;
  isShowPerformance?: InputMaybe<Scalars['Boolean']>;
  isShowSales?: InputMaybe<Scalars['Boolean']>;
  isShowSignUps?: InputMaybe<Scalars['Boolean']>;
  isShowWalkins?: InputMaybe<Scalars['Boolean']>;
};

export type OrgTableConfigUpdateOneWithoutOrgsInput = {
  connect?: InputMaybe<OrgTableConfigWhereUniqueInput>;
  create?: InputMaybe<OrgTableConfigCreateWithoutOrgsInput>;
  delete?: InputMaybe<Scalars['Boolean']>;
  disconnect?: InputMaybe<Scalars['Boolean']>;
  update?: InputMaybe<OrgTableConfigUpdateWithoutOrgsDataInput>;
  upsert?: InputMaybe<OrgTableConfigUpsertWithoutOrgsInput>;
};

export type OrgTableConfigUpdateWithoutOrgsDataInput = {
  isShowAttribution?: InputMaybe<Scalars['Boolean']>;
  isShowBudget?: InputMaybe<Scalars['Boolean']>;
  isShowFlight?: InputMaybe<Scalars['Boolean']>;
  isShowImpressions?: InputMaybe<Scalars['Boolean']>;
  isShowPacing?: InputMaybe<Scalars['Boolean']>;
  isShowPerformance?: InputMaybe<Scalars['Boolean']>;
  isShowSales?: InputMaybe<Scalars['Boolean']>;
  isShowSignUps?: InputMaybe<Scalars['Boolean']>;
  isShowWalkins?: InputMaybe<Scalars['Boolean']>;
};

export type OrgTableConfigUpsertWithoutOrgsInput = {
  create: OrgTableConfigCreateWithoutOrgsInput;
  update: OrgTableConfigUpdateWithoutOrgsDataInput;
};

export type OrgTableConfigWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<OrgTableConfigWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<OrgTableConfigWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<OrgTableConfigWhereInput>>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: InputMaybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: InputMaybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: InputMaybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  isShowAttribution?: InputMaybe<Scalars['Boolean']>;
  /** All values that are not equal to given value. */
  isShowAttribution_not?: InputMaybe<Scalars['Boolean']>;
  isShowBudget?: InputMaybe<Scalars['Boolean']>;
  /** All values that are not equal to given value. */
  isShowBudget_not?: InputMaybe<Scalars['Boolean']>;
  isShowFlight?: InputMaybe<Scalars['Boolean']>;
  /** All values that are not equal to given value. */
  isShowFlight_not?: InputMaybe<Scalars['Boolean']>;
  isShowImpressions?: InputMaybe<Scalars['Boolean']>;
  /** All values that are not equal to given value. */
  isShowImpressions_not?: InputMaybe<Scalars['Boolean']>;
  isShowPacing?: InputMaybe<Scalars['Boolean']>;
  /** All values that are not equal to given value. */
  isShowPacing_not?: InputMaybe<Scalars['Boolean']>;
  isShowPerformance?: InputMaybe<Scalars['Boolean']>;
  /** All values that are not equal to given value. */
  isShowPerformance_not?: InputMaybe<Scalars['Boolean']>;
  isShowSales?: InputMaybe<Scalars['Boolean']>;
  /** All values that are not equal to given value. */
  isShowSales_not?: InputMaybe<Scalars['Boolean']>;
  isShowSignUps?: InputMaybe<Scalars['Boolean']>;
  /** All values that are not equal to given value. */
  isShowSignUps_not?: InputMaybe<Scalars['Boolean']>;
  isShowWalkins?: InputMaybe<Scalars['Boolean']>;
  /** All values that are not equal to given value. */
  isShowWalkins_not?: InputMaybe<Scalars['Boolean']>;
  orgs_every?: InputMaybe<OrgWhereInput>;
  orgs_none?: InputMaybe<OrgWhereInput>;
  orgs_some?: InputMaybe<OrgWhereInput>;
};

export type OrgTableConfigWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export type OrgTagsConfig = Node & {
  __typename?: 'OrgTagsConfig';
  appId?: Maybe<Scalars['String']>;
  cart?: Maybe<Scalars['String']>;
  createdAt: Scalars['DateTime'];
  id: Scalars['ID'];
  orgs?: Maybe<Array<Org>>;
  retailId?: Maybe<Scalars['String']>;
  tag?: Maybe<Scalars['Json']>;
  tagPageViews?: Maybe<Scalars['String']>;
  tagTransactions?: Maybe<Scalars['String']>;
  tagUpdateDate?: Maybe<Scalars['String']>;
  test: Scalars['Boolean'];
  updatedAt: Scalars['DateTime'];
};


export type OrgTagsConfigOrgsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<OrgOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<OrgWhereInput>;
};

export type OrgTagsConfigCreateInput = {
  appId?: InputMaybe<Scalars['String']>;
  cart?: InputMaybe<Scalars['String']>;
  orgs?: InputMaybe<OrgCreateManyWithoutTagsConfigInput>;
  retailId?: InputMaybe<Scalars['String']>;
  tag?: InputMaybe<Scalars['Json']>;
  tagPageViews?: InputMaybe<Scalars['String']>;
  tagTransactions?: InputMaybe<Scalars['String']>;
  tagUpdateDate?: InputMaybe<Scalars['String']>;
  test?: InputMaybe<Scalars['Boolean']>;
};

export type OrgTagsConfigCreateOneWithoutOrgsInput = {
  connect?: InputMaybe<OrgTagsConfigWhereUniqueInput>;
  create?: InputMaybe<OrgTagsConfigCreateWithoutOrgsInput>;
};

export type OrgTagsConfigCreateWithoutOrgsInput = {
  appId?: InputMaybe<Scalars['String']>;
  cart?: InputMaybe<Scalars['String']>;
  retailId?: InputMaybe<Scalars['String']>;
  tag?: InputMaybe<Scalars['Json']>;
  tagPageViews?: InputMaybe<Scalars['String']>;
  tagTransactions?: InputMaybe<Scalars['String']>;
  tagUpdateDate?: InputMaybe<Scalars['String']>;
  test?: InputMaybe<Scalars['Boolean']>;
};

export enum OrgTagsConfigOrderByInput {
  AppIdAsc = 'appId_ASC',
  AppIdDesc = 'appId_DESC',
  CartAsc = 'cart_ASC',
  CartDesc = 'cart_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  RetailIdAsc = 'retailId_ASC',
  RetailIdDesc = 'retailId_DESC',
  TagPageViewsAsc = 'tagPageViews_ASC',
  TagPageViewsDesc = 'tagPageViews_DESC',
  TagTransactionsAsc = 'tagTransactions_ASC',
  TagTransactionsDesc = 'tagTransactions_DESC',
  TagUpdateDateAsc = 'tagUpdateDate_ASC',
  TagUpdateDateDesc = 'tagUpdateDate_DESC',
  TagAsc = 'tag_ASC',
  TagDesc = 'tag_DESC',
  TestAsc = 'test_ASC',
  TestDesc = 'test_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC'
}

export type OrgTagsConfigUpdateInput = {
  appId?: InputMaybe<Scalars['String']>;
  cart?: InputMaybe<Scalars['String']>;
  orgs?: InputMaybe<OrgUpdateManyWithoutTagsConfigInput>;
  retailId?: InputMaybe<Scalars['String']>;
  tag?: InputMaybe<Scalars['Json']>;
  tagPageViews?: InputMaybe<Scalars['String']>;
  tagTransactions?: InputMaybe<Scalars['String']>;
  tagUpdateDate?: InputMaybe<Scalars['String']>;
  test?: InputMaybe<Scalars['Boolean']>;
};

export type OrgTagsConfigUpdateOneWithoutOrgsInput = {
  connect?: InputMaybe<OrgTagsConfigWhereUniqueInput>;
  create?: InputMaybe<OrgTagsConfigCreateWithoutOrgsInput>;
  delete?: InputMaybe<Scalars['Boolean']>;
  disconnect?: InputMaybe<Scalars['Boolean']>;
  update?: InputMaybe<OrgTagsConfigUpdateWithoutOrgsDataInput>;
  upsert?: InputMaybe<OrgTagsConfigUpsertWithoutOrgsInput>;
};

export type OrgTagsConfigUpdateWithoutOrgsDataInput = {
  appId?: InputMaybe<Scalars['String']>;
  cart?: InputMaybe<Scalars['String']>;
  retailId?: InputMaybe<Scalars['String']>;
  tag?: InputMaybe<Scalars['Json']>;
  tagPageViews?: InputMaybe<Scalars['String']>;
  tagTransactions?: InputMaybe<Scalars['String']>;
  tagUpdateDate?: InputMaybe<Scalars['String']>;
  test?: InputMaybe<Scalars['Boolean']>;
};

export type OrgTagsConfigUpsertWithoutOrgsInput = {
  create: OrgTagsConfigCreateWithoutOrgsInput;
  update: OrgTagsConfigUpdateWithoutOrgsDataInput;
};

export type OrgTagsConfigWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<OrgTagsConfigWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<OrgTagsConfigWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<OrgTagsConfigWhereInput>>;
  appId?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  appId_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  appId_ends_with?: InputMaybe<Scalars['String']>;
  /** All values greater than the given value. */
  appId_gt?: InputMaybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  appId_gte?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  appId_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  appId_lt?: InputMaybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  appId_lte?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  appId_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  appId_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string. */
  appId_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  appId_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  appId_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  appId_starts_with?: InputMaybe<Scalars['String']>;
  cart?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  cart_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  cart_ends_with?: InputMaybe<Scalars['String']>;
  /** All values greater than the given value. */
  cart_gt?: InputMaybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  cart_gte?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  cart_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  cart_lt?: InputMaybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  cart_lte?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  cart_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  cart_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string. */
  cart_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  cart_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  cart_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  cart_starts_with?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: InputMaybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: InputMaybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: InputMaybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  orgs_every?: InputMaybe<OrgWhereInput>;
  orgs_none?: InputMaybe<OrgWhereInput>;
  orgs_some?: InputMaybe<OrgWhereInput>;
  retailId?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  retailId_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  retailId_ends_with?: InputMaybe<Scalars['String']>;
  /** All values greater than the given value. */
  retailId_gt?: InputMaybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  retailId_gte?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  retailId_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  retailId_lt?: InputMaybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  retailId_lte?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  retailId_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  retailId_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string. */
  retailId_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  retailId_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  retailId_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  retailId_starts_with?: InputMaybe<Scalars['String']>;
  tagPageViews?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  tagPageViews_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  tagPageViews_ends_with?: InputMaybe<Scalars['String']>;
  /** All values greater than the given value. */
  tagPageViews_gt?: InputMaybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  tagPageViews_gte?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  tagPageViews_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  tagPageViews_lt?: InputMaybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  tagPageViews_lte?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  tagPageViews_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  tagPageViews_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string. */
  tagPageViews_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  tagPageViews_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  tagPageViews_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  tagPageViews_starts_with?: InputMaybe<Scalars['String']>;
  tagTransactions?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  tagTransactions_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  tagTransactions_ends_with?: InputMaybe<Scalars['String']>;
  /** All values greater than the given value. */
  tagTransactions_gt?: InputMaybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  tagTransactions_gte?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  tagTransactions_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  tagTransactions_lt?: InputMaybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  tagTransactions_lte?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  tagTransactions_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  tagTransactions_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string. */
  tagTransactions_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  tagTransactions_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  tagTransactions_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  tagTransactions_starts_with?: InputMaybe<Scalars['String']>;
  tagUpdateDate?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  tagUpdateDate_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  tagUpdateDate_ends_with?: InputMaybe<Scalars['String']>;
  /** All values greater than the given value. */
  tagUpdateDate_gt?: InputMaybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  tagUpdateDate_gte?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  tagUpdateDate_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  tagUpdateDate_lt?: InputMaybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  tagUpdateDate_lte?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  tagUpdateDate_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  tagUpdateDate_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string. */
  tagUpdateDate_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  tagUpdateDate_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  tagUpdateDate_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  tagUpdateDate_starts_with?: InputMaybe<Scalars['String']>;
  test?: InputMaybe<Scalars['Boolean']>;
  /** All values that are not equal to given value. */
  test_not?: InputMaybe<Scalars['Boolean']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
};

export type OrgTagsConfigWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export type OrgThemeConfig = Node & {
  __typename?: 'OrgThemeConfig';
  id: Scalars['ID'];
  orgs?: Maybe<Array<Org>>;
  primaryColor?: Maybe<Scalars['String']>;
  sidebarColor?: Maybe<Scalars['String']>;
};


export type OrgThemeConfigOrgsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<OrgOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<OrgWhereInput>;
};

export type OrgThemeConfigCreateOneWithoutOrgsInput = {
  connect?: InputMaybe<OrgThemeConfigWhereUniqueInput>;
  create?: InputMaybe<OrgThemeConfigCreateWithoutOrgsInput>;
};

export type OrgThemeConfigCreateWithoutOrgsInput = {
  primaryColor?: InputMaybe<Scalars['String']>;
  sidebarColor?: InputMaybe<Scalars['String']>;
};

export type OrgThemeConfigData = {
  __typename?: 'OrgThemeConfigData';
  primaryColor?: Maybe<Scalars['String']>;
  sidebarColor?: Maybe<Scalars['String']>;
};

export type OrgThemeConfigInput = {
  primaryColor?: InputMaybe<Scalars['String']>;
  sidebarColor?: InputMaybe<Scalars['String']>;
};

export type OrgThemeConfigUpdateOneWithoutOrgsInput = {
  connect?: InputMaybe<OrgThemeConfigWhereUniqueInput>;
  create?: InputMaybe<OrgThemeConfigCreateWithoutOrgsInput>;
  delete?: InputMaybe<Scalars['Boolean']>;
  disconnect?: InputMaybe<Scalars['Boolean']>;
  update?: InputMaybe<OrgThemeConfigUpdateWithoutOrgsDataInput>;
  upsert?: InputMaybe<OrgThemeConfigUpsertWithoutOrgsInput>;
};

export type OrgThemeConfigUpdateWithoutOrgsDataInput = {
  primaryColor?: InputMaybe<Scalars['String']>;
  sidebarColor?: InputMaybe<Scalars['String']>;
};

export type OrgThemeConfigUpsertWithoutOrgsInput = {
  create: OrgThemeConfigCreateWithoutOrgsInput;
  update: OrgThemeConfigUpdateWithoutOrgsDataInput;
};

export type OrgThemeConfigWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<OrgThemeConfigWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<OrgThemeConfigWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<OrgThemeConfigWhereInput>>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: InputMaybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: InputMaybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: InputMaybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  orgs_every?: InputMaybe<OrgWhereInput>;
  orgs_none?: InputMaybe<OrgWhereInput>;
  orgs_some?: InputMaybe<OrgWhereInput>;
  primaryColor?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  primaryColor_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  primaryColor_ends_with?: InputMaybe<Scalars['String']>;
  /** All values greater than the given value. */
  primaryColor_gt?: InputMaybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  primaryColor_gte?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  primaryColor_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  primaryColor_lt?: InputMaybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  primaryColor_lte?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  primaryColor_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  primaryColor_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string. */
  primaryColor_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  primaryColor_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  primaryColor_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  primaryColor_starts_with?: InputMaybe<Scalars['String']>;
  sidebarColor?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  sidebarColor_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  sidebarColor_ends_with?: InputMaybe<Scalars['String']>;
  /** All values greater than the given value. */
  sidebarColor_gt?: InputMaybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  sidebarColor_gte?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  sidebarColor_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  sidebarColor_lt?: InputMaybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  sidebarColor_lte?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  sidebarColor_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  sidebarColor_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string. */
  sidebarColor_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  sidebarColor_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  sidebarColor_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  sidebarColor_starts_with?: InputMaybe<Scalars['String']>;
};

export type OrgThemeConfigWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export type OrgUpdateDataInput = {
  SEOSummary?: InputMaybe<OrgSeoSummaryUpdateOneWithoutOrgInput>;
  adGroupCreatives?: InputMaybe<AdGroupCreativesUpdateManyWithoutOrgInput>;
  advertiserCampaignOrders?: InputMaybe<CampaignOrderUpdateManyWithoutAdvertiserInput>;
  audiences?: InputMaybe<AudienceUpdateManyWithoutOrgsInput>;
  brands?: InputMaybe<BrandUpdateManyInput>;
  campaignOrders?: InputMaybe<CampaignOrderUpdateManyWithoutOrgsInput>;
  campaigns?: InputMaybe<CampaignUpdateManyWithoutOrgsInput>;
  chatWootId?: InputMaybe<Scalars['String']>;
  config?: InputMaybe<OrgConfigUpdateOneWithoutOrgsInput>;
  cpm?: InputMaybe<Scalars['String']>;
  customers?: InputMaybe<CustomerUpdateManyWithoutOrgInput>;
  dataConfig?: InputMaybe<OrgDataConfigUpdateOneWithoutOrgsInput>;
  description?: InputMaybe<Scalars['String']>;
  domain?: InputMaybe<Scalars['String']>;
  event?: InputMaybe<EventUpdateOneWithoutOrgsInput>;
  eventsTarget?: InputMaybe<EventsTargetUpdateOneWithoutOrgsInput>;
  iabCategoryGroup?: InputMaybe<IabCategoryGroupUpdateManyWithoutOrgsInput>;
  isAllTimeFiltered?: InputMaybe<Scalars['Boolean']>;
  level?: InputMaybe<PartnerLevel>;
  locations?: InputMaybe<LocationUpdateManyInput>;
  logo?: InputMaybe<MediaUpdateOneWithoutOrgInput>;
  loyaltyCampaigns?: InputMaybe<LoyaltyCampaignUpdateManyWithoutOrgInput>;
  media?: InputMaybe<MediaUpdateManyWithoutSharedWithInput>;
  name?: InputMaybe<Scalars['String']>;
  offers?: InputMaybe<OfferUpdateManyWithoutOrgInput>;
  orgSummary?: InputMaybe<OrgSummaryUpdateOneWithoutOrgInput>;
  paidSearchSummary?: InputMaybe<PaidSearchSummaryUpdateOneWithoutOrgInput>;
  paidSearchSummarySharedOrgs?: InputMaybe<PaidSearchSummaryUpdateManyWithoutSharedOrgsInput>;
  parentOrg?: InputMaybe<OrgUpdateManyInput>;
  paymentConfig?: InputMaybe<PaymentConfigUpdateOneWithoutOrgsInput>;
  phone?: InputMaybe<Scalars['String']>;
  posConfig?: InputMaybe<PosConfigUpdateManyWithoutOrgInput>;
  regionGroup?: InputMaybe<RegionGroupUpdateManyWithoutOrgsInput>;
  roles?: InputMaybe<RoleUpdateManyWithoutOrgInput>;
  salesforceId?: InputMaybe<Scalars['String']>;
  sendEmailConfig?: InputMaybe<SendEmailConfigUpdateOneWithoutOrgsInput>;
  signInLogo?: InputMaybe<MediaUpdateOneInput>;
  tableConfig?: InputMaybe<OrgTableConfigUpdateOneWithoutOrgsInput>;
  tagsConfig?: InputMaybe<OrgTagsConfigUpdateOneWithoutOrgsInput>;
  themeConfig?: InputMaybe<OrgThemeConfigUpdateOneWithoutOrgsInput>;
  website?: InputMaybe<Scalars['String']>;
  zone?: InputMaybe<Scalars['String']>;
};

export type OrgUpdateInput = {
  SEOSummary?: InputMaybe<OrgSeoSummaryUpdateOneWithoutOrgInput>;
  adGroupCreatives?: InputMaybe<AdGroupCreativesUpdateManyWithoutOrgInput>;
  advertiserCampaignOrders?: InputMaybe<CampaignOrderUpdateManyWithoutAdvertiserInput>;
  audiences?: InputMaybe<AudienceUpdateManyWithoutOrgsInput>;
  brands?: InputMaybe<BrandUpdateManyInput>;
  campaignOrders?: InputMaybe<CampaignOrderUpdateManyWithoutOrgsInput>;
  campaigns?: InputMaybe<CampaignUpdateManyWithoutOrgsInput>;
  chatWootId?: InputMaybe<Scalars['String']>;
  config?: InputMaybe<OrgConfigUpdateOneWithoutOrgsInput>;
  cpm?: InputMaybe<Scalars['String']>;
  customers?: InputMaybe<CustomerUpdateManyWithoutOrgInput>;
  dataConfig?: InputMaybe<OrgDataConfigUpdateOneWithoutOrgsInput>;
  description?: InputMaybe<Scalars['String']>;
  domain?: InputMaybe<Scalars['String']>;
  event?: InputMaybe<EventUpdateOneWithoutOrgsInput>;
  eventsTarget?: InputMaybe<EventsTargetUpdateOneWithoutOrgsInput>;
  iabCategoryGroup?: InputMaybe<IabCategoryGroupUpdateManyWithoutOrgsInput>;
  isAllTimeFiltered?: InputMaybe<Scalars['Boolean']>;
  level?: InputMaybe<PartnerLevel>;
  locations?: InputMaybe<LocationUpdateManyInput>;
  logo?: InputMaybe<MediaUpdateOneWithoutOrgInput>;
  loyaltyCampaigns?: InputMaybe<LoyaltyCampaignUpdateManyWithoutOrgInput>;
  media?: InputMaybe<MediaUpdateManyWithoutSharedWithInput>;
  name?: InputMaybe<Scalars['String']>;
  offers?: InputMaybe<OfferUpdateManyWithoutOrgInput>;
  orgSummary?: InputMaybe<OrgSummaryUpdateOneWithoutOrgInput>;
  paidSearchSummary?: InputMaybe<PaidSearchSummaryUpdateOneWithoutOrgInput>;
  paidSearchSummarySharedOrgs?: InputMaybe<PaidSearchSummaryUpdateManyWithoutSharedOrgsInput>;
  parentOrg?: InputMaybe<OrgUpdateManyInput>;
  paymentConfig?: InputMaybe<PaymentConfigUpdateOneWithoutOrgsInput>;
  phone?: InputMaybe<Scalars['String']>;
  posConfig?: InputMaybe<PosConfigUpdateManyWithoutOrgInput>;
  regionGroup?: InputMaybe<RegionGroupUpdateManyWithoutOrgsInput>;
  roles?: InputMaybe<RoleUpdateManyWithoutOrgInput>;
  salesforceId?: InputMaybe<Scalars['String']>;
  sendEmailConfig?: InputMaybe<SendEmailConfigUpdateOneWithoutOrgsInput>;
  signInLogo?: InputMaybe<MediaUpdateOneInput>;
  tableConfig?: InputMaybe<OrgTableConfigUpdateOneWithoutOrgsInput>;
  tagsConfig?: InputMaybe<OrgTagsConfigUpdateOneWithoutOrgsInput>;
  themeConfig?: InputMaybe<OrgThemeConfigUpdateOneWithoutOrgsInput>;
  website?: InputMaybe<Scalars['String']>;
  zone?: InputMaybe<Scalars['String']>;
};

export type OrgUpdateManyInput = {
  connect?: InputMaybe<Array<OrgWhereUniqueInput>>;
  create?: InputMaybe<Array<OrgCreateInput>>;
  delete?: InputMaybe<Array<OrgWhereUniqueInput>>;
  disconnect?: InputMaybe<Array<OrgWhereUniqueInput>>;
  update?: InputMaybe<Array<OrgUpdateWithWhereUniqueNestedInput>>;
  upsert?: InputMaybe<Array<OrgUpsertWithWhereUniqueNestedInput>>;
};

export type OrgUpdateManyWithoutAdGroupCreativesInput = {
  connect?: InputMaybe<Array<OrgWhereUniqueInput>>;
  create?: InputMaybe<Array<OrgCreateWithoutAdGroupCreativesInput>>;
  delete?: InputMaybe<Array<OrgWhereUniqueInput>>;
  disconnect?: InputMaybe<Array<OrgWhereUniqueInput>>;
  update?: InputMaybe<Array<OrgUpdateWithWhereUniqueWithoutAdGroupCreativesInput>>;
  upsert?: InputMaybe<Array<OrgUpsertWithWhereUniqueWithoutAdGroupCreativesInput>>;
};

export type OrgUpdateManyWithoutAudiencesInput = {
  connect?: InputMaybe<Array<OrgWhereUniqueInput>>;
  create?: InputMaybe<Array<OrgCreateWithoutAudiencesInput>>;
  delete?: InputMaybe<Array<OrgWhereUniqueInput>>;
  disconnect?: InputMaybe<Array<OrgWhereUniqueInput>>;
  update?: InputMaybe<Array<OrgUpdateWithWhereUniqueWithoutAudiencesInput>>;
  upsert?: InputMaybe<Array<OrgUpsertWithWhereUniqueWithoutAudiencesInput>>;
};

export type OrgUpdateManyWithoutCampaignOrdersInput = {
  connect?: InputMaybe<Array<OrgWhereUniqueInput>>;
  create?: InputMaybe<Array<OrgCreateWithoutCampaignOrdersInput>>;
  delete?: InputMaybe<Array<OrgWhereUniqueInput>>;
  disconnect?: InputMaybe<Array<OrgWhereUniqueInput>>;
  update?: InputMaybe<Array<OrgUpdateWithWhereUniqueWithoutCampaignOrdersInput>>;
  upsert?: InputMaybe<Array<OrgUpsertWithWhereUniqueWithoutCampaignOrdersInput>>;
};

export type OrgUpdateManyWithoutCampaignsInput = {
  connect?: InputMaybe<Array<OrgWhereUniqueInput>>;
  create?: InputMaybe<Array<OrgCreateWithoutCampaignsInput>>;
  delete?: InputMaybe<Array<OrgWhereUniqueInput>>;
  disconnect?: InputMaybe<Array<OrgWhereUniqueInput>>;
  update?: InputMaybe<Array<OrgUpdateWithWhereUniqueWithoutCampaignsInput>>;
  upsert?: InputMaybe<Array<OrgUpsertWithWhereUniqueWithoutCampaignsInput>>;
};

export type OrgUpdateManyWithoutEventInput = {
  connect?: InputMaybe<Array<OrgWhereUniqueInput>>;
  create?: InputMaybe<Array<OrgCreateWithoutEventInput>>;
  delete?: InputMaybe<Array<OrgWhereUniqueInput>>;
  disconnect?: InputMaybe<Array<OrgWhereUniqueInput>>;
  update?: InputMaybe<Array<OrgUpdateWithWhereUniqueWithoutEventInput>>;
  upsert?: InputMaybe<Array<OrgUpsertWithWhereUniqueWithoutEventInput>>;
};

export type OrgUpdateManyWithoutEventsTargetInput = {
  connect?: InputMaybe<Array<OrgWhereUniqueInput>>;
  create?: InputMaybe<Array<OrgCreateWithoutEventsTargetInput>>;
  delete?: InputMaybe<Array<OrgWhereUniqueInput>>;
  disconnect?: InputMaybe<Array<OrgWhereUniqueInput>>;
  update?: InputMaybe<Array<OrgUpdateWithWhereUniqueWithoutEventsTargetInput>>;
  upsert?: InputMaybe<Array<OrgUpsertWithWhereUniqueWithoutEventsTargetInput>>;
};

export type OrgUpdateManyWithoutIabCategoryGroupInput = {
  connect?: InputMaybe<Array<OrgWhereUniqueInput>>;
  create?: InputMaybe<Array<OrgCreateWithoutIabCategoryGroupInput>>;
  delete?: InputMaybe<Array<OrgWhereUniqueInput>>;
  disconnect?: InputMaybe<Array<OrgWhereUniqueInput>>;
  update?: InputMaybe<Array<OrgUpdateWithWhereUniqueWithoutIabCategoryGroupInput>>;
  upsert?: InputMaybe<Array<OrgUpsertWithWhereUniqueWithoutIabCategoryGroupInput>>;
};

export type OrgUpdateManyWithoutMediaInput = {
  connect?: InputMaybe<Array<OrgWhereUniqueInput>>;
  create?: InputMaybe<Array<OrgCreateWithoutMediaInput>>;
  delete?: InputMaybe<Array<OrgWhereUniqueInput>>;
  disconnect?: InputMaybe<Array<OrgWhereUniqueInput>>;
  update?: InputMaybe<Array<OrgUpdateWithWhereUniqueWithoutMediaInput>>;
  upsert?: InputMaybe<Array<OrgUpsertWithWhereUniqueWithoutMediaInput>>;
};

export type OrgUpdateManyWithoutPaidSearchSummarySharedOrgsInput = {
  connect?: InputMaybe<Array<OrgWhereUniqueInput>>;
  create?: InputMaybe<Array<OrgCreateWithoutPaidSearchSummarySharedOrgsInput>>;
  delete?: InputMaybe<Array<OrgWhereUniqueInput>>;
  disconnect?: InputMaybe<Array<OrgWhereUniqueInput>>;
  update?: InputMaybe<Array<OrgUpdateWithWhereUniqueWithoutPaidSearchSummarySharedOrgsInput>>;
  upsert?: InputMaybe<Array<OrgUpsertWithWhereUniqueWithoutPaidSearchSummarySharedOrgsInput>>;
};

export type OrgUpdateManyWithoutRegionGroupInput = {
  connect?: InputMaybe<Array<OrgWhereUniqueInput>>;
  create?: InputMaybe<Array<OrgCreateWithoutRegionGroupInput>>;
  delete?: InputMaybe<Array<OrgWhereUniqueInput>>;
  disconnect?: InputMaybe<Array<OrgWhereUniqueInput>>;
  update?: InputMaybe<Array<OrgUpdateWithWhereUniqueWithoutRegionGroupInput>>;
  upsert?: InputMaybe<Array<OrgUpsertWithWhereUniqueWithoutRegionGroupInput>>;
};

export type OrgUpdateManyWithoutTagsConfigInput = {
  connect?: InputMaybe<Array<OrgWhereUniqueInput>>;
  create?: InputMaybe<Array<OrgCreateWithoutTagsConfigInput>>;
  delete?: InputMaybe<Array<OrgWhereUniqueInput>>;
  disconnect?: InputMaybe<Array<OrgWhereUniqueInput>>;
  update?: InputMaybe<Array<OrgUpdateWithWhereUniqueWithoutTagsConfigInput>>;
  upsert?: InputMaybe<Array<OrgUpsertWithWhereUniqueWithoutTagsConfigInput>>;
};

export type OrgUpdateOneInput = {
  connect?: InputMaybe<OrgWhereUniqueInput>;
  create?: InputMaybe<OrgCreateInput>;
  delete?: InputMaybe<Scalars['Boolean']>;
  disconnect?: InputMaybe<Scalars['Boolean']>;
  update?: InputMaybe<OrgUpdateDataInput>;
  upsert?: InputMaybe<OrgUpsertNestedInput>;
};

export type OrgUpdateOneRequiredWithoutPaidSearchSummaryInput = {
  connect?: InputMaybe<OrgWhereUniqueInput>;
  create?: InputMaybe<OrgCreateWithoutPaidSearchSummaryInput>;
  update?: InputMaybe<OrgUpdateWithoutPaidSearchSummaryDataInput>;
  upsert?: InputMaybe<OrgUpsertWithoutPaidSearchSummaryInput>;
};

export type OrgUpdateOneRequiredWithoutRolesInput = {
  connect?: InputMaybe<OrgWhereUniqueInput>;
  create?: InputMaybe<OrgCreateWithoutRolesInput>;
  update?: InputMaybe<OrgUpdateWithoutRolesDataInput>;
  upsert?: InputMaybe<OrgUpsertWithoutRolesInput>;
};

export type OrgUpdateOneWithoutAdvertiserCampaignOrdersInput = {
  connect?: InputMaybe<OrgWhereUniqueInput>;
  create?: InputMaybe<OrgCreateWithoutAdvertiserCampaignOrdersInput>;
  delete?: InputMaybe<Scalars['Boolean']>;
  disconnect?: InputMaybe<Scalars['Boolean']>;
  update?: InputMaybe<OrgUpdateWithoutAdvertiserCampaignOrdersDataInput>;
  upsert?: InputMaybe<OrgUpsertWithoutAdvertiserCampaignOrdersInput>;
};

export type OrgUpdateOneWithoutCustomersInput = {
  connect?: InputMaybe<OrgWhereUniqueInput>;
  create?: InputMaybe<OrgCreateWithoutCustomersInput>;
  delete?: InputMaybe<Scalars['Boolean']>;
  disconnect?: InputMaybe<Scalars['Boolean']>;
  update?: InputMaybe<OrgUpdateWithoutCustomersDataInput>;
  upsert?: InputMaybe<OrgUpsertWithoutCustomersInput>;
};

export type OrgUpdateOneWithoutLogoInput = {
  connect?: InputMaybe<OrgWhereUniqueInput>;
  create?: InputMaybe<OrgCreateWithoutLogoInput>;
  delete?: InputMaybe<Scalars['Boolean']>;
  disconnect?: InputMaybe<Scalars['Boolean']>;
  update?: InputMaybe<OrgUpdateWithoutLogoDataInput>;
  upsert?: InputMaybe<OrgUpsertWithoutLogoInput>;
};

export type OrgUpdateOneWithoutLoyaltyCampaignsInput = {
  connect?: InputMaybe<OrgWhereUniqueInput>;
  create?: InputMaybe<OrgCreateWithoutLoyaltyCampaignsInput>;
  delete?: InputMaybe<Scalars['Boolean']>;
  disconnect?: InputMaybe<Scalars['Boolean']>;
  update?: InputMaybe<OrgUpdateWithoutLoyaltyCampaignsDataInput>;
  upsert?: InputMaybe<OrgUpsertWithoutLoyaltyCampaignsInput>;
};

export type OrgUpdateOneWithoutOffersInput = {
  connect?: InputMaybe<OrgWhereUniqueInput>;
  create?: InputMaybe<OrgCreateWithoutOffersInput>;
  delete?: InputMaybe<Scalars['Boolean']>;
  disconnect?: InputMaybe<Scalars['Boolean']>;
  update?: InputMaybe<OrgUpdateWithoutOffersDataInput>;
  upsert?: InputMaybe<OrgUpsertWithoutOffersInput>;
};

export type OrgUpdateOneWithoutOrgSummaryInput = {
  connect?: InputMaybe<OrgWhereUniqueInput>;
  create?: InputMaybe<OrgCreateWithoutOrgSummaryInput>;
  delete?: InputMaybe<Scalars['Boolean']>;
  disconnect?: InputMaybe<Scalars['Boolean']>;
  update?: InputMaybe<OrgUpdateWithoutOrgSummaryDataInput>;
  upsert?: InputMaybe<OrgUpsertWithoutOrgSummaryInput>;
};

export type OrgUpdateOneWithoutSeoSummaryInput = {
  connect?: InputMaybe<OrgWhereUniqueInput>;
  create?: InputMaybe<OrgCreateWithoutSeoSummaryInput>;
  delete?: InputMaybe<Scalars['Boolean']>;
  disconnect?: InputMaybe<Scalars['Boolean']>;
  update?: InputMaybe<OrgUpdateWithoutSeoSummaryDataInput>;
  upsert?: InputMaybe<OrgUpsertWithoutSeoSummaryInput>;
};

export type OrgUpdateWithWhereUniqueNestedInput = {
  data: OrgUpdateDataInput;
  where: OrgWhereUniqueInput;
};

export type OrgUpdateWithWhereUniqueWithoutAdGroupCreativesInput = {
  data: OrgUpdateWithoutAdGroupCreativesDataInput;
  where: OrgWhereUniqueInput;
};

export type OrgUpdateWithWhereUniqueWithoutAudiencesInput = {
  data: OrgUpdateWithoutAudiencesDataInput;
  where: OrgWhereUniqueInput;
};

export type OrgUpdateWithWhereUniqueWithoutCampaignOrdersInput = {
  data: OrgUpdateWithoutCampaignOrdersDataInput;
  where: OrgWhereUniqueInput;
};

export type OrgUpdateWithWhereUniqueWithoutCampaignsInput = {
  data: OrgUpdateWithoutCampaignsDataInput;
  where: OrgWhereUniqueInput;
};

export type OrgUpdateWithWhereUniqueWithoutEventInput = {
  data: OrgUpdateWithoutEventDataInput;
  where: OrgWhereUniqueInput;
};

export type OrgUpdateWithWhereUniqueWithoutEventsTargetInput = {
  data: OrgUpdateWithoutEventsTargetDataInput;
  where: OrgWhereUniqueInput;
};

export type OrgUpdateWithWhereUniqueWithoutIabCategoryGroupInput = {
  data: OrgUpdateWithoutIabCategoryGroupDataInput;
  where: OrgWhereUniqueInput;
};

export type OrgUpdateWithWhereUniqueWithoutMediaInput = {
  data: OrgUpdateWithoutMediaDataInput;
  where: OrgWhereUniqueInput;
};

export type OrgUpdateWithWhereUniqueWithoutPaidSearchSummarySharedOrgsInput = {
  data: OrgUpdateWithoutPaidSearchSummarySharedOrgsDataInput;
  where: OrgWhereUniqueInput;
};

export type OrgUpdateWithWhereUniqueWithoutRegionGroupInput = {
  data: OrgUpdateWithoutRegionGroupDataInput;
  where: OrgWhereUniqueInput;
};

export type OrgUpdateWithWhereUniqueWithoutTagsConfigInput = {
  data: OrgUpdateWithoutTagsConfigDataInput;
  where: OrgWhereUniqueInput;
};

export type OrgUpdateWithoutAdGroupCreativesDataInput = {
  SEOSummary?: InputMaybe<OrgSeoSummaryUpdateOneWithoutOrgInput>;
  advertiserCampaignOrders?: InputMaybe<CampaignOrderUpdateManyWithoutAdvertiserInput>;
  audiences?: InputMaybe<AudienceUpdateManyWithoutOrgsInput>;
  brands?: InputMaybe<BrandUpdateManyInput>;
  campaignOrders?: InputMaybe<CampaignOrderUpdateManyWithoutOrgsInput>;
  campaigns?: InputMaybe<CampaignUpdateManyWithoutOrgsInput>;
  chatWootId?: InputMaybe<Scalars['String']>;
  config?: InputMaybe<OrgConfigUpdateOneWithoutOrgsInput>;
  cpm?: InputMaybe<Scalars['String']>;
  customers?: InputMaybe<CustomerUpdateManyWithoutOrgInput>;
  dataConfig?: InputMaybe<OrgDataConfigUpdateOneWithoutOrgsInput>;
  description?: InputMaybe<Scalars['String']>;
  domain?: InputMaybe<Scalars['String']>;
  event?: InputMaybe<EventUpdateOneWithoutOrgsInput>;
  eventsTarget?: InputMaybe<EventsTargetUpdateOneWithoutOrgsInput>;
  iabCategoryGroup?: InputMaybe<IabCategoryGroupUpdateManyWithoutOrgsInput>;
  isAllTimeFiltered?: InputMaybe<Scalars['Boolean']>;
  level?: InputMaybe<PartnerLevel>;
  locations?: InputMaybe<LocationUpdateManyInput>;
  logo?: InputMaybe<MediaUpdateOneWithoutOrgInput>;
  loyaltyCampaigns?: InputMaybe<LoyaltyCampaignUpdateManyWithoutOrgInput>;
  media?: InputMaybe<MediaUpdateManyWithoutSharedWithInput>;
  name?: InputMaybe<Scalars['String']>;
  offers?: InputMaybe<OfferUpdateManyWithoutOrgInput>;
  orgSummary?: InputMaybe<OrgSummaryUpdateOneWithoutOrgInput>;
  paidSearchSummary?: InputMaybe<PaidSearchSummaryUpdateOneWithoutOrgInput>;
  paidSearchSummarySharedOrgs?: InputMaybe<PaidSearchSummaryUpdateManyWithoutSharedOrgsInput>;
  parentOrg?: InputMaybe<OrgUpdateManyInput>;
  paymentConfig?: InputMaybe<PaymentConfigUpdateOneWithoutOrgsInput>;
  phone?: InputMaybe<Scalars['String']>;
  posConfig?: InputMaybe<PosConfigUpdateManyWithoutOrgInput>;
  regionGroup?: InputMaybe<RegionGroupUpdateManyWithoutOrgsInput>;
  roles?: InputMaybe<RoleUpdateManyWithoutOrgInput>;
  salesforceId?: InputMaybe<Scalars['String']>;
  sendEmailConfig?: InputMaybe<SendEmailConfigUpdateOneWithoutOrgsInput>;
  signInLogo?: InputMaybe<MediaUpdateOneInput>;
  tableConfig?: InputMaybe<OrgTableConfigUpdateOneWithoutOrgsInput>;
  tagsConfig?: InputMaybe<OrgTagsConfigUpdateOneWithoutOrgsInput>;
  themeConfig?: InputMaybe<OrgThemeConfigUpdateOneWithoutOrgsInput>;
  website?: InputMaybe<Scalars['String']>;
  zone?: InputMaybe<Scalars['String']>;
};

export type OrgUpdateWithoutAdvertiserCampaignOrdersDataInput = {
  SEOSummary?: InputMaybe<OrgSeoSummaryUpdateOneWithoutOrgInput>;
  adGroupCreatives?: InputMaybe<AdGroupCreativesUpdateManyWithoutOrgInput>;
  audiences?: InputMaybe<AudienceUpdateManyWithoutOrgsInput>;
  brands?: InputMaybe<BrandUpdateManyInput>;
  campaignOrders?: InputMaybe<CampaignOrderUpdateManyWithoutOrgsInput>;
  campaigns?: InputMaybe<CampaignUpdateManyWithoutOrgsInput>;
  chatWootId?: InputMaybe<Scalars['String']>;
  config?: InputMaybe<OrgConfigUpdateOneWithoutOrgsInput>;
  cpm?: InputMaybe<Scalars['String']>;
  customers?: InputMaybe<CustomerUpdateManyWithoutOrgInput>;
  dataConfig?: InputMaybe<OrgDataConfigUpdateOneWithoutOrgsInput>;
  description?: InputMaybe<Scalars['String']>;
  domain?: InputMaybe<Scalars['String']>;
  event?: InputMaybe<EventUpdateOneWithoutOrgsInput>;
  eventsTarget?: InputMaybe<EventsTargetUpdateOneWithoutOrgsInput>;
  iabCategoryGroup?: InputMaybe<IabCategoryGroupUpdateManyWithoutOrgsInput>;
  isAllTimeFiltered?: InputMaybe<Scalars['Boolean']>;
  level?: InputMaybe<PartnerLevel>;
  locations?: InputMaybe<LocationUpdateManyInput>;
  logo?: InputMaybe<MediaUpdateOneWithoutOrgInput>;
  loyaltyCampaigns?: InputMaybe<LoyaltyCampaignUpdateManyWithoutOrgInput>;
  media?: InputMaybe<MediaUpdateManyWithoutSharedWithInput>;
  name?: InputMaybe<Scalars['String']>;
  offers?: InputMaybe<OfferUpdateManyWithoutOrgInput>;
  orgSummary?: InputMaybe<OrgSummaryUpdateOneWithoutOrgInput>;
  paidSearchSummary?: InputMaybe<PaidSearchSummaryUpdateOneWithoutOrgInput>;
  paidSearchSummarySharedOrgs?: InputMaybe<PaidSearchSummaryUpdateManyWithoutSharedOrgsInput>;
  parentOrg?: InputMaybe<OrgUpdateManyInput>;
  paymentConfig?: InputMaybe<PaymentConfigUpdateOneWithoutOrgsInput>;
  phone?: InputMaybe<Scalars['String']>;
  posConfig?: InputMaybe<PosConfigUpdateManyWithoutOrgInput>;
  regionGroup?: InputMaybe<RegionGroupUpdateManyWithoutOrgsInput>;
  roles?: InputMaybe<RoleUpdateManyWithoutOrgInput>;
  salesforceId?: InputMaybe<Scalars['String']>;
  sendEmailConfig?: InputMaybe<SendEmailConfigUpdateOneWithoutOrgsInput>;
  signInLogo?: InputMaybe<MediaUpdateOneInput>;
  tableConfig?: InputMaybe<OrgTableConfigUpdateOneWithoutOrgsInput>;
  tagsConfig?: InputMaybe<OrgTagsConfigUpdateOneWithoutOrgsInput>;
  themeConfig?: InputMaybe<OrgThemeConfigUpdateOneWithoutOrgsInput>;
  website?: InputMaybe<Scalars['String']>;
  zone?: InputMaybe<Scalars['String']>;
};

export type OrgUpdateWithoutAudiencesDataInput = {
  SEOSummary?: InputMaybe<OrgSeoSummaryUpdateOneWithoutOrgInput>;
  adGroupCreatives?: InputMaybe<AdGroupCreativesUpdateManyWithoutOrgInput>;
  advertiserCampaignOrders?: InputMaybe<CampaignOrderUpdateManyWithoutAdvertiserInput>;
  brands?: InputMaybe<BrandUpdateManyInput>;
  campaignOrders?: InputMaybe<CampaignOrderUpdateManyWithoutOrgsInput>;
  campaigns?: InputMaybe<CampaignUpdateManyWithoutOrgsInput>;
  chatWootId?: InputMaybe<Scalars['String']>;
  config?: InputMaybe<OrgConfigUpdateOneWithoutOrgsInput>;
  cpm?: InputMaybe<Scalars['String']>;
  customers?: InputMaybe<CustomerUpdateManyWithoutOrgInput>;
  dataConfig?: InputMaybe<OrgDataConfigUpdateOneWithoutOrgsInput>;
  description?: InputMaybe<Scalars['String']>;
  domain?: InputMaybe<Scalars['String']>;
  event?: InputMaybe<EventUpdateOneWithoutOrgsInput>;
  eventsTarget?: InputMaybe<EventsTargetUpdateOneWithoutOrgsInput>;
  iabCategoryGroup?: InputMaybe<IabCategoryGroupUpdateManyWithoutOrgsInput>;
  isAllTimeFiltered?: InputMaybe<Scalars['Boolean']>;
  level?: InputMaybe<PartnerLevel>;
  locations?: InputMaybe<LocationUpdateManyInput>;
  logo?: InputMaybe<MediaUpdateOneWithoutOrgInput>;
  loyaltyCampaigns?: InputMaybe<LoyaltyCampaignUpdateManyWithoutOrgInput>;
  media?: InputMaybe<MediaUpdateManyWithoutSharedWithInput>;
  name?: InputMaybe<Scalars['String']>;
  offers?: InputMaybe<OfferUpdateManyWithoutOrgInput>;
  orgSummary?: InputMaybe<OrgSummaryUpdateOneWithoutOrgInput>;
  paidSearchSummary?: InputMaybe<PaidSearchSummaryUpdateOneWithoutOrgInput>;
  paidSearchSummarySharedOrgs?: InputMaybe<PaidSearchSummaryUpdateManyWithoutSharedOrgsInput>;
  parentOrg?: InputMaybe<OrgUpdateManyInput>;
  paymentConfig?: InputMaybe<PaymentConfigUpdateOneWithoutOrgsInput>;
  phone?: InputMaybe<Scalars['String']>;
  posConfig?: InputMaybe<PosConfigUpdateManyWithoutOrgInput>;
  regionGroup?: InputMaybe<RegionGroupUpdateManyWithoutOrgsInput>;
  roles?: InputMaybe<RoleUpdateManyWithoutOrgInput>;
  salesforceId?: InputMaybe<Scalars['String']>;
  sendEmailConfig?: InputMaybe<SendEmailConfigUpdateOneWithoutOrgsInput>;
  signInLogo?: InputMaybe<MediaUpdateOneInput>;
  tableConfig?: InputMaybe<OrgTableConfigUpdateOneWithoutOrgsInput>;
  tagsConfig?: InputMaybe<OrgTagsConfigUpdateOneWithoutOrgsInput>;
  themeConfig?: InputMaybe<OrgThemeConfigUpdateOneWithoutOrgsInput>;
  website?: InputMaybe<Scalars['String']>;
  zone?: InputMaybe<Scalars['String']>;
};

export type OrgUpdateWithoutCampaignOrdersDataInput = {
  SEOSummary?: InputMaybe<OrgSeoSummaryUpdateOneWithoutOrgInput>;
  adGroupCreatives?: InputMaybe<AdGroupCreativesUpdateManyWithoutOrgInput>;
  advertiserCampaignOrders?: InputMaybe<CampaignOrderUpdateManyWithoutAdvertiserInput>;
  audiences?: InputMaybe<AudienceUpdateManyWithoutOrgsInput>;
  brands?: InputMaybe<BrandUpdateManyInput>;
  campaigns?: InputMaybe<CampaignUpdateManyWithoutOrgsInput>;
  chatWootId?: InputMaybe<Scalars['String']>;
  config?: InputMaybe<OrgConfigUpdateOneWithoutOrgsInput>;
  cpm?: InputMaybe<Scalars['String']>;
  customers?: InputMaybe<CustomerUpdateManyWithoutOrgInput>;
  dataConfig?: InputMaybe<OrgDataConfigUpdateOneWithoutOrgsInput>;
  description?: InputMaybe<Scalars['String']>;
  domain?: InputMaybe<Scalars['String']>;
  event?: InputMaybe<EventUpdateOneWithoutOrgsInput>;
  eventsTarget?: InputMaybe<EventsTargetUpdateOneWithoutOrgsInput>;
  iabCategoryGroup?: InputMaybe<IabCategoryGroupUpdateManyWithoutOrgsInput>;
  isAllTimeFiltered?: InputMaybe<Scalars['Boolean']>;
  level?: InputMaybe<PartnerLevel>;
  locations?: InputMaybe<LocationUpdateManyInput>;
  logo?: InputMaybe<MediaUpdateOneWithoutOrgInput>;
  loyaltyCampaigns?: InputMaybe<LoyaltyCampaignUpdateManyWithoutOrgInput>;
  media?: InputMaybe<MediaUpdateManyWithoutSharedWithInput>;
  name?: InputMaybe<Scalars['String']>;
  offers?: InputMaybe<OfferUpdateManyWithoutOrgInput>;
  orgSummary?: InputMaybe<OrgSummaryUpdateOneWithoutOrgInput>;
  paidSearchSummary?: InputMaybe<PaidSearchSummaryUpdateOneWithoutOrgInput>;
  paidSearchSummarySharedOrgs?: InputMaybe<PaidSearchSummaryUpdateManyWithoutSharedOrgsInput>;
  parentOrg?: InputMaybe<OrgUpdateManyInput>;
  paymentConfig?: InputMaybe<PaymentConfigUpdateOneWithoutOrgsInput>;
  phone?: InputMaybe<Scalars['String']>;
  posConfig?: InputMaybe<PosConfigUpdateManyWithoutOrgInput>;
  regionGroup?: InputMaybe<RegionGroupUpdateManyWithoutOrgsInput>;
  roles?: InputMaybe<RoleUpdateManyWithoutOrgInput>;
  salesforceId?: InputMaybe<Scalars['String']>;
  sendEmailConfig?: InputMaybe<SendEmailConfigUpdateOneWithoutOrgsInput>;
  signInLogo?: InputMaybe<MediaUpdateOneInput>;
  tableConfig?: InputMaybe<OrgTableConfigUpdateOneWithoutOrgsInput>;
  tagsConfig?: InputMaybe<OrgTagsConfigUpdateOneWithoutOrgsInput>;
  themeConfig?: InputMaybe<OrgThemeConfigUpdateOneWithoutOrgsInput>;
  website?: InputMaybe<Scalars['String']>;
  zone?: InputMaybe<Scalars['String']>;
};

export type OrgUpdateWithoutCampaignsDataInput = {
  SEOSummary?: InputMaybe<OrgSeoSummaryUpdateOneWithoutOrgInput>;
  adGroupCreatives?: InputMaybe<AdGroupCreativesUpdateManyWithoutOrgInput>;
  advertiserCampaignOrders?: InputMaybe<CampaignOrderUpdateManyWithoutAdvertiserInput>;
  audiences?: InputMaybe<AudienceUpdateManyWithoutOrgsInput>;
  brands?: InputMaybe<BrandUpdateManyInput>;
  campaignOrders?: InputMaybe<CampaignOrderUpdateManyWithoutOrgsInput>;
  chatWootId?: InputMaybe<Scalars['String']>;
  config?: InputMaybe<OrgConfigUpdateOneWithoutOrgsInput>;
  cpm?: InputMaybe<Scalars['String']>;
  customers?: InputMaybe<CustomerUpdateManyWithoutOrgInput>;
  dataConfig?: InputMaybe<OrgDataConfigUpdateOneWithoutOrgsInput>;
  description?: InputMaybe<Scalars['String']>;
  domain?: InputMaybe<Scalars['String']>;
  event?: InputMaybe<EventUpdateOneWithoutOrgsInput>;
  eventsTarget?: InputMaybe<EventsTargetUpdateOneWithoutOrgsInput>;
  iabCategoryGroup?: InputMaybe<IabCategoryGroupUpdateManyWithoutOrgsInput>;
  isAllTimeFiltered?: InputMaybe<Scalars['Boolean']>;
  level?: InputMaybe<PartnerLevel>;
  locations?: InputMaybe<LocationUpdateManyInput>;
  logo?: InputMaybe<MediaUpdateOneWithoutOrgInput>;
  loyaltyCampaigns?: InputMaybe<LoyaltyCampaignUpdateManyWithoutOrgInput>;
  media?: InputMaybe<MediaUpdateManyWithoutSharedWithInput>;
  name?: InputMaybe<Scalars['String']>;
  offers?: InputMaybe<OfferUpdateManyWithoutOrgInput>;
  orgSummary?: InputMaybe<OrgSummaryUpdateOneWithoutOrgInput>;
  paidSearchSummary?: InputMaybe<PaidSearchSummaryUpdateOneWithoutOrgInput>;
  paidSearchSummarySharedOrgs?: InputMaybe<PaidSearchSummaryUpdateManyWithoutSharedOrgsInput>;
  parentOrg?: InputMaybe<OrgUpdateManyInput>;
  paymentConfig?: InputMaybe<PaymentConfigUpdateOneWithoutOrgsInput>;
  phone?: InputMaybe<Scalars['String']>;
  posConfig?: InputMaybe<PosConfigUpdateManyWithoutOrgInput>;
  regionGroup?: InputMaybe<RegionGroupUpdateManyWithoutOrgsInput>;
  roles?: InputMaybe<RoleUpdateManyWithoutOrgInput>;
  salesforceId?: InputMaybe<Scalars['String']>;
  sendEmailConfig?: InputMaybe<SendEmailConfigUpdateOneWithoutOrgsInput>;
  signInLogo?: InputMaybe<MediaUpdateOneInput>;
  tableConfig?: InputMaybe<OrgTableConfigUpdateOneWithoutOrgsInput>;
  tagsConfig?: InputMaybe<OrgTagsConfigUpdateOneWithoutOrgsInput>;
  themeConfig?: InputMaybe<OrgThemeConfigUpdateOneWithoutOrgsInput>;
  website?: InputMaybe<Scalars['String']>;
  zone?: InputMaybe<Scalars['String']>;
};

export type OrgUpdateWithoutCustomersDataInput = {
  SEOSummary?: InputMaybe<OrgSeoSummaryUpdateOneWithoutOrgInput>;
  adGroupCreatives?: InputMaybe<AdGroupCreativesUpdateManyWithoutOrgInput>;
  advertiserCampaignOrders?: InputMaybe<CampaignOrderUpdateManyWithoutAdvertiserInput>;
  audiences?: InputMaybe<AudienceUpdateManyWithoutOrgsInput>;
  brands?: InputMaybe<BrandUpdateManyInput>;
  campaignOrders?: InputMaybe<CampaignOrderUpdateManyWithoutOrgsInput>;
  campaigns?: InputMaybe<CampaignUpdateManyWithoutOrgsInput>;
  chatWootId?: InputMaybe<Scalars['String']>;
  config?: InputMaybe<OrgConfigUpdateOneWithoutOrgsInput>;
  cpm?: InputMaybe<Scalars['String']>;
  dataConfig?: InputMaybe<OrgDataConfigUpdateOneWithoutOrgsInput>;
  description?: InputMaybe<Scalars['String']>;
  domain?: InputMaybe<Scalars['String']>;
  event?: InputMaybe<EventUpdateOneWithoutOrgsInput>;
  eventsTarget?: InputMaybe<EventsTargetUpdateOneWithoutOrgsInput>;
  iabCategoryGroup?: InputMaybe<IabCategoryGroupUpdateManyWithoutOrgsInput>;
  isAllTimeFiltered?: InputMaybe<Scalars['Boolean']>;
  level?: InputMaybe<PartnerLevel>;
  locations?: InputMaybe<LocationUpdateManyInput>;
  logo?: InputMaybe<MediaUpdateOneWithoutOrgInput>;
  loyaltyCampaigns?: InputMaybe<LoyaltyCampaignUpdateManyWithoutOrgInput>;
  media?: InputMaybe<MediaUpdateManyWithoutSharedWithInput>;
  name?: InputMaybe<Scalars['String']>;
  offers?: InputMaybe<OfferUpdateManyWithoutOrgInput>;
  orgSummary?: InputMaybe<OrgSummaryUpdateOneWithoutOrgInput>;
  paidSearchSummary?: InputMaybe<PaidSearchSummaryUpdateOneWithoutOrgInput>;
  paidSearchSummarySharedOrgs?: InputMaybe<PaidSearchSummaryUpdateManyWithoutSharedOrgsInput>;
  parentOrg?: InputMaybe<OrgUpdateManyInput>;
  paymentConfig?: InputMaybe<PaymentConfigUpdateOneWithoutOrgsInput>;
  phone?: InputMaybe<Scalars['String']>;
  posConfig?: InputMaybe<PosConfigUpdateManyWithoutOrgInput>;
  regionGroup?: InputMaybe<RegionGroupUpdateManyWithoutOrgsInput>;
  roles?: InputMaybe<RoleUpdateManyWithoutOrgInput>;
  salesforceId?: InputMaybe<Scalars['String']>;
  sendEmailConfig?: InputMaybe<SendEmailConfigUpdateOneWithoutOrgsInput>;
  signInLogo?: InputMaybe<MediaUpdateOneInput>;
  tableConfig?: InputMaybe<OrgTableConfigUpdateOneWithoutOrgsInput>;
  tagsConfig?: InputMaybe<OrgTagsConfigUpdateOneWithoutOrgsInput>;
  themeConfig?: InputMaybe<OrgThemeConfigUpdateOneWithoutOrgsInput>;
  website?: InputMaybe<Scalars['String']>;
  zone?: InputMaybe<Scalars['String']>;
};

export type OrgUpdateWithoutEventDataInput = {
  SEOSummary?: InputMaybe<OrgSeoSummaryUpdateOneWithoutOrgInput>;
  adGroupCreatives?: InputMaybe<AdGroupCreativesUpdateManyWithoutOrgInput>;
  advertiserCampaignOrders?: InputMaybe<CampaignOrderUpdateManyWithoutAdvertiserInput>;
  audiences?: InputMaybe<AudienceUpdateManyWithoutOrgsInput>;
  brands?: InputMaybe<BrandUpdateManyInput>;
  campaignOrders?: InputMaybe<CampaignOrderUpdateManyWithoutOrgsInput>;
  campaigns?: InputMaybe<CampaignUpdateManyWithoutOrgsInput>;
  chatWootId?: InputMaybe<Scalars['String']>;
  config?: InputMaybe<OrgConfigUpdateOneWithoutOrgsInput>;
  cpm?: InputMaybe<Scalars['String']>;
  customers?: InputMaybe<CustomerUpdateManyWithoutOrgInput>;
  dataConfig?: InputMaybe<OrgDataConfigUpdateOneWithoutOrgsInput>;
  description?: InputMaybe<Scalars['String']>;
  domain?: InputMaybe<Scalars['String']>;
  eventsTarget?: InputMaybe<EventsTargetUpdateOneWithoutOrgsInput>;
  iabCategoryGroup?: InputMaybe<IabCategoryGroupUpdateManyWithoutOrgsInput>;
  isAllTimeFiltered?: InputMaybe<Scalars['Boolean']>;
  level?: InputMaybe<PartnerLevel>;
  locations?: InputMaybe<LocationUpdateManyInput>;
  logo?: InputMaybe<MediaUpdateOneWithoutOrgInput>;
  loyaltyCampaigns?: InputMaybe<LoyaltyCampaignUpdateManyWithoutOrgInput>;
  media?: InputMaybe<MediaUpdateManyWithoutSharedWithInput>;
  name?: InputMaybe<Scalars['String']>;
  offers?: InputMaybe<OfferUpdateManyWithoutOrgInput>;
  orgSummary?: InputMaybe<OrgSummaryUpdateOneWithoutOrgInput>;
  paidSearchSummary?: InputMaybe<PaidSearchSummaryUpdateOneWithoutOrgInput>;
  paidSearchSummarySharedOrgs?: InputMaybe<PaidSearchSummaryUpdateManyWithoutSharedOrgsInput>;
  parentOrg?: InputMaybe<OrgUpdateManyInput>;
  paymentConfig?: InputMaybe<PaymentConfigUpdateOneWithoutOrgsInput>;
  phone?: InputMaybe<Scalars['String']>;
  posConfig?: InputMaybe<PosConfigUpdateManyWithoutOrgInput>;
  regionGroup?: InputMaybe<RegionGroupUpdateManyWithoutOrgsInput>;
  roles?: InputMaybe<RoleUpdateManyWithoutOrgInput>;
  salesforceId?: InputMaybe<Scalars['String']>;
  sendEmailConfig?: InputMaybe<SendEmailConfigUpdateOneWithoutOrgsInput>;
  signInLogo?: InputMaybe<MediaUpdateOneInput>;
  tableConfig?: InputMaybe<OrgTableConfigUpdateOneWithoutOrgsInput>;
  tagsConfig?: InputMaybe<OrgTagsConfigUpdateOneWithoutOrgsInput>;
  themeConfig?: InputMaybe<OrgThemeConfigUpdateOneWithoutOrgsInput>;
  website?: InputMaybe<Scalars['String']>;
  zone?: InputMaybe<Scalars['String']>;
};

export type OrgUpdateWithoutEventsTargetDataInput = {
  SEOSummary?: InputMaybe<OrgSeoSummaryUpdateOneWithoutOrgInput>;
  adGroupCreatives?: InputMaybe<AdGroupCreativesUpdateManyWithoutOrgInput>;
  advertiserCampaignOrders?: InputMaybe<CampaignOrderUpdateManyWithoutAdvertiserInput>;
  audiences?: InputMaybe<AudienceUpdateManyWithoutOrgsInput>;
  brands?: InputMaybe<BrandUpdateManyInput>;
  campaignOrders?: InputMaybe<CampaignOrderUpdateManyWithoutOrgsInput>;
  campaigns?: InputMaybe<CampaignUpdateManyWithoutOrgsInput>;
  chatWootId?: InputMaybe<Scalars['String']>;
  config?: InputMaybe<OrgConfigUpdateOneWithoutOrgsInput>;
  cpm?: InputMaybe<Scalars['String']>;
  customers?: InputMaybe<CustomerUpdateManyWithoutOrgInput>;
  dataConfig?: InputMaybe<OrgDataConfigUpdateOneWithoutOrgsInput>;
  description?: InputMaybe<Scalars['String']>;
  domain?: InputMaybe<Scalars['String']>;
  event?: InputMaybe<EventUpdateOneWithoutOrgsInput>;
  iabCategoryGroup?: InputMaybe<IabCategoryGroupUpdateManyWithoutOrgsInput>;
  isAllTimeFiltered?: InputMaybe<Scalars['Boolean']>;
  level?: InputMaybe<PartnerLevel>;
  locations?: InputMaybe<LocationUpdateManyInput>;
  logo?: InputMaybe<MediaUpdateOneWithoutOrgInput>;
  loyaltyCampaigns?: InputMaybe<LoyaltyCampaignUpdateManyWithoutOrgInput>;
  media?: InputMaybe<MediaUpdateManyWithoutSharedWithInput>;
  name?: InputMaybe<Scalars['String']>;
  offers?: InputMaybe<OfferUpdateManyWithoutOrgInput>;
  orgSummary?: InputMaybe<OrgSummaryUpdateOneWithoutOrgInput>;
  paidSearchSummary?: InputMaybe<PaidSearchSummaryUpdateOneWithoutOrgInput>;
  paidSearchSummarySharedOrgs?: InputMaybe<PaidSearchSummaryUpdateManyWithoutSharedOrgsInput>;
  parentOrg?: InputMaybe<OrgUpdateManyInput>;
  paymentConfig?: InputMaybe<PaymentConfigUpdateOneWithoutOrgsInput>;
  phone?: InputMaybe<Scalars['String']>;
  posConfig?: InputMaybe<PosConfigUpdateManyWithoutOrgInput>;
  regionGroup?: InputMaybe<RegionGroupUpdateManyWithoutOrgsInput>;
  roles?: InputMaybe<RoleUpdateManyWithoutOrgInput>;
  salesforceId?: InputMaybe<Scalars['String']>;
  sendEmailConfig?: InputMaybe<SendEmailConfigUpdateOneWithoutOrgsInput>;
  signInLogo?: InputMaybe<MediaUpdateOneInput>;
  tableConfig?: InputMaybe<OrgTableConfigUpdateOneWithoutOrgsInput>;
  tagsConfig?: InputMaybe<OrgTagsConfigUpdateOneWithoutOrgsInput>;
  themeConfig?: InputMaybe<OrgThemeConfigUpdateOneWithoutOrgsInput>;
  website?: InputMaybe<Scalars['String']>;
  zone?: InputMaybe<Scalars['String']>;
};

export type OrgUpdateWithoutIabCategoryGroupDataInput = {
  SEOSummary?: InputMaybe<OrgSeoSummaryUpdateOneWithoutOrgInput>;
  adGroupCreatives?: InputMaybe<AdGroupCreativesUpdateManyWithoutOrgInput>;
  advertiserCampaignOrders?: InputMaybe<CampaignOrderUpdateManyWithoutAdvertiserInput>;
  audiences?: InputMaybe<AudienceUpdateManyWithoutOrgsInput>;
  brands?: InputMaybe<BrandUpdateManyInput>;
  campaignOrders?: InputMaybe<CampaignOrderUpdateManyWithoutOrgsInput>;
  campaigns?: InputMaybe<CampaignUpdateManyWithoutOrgsInput>;
  chatWootId?: InputMaybe<Scalars['String']>;
  config?: InputMaybe<OrgConfigUpdateOneWithoutOrgsInput>;
  cpm?: InputMaybe<Scalars['String']>;
  customers?: InputMaybe<CustomerUpdateManyWithoutOrgInput>;
  dataConfig?: InputMaybe<OrgDataConfigUpdateOneWithoutOrgsInput>;
  description?: InputMaybe<Scalars['String']>;
  domain?: InputMaybe<Scalars['String']>;
  event?: InputMaybe<EventUpdateOneWithoutOrgsInput>;
  eventsTarget?: InputMaybe<EventsTargetUpdateOneWithoutOrgsInput>;
  isAllTimeFiltered?: InputMaybe<Scalars['Boolean']>;
  level?: InputMaybe<PartnerLevel>;
  locations?: InputMaybe<LocationUpdateManyInput>;
  logo?: InputMaybe<MediaUpdateOneWithoutOrgInput>;
  loyaltyCampaigns?: InputMaybe<LoyaltyCampaignUpdateManyWithoutOrgInput>;
  media?: InputMaybe<MediaUpdateManyWithoutSharedWithInput>;
  name?: InputMaybe<Scalars['String']>;
  offers?: InputMaybe<OfferUpdateManyWithoutOrgInput>;
  orgSummary?: InputMaybe<OrgSummaryUpdateOneWithoutOrgInput>;
  paidSearchSummary?: InputMaybe<PaidSearchSummaryUpdateOneWithoutOrgInput>;
  paidSearchSummarySharedOrgs?: InputMaybe<PaidSearchSummaryUpdateManyWithoutSharedOrgsInput>;
  parentOrg?: InputMaybe<OrgUpdateManyInput>;
  paymentConfig?: InputMaybe<PaymentConfigUpdateOneWithoutOrgsInput>;
  phone?: InputMaybe<Scalars['String']>;
  posConfig?: InputMaybe<PosConfigUpdateManyWithoutOrgInput>;
  regionGroup?: InputMaybe<RegionGroupUpdateManyWithoutOrgsInput>;
  roles?: InputMaybe<RoleUpdateManyWithoutOrgInput>;
  salesforceId?: InputMaybe<Scalars['String']>;
  sendEmailConfig?: InputMaybe<SendEmailConfigUpdateOneWithoutOrgsInput>;
  signInLogo?: InputMaybe<MediaUpdateOneInput>;
  tableConfig?: InputMaybe<OrgTableConfigUpdateOneWithoutOrgsInput>;
  tagsConfig?: InputMaybe<OrgTagsConfigUpdateOneWithoutOrgsInput>;
  themeConfig?: InputMaybe<OrgThemeConfigUpdateOneWithoutOrgsInput>;
  website?: InputMaybe<Scalars['String']>;
  zone?: InputMaybe<Scalars['String']>;
};

export type OrgUpdateWithoutLogoDataInput = {
  SEOSummary?: InputMaybe<OrgSeoSummaryUpdateOneWithoutOrgInput>;
  adGroupCreatives?: InputMaybe<AdGroupCreativesUpdateManyWithoutOrgInput>;
  advertiserCampaignOrders?: InputMaybe<CampaignOrderUpdateManyWithoutAdvertiserInput>;
  audiences?: InputMaybe<AudienceUpdateManyWithoutOrgsInput>;
  brands?: InputMaybe<BrandUpdateManyInput>;
  campaignOrders?: InputMaybe<CampaignOrderUpdateManyWithoutOrgsInput>;
  campaigns?: InputMaybe<CampaignUpdateManyWithoutOrgsInput>;
  chatWootId?: InputMaybe<Scalars['String']>;
  config?: InputMaybe<OrgConfigUpdateOneWithoutOrgsInput>;
  cpm?: InputMaybe<Scalars['String']>;
  customers?: InputMaybe<CustomerUpdateManyWithoutOrgInput>;
  dataConfig?: InputMaybe<OrgDataConfigUpdateOneWithoutOrgsInput>;
  description?: InputMaybe<Scalars['String']>;
  domain?: InputMaybe<Scalars['String']>;
  event?: InputMaybe<EventUpdateOneWithoutOrgsInput>;
  eventsTarget?: InputMaybe<EventsTargetUpdateOneWithoutOrgsInput>;
  iabCategoryGroup?: InputMaybe<IabCategoryGroupUpdateManyWithoutOrgsInput>;
  isAllTimeFiltered?: InputMaybe<Scalars['Boolean']>;
  level?: InputMaybe<PartnerLevel>;
  locations?: InputMaybe<LocationUpdateManyInput>;
  loyaltyCampaigns?: InputMaybe<LoyaltyCampaignUpdateManyWithoutOrgInput>;
  media?: InputMaybe<MediaUpdateManyWithoutSharedWithInput>;
  name?: InputMaybe<Scalars['String']>;
  offers?: InputMaybe<OfferUpdateManyWithoutOrgInput>;
  orgSummary?: InputMaybe<OrgSummaryUpdateOneWithoutOrgInput>;
  paidSearchSummary?: InputMaybe<PaidSearchSummaryUpdateOneWithoutOrgInput>;
  paidSearchSummarySharedOrgs?: InputMaybe<PaidSearchSummaryUpdateManyWithoutSharedOrgsInput>;
  parentOrg?: InputMaybe<OrgUpdateManyInput>;
  paymentConfig?: InputMaybe<PaymentConfigUpdateOneWithoutOrgsInput>;
  phone?: InputMaybe<Scalars['String']>;
  posConfig?: InputMaybe<PosConfigUpdateManyWithoutOrgInput>;
  regionGroup?: InputMaybe<RegionGroupUpdateManyWithoutOrgsInput>;
  roles?: InputMaybe<RoleUpdateManyWithoutOrgInput>;
  salesforceId?: InputMaybe<Scalars['String']>;
  sendEmailConfig?: InputMaybe<SendEmailConfigUpdateOneWithoutOrgsInput>;
  signInLogo?: InputMaybe<MediaUpdateOneInput>;
  tableConfig?: InputMaybe<OrgTableConfigUpdateOneWithoutOrgsInput>;
  tagsConfig?: InputMaybe<OrgTagsConfigUpdateOneWithoutOrgsInput>;
  themeConfig?: InputMaybe<OrgThemeConfigUpdateOneWithoutOrgsInput>;
  website?: InputMaybe<Scalars['String']>;
  zone?: InputMaybe<Scalars['String']>;
};

export type OrgUpdateWithoutLoyaltyCampaignsDataInput = {
  SEOSummary?: InputMaybe<OrgSeoSummaryUpdateOneWithoutOrgInput>;
  adGroupCreatives?: InputMaybe<AdGroupCreativesUpdateManyWithoutOrgInput>;
  advertiserCampaignOrders?: InputMaybe<CampaignOrderUpdateManyWithoutAdvertiserInput>;
  audiences?: InputMaybe<AudienceUpdateManyWithoutOrgsInput>;
  brands?: InputMaybe<BrandUpdateManyInput>;
  campaignOrders?: InputMaybe<CampaignOrderUpdateManyWithoutOrgsInput>;
  campaigns?: InputMaybe<CampaignUpdateManyWithoutOrgsInput>;
  chatWootId?: InputMaybe<Scalars['String']>;
  config?: InputMaybe<OrgConfigUpdateOneWithoutOrgsInput>;
  cpm?: InputMaybe<Scalars['String']>;
  customers?: InputMaybe<CustomerUpdateManyWithoutOrgInput>;
  dataConfig?: InputMaybe<OrgDataConfigUpdateOneWithoutOrgsInput>;
  description?: InputMaybe<Scalars['String']>;
  domain?: InputMaybe<Scalars['String']>;
  event?: InputMaybe<EventUpdateOneWithoutOrgsInput>;
  eventsTarget?: InputMaybe<EventsTargetUpdateOneWithoutOrgsInput>;
  iabCategoryGroup?: InputMaybe<IabCategoryGroupUpdateManyWithoutOrgsInput>;
  isAllTimeFiltered?: InputMaybe<Scalars['Boolean']>;
  level?: InputMaybe<PartnerLevel>;
  locations?: InputMaybe<LocationUpdateManyInput>;
  logo?: InputMaybe<MediaUpdateOneWithoutOrgInput>;
  media?: InputMaybe<MediaUpdateManyWithoutSharedWithInput>;
  name?: InputMaybe<Scalars['String']>;
  offers?: InputMaybe<OfferUpdateManyWithoutOrgInput>;
  orgSummary?: InputMaybe<OrgSummaryUpdateOneWithoutOrgInput>;
  paidSearchSummary?: InputMaybe<PaidSearchSummaryUpdateOneWithoutOrgInput>;
  paidSearchSummarySharedOrgs?: InputMaybe<PaidSearchSummaryUpdateManyWithoutSharedOrgsInput>;
  parentOrg?: InputMaybe<OrgUpdateManyInput>;
  paymentConfig?: InputMaybe<PaymentConfigUpdateOneWithoutOrgsInput>;
  phone?: InputMaybe<Scalars['String']>;
  posConfig?: InputMaybe<PosConfigUpdateManyWithoutOrgInput>;
  regionGroup?: InputMaybe<RegionGroupUpdateManyWithoutOrgsInput>;
  roles?: InputMaybe<RoleUpdateManyWithoutOrgInput>;
  salesforceId?: InputMaybe<Scalars['String']>;
  sendEmailConfig?: InputMaybe<SendEmailConfigUpdateOneWithoutOrgsInput>;
  signInLogo?: InputMaybe<MediaUpdateOneInput>;
  tableConfig?: InputMaybe<OrgTableConfigUpdateOneWithoutOrgsInput>;
  tagsConfig?: InputMaybe<OrgTagsConfigUpdateOneWithoutOrgsInput>;
  themeConfig?: InputMaybe<OrgThemeConfigUpdateOneWithoutOrgsInput>;
  website?: InputMaybe<Scalars['String']>;
  zone?: InputMaybe<Scalars['String']>;
};

export type OrgUpdateWithoutMediaDataInput = {
  SEOSummary?: InputMaybe<OrgSeoSummaryUpdateOneWithoutOrgInput>;
  adGroupCreatives?: InputMaybe<AdGroupCreativesUpdateManyWithoutOrgInput>;
  advertiserCampaignOrders?: InputMaybe<CampaignOrderUpdateManyWithoutAdvertiserInput>;
  audiences?: InputMaybe<AudienceUpdateManyWithoutOrgsInput>;
  brands?: InputMaybe<BrandUpdateManyInput>;
  campaignOrders?: InputMaybe<CampaignOrderUpdateManyWithoutOrgsInput>;
  campaigns?: InputMaybe<CampaignUpdateManyWithoutOrgsInput>;
  chatWootId?: InputMaybe<Scalars['String']>;
  config?: InputMaybe<OrgConfigUpdateOneWithoutOrgsInput>;
  cpm?: InputMaybe<Scalars['String']>;
  customers?: InputMaybe<CustomerUpdateManyWithoutOrgInput>;
  dataConfig?: InputMaybe<OrgDataConfigUpdateOneWithoutOrgsInput>;
  description?: InputMaybe<Scalars['String']>;
  domain?: InputMaybe<Scalars['String']>;
  event?: InputMaybe<EventUpdateOneWithoutOrgsInput>;
  eventsTarget?: InputMaybe<EventsTargetUpdateOneWithoutOrgsInput>;
  iabCategoryGroup?: InputMaybe<IabCategoryGroupUpdateManyWithoutOrgsInput>;
  isAllTimeFiltered?: InputMaybe<Scalars['Boolean']>;
  level?: InputMaybe<PartnerLevel>;
  locations?: InputMaybe<LocationUpdateManyInput>;
  logo?: InputMaybe<MediaUpdateOneWithoutOrgInput>;
  loyaltyCampaigns?: InputMaybe<LoyaltyCampaignUpdateManyWithoutOrgInput>;
  name?: InputMaybe<Scalars['String']>;
  offers?: InputMaybe<OfferUpdateManyWithoutOrgInput>;
  orgSummary?: InputMaybe<OrgSummaryUpdateOneWithoutOrgInput>;
  paidSearchSummary?: InputMaybe<PaidSearchSummaryUpdateOneWithoutOrgInput>;
  paidSearchSummarySharedOrgs?: InputMaybe<PaidSearchSummaryUpdateManyWithoutSharedOrgsInput>;
  parentOrg?: InputMaybe<OrgUpdateManyInput>;
  paymentConfig?: InputMaybe<PaymentConfigUpdateOneWithoutOrgsInput>;
  phone?: InputMaybe<Scalars['String']>;
  posConfig?: InputMaybe<PosConfigUpdateManyWithoutOrgInput>;
  regionGroup?: InputMaybe<RegionGroupUpdateManyWithoutOrgsInput>;
  roles?: InputMaybe<RoleUpdateManyWithoutOrgInput>;
  salesforceId?: InputMaybe<Scalars['String']>;
  sendEmailConfig?: InputMaybe<SendEmailConfigUpdateOneWithoutOrgsInput>;
  signInLogo?: InputMaybe<MediaUpdateOneInput>;
  tableConfig?: InputMaybe<OrgTableConfigUpdateOneWithoutOrgsInput>;
  tagsConfig?: InputMaybe<OrgTagsConfigUpdateOneWithoutOrgsInput>;
  themeConfig?: InputMaybe<OrgThemeConfigUpdateOneWithoutOrgsInput>;
  website?: InputMaybe<Scalars['String']>;
  zone?: InputMaybe<Scalars['String']>;
};

export type OrgUpdateWithoutOffersDataInput = {
  SEOSummary?: InputMaybe<OrgSeoSummaryUpdateOneWithoutOrgInput>;
  adGroupCreatives?: InputMaybe<AdGroupCreativesUpdateManyWithoutOrgInput>;
  advertiserCampaignOrders?: InputMaybe<CampaignOrderUpdateManyWithoutAdvertiserInput>;
  audiences?: InputMaybe<AudienceUpdateManyWithoutOrgsInput>;
  brands?: InputMaybe<BrandUpdateManyInput>;
  campaignOrders?: InputMaybe<CampaignOrderUpdateManyWithoutOrgsInput>;
  campaigns?: InputMaybe<CampaignUpdateManyWithoutOrgsInput>;
  chatWootId?: InputMaybe<Scalars['String']>;
  config?: InputMaybe<OrgConfigUpdateOneWithoutOrgsInput>;
  cpm?: InputMaybe<Scalars['String']>;
  customers?: InputMaybe<CustomerUpdateManyWithoutOrgInput>;
  dataConfig?: InputMaybe<OrgDataConfigUpdateOneWithoutOrgsInput>;
  description?: InputMaybe<Scalars['String']>;
  domain?: InputMaybe<Scalars['String']>;
  event?: InputMaybe<EventUpdateOneWithoutOrgsInput>;
  eventsTarget?: InputMaybe<EventsTargetUpdateOneWithoutOrgsInput>;
  iabCategoryGroup?: InputMaybe<IabCategoryGroupUpdateManyWithoutOrgsInput>;
  isAllTimeFiltered?: InputMaybe<Scalars['Boolean']>;
  level?: InputMaybe<PartnerLevel>;
  locations?: InputMaybe<LocationUpdateManyInput>;
  logo?: InputMaybe<MediaUpdateOneWithoutOrgInput>;
  loyaltyCampaigns?: InputMaybe<LoyaltyCampaignUpdateManyWithoutOrgInput>;
  media?: InputMaybe<MediaUpdateManyWithoutSharedWithInput>;
  name?: InputMaybe<Scalars['String']>;
  orgSummary?: InputMaybe<OrgSummaryUpdateOneWithoutOrgInput>;
  paidSearchSummary?: InputMaybe<PaidSearchSummaryUpdateOneWithoutOrgInput>;
  paidSearchSummarySharedOrgs?: InputMaybe<PaidSearchSummaryUpdateManyWithoutSharedOrgsInput>;
  parentOrg?: InputMaybe<OrgUpdateManyInput>;
  paymentConfig?: InputMaybe<PaymentConfigUpdateOneWithoutOrgsInput>;
  phone?: InputMaybe<Scalars['String']>;
  posConfig?: InputMaybe<PosConfigUpdateManyWithoutOrgInput>;
  regionGroup?: InputMaybe<RegionGroupUpdateManyWithoutOrgsInput>;
  roles?: InputMaybe<RoleUpdateManyWithoutOrgInput>;
  salesforceId?: InputMaybe<Scalars['String']>;
  sendEmailConfig?: InputMaybe<SendEmailConfigUpdateOneWithoutOrgsInput>;
  signInLogo?: InputMaybe<MediaUpdateOneInput>;
  tableConfig?: InputMaybe<OrgTableConfigUpdateOneWithoutOrgsInput>;
  tagsConfig?: InputMaybe<OrgTagsConfigUpdateOneWithoutOrgsInput>;
  themeConfig?: InputMaybe<OrgThemeConfigUpdateOneWithoutOrgsInput>;
  website?: InputMaybe<Scalars['String']>;
  zone?: InputMaybe<Scalars['String']>;
};

export type OrgUpdateWithoutOrgSummaryDataInput = {
  SEOSummary?: InputMaybe<OrgSeoSummaryUpdateOneWithoutOrgInput>;
  adGroupCreatives?: InputMaybe<AdGroupCreativesUpdateManyWithoutOrgInput>;
  advertiserCampaignOrders?: InputMaybe<CampaignOrderUpdateManyWithoutAdvertiserInput>;
  audiences?: InputMaybe<AudienceUpdateManyWithoutOrgsInput>;
  brands?: InputMaybe<BrandUpdateManyInput>;
  campaignOrders?: InputMaybe<CampaignOrderUpdateManyWithoutOrgsInput>;
  campaigns?: InputMaybe<CampaignUpdateManyWithoutOrgsInput>;
  chatWootId?: InputMaybe<Scalars['String']>;
  config?: InputMaybe<OrgConfigUpdateOneWithoutOrgsInput>;
  cpm?: InputMaybe<Scalars['String']>;
  customers?: InputMaybe<CustomerUpdateManyWithoutOrgInput>;
  dataConfig?: InputMaybe<OrgDataConfigUpdateOneWithoutOrgsInput>;
  description?: InputMaybe<Scalars['String']>;
  domain?: InputMaybe<Scalars['String']>;
  event?: InputMaybe<EventUpdateOneWithoutOrgsInput>;
  eventsTarget?: InputMaybe<EventsTargetUpdateOneWithoutOrgsInput>;
  iabCategoryGroup?: InputMaybe<IabCategoryGroupUpdateManyWithoutOrgsInput>;
  isAllTimeFiltered?: InputMaybe<Scalars['Boolean']>;
  level?: InputMaybe<PartnerLevel>;
  locations?: InputMaybe<LocationUpdateManyInput>;
  logo?: InputMaybe<MediaUpdateOneWithoutOrgInput>;
  loyaltyCampaigns?: InputMaybe<LoyaltyCampaignUpdateManyWithoutOrgInput>;
  media?: InputMaybe<MediaUpdateManyWithoutSharedWithInput>;
  name?: InputMaybe<Scalars['String']>;
  offers?: InputMaybe<OfferUpdateManyWithoutOrgInput>;
  paidSearchSummary?: InputMaybe<PaidSearchSummaryUpdateOneWithoutOrgInput>;
  paidSearchSummarySharedOrgs?: InputMaybe<PaidSearchSummaryUpdateManyWithoutSharedOrgsInput>;
  parentOrg?: InputMaybe<OrgUpdateManyInput>;
  paymentConfig?: InputMaybe<PaymentConfigUpdateOneWithoutOrgsInput>;
  phone?: InputMaybe<Scalars['String']>;
  posConfig?: InputMaybe<PosConfigUpdateManyWithoutOrgInput>;
  regionGroup?: InputMaybe<RegionGroupUpdateManyWithoutOrgsInput>;
  roles?: InputMaybe<RoleUpdateManyWithoutOrgInput>;
  salesforceId?: InputMaybe<Scalars['String']>;
  sendEmailConfig?: InputMaybe<SendEmailConfigUpdateOneWithoutOrgsInput>;
  signInLogo?: InputMaybe<MediaUpdateOneInput>;
  tableConfig?: InputMaybe<OrgTableConfigUpdateOneWithoutOrgsInput>;
  tagsConfig?: InputMaybe<OrgTagsConfigUpdateOneWithoutOrgsInput>;
  themeConfig?: InputMaybe<OrgThemeConfigUpdateOneWithoutOrgsInput>;
  website?: InputMaybe<Scalars['String']>;
  zone?: InputMaybe<Scalars['String']>;
};

export type OrgUpdateWithoutPaidSearchSummaryDataInput = {
  SEOSummary?: InputMaybe<OrgSeoSummaryUpdateOneWithoutOrgInput>;
  adGroupCreatives?: InputMaybe<AdGroupCreativesUpdateManyWithoutOrgInput>;
  advertiserCampaignOrders?: InputMaybe<CampaignOrderUpdateManyWithoutAdvertiserInput>;
  audiences?: InputMaybe<AudienceUpdateManyWithoutOrgsInput>;
  brands?: InputMaybe<BrandUpdateManyInput>;
  campaignOrders?: InputMaybe<CampaignOrderUpdateManyWithoutOrgsInput>;
  campaigns?: InputMaybe<CampaignUpdateManyWithoutOrgsInput>;
  chatWootId?: InputMaybe<Scalars['String']>;
  config?: InputMaybe<OrgConfigUpdateOneWithoutOrgsInput>;
  cpm?: InputMaybe<Scalars['String']>;
  customers?: InputMaybe<CustomerUpdateManyWithoutOrgInput>;
  dataConfig?: InputMaybe<OrgDataConfigUpdateOneWithoutOrgsInput>;
  description?: InputMaybe<Scalars['String']>;
  domain?: InputMaybe<Scalars['String']>;
  event?: InputMaybe<EventUpdateOneWithoutOrgsInput>;
  eventsTarget?: InputMaybe<EventsTargetUpdateOneWithoutOrgsInput>;
  iabCategoryGroup?: InputMaybe<IabCategoryGroupUpdateManyWithoutOrgsInput>;
  isAllTimeFiltered?: InputMaybe<Scalars['Boolean']>;
  level?: InputMaybe<PartnerLevel>;
  locations?: InputMaybe<LocationUpdateManyInput>;
  logo?: InputMaybe<MediaUpdateOneWithoutOrgInput>;
  loyaltyCampaigns?: InputMaybe<LoyaltyCampaignUpdateManyWithoutOrgInput>;
  media?: InputMaybe<MediaUpdateManyWithoutSharedWithInput>;
  name?: InputMaybe<Scalars['String']>;
  offers?: InputMaybe<OfferUpdateManyWithoutOrgInput>;
  orgSummary?: InputMaybe<OrgSummaryUpdateOneWithoutOrgInput>;
  paidSearchSummarySharedOrgs?: InputMaybe<PaidSearchSummaryUpdateManyWithoutSharedOrgsInput>;
  parentOrg?: InputMaybe<OrgUpdateManyInput>;
  paymentConfig?: InputMaybe<PaymentConfigUpdateOneWithoutOrgsInput>;
  phone?: InputMaybe<Scalars['String']>;
  posConfig?: InputMaybe<PosConfigUpdateManyWithoutOrgInput>;
  regionGroup?: InputMaybe<RegionGroupUpdateManyWithoutOrgsInput>;
  roles?: InputMaybe<RoleUpdateManyWithoutOrgInput>;
  salesforceId?: InputMaybe<Scalars['String']>;
  sendEmailConfig?: InputMaybe<SendEmailConfigUpdateOneWithoutOrgsInput>;
  signInLogo?: InputMaybe<MediaUpdateOneInput>;
  tableConfig?: InputMaybe<OrgTableConfigUpdateOneWithoutOrgsInput>;
  tagsConfig?: InputMaybe<OrgTagsConfigUpdateOneWithoutOrgsInput>;
  themeConfig?: InputMaybe<OrgThemeConfigUpdateOneWithoutOrgsInput>;
  website?: InputMaybe<Scalars['String']>;
  zone?: InputMaybe<Scalars['String']>;
};

export type OrgUpdateWithoutPaidSearchSummarySharedOrgsDataInput = {
  SEOSummary?: InputMaybe<OrgSeoSummaryUpdateOneWithoutOrgInput>;
  adGroupCreatives?: InputMaybe<AdGroupCreativesUpdateManyWithoutOrgInput>;
  advertiserCampaignOrders?: InputMaybe<CampaignOrderUpdateManyWithoutAdvertiserInput>;
  audiences?: InputMaybe<AudienceUpdateManyWithoutOrgsInput>;
  brands?: InputMaybe<BrandUpdateManyInput>;
  campaignOrders?: InputMaybe<CampaignOrderUpdateManyWithoutOrgsInput>;
  campaigns?: InputMaybe<CampaignUpdateManyWithoutOrgsInput>;
  chatWootId?: InputMaybe<Scalars['String']>;
  config?: InputMaybe<OrgConfigUpdateOneWithoutOrgsInput>;
  cpm?: InputMaybe<Scalars['String']>;
  customers?: InputMaybe<CustomerUpdateManyWithoutOrgInput>;
  dataConfig?: InputMaybe<OrgDataConfigUpdateOneWithoutOrgsInput>;
  description?: InputMaybe<Scalars['String']>;
  domain?: InputMaybe<Scalars['String']>;
  event?: InputMaybe<EventUpdateOneWithoutOrgsInput>;
  eventsTarget?: InputMaybe<EventsTargetUpdateOneWithoutOrgsInput>;
  iabCategoryGroup?: InputMaybe<IabCategoryGroupUpdateManyWithoutOrgsInput>;
  isAllTimeFiltered?: InputMaybe<Scalars['Boolean']>;
  level?: InputMaybe<PartnerLevel>;
  locations?: InputMaybe<LocationUpdateManyInput>;
  logo?: InputMaybe<MediaUpdateOneWithoutOrgInput>;
  loyaltyCampaigns?: InputMaybe<LoyaltyCampaignUpdateManyWithoutOrgInput>;
  media?: InputMaybe<MediaUpdateManyWithoutSharedWithInput>;
  name?: InputMaybe<Scalars['String']>;
  offers?: InputMaybe<OfferUpdateManyWithoutOrgInput>;
  orgSummary?: InputMaybe<OrgSummaryUpdateOneWithoutOrgInput>;
  paidSearchSummary?: InputMaybe<PaidSearchSummaryUpdateOneWithoutOrgInput>;
  parentOrg?: InputMaybe<OrgUpdateManyInput>;
  paymentConfig?: InputMaybe<PaymentConfigUpdateOneWithoutOrgsInput>;
  phone?: InputMaybe<Scalars['String']>;
  posConfig?: InputMaybe<PosConfigUpdateManyWithoutOrgInput>;
  regionGroup?: InputMaybe<RegionGroupUpdateManyWithoutOrgsInput>;
  roles?: InputMaybe<RoleUpdateManyWithoutOrgInput>;
  salesforceId?: InputMaybe<Scalars['String']>;
  sendEmailConfig?: InputMaybe<SendEmailConfigUpdateOneWithoutOrgsInput>;
  signInLogo?: InputMaybe<MediaUpdateOneInput>;
  tableConfig?: InputMaybe<OrgTableConfigUpdateOneWithoutOrgsInput>;
  tagsConfig?: InputMaybe<OrgTagsConfigUpdateOneWithoutOrgsInput>;
  themeConfig?: InputMaybe<OrgThemeConfigUpdateOneWithoutOrgsInput>;
  website?: InputMaybe<Scalars['String']>;
  zone?: InputMaybe<Scalars['String']>;
};

export type OrgUpdateWithoutRegionGroupDataInput = {
  SEOSummary?: InputMaybe<OrgSeoSummaryUpdateOneWithoutOrgInput>;
  adGroupCreatives?: InputMaybe<AdGroupCreativesUpdateManyWithoutOrgInput>;
  advertiserCampaignOrders?: InputMaybe<CampaignOrderUpdateManyWithoutAdvertiserInput>;
  audiences?: InputMaybe<AudienceUpdateManyWithoutOrgsInput>;
  brands?: InputMaybe<BrandUpdateManyInput>;
  campaignOrders?: InputMaybe<CampaignOrderUpdateManyWithoutOrgsInput>;
  campaigns?: InputMaybe<CampaignUpdateManyWithoutOrgsInput>;
  chatWootId?: InputMaybe<Scalars['String']>;
  config?: InputMaybe<OrgConfigUpdateOneWithoutOrgsInput>;
  cpm?: InputMaybe<Scalars['String']>;
  customers?: InputMaybe<CustomerUpdateManyWithoutOrgInput>;
  dataConfig?: InputMaybe<OrgDataConfigUpdateOneWithoutOrgsInput>;
  description?: InputMaybe<Scalars['String']>;
  domain?: InputMaybe<Scalars['String']>;
  event?: InputMaybe<EventUpdateOneWithoutOrgsInput>;
  eventsTarget?: InputMaybe<EventsTargetUpdateOneWithoutOrgsInput>;
  iabCategoryGroup?: InputMaybe<IabCategoryGroupUpdateManyWithoutOrgsInput>;
  isAllTimeFiltered?: InputMaybe<Scalars['Boolean']>;
  level?: InputMaybe<PartnerLevel>;
  locations?: InputMaybe<LocationUpdateManyInput>;
  logo?: InputMaybe<MediaUpdateOneWithoutOrgInput>;
  loyaltyCampaigns?: InputMaybe<LoyaltyCampaignUpdateManyWithoutOrgInput>;
  media?: InputMaybe<MediaUpdateManyWithoutSharedWithInput>;
  name?: InputMaybe<Scalars['String']>;
  offers?: InputMaybe<OfferUpdateManyWithoutOrgInput>;
  orgSummary?: InputMaybe<OrgSummaryUpdateOneWithoutOrgInput>;
  paidSearchSummary?: InputMaybe<PaidSearchSummaryUpdateOneWithoutOrgInput>;
  paidSearchSummarySharedOrgs?: InputMaybe<PaidSearchSummaryUpdateManyWithoutSharedOrgsInput>;
  parentOrg?: InputMaybe<OrgUpdateManyInput>;
  paymentConfig?: InputMaybe<PaymentConfigUpdateOneWithoutOrgsInput>;
  phone?: InputMaybe<Scalars['String']>;
  posConfig?: InputMaybe<PosConfigUpdateManyWithoutOrgInput>;
  roles?: InputMaybe<RoleUpdateManyWithoutOrgInput>;
  salesforceId?: InputMaybe<Scalars['String']>;
  sendEmailConfig?: InputMaybe<SendEmailConfigUpdateOneWithoutOrgsInput>;
  signInLogo?: InputMaybe<MediaUpdateOneInput>;
  tableConfig?: InputMaybe<OrgTableConfigUpdateOneWithoutOrgsInput>;
  tagsConfig?: InputMaybe<OrgTagsConfigUpdateOneWithoutOrgsInput>;
  themeConfig?: InputMaybe<OrgThemeConfigUpdateOneWithoutOrgsInput>;
  website?: InputMaybe<Scalars['String']>;
  zone?: InputMaybe<Scalars['String']>;
};

export type OrgUpdateWithoutRolesDataInput = {
  SEOSummary?: InputMaybe<OrgSeoSummaryUpdateOneWithoutOrgInput>;
  adGroupCreatives?: InputMaybe<AdGroupCreativesUpdateManyWithoutOrgInput>;
  advertiserCampaignOrders?: InputMaybe<CampaignOrderUpdateManyWithoutAdvertiserInput>;
  audiences?: InputMaybe<AudienceUpdateManyWithoutOrgsInput>;
  brands?: InputMaybe<BrandUpdateManyInput>;
  campaignOrders?: InputMaybe<CampaignOrderUpdateManyWithoutOrgsInput>;
  campaigns?: InputMaybe<CampaignUpdateManyWithoutOrgsInput>;
  chatWootId?: InputMaybe<Scalars['String']>;
  config?: InputMaybe<OrgConfigUpdateOneWithoutOrgsInput>;
  cpm?: InputMaybe<Scalars['String']>;
  customers?: InputMaybe<CustomerUpdateManyWithoutOrgInput>;
  dataConfig?: InputMaybe<OrgDataConfigUpdateOneWithoutOrgsInput>;
  description?: InputMaybe<Scalars['String']>;
  domain?: InputMaybe<Scalars['String']>;
  event?: InputMaybe<EventUpdateOneWithoutOrgsInput>;
  eventsTarget?: InputMaybe<EventsTargetUpdateOneWithoutOrgsInput>;
  iabCategoryGroup?: InputMaybe<IabCategoryGroupUpdateManyWithoutOrgsInput>;
  isAllTimeFiltered?: InputMaybe<Scalars['Boolean']>;
  level?: InputMaybe<PartnerLevel>;
  locations?: InputMaybe<LocationUpdateManyInput>;
  logo?: InputMaybe<MediaUpdateOneWithoutOrgInput>;
  loyaltyCampaigns?: InputMaybe<LoyaltyCampaignUpdateManyWithoutOrgInput>;
  media?: InputMaybe<MediaUpdateManyWithoutSharedWithInput>;
  name?: InputMaybe<Scalars['String']>;
  offers?: InputMaybe<OfferUpdateManyWithoutOrgInput>;
  orgSummary?: InputMaybe<OrgSummaryUpdateOneWithoutOrgInput>;
  paidSearchSummary?: InputMaybe<PaidSearchSummaryUpdateOneWithoutOrgInput>;
  paidSearchSummarySharedOrgs?: InputMaybe<PaidSearchSummaryUpdateManyWithoutSharedOrgsInput>;
  parentOrg?: InputMaybe<OrgUpdateManyInput>;
  paymentConfig?: InputMaybe<PaymentConfigUpdateOneWithoutOrgsInput>;
  phone?: InputMaybe<Scalars['String']>;
  posConfig?: InputMaybe<PosConfigUpdateManyWithoutOrgInput>;
  regionGroup?: InputMaybe<RegionGroupUpdateManyWithoutOrgsInput>;
  salesforceId?: InputMaybe<Scalars['String']>;
  sendEmailConfig?: InputMaybe<SendEmailConfigUpdateOneWithoutOrgsInput>;
  signInLogo?: InputMaybe<MediaUpdateOneInput>;
  tableConfig?: InputMaybe<OrgTableConfigUpdateOneWithoutOrgsInput>;
  tagsConfig?: InputMaybe<OrgTagsConfigUpdateOneWithoutOrgsInput>;
  themeConfig?: InputMaybe<OrgThemeConfigUpdateOneWithoutOrgsInput>;
  website?: InputMaybe<Scalars['String']>;
  zone?: InputMaybe<Scalars['String']>;
};

export type OrgUpdateWithoutSeoSummaryDataInput = {
  adGroupCreatives?: InputMaybe<AdGroupCreativesUpdateManyWithoutOrgInput>;
  advertiserCampaignOrders?: InputMaybe<CampaignOrderUpdateManyWithoutAdvertiserInput>;
  audiences?: InputMaybe<AudienceUpdateManyWithoutOrgsInput>;
  brands?: InputMaybe<BrandUpdateManyInput>;
  campaignOrders?: InputMaybe<CampaignOrderUpdateManyWithoutOrgsInput>;
  campaigns?: InputMaybe<CampaignUpdateManyWithoutOrgsInput>;
  chatWootId?: InputMaybe<Scalars['String']>;
  config?: InputMaybe<OrgConfigUpdateOneWithoutOrgsInput>;
  cpm?: InputMaybe<Scalars['String']>;
  customers?: InputMaybe<CustomerUpdateManyWithoutOrgInput>;
  dataConfig?: InputMaybe<OrgDataConfigUpdateOneWithoutOrgsInput>;
  description?: InputMaybe<Scalars['String']>;
  domain?: InputMaybe<Scalars['String']>;
  event?: InputMaybe<EventUpdateOneWithoutOrgsInput>;
  eventsTarget?: InputMaybe<EventsTargetUpdateOneWithoutOrgsInput>;
  iabCategoryGroup?: InputMaybe<IabCategoryGroupUpdateManyWithoutOrgsInput>;
  isAllTimeFiltered?: InputMaybe<Scalars['Boolean']>;
  level?: InputMaybe<PartnerLevel>;
  locations?: InputMaybe<LocationUpdateManyInput>;
  logo?: InputMaybe<MediaUpdateOneWithoutOrgInput>;
  loyaltyCampaigns?: InputMaybe<LoyaltyCampaignUpdateManyWithoutOrgInput>;
  media?: InputMaybe<MediaUpdateManyWithoutSharedWithInput>;
  name?: InputMaybe<Scalars['String']>;
  offers?: InputMaybe<OfferUpdateManyWithoutOrgInput>;
  orgSummary?: InputMaybe<OrgSummaryUpdateOneWithoutOrgInput>;
  paidSearchSummary?: InputMaybe<PaidSearchSummaryUpdateOneWithoutOrgInput>;
  paidSearchSummarySharedOrgs?: InputMaybe<PaidSearchSummaryUpdateManyWithoutSharedOrgsInput>;
  parentOrg?: InputMaybe<OrgUpdateManyInput>;
  paymentConfig?: InputMaybe<PaymentConfigUpdateOneWithoutOrgsInput>;
  phone?: InputMaybe<Scalars['String']>;
  posConfig?: InputMaybe<PosConfigUpdateManyWithoutOrgInput>;
  regionGroup?: InputMaybe<RegionGroupUpdateManyWithoutOrgsInput>;
  roles?: InputMaybe<RoleUpdateManyWithoutOrgInput>;
  salesforceId?: InputMaybe<Scalars['String']>;
  sendEmailConfig?: InputMaybe<SendEmailConfigUpdateOneWithoutOrgsInput>;
  signInLogo?: InputMaybe<MediaUpdateOneInput>;
  tableConfig?: InputMaybe<OrgTableConfigUpdateOneWithoutOrgsInput>;
  tagsConfig?: InputMaybe<OrgTagsConfigUpdateOneWithoutOrgsInput>;
  themeConfig?: InputMaybe<OrgThemeConfigUpdateOneWithoutOrgsInput>;
  website?: InputMaybe<Scalars['String']>;
  zone?: InputMaybe<Scalars['String']>;
};

export type OrgUpdateWithoutTagsConfigDataInput = {
  SEOSummary?: InputMaybe<OrgSeoSummaryUpdateOneWithoutOrgInput>;
  adGroupCreatives?: InputMaybe<AdGroupCreativesUpdateManyWithoutOrgInput>;
  advertiserCampaignOrders?: InputMaybe<CampaignOrderUpdateManyWithoutAdvertiserInput>;
  audiences?: InputMaybe<AudienceUpdateManyWithoutOrgsInput>;
  brands?: InputMaybe<BrandUpdateManyInput>;
  campaignOrders?: InputMaybe<CampaignOrderUpdateManyWithoutOrgsInput>;
  campaigns?: InputMaybe<CampaignUpdateManyWithoutOrgsInput>;
  chatWootId?: InputMaybe<Scalars['String']>;
  config?: InputMaybe<OrgConfigUpdateOneWithoutOrgsInput>;
  cpm?: InputMaybe<Scalars['String']>;
  customers?: InputMaybe<CustomerUpdateManyWithoutOrgInput>;
  dataConfig?: InputMaybe<OrgDataConfigUpdateOneWithoutOrgsInput>;
  description?: InputMaybe<Scalars['String']>;
  domain?: InputMaybe<Scalars['String']>;
  event?: InputMaybe<EventUpdateOneWithoutOrgsInput>;
  eventsTarget?: InputMaybe<EventsTargetUpdateOneWithoutOrgsInput>;
  iabCategoryGroup?: InputMaybe<IabCategoryGroupUpdateManyWithoutOrgsInput>;
  isAllTimeFiltered?: InputMaybe<Scalars['Boolean']>;
  level?: InputMaybe<PartnerLevel>;
  locations?: InputMaybe<LocationUpdateManyInput>;
  logo?: InputMaybe<MediaUpdateOneWithoutOrgInput>;
  loyaltyCampaigns?: InputMaybe<LoyaltyCampaignUpdateManyWithoutOrgInput>;
  media?: InputMaybe<MediaUpdateManyWithoutSharedWithInput>;
  name?: InputMaybe<Scalars['String']>;
  offers?: InputMaybe<OfferUpdateManyWithoutOrgInput>;
  orgSummary?: InputMaybe<OrgSummaryUpdateOneWithoutOrgInput>;
  paidSearchSummary?: InputMaybe<PaidSearchSummaryUpdateOneWithoutOrgInput>;
  paidSearchSummarySharedOrgs?: InputMaybe<PaidSearchSummaryUpdateManyWithoutSharedOrgsInput>;
  parentOrg?: InputMaybe<OrgUpdateManyInput>;
  paymentConfig?: InputMaybe<PaymentConfigUpdateOneWithoutOrgsInput>;
  phone?: InputMaybe<Scalars['String']>;
  posConfig?: InputMaybe<PosConfigUpdateManyWithoutOrgInput>;
  regionGroup?: InputMaybe<RegionGroupUpdateManyWithoutOrgsInput>;
  roles?: InputMaybe<RoleUpdateManyWithoutOrgInput>;
  salesforceId?: InputMaybe<Scalars['String']>;
  sendEmailConfig?: InputMaybe<SendEmailConfigUpdateOneWithoutOrgsInput>;
  signInLogo?: InputMaybe<MediaUpdateOneInput>;
  tableConfig?: InputMaybe<OrgTableConfigUpdateOneWithoutOrgsInput>;
  themeConfig?: InputMaybe<OrgThemeConfigUpdateOneWithoutOrgsInput>;
  website?: InputMaybe<Scalars['String']>;
  zone?: InputMaybe<Scalars['String']>;
};

export type OrgUpsertNestedInput = {
  create: OrgCreateInput;
  update: OrgUpdateDataInput;
};

export type OrgUpsertWithWhereUniqueNestedInput = {
  create: OrgCreateInput;
  update: OrgUpdateDataInput;
  where: OrgWhereUniqueInput;
};

export type OrgUpsertWithWhereUniqueWithoutAdGroupCreativesInput = {
  create: OrgCreateWithoutAdGroupCreativesInput;
  update: OrgUpdateWithoutAdGroupCreativesDataInput;
  where: OrgWhereUniqueInput;
};

export type OrgUpsertWithWhereUniqueWithoutAudiencesInput = {
  create: OrgCreateWithoutAudiencesInput;
  update: OrgUpdateWithoutAudiencesDataInput;
  where: OrgWhereUniqueInput;
};

export type OrgUpsertWithWhereUniqueWithoutCampaignOrdersInput = {
  create: OrgCreateWithoutCampaignOrdersInput;
  update: OrgUpdateWithoutCampaignOrdersDataInput;
  where: OrgWhereUniqueInput;
};

export type OrgUpsertWithWhereUniqueWithoutCampaignsInput = {
  create: OrgCreateWithoutCampaignsInput;
  update: OrgUpdateWithoutCampaignsDataInput;
  where: OrgWhereUniqueInput;
};

export type OrgUpsertWithWhereUniqueWithoutEventInput = {
  create: OrgCreateWithoutEventInput;
  update: OrgUpdateWithoutEventDataInput;
  where: OrgWhereUniqueInput;
};

export type OrgUpsertWithWhereUniqueWithoutEventsTargetInput = {
  create: OrgCreateWithoutEventsTargetInput;
  update: OrgUpdateWithoutEventsTargetDataInput;
  where: OrgWhereUniqueInput;
};

export type OrgUpsertWithWhereUniqueWithoutIabCategoryGroupInput = {
  create: OrgCreateWithoutIabCategoryGroupInput;
  update: OrgUpdateWithoutIabCategoryGroupDataInput;
  where: OrgWhereUniqueInput;
};

export type OrgUpsertWithWhereUniqueWithoutMediaInput = {
  create: OrgCreateWithoutMediaInput;
  update: OrgUpdateWithoutMediaDataInput;
  where: OrgWhereUniqueInput;
};

export type OrgUpsertWithWhereUniqueWithoutPaidSearchSummarySharedOrgsInput = {
  create: OrgCreateWithoutPaidSearchSummarySharedOrgsInput;
  update: OrgUpdateWithoutPaidSearchSummarySharedOrgsDataInput;
  where: OrgWhereUniqueInput;
};

export type OrgUpsertWithWhereUniqueWithoutRegionGroupInput = {
  create: OrgCreateWithoutRegionGroupInput;
  update: OrgUpdateWithoutRegionGroupDataInput;
  where: OrgWhereUniqueInput;
};

export type OrgUpsertWithWhereUniqueWithoutTagsConfigInput = {
  create: OrgCreateWithoutTagsConfigInput;
  update: OrgUpdateWithoutTagsConfigDataInput;
  where: OrgWhereUniqueInput;
};

export type OrgUpsertWithoutAdvertiserCampaignOrdersInput = {
  create: OrgCreateWithoutAdvertiserCampaignOrdersInput;
  update: OrgUpdateWithoutAdvertiserCampaignOrdersDataInput;
};

export type OrgUpsertWithoutCustomersInput = {
  create: OrgCreateWithoutCustomersInput;
  update: OrgUpdateWithoutCustomersDataInput;
};

export type OrgUpsertWithoutLogoInput = {
  create: OrgCreateWithoutLogoInput;
  update: OrgUpdateWithoutLogoDataInput;
};

export type OrgUpsertWithoutLoyaltyCampaignsInput = {
  create: OrgCreateWithoutLoyaltyCampaignsInput;
  update: OrgUpdateWithoutLoyaltyCampaignsDataInput;
};

export type OrgUpsertWithoutOffersInput = {
  create: OrgCreateWithoutOffersInput;
  update: OrgUpdateWithoutOffersDataInput;
};

export type OrgUpsertWithoutOrgSummaryInput = {
  create: OrgCreateWithoutOrgSummaryInput;
  update: OrgUpdateWithoutOrgSummaryDataInput;
};

export type OrgUpsertWithoutPaidSearchSummaryInput = {
  create: OrgCreateWithoutPaidSearchSummaryInput;
  update: OrgUpdateWithoutPaidSearchSummaryDataInput;
};

export type OrgUpsertWithoutRolesInput = {
  create: OrgCreateWithoutRolesInput;
  update: OrgUpdateWithoutRolesDataInput;
};

export type OrgUpsertWithoutSeoSummaryInput = {
  create: OrgCreateWithoutSeoSummaryInput;
  update: OrgUpdateWithoutSeoSummaryDataInput;
};

export type OrgWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<OrgWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<OrgWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<OrgWhereInput>>;
  SEOSummary?: InputMaybe<OrgSeoSummaryWhereInput>;
  adGroupCreatives_every?: InputMaybe<AdGroupCreativesWhereInput>;
  adGroupCreatives_none?: InputMaybe<AdGroupCreativesWhereInput>;
  adGroupCreatives_some?: InputMaybe<AdGroupCreativesWhereInput>;
  advertiserCampaignOrders_every?: InputMaybe<CampaignOrderWhereInput>;
  advertiserCampaignOrders_none?: InputMaybe<CampaignOrderWhereInput>;
  advertiserCampaignOrders_some?: InputMaybe<CampaignOrderWhereInput>;
  audiences_every?: InputMaybe<AudienceWhereInput>;
  audiences_none?: InputMaybe<AudienceWhereInput>;
  audiences_some?: InputMaybe<AudienceWhereInput>;
  brands_every?: InputMaybe<BrandWhereInput>;
  brands_none?: InputMaybe<BrandWhereInput>;
  brands_some?: InputMaybe<BrandWhereInput>;
  campaignOrders_every?: InputMaybe<CampaignOrderWhereInput>;
  campaignOrders_none?: InputMaybe<CampaignOrderWhereInput>;
  campaignOrders_some?: InputMaybe<CampaignOrderWhereInput>;
  campaigns_every?: InputMaybe<CampaignWhereInput>;
  campaigns_none?: InputMaybe<CampaignWhereInput>;
  campaigns_some?: InputMaybe<CampaignWhereInput>;
  chatWootId?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  chatWootId_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  chatWootId_ends_with?: InputMaybe<Scalars['String']>;
  /** All values greater than the given value. */
  chatWootId_gt?: InputMaybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  chatWootId_gte?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  chatWootId_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  chatWootId_lt?: InputMaybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  chatWootId_lte?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  chatWootId_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  chatWootId_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string. */
  chatWootId_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  chatWootId_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  chatWootId_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  chatWootId_starts_with?: InputMaybe<Scalars['String']>;
  config?: InputMaybe<OrgConfigWhereInput>;
  cpm?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  cpm_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  cpm_ends_with?: InputMaybe<Scalars['String']>;
  /** All values greater than the given value. */
  cpm_gt?: InputMaybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  cpm_gte?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  cpm_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  cpm_lt?: InputMaybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  cpm_lte?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  cpm_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  cpm_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string. */
  cpm_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  cpm_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  cpm_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  cpm_starts_with?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  customers_every?: InputMaybe<CustomerWhereInput>;
  customers_none?: InputMaybe<CustomerWhereInput>;
  customers_some?: InputMaybe<CustomerWhereInput>;
  dataConfig?: InputMaybe<OrgDataConfigWhereInput>;
  description?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  description_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  description_ends_with?: InputMaybe<Scalars['String']>;
  /** All values greater than the given value. */
  description_gt?: InputMaybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  description_gte?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  description_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  description_lt?: InputMaybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  description_lte?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  description_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  description_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string. */
  description_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  description_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  description_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  description_starts_with?: InputMaybe<Scalars['String']>;
  domain?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  domain_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  domain_ends_with?: InputMaybe<Scalars['String']>;
  /** All values greater than the given value. */
  domain_gt?: InputMaybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  domain_gte?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  domain_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  domain_lt?: InputMaybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  domain_lte?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  domain_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  domain_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string. */
  domain_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  domain_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  domain_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  domain_starts_with?: InputMaybe<Scalars['String']>;
  event?: InputMaybe<EventWhereInput>;
  eventsTarget?: InputMaybe<EventsTargetWhereInput>;
  iabCategoryGroup_every?: InputMaybe<IabCategoryGroupWhereInput>;
  iabCategoryGroup_none?: InputMaybe<IabCategoryGroupWhereInput>;
  iabCategoryGroup_some?: InputMaybe<IabCategoryGroupWhereInput>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: InputMaybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: InputMaybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: InputMaybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  isAllTimeFiltered?: InputMaybe<Scalars['Boolean']>;
  /** All values that are not equal to given value. */
  isAllTimeFiltered_not?: InputMaybe<Scalars['Boolean']>;
  level?: InputMaybe<PartnerLevel>;
  /** All values that are contained in given list. */
  level_in?: InputMaybe<Array<PartnerLevel>>;
  /** All values that are not equal to given value. */
  level_not?: InputMaybe<PartnerLevel>;
  /** All values that are not contained in given list. */
  level_not_in?: InputMaybe<Array<PartnerLevel>>;
  locations_every?: InputMaybe<LocationWhereInput>;
  locations_none?: InputMaybe<LocationWhereInput>;
  locations_some?: InputMaybe<LocationWhereInput>;
  logo?: InputMaybe<MediaWhereInput>;
  loyaltyCampaigns_every?: InputMaybe<LoyaltyCampaignWhereInput>;
  loyaltyCampaigns_none?: InputMaybe<LoyaltyCampaignWhereInput>;
  loyaltyCampaigns_some?: InputMaybe<LoyaltyCampaignWhereInput>;
  media_every?: InputMaybe<MediaWhereInput>;
  media_none?: InputMaybe<MediaWhereInput>;
  media_some?: InputMaybe<MediaWhereInput>;
  name?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  name_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  name_ends_with?: InputMaybe<Scalars['String']>;
  /** All values greater than the given value. */
  name_gt?: InputMaybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  name_gte?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  name_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  name_lt?: InputMaybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  name_lte?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  name_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  name_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string. */
  name_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  name_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  name_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  name_starts_with?: InputMaybe<Scalars['String']>;
  offers_every?: InputMaybe<OfferWhereInput>;
  offers_none?: InputMaybe<OfferWhereInput>;
  offers_some?: InputMaybe<OfferWhereInput>;
  orgSummary?: InputMaybe<OrgSummaryWhereInput>;
  paidSearchSummary?: InputMaybe<PaidSearchSummaryWhereInput>;
  paidSearchSummarySharedOrgs_every?: InputMaybe<PaidSearchSummaryWhereInput>;
  paidSearchSummarySharedOrgs_none?: InputMaybe<PaidSearchSummaryWhereInput>;
  paidSearchSummarySharedOrgs_some?: InputMaybe<PaidSearchSummaryWhereInput>;
  parentOrg_every?: InputMaybe<OrgWhereInput>;
  parentOrg_none?: InputMaybe<OrgWhereInput>;
  parentOrg_some?: InputMaybe<OrgWhereInput>;
  paymentConfig?: InputMaybe<PaymentConfigWhereInput>;
  phone?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  phone_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  phone_ends_with?: InputMaybe<Scalars['String']>;
  /** All values greater than the given value. */
  phone_gt?: InputMaybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  phone_gte?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  phone_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  phone_lt?: InputMaybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  phone_lte?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  phone_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  phone_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string. */
  phone_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  phone_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  phone_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  phone_starts_with?: InputMaybe<Scalars['String']>;
  posConfig_every?: InputMaybe<PosConfigWhereInput>;
  posConfig_none?: InputMaybe<PosConfigWhereInput>;
  posConfig_some?: InputMaybe<PosConfigWhereInput>;
  regionGroup_every?: InputMaybe<RegionGroupWhereInput>;
  regionGroup_none?: InputMaybe<RegionGroupWhereInput>;
  regionGroup_some?: InputMaybe<RegionGroupWhereInput>;
  roles_every?: InputMaybe<RoleWhereInput>;
  roles_none?: InputMaybe<RoleWhereInput>;
  roles_some?: InputMaybe<RoleWhereInput>;
  salesforceId?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  salesforceId_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  salesforceId_ends_with?: InputMaybe<Scalars['String']>;
  /** All values greater than the given value. */
  salesforceId_gt?: InputMaybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  salesforceId_gte?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  salesforceId_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  salesforceId_lt?: InputMaybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  salesforceId_lte?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  salesforceId_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  salesforceId_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string. */
  salesforceId_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  salesforceId_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  salesforceId_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  salesforceId_starts_with?: InputMaybe<Scalars['String']>;
  sendEmailConfig?: InputMaybe<SendEmailConfigWhereInput>;
  signInLogo?: InputMaybe<MediaWhereInput>;
  tableConfig?: InputMaybe<OrgTableConfigWhereInput>;
  tagsConfig?: InputMaybe<OrgTagsConfigWhereInput>;
  themeConfig?: InputMaybe<OrgThemeConfigWhereInput>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  website?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  website_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  website_ends_with?: InputMaybe<Scalars['String']>;
  /** All values greater than the given value. */
  website_gt?: InputMaybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  website_gte?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  website_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  website_lt?: InputMaybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  website_lte?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  website_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  website_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string. */
  website_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  website_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  website_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  website_starts_with?: InputMaybe<Scalars['String']>;
  zone?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  zone_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  zone_ends_with?: InputMaybe<Scalars['String']>;
  /** All values greater than the given value. */
  zone_gt?: InputMaybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  zone_gte?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  zone_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  zone_lt?: InputMaybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  zone_lte?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  zone_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  zone_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string. */
  zone_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  zone_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  zone_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  zone_starts_with?: InputMaybe<Scalars['String']>;
};

export type OrgWhereUniqueInput = {
  domain?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  name?: InputMaybe<Scalars['String']>;
};

export enum Pos {
  Treez = 'TREEZ'
}

export type PacingDataObject = Node & {
  __typename?: 'PacingDataObject';
  campaign?: Maybe<Campaign>;
  campaignName?: Maybe<Scalars['String']>;
  campaignOrder?: Maybe<CampaignOrder>;
  dailyAvgImpressions?: Maybe<Scalars['Float']>;
  dailyAvgImpressionsLeft?: Maybe<Scalars['Float']>;
  daysIntoFlight?: Maybe<Scalars['Int']>;
  daysLeft?: Maybe<Scalars['Int']>;
  expectedImpressions?: Maybe<Scalars['Int']>;
  id: Scalars['ID'];
  impressionsLeft?: Maybe<Scalars['Int']>;
  impressionsYesterday?: Maybe<Scalars['Int']>;
  pace?: Maybe<Scalars['Float']>;
};

/** A connection to a list of items. */
export type PacingDataObjectConnection = {
  __typename?: 'PacingDataObjectConnection';
  aggregate: AggregatePacingDataObject;
  /** A list of edges. */
  edges: Array<Maybe<PacingDataObjectEdge>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type PacingDataObjectCreateOneWithoutCampaignInput = {
  connect?: InputMaybe<PacingDataObjectWhereUniqueInput>;
  create?: InputMaybe<PacingDataObjectCreateWithoutCampaignInput>;
};

export type PacingDataObjectCreateOneWithoutCampaignOrderInput = {
  connect?: InputMaybe<PacingDataObjectWhereUniqueInput>;
  create?: InputMaybe<PacingDataObjectCreateWithoutCampaignOrderInput>;
};

export type PacingDataObjectCreateWithoutCampaignInput = {
  campaignName?: InputMaybe<Scalars['String']>;
  campaignOrder?: InputMaybe<CampaignOrderCreateOneWithoutPacingDataInput>;
  dailyAvgImpressions?: InputMaybe<Scalars['Float']>;
  dailyAvgImpressionsLeft?: InputMaybe<Scalars['Float']>;
  daysIntoFlight?: InputMaybe<Scalars['Int']>;
  daysLeft?: InputMaybe<Scalars['Int']>;
  expectedImpressions?: InputMaybe<Scalars['Int']>;
  impressionsLeft?: InputMaybe<Scalars['Int']>;
  impressionsYesterday?: InputMaybe<Scalars['Int']>;
  pace?: InputMaybe<Scalars['Float']>;
};

export type PacingDataObjectCreateWithoutCampaignOrderInput = {
  campaign?: InputMaybe<CampaignCreateOneWithoutCampaignPacingDataInput>;
  campaignName?: InputMaybe<Scalars['String']>;
  dailyAvgImpressions?: InputMaybe<Scalars['Float']>;
  dailyAvgImpressionsLeft?: InputMaybe<Scalars['Float']>;
  daysIntoFlight?: InputMaybe<Scalars['Int']>;
  daysLeft?: InputMaybe<Scalars['Int']>;
  expectedImpressions?: InputMaybe<Scalars['Int']>;
  impressionsLeft?: InputMaybe<Scalars['Int']>;
  impressionsYesterday?: InputMaybe<Scalars['Int']>;
  pace?: InputMaybe<Scalars['Float']>;
};

/** An edge in a connection. */
export type PacingDataObjectEdge = {
  __typename?: 'PacingDataObjectEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: PacingDataObject;
};

export enum PacingDataObjectOrderByInput {
  CampaignNameAsc = 'campaignName_ASC',
  CampaignNameDesc = 'campaignName_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DailyAvgImpressionsLeftAsc = 'dailyAvgImpressionsLeft_ASC',
  DailyAvgImpressionsLeftDesc = 'dailyAvgImpressionsLeft_DESC',
  DailyAvgImpressionsAsc = 'dailyAvgImpressions_ASC',
  DailyAvgImpressionsDesc = 'dailyAvgImpressions_DESC',
  DaysIntoFlightAsc = 'daysIntoFlight_ASC',
  DaysIntoFlightDesc = 'daysIntoFlight_DESC',
  DaysLeftAsc = 'daysLeft_ASC',
  DaysLeftDesc = 'daysLeft_DESC',
  ExpectedImpressionsAsc = 'expectedImpressions_ASC',
  ExpectedImpressionsDesc = 'expectedImpressions_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  ImpressionsLeftAsc = 'impressionsLeft_ASC',
  ImpressionsLeftDesc = 'impressionsLeft_DESC',
  ImpressionsYesterdayAsc = 'impressionsYesterday_ASC',
  ImpressionsYesterdayDesc = 'impressionsYesterday_DESC',
  PaceAsc = 'pace_ASC',
  PaceDesc = 'pace_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC'
}

export type PacingDataObjectUpdateOneWithoutCampaignInput = {
  connect?: InputMaybe<PacingDataObjectWhereUniqueInput>;
  create?: InputMaybe<PacingDataObjectCreateWithoutCampaignInput>;
  delete?: InputMaybe<Scalars['Boolean']>;
  disconnect?: InputMaybe<Scalars['Boolean']>;
  update?: InputMaybe<PacingDataObjectUpdateWithoutCampaignDataInput>;
  upsert?: InputMaybe<PacingDataObjectUpsertWithoutCampaignInput>;
};

export type PacingDataObjectUpdateOneWithoutCampaignOrderInput = {
  connect?: InputMaybe<PacingDataObjectWhereUniqueInput>;
  create?: InputMaybe<PacingDataObjectCreateWithoutCampaignOrderInput>;
  delete?: InputMaybe<Scalars['Boolean']>;
  disconnect?: InputMaybe<Scalars['Boolean']>;
  update?: InputMaybe<PacingDataObjectUpdateWithoutCampaignOrderDataInput>;
  upsert?: InputMaybe<PacingDataObjectUpsertWithoutCampaignOrderInput>;
};

export type PacingDataObjectUpdateWithoutCampaignDataInput = {
  campaignName?: InputMaybe<Scalars['String']>;
  campaignOrder?: InputMaybe<CampaignOrderUpdateOneWithoutPacingDataInput>;
  dailyAvgImpressions?: InputMaybe<Scalars['Float']>;
  dailyAvgImpressionsLeft?: InputMaybe<Scalars['Float']>;
  daysIntoFlight?: InputMaybe<Scalars['Int']>;
  daysLeft?: InputMaybe<Scalars['Int']>;
  expectedImpressions?: InputMaybe<Scalars['Int']>;
  impressionsLeft?: InputMaybe<Scalars['Int']>;
  impressionsYesterday?: InputMaybe<Scalars['Int']>;
  pace?: InputMaybe<Scalars['Float']>;
};

export type PacingDataObjectUpdateWithoutCampaignOrderDataInput = {
  campaign?: InputMaybe<CampaignUpdateOneWithoutCampaignPacingDataInput>;
  campaignName?: InputMaybe<Scalars['String']>;
  dailyAvgImpressions?: InputMaybe<Scalars['Float']>;
  dailyAvgImpressionsLeft?: InputMaybe<Scalars['Float']>;
  daysIntoFlight?: InputMaybe<Scalars['Int']>;
  daysLeft?: InputMaybe<Scalars['Int']>;
  expectedImpressions?: InputMaybe<Scalars['Int']>;
  impressionsLeft?: InputMaybe<Scalars['Int']>;
  impressionsYesterday?: InputMaybe<Scalars['Int']>;
  pace?: InputMaybe<Scalars['Float']>;
};

export type PacingDataObjectUpsertWithoutCampaignInput = {
  create: PacingDataObjectCreateWithoutCampaignInput;
  update: PacingDataObjectUpdateWithoutCampaignDataInput;
};

export type PacingDataObjectUpsertWithoutCampaignOrderInput = {
  create: PacingDataObjectCreateWithoutCampaignOrderInput;
  update: PacingDataObjectUpdateWithoutCampaignOrderDataInput;
};

export type PacingDataObjectWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<PacingDataObjectWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<PacingDataObjectWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<PacingDataObjectWhereInput>>;
  campaign?: InputMaybe<CampaignWhereInput>;
  campaignName?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  campaignName_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  campaignName_ends_with?: InputMaybe<Scalars['String']>;
  /** All values greater than the given value. */
  campaignName_gt?: InputMaybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  campaignName_gte?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  campaignName_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  campaignName_lt?: InputMaybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  campaignName_lte?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  campaignName_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  campaignName_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string. */
  campaignName_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  campaignName_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  campaignName_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  campaignName_starts_with?: InputMaybe<Scalars['String']>;
  campaignOrder?: InputMaybe<CampaignOrderWhereInput>;
  dailyAvgImpressions?: InputMaybe<Scalars['Float']>;
  dailyAvgImpressionsLeft?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  dailyAvgImpressionsLeft_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  dailyAvgImpressionsLeft_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  dailyAvgImpressionsLeft_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  dailyAvgImpressionsLeft_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  dailyAvgImpressionsLeft_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  dailyAvgImpressionsLeft_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  dailyAvgImpressionsLeft_not_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values greater than the given value. */
  dailyAvgImpressions_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  dailyAvgImpressions_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  dailyAvgImpressions_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  dailyAvgImpressions_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  dailyAvgImpressions_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  dailyAvgImpressions_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  dailyAvgImpressions_not_in?: InputMaybe<Array<Scalars['Float']>>;
  daysIntoFlight?: InputMaybe<Scalars['Int']>;
  /** All values greater than the given value. */
  daysIntoFlight_gt?: InputMaybe<Scalars['Int']>;
  /** All values greater than or equal the given value. */
  daysIntoFlight_gte?: InputMaybe<Scalars['Int']>;
  /** All values that are contained in given list. */
  daysIntoFlight_in?: InputMaybe<Array<Scalars['Int']>>;
  /** All values less than the given value. */
  daysIntoFlight_lt?: InputMaybe<Scalars['Int']>;
  /** All values less than or equal the given value. */
  daysIntoFlight_lte?: InputMaybe<Scalars['Int']>;
  /** All values that are not equal to given value. */
  daysIntoFlight_not?: InputMaybe<Scalars['Int']>;
  /** All values that are not contained in given list. */
  daysIntoFlight_not_in?: InputMaybe<Array<Scalars['Int']>>;
  daysLeft?: InputMaybe<Scalars['Int']>;
  /** All values greater than the given value. */
  daysLeft_gt?: InputMaybe<Scalars['Int']>;
  /** All values greater than or equal the given value. */
  daysLeft_gte?: InputMaybe<Scalars['Int']>;
  /** All values that are contained in given list. */
  daysLeft_in?: InputMaybe<Array<Scalars['Int']>>;
  /** All values less than the given value. */
  daysLeft_lt?: InputMaybe<Scalars['Int']>;
  /** All values less than or equal the given value. */
  daysLeft_lte?: InputMaybe<Scalars['Int']>;
  /** All values that are not equal to given value. */
  daysLeft_not?: InputMaybe<Scalars['Int']>;
  /** All values that are not contained in given list. */
  daysLeft_not_in?: InputMaybe<Array<Scalars['Int']>>;
  expectedImpressions?: InputMaybe<Scalars['Int']>;
  /** All values greater than the given value. */
  expectedImpressions_gt?: InputMaybe<Scalars['Int']>;
  /** All values greater than or equal the given value. */
  expectedImpressions_gte?: InputMaybe<Scalars['Int']>;
  /** All values that are contained in given list. */
  expectedImpressions_in?: InputMaybe<Array<Scalars['Int']>>;
  /** All values less than the given value. */
  expectedImpressions_lt?: InputMaybe<Scalars['Int']>;
  /** All values less than or equal the given value. */
  expectedImpressions_lte?: InputMaybe<Scalars['Int']>;
  /** All values that are not equal to given value. */
  expectedImpressions_not?: InputMaybe<Scalars['Int']>;
  /** All values that are not contained in given list. */
  expectedImpressions_not_in?: InputMaybe<Array<Scalars['Int']>>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: InputMaybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: InputMaybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: InputMaybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  impressionsLeft?: InputMaybe<Scalars['Int']>;
  /** All values greater than the given value. */
  impressionsLeft_gt?: InputMaybe<Scalars['Int']>;
  /** All values greater than or equal the given value. */
  impressionsLeft_gte?: InputMaybe<Scalars['Int']>;
  /** All values that are contained in given list. */
  impressionsLeft_in?: InputMaybe<Array<Scalars['Int']>>;
  /** All values less than the given value. */
  impressionsLeft_lt?: InputMaybe<Scalars['Int']>;
  /** All values less than or equal the given value. */
  impressionsLeft_lte?: InputMaybe<Scalars['Int']>;
  /** All values that are not equal to given value. */
  impressionsLeft_not?: InputMaybe<Scalars['Int']>;
  /** All values that are not contained in given list. */
  impressionsLeft_not_in?: InputMaybe<Array<Scalars['Int']>>;
  impressionsYesterday?: InputMaybe<Scalars['Int']>;
  /** All values greater than the given value. */
  impressionsYesterday_gt?: InputMaybe<Scalars['Int']>;
  /** All values greater than or equal the given value. */
  impressionsYesterday_gte?: InputMaybe<Scalars['Int']>;
  /** All values that are contained in given list. */
  impressionsYesterday_in?: InputMaybe<Array<Scalars['Int']>>;
  /** All values less than the given value. */
  impressionsYesterday_lt?: InputMaybe<Scalars['Int']>;
  /** All values less than or equal the given value. */
  impressionsYesterday_lte?: InputMaybe<Scalars['Int']>;
  /** All values that are not equal to given value. */
  impressionsYesterday_not?: InputMaybe<Scalars['Int']>;
  /** All values that are not contained in given list. */
  impressionsYesterday_not_in?: InputMaybe<Array<Scalars['Int']>>;
  pace?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  pace_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  pace_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  pace_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  pace_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  pace_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  pace_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  pace_not_in?: InputMaybe<Array<Scalars['Float']>>;
};

export type PacingDataObjectWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

/** Information about pagination in a connection. */
export type PageInfo = {
  __typename?: 'PageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']>;
};

export type PaidSeachAggregatedDateUnit = Node & {
  __typename?: 'PaidSeachAggregatedDateUnit';
  clicks?: Maybe<Scalars['Int']>;
  conversions?: Maybe<Scalars['Int']>;
  cost?: Maybe<Scalars['Float']>;
  cpc?: Maybe<Scalars['Float']>;
  cpm?: Maybe<Scalars['Float']>;
  ctr?: Maybe<Scalars['Float']>;
  date?: Maybe<Scalars['DateTime']>;
  id: Scalars['ID'];
  impressions?: Maybe<Scalars['Int']>;
  key: Scalars['String'];
  paidSearchAggregatedUnit?: Maybe<PaidSearchAggregatedUnit>;
  revenue?: Maybe<Scalars['Float']>;
  roas?: Maybe<Scalars['Float']>;
  spend?: Maybe<Scalars['Float']>;
  xAxis?: Maybe<Scalars['DateTime']>;
};

export type PaidSeachAggregatedDateUnitCreateManyWithoutPaidSearchAggregatedUnitInput = {
  connect?: InputMaybe<Array<PaidSeachAggregatedDateUnitWhereUniqueInput>>;
  create?: InputMaybe<Array<PaidSeachAggregatedDateUnitCreateWithoutPaidSearchAggregatedUnitInput>>;
};

export type PaidSeachAggregatedDateUnitCreateWithoutPaidSearchAggregatedUnitInput = {
  clicks?: InputMaybe<Scalars['Int']>;
  conversions?: InputMaybe<Scalars['Int']>;
  cost?: InputMaybe<Scalars['Float']>;
  cpc?: InputMaybe<Scalars['Float']>;
  cpm?: InputMaybe<Scalars['Float']>;
  ctr?: InputMaybe<Scalars['Float']>;
  date?: InputMaybe<Scalars['DateTime']>;
  impressions?: InputMaybe<Scalars['Int']>;
  key: Scalars['String'];
  revenue?: InputMaybe<Scalars['Float']>;
  roas?: InputMaybe<Scalars['Float']>;
  spend?: InputMaybe<Scalars['Float']>;
  xAxis?: InputMaybe<Scalars['DateTime']>;
};

export enum PaidSeachAggregatedDateUnitOrderByInput {
  ClicksAsc = 'clicks_ASC',
  ClicksDesc = 'clicks_DESC',
  ConversionsAsc = 'conversions_ASC',
  ConversionsDesc = 'conversions_DESC',
  CostAsc = 'cost_ASC',
  CostDesc = 'cost_DESC',
  CpcAsc = 'cpc_ASC',
  CpcDesc = 'cpc_DESC',
  CpmAsc = 'cpm_ASC',
  CpmDesc = 'cpm_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  CtrAsc = 'ctr_ASC',
  CtrDesc = 'ctr_DESC',
  DateAsc = 'date_ASC',
  DateDesc = 'date_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  ImpressionsAsc = 'impressions_ASC',
  ImpressionsDesc = 'impressions_DESC',
  KeyAsc = 'key_ASC',
  KeyDesc = 'key_DESC',
  RevenueAsc = 'revenue_ASC',
  RevenueDesc = 'revenue_DESC',
  RoasAsc = 'roas_ASC',
  RoasDesc = 'roas_DESC',
  SpendAsc = 'spend_ASC',
  SpendDesc = 'spend_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  XAxisAsc = 'xAxis_ASC',
  XAxisDesc = 'xAxis_DESC'
}

export type PaidSeachAggregatedDateUnitUpdateManyWithoutPaidSearchAggregatedUnitInput = {
  connect?: InputMaybe<Array<PaidSeachAggregatedDateUnitWhereUniqueInput>>;
  create?: InputMaybe<Array<PaidSeachAggregatedDateUnitCreateWithoutPaidSearchAggregatedUnitInput>>;
  delete?: InputMaybe<Array<PaidSeachAggregatedDateUnitWhereUniqueInput>>;
  disconnect?: InputMaybe<Array<PaidSeachAggregatedDateUnitWhereUniqueInput>>;
  update?: InputMaybe<Array<PaidSeachAggregatedDateUnitUpdateWithWhereUniqueWithoutPaidSearchAggregatedUnitInput>>;
  upsert?: InputMaybe<Array<PaidSeachAggregatedDateUnitUpsertWithWhereUniqueWithoutPaidSearchAggregatedUnitInput>>;
};

export type PaidSeachAggregatedDateUnitUpdateWithWhereUniqueWithoutPaidSearchAggregatedUnitInput = {
  data: PaidSeachAggregatedDateUnitUpdateWithoutPaidSearchAggregatedUnitDataInput;
  where: PaidSeachAggregatedDateUnitWhereUniqueInput;
};

export type PaidSeachAggregatedDateUnitUpdateWithoutPaidSearchAggregatedUnitDataInput = {
  clicks?: InputMaybe<Scalars['Int']>;
  conversions?: InputMaybe<Scalars['Int']>;
  cost?: InputMaybe<Scalars['Float']>;
  cpc?: InputMaybe<Scalars['Float']>;
  cpm?: InputMaybe<Scalars['Float']>;
  ctr?: InputMaybe<Scalars['Float']>;
  date?: InputMaybe<Scalars['DateTime']>;
  impressions?: InputMaybe<Scalars['Int']>;
  key?: InputMaybe<Scalars['String']>;
  revenue?: InputMaybe<Scalars['Float']>;
  roas?: InputMaybe<Scalars['Float']>;
  spend?: InputMaybe<Scalars['Float']>;
  xAxis?: InputMaybe<Scalars['DateTime']>;
};

export type PaidSeachAggregatedDateUnitUpsertWithWhereUniqueWithoutPaidSearchAggregatedUnitInput = {
  create: PaidSeachAggregatedDateUnitCreateWithoutPaidSearchAggregatedUnitInput;
  update: PaidSeachAggregatedDateUnitUpdateWithoutPaidSearchAggregatedUnitDataInput;
  where: PaidSeachAggregatedDateUnitWhereUniqueInput;
};

export type PaidSeachAggregatedDateUnitWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<PaidSeachAggregatedDateUnitWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<PaidSeachAggregatedDateUnitWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<PaidSeachAggregatedDateUnitWhereInput>>;
  clicks?: InputMaybe<Scalars['Int']>;
  /** All values greater than the given value. */
  clicks_gt?: InputMaybe<Scalars['Int']>;
  /** All values greater than or equal the given value. */
  clicks_gte?: InputMaybe<Scalars['Int']>;
  /** All values that are contained in given list. */
  clicks_in?: InputMaybe<Array<Scalars['Int']>>;
  /** All values less than the given value. */
  clicks_lt?: InputMaybe<Scalars['Int']>;
  /** All values less than or equal the given value. */
  clicks_lte?: InputMaybe<Scalars['Int']>;
  /** All values that are not equal to given value. */
  clicks_not?: InputMaybe<Scalars['Int']>;
  /** All values that are not contained in given list. */
  clicks_not_in?: InputMaybe<Array<Scalars['Int']>>;
  conversions?: InputMaybe<Scalars['Int']>;
  /** All values greater than the given value. */
  conversions_gt?: InputMaybe<Scalars['Int']>;
  /** All values greater than or equal the given value. */
  conversions_gte?: InputMaybe<Scalars['Int']>;
  /** All values that are contained in given list. */
  conversions_in?: InputMaybe<Array<Scalars['Int']>>;
  /** All values less than the given value. */
  conversions_lt?: InputMaybe<Scalars['Int']>;
  /** All values less than or equal the given value. */
  conversions_lte?: InputMaybe<Scalars['Int']>;
  /** All values that are not equal to given value. */
  conversions_not?: InputMaybe<Scalars['Int']>;
  /** All values that are not contained in given list. */
  conversions_not_in?: InputMaybe<Array<Scalars['Int']>>;
  cost?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  cost_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  cost_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  cost_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  cost_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  cost_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  cost_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  cost_not_in?: InputMaybe<Array<Scalars['Float']>>;
  cpc?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  cpc_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  cpc_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  cpc_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  cpc_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  cpc_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  cpc_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  cpc_not_in?: InputMaybe<Array<Scalars['Float']>>;
  cpm?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  cpm_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  cpm_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  cpm_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  cpm_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  cpm_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  cpm_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  cpm_not_in?: InputMaybe<Array<Scalars['Float']>>;
  ctr?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  ctr_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  ctr_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  ctr_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  ctr_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  ctr_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  ctr_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  ctr_not_in?: InputMaybe<Array<Scalars['Float']>>;
  date?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  date_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  date_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  date_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  date_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  date_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  date_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  date_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: InputMaybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: InputMaybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: InputMaybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  impressions?: InputMaybe<Scalars['Int']>;
  /** All values greater than the given value. */
  impressions_gt?: InputMaybe<Scalars['Int']>;
  /** All values greater than or equal the given value. */
  impressions_gte?: InputMaybe<Scalars['Int']>;
  /** All values that are contained in given list. */
  impressions_in?: InputMaybe<Array<Scalars['Int']>>;
  /** All values less than the given value. */
  impressions_lt?: InputMaybe<Scalars['Int']>;
  /** All values less than or equal the given value. */
  impressions_lte?: InputMaybe<Scalars['Int']>;
  /** All values that are not equal to given value. */
  impressions_not?: InputMaybe<Scalars['Int']>;
  /** All values that are not contained in given list. */
  impressions_not_in?: InputMaybe<Array<Scalars['Int']>>;
  key?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  key_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  key_ends_with?: InputMaybe<Scalars['String']>;
  /** All values greater than the given value. */
  key_gt?: InputMaybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  key_gte?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  key_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  key_lt?: InputMaybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  key_lte?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  key_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  key_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string. */
  key_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  key_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  key_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  key_starts_with?: InputMaybe<Scalars['String']>;
  paidSearchAggregatedUnit?: InputMaybe<PaidSearchAggregatedUnitWhereInput>;
  revenue?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  revenue_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  revenue_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  revenue_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  revenue_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  revenue_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  revenue_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  revenue_not_in?: InputMaybe<Array<Scalars['Float']>>;
  roas?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  roas_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  roas_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  roas_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  roas_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  roas_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  roas_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  roas_not_in?: InputMaybe<Array<Scalars['Float']>>;
  spend?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  spend_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  spend_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  spend_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  spend_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  spend_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  spend_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  spend_not_in?: InputMaybe<Array<Scalars['Float']>>;
  xAxis?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  xAxis_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  xAxis_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  xAxis_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  xAxis_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  xAxis_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  xAxis_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  xAxis_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
};

export type PaidSeachAggregatedDateUnitWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
  key?: InputMaybe<Scalars['String']>;
};

export type PaidSeachBingDateUnit = Node & {
  __typename?: 'PaidSeachBingDateUnit';
  clicks?: Maybe<Scalars['Int']>;
  conversions?: Maybe<Scalars['Int']>;
  cost?: Maybe<Scalars['Float']>;
  cpc?: Maybe<Scalars['Float']>;
  cpm?: Maybe<Scalars['Float']>;
  ctr?: Maybe<Scalars['Float']>;
  date?: Maybe<Scalars['DateTime']>;
  id: Scalars['ID'];
  impressions?: Maybe<Scalars['Int']>;
  key: Scalars['String'];
  paidSearchBingUnit?: Maybe<PaidSearchBingUnit>;
  revenue?: Maybe<Scalars['Float']>;
  roas?: Maybe<Scalars['Float']>;
  spend?: Maybe<Scalars['Float']>;
  xAxis?: Maybe<Scalars['DateTime']>;
};

export type PaidSeachBingDateUnitCreateManyWithoutPaidSearchBingUnitInput = {
  connect?: InputMaybe<Array<PaidSeachBingDateUnitWhereUniqueInput>>;
  create?: InputMaybe<Array<PaidSeachBingDateUnitCreateWithoutPaidSearchBingUnitInput>>;
};

export type PaidSeachBingDateUnitCreateWithoutPaidSearchBingUnitInput = {
  clicks?: InputMaybe<Scalars['Int']>;
  conversions?: InputMaybe<Scalars['Int']>;
  cost?: InputMaybe<Scalars['Float']>;
  cpc?: InputMaybe<Scalars['Float']>;
  cpm?: InputMaybe<Scalars['Float']>;
  ctr?: InputMaybe<Scalars['Float']>;
  date?: InputMaybe<Scalars['DateTime']>;
  impressions?: InputMaybe<Scalars['Int']>;
  key: Scalars['String'];
  revenue?: InputMaybe<Scalars['Float']>;
  roas?: InputMaybe<Scalars['Float']>;
  spend?: InputMaybe<Scalars['Float']>;
  xAxis?: InputMaybe<Scalars['DateTime']>;
};

export enum PaidSeachBingDateUnitOrderByInput {
  ClicksAsc = 'clicks_ASC',
  ClicksDesc = 'clicks_DESC',
  ConversionsAsc = 'conversions_ASC',
  ConversionsDesc = 'conversions_DESC',
  CostAsc = 'cost_ASC',
  CostDesc = 'cost_DESC',
  CpcAsc = 'cpc_ASC',
  CpcDesc = 'cpc_DESC',
  CpmAsc = 'cpm_ASC',
  CpmDesc = 'cpm_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  CtrAsc = 'ctr_ASC',
  CtrDesc = 'ctr_DESC',
  DateAsc = 'date_ASC',
  DateDesc = 'date_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  ImpressionsAsc = 'impressions_ASC',
  ImpressionsDesc = 'impressions_DESC',
  KeyAsc = 'key_ASC',
  KeyDesc = 'key_DESC',
  RevenueAsc = 'revenue_ASC',
  RevenueDesc = 'revenue_DESC',
  RoasAsc = 'roas_ASC',
  RoasDesc = 'roas_DESC',
  SpendAsc = 'spend_ASC',
  SpendDesc = 'spend_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  XAxisAsc = 'xAxis_ASC',
  XAxisDesc = 'xAxis_DESC'
}

export type PaidSeachBingDateUnitUpdateManyWithoutPaidSearchBingUnitInput = {
  connect?: InputMaybe<Array<PaidSeachBingDateUnitWhereUniqueInput>>;
  create?: InputMaybe<Array<PaidSeachBingDateUnitCreateWithoutPaidSearchBingUnitInput>>;
  delete?: InputMaybe<Array<PaidSeachBingDateUnitWhereUniqueInput>>;
  disconnect?: InputMaybe<Array<PaidSeachBingDateUnitWhereUniqueInput>>;
  update?: InputMaybe<Array<PaidSeachBingDateUnitUpdateWithWhereUniqueWithoutPaidSearchBingUnitInput>>;
  upsert?: InputMaybe<Array<PaidSeachBingDateUnitUpsertWithWhereUniqueWithoutPaidSearchBingUnitInput>>;
};

export type PaidSeachBingDateUnitUpdateWithWhereUniqueWithoutPaidSearchBingUnitInput = {
  data: PaidSeachBingDateUnitUpdateWithoutPaidSearchBingUnitDataInput;
  where: PaidSeachBingDateUnitWhereUniqueInput;
};

export type PaidSeachBingDateUnitUpdateWithoutPaidSearchBingUnitDataInput = {
  clicks?: InputMaybe<Scalars['Int']>;
  conversions?: InputMaybe<Scalars['Int']>;
  cost?: InputMaybe<Scalars['Float']>;
  cpc?: InputMaybe<Scalars['Float']>;
  cpm?: InputMaybe<Scalars['Float']>;
  ctr?: InputMaybe<Scalars['Float']>;
  date?: InputMaybe<Scalars['DateTime']>;
  impressions?: InputMaybe<Scalars['Int']>;
  key?: InputMaybe<Scalars['String']>;
  revenue?: InputMaybe<Scalars['Float']>;
  roas?: InputMaybe<Scalars['Float']>;
  spend?: InputMaybe<Scalars['Float']>;
  xAxis?: InputMaybe<Scalars['DateTime']>;
};

export type PaidSeachBingDateUnitUpsertWithWhereUniqueWithoutPaidSearchBingUnitInput = {
  create: PaidSeachBingDateUnitCreateWithoutPaidSearchBingUnitInput;
  update: PaidSeachBingDateUnitUpdateWithoutPaidSearchBingUnitDataInput;
  where: PaidSeachBingDateUnitWhereUniqueInput;
};

export type PaidSeachBingDateUnitWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<PaidSeachBingDateUnitWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<PaidSeachBingDateUnitWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<PaidSeachBingDateUnitWhereInput>>;
  clicks?: InputMaybe<Scalars['Int']>;
  /** All values greater than the given value. */
  clicks_gt?: InputMaybe<Scalars['Int']>;
  /** All values greater than or equal the given value. */
  clicks_gte?: InputMaybe<Scalars['Int']>;
  /** All values that are contained in given list. */
  clicks_in?: InputMaybe<Array<Scalars['Int']>>;
  /** All values less than the given value. */
  clicks_lt?: InputMaybe<Scalars['Int']>;
  /** All values less than or equal the given value. */
  clicks_lte?: InputMaybe<Scalars['Int']>;
  /** All values that are not equal to given value. */
  clicks_not?: InputMaybe<Scalars['Int']>;
  /** All values that are not contained in given list. */
  clicks_not_in?: InputMaybe<Array<Scalars['Int']>>;
  conversions?: InputMaybe<Scalars['Int']>;
  /** All values greater than the given value. */
  conversions_gt?: InputMaybe<Scalars['Int']>;
  /** All values greater than or equal the given value. */
  conversions_gte?: InputMaybe<Scalars['Int']>;
  /** All values that are contained in given list. */
  conversions_in?: InputMaybe<Array<Scalars['Int']>>;
  /** All values less than the given value. */
  conversions_lt?: InputMaybe<Scalars['Int']>;
  /** All values less than or equal the given value. */
  conversions_lte?: InputMaybe<Scalars['Int']>;
  /** All values that are not equal to given value. */
  conversions_not?: InputMaybe<Scalars['Int']>;
  /** All values that are not contained in given list. */
  conversions_not_in?: InputMaybe<Array<Scalars['Int']>>;
  cost?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  cost_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  cost_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  cost_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  cost_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  cost_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  cost_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  cost_not_in?: InputMaybe<Array<Scalars['Float']>>;
  cpc?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  cpc_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  cpc_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  cpc_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  cpc_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  cpc_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  cpc_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  cpc_not_in?: InputMaybe<Array<Scalars['Float']>>;
  cpm?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  cpm_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  cpm_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  cpm_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  cpm_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  cpm_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  cpm_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  cpm_not_in?: InputMaybe<Array<Scalars['Float']>>;
  ctr?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  ctr_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  ctr_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  ctr_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  ctr_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  ctr_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  ctr_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  ctr_not_in?: InputMaybe<Array<Scalars['Float']>>;
  date?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  date_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  date_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  date_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  date_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  date_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  date_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  date_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: InputMaybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: InputMaybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: InputMaybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  impressions?: InputMaybe<Scalars['Int']>;
  /** All values greater than the given value. */
  impressions_gt?: InputMaybe<Scalars['Int']>;
  /** All values greater than or equal the given value. */
  impressions_gte?: InputMaybe<Scalars['Int']>;
  /** All values that are contained in given list. */
  impressions_in?: InputMaybe<Array<Scalars['Int']>>;
  /** All values less than the given value. */
  impressions_lt?: InputMaybe<Scalars['Int']>;
  /** All values less than or equal the given value. */
  impressions_lte?: InputMaybe<Scalars['Int']>;
  /** All values that are not equal to given value. */
  impressions_not?: InputMaybe<Scalars['Int']>;
  /** All values that are not contained in given list. */
  impressions_not_in?: InputMaybe<Array<Scalars['Int']>>;
  key?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  key_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  key_ends_with?: InputMaybe<Scalars['String']>;
  /** All values greater than the given value. */
  key_gt?: InputMaybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  key_gte?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  key_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  key_lt?: InputMaybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  key_lte?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  key_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  key_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string. */
  key_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  key_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  key_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  key_starts_with?: InputMaybe<Scalars['String']>;
  paidSearchBingUnit?: InputMaybe<PaidSearchBingUnitWhereInput>;
  revenue?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  revenue_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  revenue_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  revenue_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  revenue_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  revenue_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  revenue_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  revenue_not_in?: InputMaybe<Array<Scalars['Float']>>;
  roas?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  roas_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  roas_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  roas_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  roas_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  roas_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  roas_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  roas_not_in?: InputMaybe<Array<Scalars['Float']>>;
  spend?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  spend_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  spend_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  spend_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  spend_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  spend_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  spend_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  spend_not_in?: InputMaybe<Array<Scalars['Float']>>;
  xAxis?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  xAxis_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  xAxis_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  xAxis_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  xAxis_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  xAxis_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  xAxis_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  xAxis_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
};

export type PaidSeachBingDateUnitWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
  key?: InputMaybe<Scalars['String']>;
};

export type PaidSearchAggregatedUnit = Node & {
  __typename?: 'PaidSearchAggregatedUnit';
  byDate?: Maybe<Array<PaidSeachAggregatedDateUnit>>;
  clicks?: Maybe<Scalars['Int']>;
  conversions?: Maybe<Scalars['Float']>;
  cost?: Maybe<Scalars['Float']>;
  cpc?: Maybe<Scalars['Float']>;
  cpm?: Maybe<Scalars['Float']>;
  ctr?: Maybe<Scalars['Float']>;
  id: Scalars['ID'];
  impressions?: Maybe<Scalars['Int']>;
  paidSearchSummary?: Maybe<PaidSearchSummary>;
  phoneCalls?: Maybe<Scalars['Float']>;
  revenue?: Maybe<Scalars['Float']>;
  roas?: Maybe<Scalars['Float']>;
  spend?: Maybe<Scalars['Float']>;
};


export type PaidSearchAggregatedUnitByDateArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<PaidSeachAggregatedDateUnitOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<PaidSeachAggregatedDateUnitWhereInput>;
};

export type PaidSearchAggregatedUnitCreateOneWithoutPaidSearchSummaryInput = {
  connect?: InputMaybe<PaidSearchAggregatedUnitWhereUniqueInput>;
  create?: InputMaybe<PaidSearchAggregatedUnitCreateWithoutPaidSearchSummaryInput>;
};

export type PaidSearchAggregatedUnitCreateWithoutPaidSearchSummaryInput = {
  byDate?: InputMaybe<PaidSeachAggregatedDateUnitCreateManyWithoutPaidSearchAggregatedUnitInput>;
  clicks?: InputMaybe<Scalars['Int']>;
  conversions?: InputMaybe<Scalars['Float']>;
  cost?: InputMaybe<Scalars['Float']>;
  cpc?: InputMaybe<Scalars['Float']>;
  cpm?: InputMaybe<Scalars['Float']>;
  ctr?: InputMaybe<Scalars['Float']>;
  impressions?: InputMaybe<Scalars['Int']>;
  phoneCalls?: InputMaybe<Scalars['Float']>;
  revenue?: InputMaybe<Scalars['Float']>;
  roas?: InputMaybe<Scalars['Float']>;
  spend?: InputMaybe<Scalars['Float']>;
};

export type PaidSearchAggregatedUnitUpdateOneWithoutPaidSearchSummaryInput = {
  connect?: InputMaybe<PaidSearchAggregatedUnitWhereUniqueInput>;
  create?: InputMaybe<PaidSearchAggregatedUnitCreateWithoutPaidSearchSummaryInput>;
  delete?: InputMaybe<Scalars['Boolean']>;
  disconnect?: InputMaybe<Scalars['Boolean']>;
  update?: InputMaybe<PaidSearchAggregatedUnitUpdateWithoutPaidSearchSummaryDataInput>;
  upsert?: InputMaybe<PaidSearchAggregatedUnitUpsertWithoutPaidSearchSummaryInput>;
};

export type PaidSearchAggregatedUnitUpdateWithoutPaidSearchSummaryDataInput = {
  byDate?: InputMaybe<PaidSeachAggregatedDateUnitUpdateManyWithoutPaidSearchAggregatedUnitInput>;
  clicks?: InputMaybe<Scalars['Int']>;
  conversions?: InputMaybe<Scalars['Float']>;
  cost?: InputMaybe<Scalars['Float']>;
  cpc?: InputMaybe<Scalars['Float']>;
  cpm?: InputMaybe<Scalars['Float']>;
  ctr?: InputMaybe<Scalars['Float']>;
  impressions?: InputMaybe<Scalars['Int']>;
  phoneCalls?: InputMaybe<Scalars['Float']>;
  revenue?: InputMaybe<Scalars['Float']>;
  roas?: InputMaybe<Scalars['Float']>;
  spend?: InputMaybe<Scalars['Float']>;
};

export type PaidSearchAggregatedUnitUpsertWithoutPaidSearchSummaryInput = {
  create: PaidSearchAggregatedUnitCreateWithoutPaidSearchSummaryInput;
  update: PaidSearchAggregatedUnitUpdateWithoutPaidSearchSummaryDataInput;
};

export type PaidSearchAggregatedUnitWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<PaidSearchAggregatedUnitWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<PaidSearchAggregatedUnitWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<PaidSearchAggregatedUnitWhereInput>>;
  byDate_every?: InputMaybe<PaidSeachAggregatedDateUnitWhereInput>;
  byDate_none?: InputMaybe<PaidSeachAggregatedDateUnitWhereInput>;
  byDate_some?: InputMaybe<PaidSeachAggregatedDateUnitWhereInput>;
  clicks?: InputMaybe<Scalars['Int']>;
  /** All values greater than the given value. */
  clicks_gt?: InputMaybe<Scalars['Int']>;
  /** All values greater than or equal the given value. */
  clicks_gte?: InputMaybe<Scalars['Int']>;
  /** All values that are contained in given list. */
  clicks_in?: InputMaybe<Array<Scalars['Int']>>;
  /** All values less than the given value. */
  clicks_lt?: InputMaybe<Scalars['Int']>;
  /** All values less than or equal the given value. */
  clicks_lte?: InputMaybe<Scalars['Int']>;
  /** All values that are not equal to given value. */
  clicks_not?: InputMaybe<Scalars['Int']>;
  /** All values that are not contained in given list. */
  clicks_not_in?: InputMaybe<Array<Scalars['Int']>>;
  conversions?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  conversions_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  conversions_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  conversions_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  conversions_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  conversions_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  conversions_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  conversions_not_in?: InputMaybe<Array<Scalars['Float']>>;
  cost?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  cost_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  cost_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  cost_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  cost_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  cost_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  cost_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  cost_not_in?: InputMaybe<Array<Scalars['Float']>>;
  cpc?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  cpc_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  cpc_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  cpc_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  cpc_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  cpc_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  cpc_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  cpc_not_in?: InputMaybe<Array<Scalars['Float']>>;
  cpm?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  cpm_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  cpm_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  cpm_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  cpm_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  cpm_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  cpm_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  cpm_not_in?: InputMaybe<Array<Scalars['Float']>>;
  ctr?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  ctr_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  ctr_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  ctr_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  ctr_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  ctr_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  ctr_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  ctr_not_in?: InputMaybe<Array<Scalars['Float']>>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: InputMaybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: InputMaybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: InputMaybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  impressions?: InputMaybe<Scalars['Int']>;
  /** All values greater than the given value. */
  impressions_gt?: InputMaybe<Scalars['Int']>;
  /** All values greater than or equal the given value. */
  impressions_gte?: InputMaybe<Scalars['Int']>;
  /** All values that are contained in given list. */
  impressions_in?: InputMaybe<Array<Scalars['Int']>>;
  /** All values less than the given value. */
  impressions_lt?: InputMaybe<Scalars['Int']>;
  /** All values less than or equal the given value. */
  impressions_lte?: InputMaybe<Scalars['Int']>;
  /** All values that are not equal to given value. */
  impressions_not?: InputMaybe<Scalars['Int']>;
  /** All values that are not contained in given list. */
  impressions_not_in?: InputMaybe<Array<Scalars['Int']>>;
  paidSearchSummary?: InputMaybe<PaidSearchSummaryWhereInput>;
  phoneCalls?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  phoneCalls_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  phoneCalls_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  phoneCalls_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  phoneCalls_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  phoneCalls_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  phoneCalls_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  phoneCalls_not_in?: InputMaybe<Array<Scalars['Float']>>;
  revenue?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  revenue_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  revenue_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  revenue_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  revenue_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  revenue_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  revenue_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  revenue_not_in?: InputMaybe<Array<Scalars['Float']>>;
  roas?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  roas_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  roas_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  roas_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  roas_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  roas_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  roas_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  roas_not_in?: InputMaybe<Array<Scalars['Float']>>;
  spend?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  spend_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  spend_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  spend_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  spend_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  spend_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  spend_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  spend_not_in?: InputMaybe<Array<Scalars['Float']>>;
};

export type PaidSearchAggregatedUnitWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export type PaidSearchBingCampaigns = Node & {
  __typename?: 'PaidSearchBingCampaigns';
  adProviderId: Scalars['String'];
  data?: Maybe<PaidSearchBingUnit>;
  endDate: Scalars['DateTime'];
  id: Scalars['ID'];
  locations?: Maybe<PaidSearchLocationBingUnit>;
  name: Scalars['String'];
  paidSearchSummary: PaidSearchSummary;
  reportId?: Maybe<Scalars['String']>;
  startDate: Scalars['DateTime'];
  status?: Maybe<ServingStatus>;
};

export type PaidSearchBingCampaignsCreateInput = {
  adProviderId: Scalars['String'];
  data?: InputMaybe<PaidSearchBingUnitCreateOneWithoutPaidSearchBingCampaignInput>;
  endDate: Scalars['DateTime'];
  locations?: InputMaybe<PaidSearchLocationBingUnitCreateOneWithoutPaidSearchBingCampaignInput>;
  name: Scalars['String'];
  paidSearchSummary: PaidSearchSummaryCreateOneInput;
  reportId?: InputMaybe<Scalars['String']>;
  startDate: Scalars['DateTime'];
  status?: InputMaybe<ServingStatus>;
};

export type PaidSearchBingCampaignsCreateManyInput = {
  connect?: InputMaybe<Array<PaidSearchBingCampaignsWhereUniqueInput>>;
  create?: InputMaybe<Array<PaidSearchBingCampaignsCreateInput>>;
};

export type PaidSearchBingCampaignsCreateOneWithoutDataInput = {
  connect?: InputMaybe<PaidSearchBingCampaignsWhereUniqueInput>;
  create?: InputMaybe<PaidSearchBingCampaignsCreateWithoutDataInput>;
};

export type PaidSearchBingCampaignsCreateOneWithoutLocationsInput = {
  connect?: InputMaybe<PaidSearchBingCampaignsWhereUniqueInput>;
  create?: InputMaybe<PaidSearchBingCampaignsCreateWithoutLocationsInput>;
};

export type PaidSearchBingCampaignsCreateWithoutDataInput = {
  adProviderId: Scalars['String'];
  endDate: Scalars['DateTime'];
  locations?: InputMaybe<PaidSearchLocationBingUnitCreateOneWithoutPaidSearchBingCampaignInput>;
  name: Scalars['String'];
  paidSearchSummary: PaidSearchSummaryCreateOneInput;
  reportId?: InputMaybe<Scalars['String']>;
  startDate: Scalars['DateTime'];
  status?: InputMaybe<ServingStatus>;
};

export type PaidSearchBingCampaignsCreateWithoutLocationsInput = {
  adProviderId: Scalars['String'];
  data?: InputMaybe<PaidSearchBingUnitCreateOneWithoutPaidSearchBingCampaignInput>;
  endDate: Scalars['DateTime'];
  name: Scalars['String'];
  paidSearchSummary: PaidSearchSummaryCreateOneInput;
  reportId?: InputMaybe<Scalars['String']>;
  startDate: Scalars['DateTime'];
  status?: InputMaybe<ServingStatus>;
};

export enum PaidSearchBingCampaignsOrderByInput {
  AdProviderIdAsc = 'adProviderId_ASC',
  AdProviderIdDesc = 'adProviderId_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  EndDateAsc = 'endDate_ASC',
  EndDateDesc = 'endDate_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  NameAsc = 'name_ASC',
  NameDesc = 'name_DESC',
  ReportIdAsc = 'reportId_ASC',
  ReportIdDesc = 'reportId_DESC',
  StartDateAsc = 'startDate_ASC',
  StartDateDesc = 'startDate_DESC',
  StatusAsc = 'status_ASC',
  StatusDesc = 'status_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC'
}

export type PaidSearchBingCampaignsUpdateDataInput = {
  adProviderId?: InputMaybe<Scalars['String']>;
  data?: InputMaybe<PaidSearchBingUnitUpdateOneWithoutPaidSearchBingCampaignInput>;
  endDate?: InputMaybe<Scalars['DateTime']>;
  locations?: InputMaybe<PaidSearchLocationBingUnitUpdateOneWithoutPaidSearchBingCampaignInput>;
  name?: InputMaybe<Scalars['String']>;
  paidSearchSummary?: InputMaybe<PaidSearchSummaryUpdateOneRequiredInput>;
  reportId?: InputMaybe<Scalars['String']>;
  startDate?: InputMaybe<Scalars['DateTime']>;
  status?: InputMaybe<ServingStatus>;
};

export type PaidSearchBingCampaignsUpdateManyInput = {
  connect?: InputMaybe<Array<PaidSearchBingCampaignsWhereUniqueInput>>;
  create?: InputMaybe<Array<PaidSearchBingCampaignsCreateInput>>;
  delete?: InputMaybe<Array<PaidSearchBingCampaignsWhereUniqueInput>>;
  disconnect?: InputMaybe<Array<PaidSearchBingCampaignsWhereUniqueInput>>;
  update?: InputMaybe<Array<PaidSearchBingCampaignsUpdateWithWhereUniqueNestedInput>>;
  upsert?: InputMaybe<Array<PaidSearchBingCampaignsUpsertWithWhereUniqueNestedInput>>;
};

export type PaidSearchBingCampaignsUpdateOneWithoutDataInput = {
  connect?: InputMaybe<PaidSearchBingCampaignsWhereUniqueInput>;
  create?: InputMaybe<PaidSearchBingCampaignsCreateWithoutDataInput>;
  delete?: InputMaybe<Scalars['Boolean']>;
  disconnect?: InputMaybe<Scalars['Boolean']>;
  update?: InputMaybe<PaidSearchBingCampaignsUpdateWithoutDataDataInput>;
  upsert?: InputMaybe<PaidSearchBingCampaignsUpsertWithoutDataInput>;
};

export type PaidSearchBingCampaignsUpdateOneWithoutLocationsInput = {
  connect?: InputMaybe<PaidSearchBingCampaignsWhereUniqueInput>;
  create?: InputMaybe<PaidSearchBingCampaignsCreateWithoutLocationsInput>;
  delete?: InputMaybe<Scalars['Boolean']>;
  disconnect?: InputMaybe<Scalars['Boolean']>;
  update?: InputMaybe<PaidSearchBingCampaignsUpdateWithoutLocationsDataInput>;
  upsert?: InputMaybe<PaidSearchBingCampaignsUpsertWithoutLocationsInput>;
};

export type PaidSearchBingCampaignsUpdateWithWhereUniqueNestedInput = {
  data: PaidSearchBingCampaignsUpdateDataInput;
  where: PaidSearchBingCampaignsWhereUniqueInput;
};

export type PaidSearchBingCampaignsUpdateWithoutDataDataInput = {
  adProviderId?: InputMaybe<Scalars['String']>;
  endDate?: InputMaybe<Scalars['DateTime']>;
  locations?: InputMaybe<PaidSearchLocationBingUnitUpdateOneWithoutPaidSearchBingCampaignInput>;
  name?: InputMaybe<Scalars['String']>;
  paidSearchSummary?: InputMaybe<PaidSearchSummaryUpdateOneRequiredInput>;
  reportId?: InputMaybe<Scalars['String']>;
  startDate?: InputMaybe<Scalars['DateTime']>;
  status?: InputMaybe<ServingStatus>;
};

export type PaidSearchBingCampaignsUpdateWithoutLocationsDataInput = {
  adProviderId?: InputMaybe<Scalars['String']>;
  data?: InputMaybe<PaidSearchBingUnitUpdateOneWithoutPaidSearchBingCampaignInput>;
  endDate?: InputMaybe<Scalars['DateTime']>;
  name?: InputMaybe<Scalars['String']>;
  paidSearchSummary?: InputMaybe<PaidSearchSummaryUpdateOneRequiredInput>;
  reportId?: InputMaybe<Scalars['String']>;
  startDate?: InputMaybe<Scalars['DateTime']>;
  status?: InputMaybe<ServingStatus>;
};

export type PaidSearchBingCampaignsUpsertWithWhereUniqueNestedInput = {
  create: PaidSearchBingCampaignsCreateInput;
  update: PaidSearchBingCampaignsUpdateDataInput;
  where: PaidSearchBingCampaignsWhereUniqueInput;
};

export type PaidSearchBingCampaignsUpsertWithoutDataInput = {
  create: PaidSearchBingCampaignsCreateWithoutDataInput;
  update: PaidSearchBingCampaignsUpdateWithoutDataDataInput;
};

export type PaidSearchBingCampaignsUpsertWithoutLocationsInput = {
  create: PaidSearchBingCampaignsCreateWithoutLocationsInput;
  update: PaidSearchBingCampaignsUpdateWithoutLocationsDataInput;
};

export type PaidSearchBingCampaignsWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<PaidSearchBingCampaignsWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<PaidSearchBingCampaignsWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<PaidSearchBingCampaignsWhereInput>>;
  adProviderId?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  adProviderId_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  adProviderId_ends_with?: InputMaybe<Scalars['String']>;
  /** All values greater than the given value. */
  adProviderId_gt?: InputMaybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  adProviderId_gte?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  adProviderId_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  adProviderId_lt?: InputMaybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  adProviderId_lte?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  adProviderId_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  adProviderId_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string. */
  adProviderId_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  adProviderId_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  adProviderId_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  adProviderId_starts_with?: InputMaybe<Scalars['String']>;
  data?: InputMaybe<PaidSearchBingUnitWhereInput>;
  endDate?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  endDate_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  endDate_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  endDate_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  endDate_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  endDate_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  endDate_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  endDate_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: InputMaybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: InputMaybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: InputMaybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  locations?: InputMaybe<PaidSearchLocationBingUnitWhereInput>;
  name?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  name_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  name_ends_with?: InputMaybe<Scalars['String']>;
  /** All values greater than the given value. */
  name_gt?: InputMaybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  name_gte?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  name_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  name_lt?: InputMaybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  name_lte?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  name_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  name_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string. */
  name_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  name_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  name_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  name_starts_with?: InputMaybe<Scalars['String']>;
  paidSearchSummary?: InputMaybe<PaidSearchSummaryWhereInput>;
  reportId?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  reportId_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  reportId_ends_with?: InputMaybe<Scalars['String']>;
  /** All values greater than the given value. */
  reportId_gt?: InputMaybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  reportId_gte?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  reportId_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  reportId_lt?: InputMaybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  reportId_lte?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  reportId_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  reportId_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string. */
  reportId_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  reportId_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  reportId_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  reportId_starts_with?: InputMaybe<Scalars['String']>;
  startDate?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  startDate_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  startDate_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  startDate_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  startDate_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  startDate_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  startDate_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  startDate_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  status?: InputMaybe<ServingStatus>;
  /** All values that are contained in given list. */
  status_in?: InputMaybe<Array<ServingStatus>>;
  /** All values that are not equal to given value. */
  status_not?: InputMaybe<ServingStatus>;
  /** All values that are not contained in given list. */
  status_not_in?: InputMaybe<Array<ServingStatus>>;
};

export type PaidSearchBingCampaignsWhereUniqueInput = {
  adProviderId?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
};

export type PaidSearchBingUnit = Node & {
  __typename?: 'PaidSearchBingUnit';
  byDate?: Maybe<Array<PaidSeachBingDateUnit>>;
  clicks?: Maybe<Scalars['Int']>;
  conversions?: Maybe<Scalars['Float']>;
  cost?: Maybe<Scalars['Float']>;
  cpc?: Maybe<Scalars['Float']>;
  cpm?: Maybe<Scalars['Float']>;
  ctr?: Maybe<Scalars['Float']>;
  id: Scalars['ID'];
  impressions?: Maybe<Scalars['Int']>;
  paidSearchBingCampaign?: Maybe<PaidSearchBingCampaigns>;
  paidSearchSummary?: Maybe<PaidSearchSummary>;
  phoneCalls?: Maybe<Scalars['Float']>;
  revenue?: Maybe<Scalars['Float']>;
  roas?: Maybe<Scalars['Float']>;
  spend?: Maybe<Scalars['Float']>;
};


export type PaidSearchBingUnitByDateArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<PaidSeachBingDateUnitOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<PaidSeachBingDateUnitWhereInput>;
};

export type PaidSearchBingUnitCreateOneWithoutPaidSearchBingCampaignInput = {
  connect?: InputMaybe<PaidSearchBingUnitWhereUniqueInput>;
  create?: InputMaybe<PaidSearchBingUnitCreateWithoutPaidSearchBingCampaignInput>;
};

export type PaidSearchBingUnitCreateOneWithoutPaidSearchSummaryInput = {
  connect?: InputMaybe<PaidSearchBingUnitWhereUniqueInput>;
  create?: InputMaybe<PaidSearchBingUnitCreateWithoutPaidSearchSummaryInput>;
};

export type PaidSearchBingUnitCreateWithoutPaidSearchBingCampaignInput = {
  byDate?: InputMaybe<PaidSeachBingDateUnitCreateManyWithoutPaidSearchBingUnitInput>;
  clicks?: InputMaybe<Scalars['Int']>;
  conversions?: InputMaybe<Scalars['Float']>;
  cost?: InputMaybe<Scalars['Float']>;
  cpc?: InputMaybe<Scalars['Float']>;
  cpm?: InputMaybe<Scalars['Float']>;
  ctr?: InputMaybe<Scalars['Float']>;
  impressions?: InputMaybe<Scalars['Int']>;
  paidSearchSummary?: InputMaybe<PaidSearchSummaryCreateOneWithoutOverallBingInput>;
  phoneCalls?: InputMaybe<Scalars['Float']>;
  revenue?: InputMaybe<Scalars['Float']>;
  roas?: InputMaybe<Scalars['Float']>;
  spend?: InputMaybe<Scalars['Float']>;
};

export type PaidSearchBingUnitCreateWithoutPaidSearchSummaryInput = {
  byDate?: InputMaybe<PaidSeachBingDateUnitCreateManyWithoutPaidSearchBingUnitInput>;
  clicks?: InputMaybe<Scalars['Int']>;
  conversions?: InputMaybe<Scalars['Float']>;
  cost?: InputMaybe<Scalars['Float']>;
  cpc?: InputMaybe<Scalars['Float']>;
  cpm?: InputMaybe<Scalars['Float']>;
  ctr?: InputMaybe<Scalars['Float']>;
  impressions?: InputMaybe<Scalars['Int']>;
  paidSearchBingCampaign?: InputMaybe<PaidSearchBingCampaignsCreateOneWithoutDataInput>;
  phoneCalls?: InputMaybe<Scalars['Float']>;
  revenue?: InputMaybe<Scalars['Float']>;
  roas?: InputMaybe<Scalars['Float']>;
  spend?: InputMaybe<Scalars['Float']>;
};

export enum PaidSearchBingUnitOrderByInput {
  ClicksAsc = 'clicks_ASC',
  ClicksDesc = 'clicks_DESC',
  ConversionsAsc = 'conversions_ASC',
  ConversionsDesc = 'conversions_DESC',
  CostAsc = 'cost_ASC',
  CostDesc = 'cost_DESC',
  CpcAsc = 'cpc_ASC',
  CpcDesc = 'cpc_DESC',
  CpmAsc = 'cpm_ASC',
  CpmDesc = 'cpm_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  CtrAsc = 'ctr_ASC',
  CtrDesc = 'ctr_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  ImpressionsAsc = 'impressions_ASC',
  ImpressionsDesc = 'impressions_DESC',
  PhoneCallsAsc = 'phoneCalls_ASC',
  PhoneCallsDesc = 'phoneCalls_DESC',
  RevenueAsc = 'revenue_ASC',
  RevenueDesc = 'revenue_DESC',
  RoasAsc = 'roas_ASC',
  RoasDesc = 'roas_DESC',
  SpendAsc = 'spend_ASC',
  SpendDesc = 'spend_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC'
}

export type PaidSearchBingUnitUpdateOneWithoutPaidSearchBingCampaignInput = {
  connect?: InputMaybe<PaidSearchBingUnitWhereUniqueInput>;
  create?: InputMaybe<PaidSearchBingUnitCreateWithoutPaidSearchBingCampaignInput>;
  delete?: InputMaybe<Scalars['Boolean']>;
  disconnect?: InputMaybe<Scalars['Boolean']>;
  update?: InputMaybe<PaidSearchBingUnitUpdateWithoutPaidSearchBingCampaignDataInput>;
  upsert?: InputMaybe<PaidSearchBingUnitUpsertWithoutPaidSearchBingCampaignInput>;
};

export type PaidSearchBingUnitUpdateOneWithoutPaidSearchSummaryInput = {
  connect?: InputMaybe<PaidSearchBingUnitWhereUniqueInput>;
  create?: InputMaybe<PaidSearchBingUnitCreateWithoutPaidSearchSummaryInput>;
  delete?: InputMaybe<Scalars['Boolean']>;
  disconnect?: InputMaybe<Scalars['Boolean']>;
  update?: InputMaybe<PaidSearchBingUnitUpdateWithoutPaidSearchSummaryDataInput>;
  upsert?: InputMaybe<PaidSearchBingUnitUpsertWithoutPaidSearchSummaryInput>;
};

export type PaidSearchBingUnitUpdateWithoutPaidSearchBingCampaignDataInput = {
  byDate?: InputMaybe<PaidSeachBingDateUnitUpdateManyWithoutPaidSearchBingUnitInput>;
  clicks?: InputMaybe<Scalars['Int']>;
  conversions?: InputMaybe<Scalars['Float']>;
  cost?: InputMaybe<Scalars['Float']>;
  cpc?: InputMaybe<Scalars['Float']>;
  cpm?: InputMaybe<Scalars['Float']>;
  ctr?: InputMaybe<Scalars['Float']>;
  impressions?: InputMaybe<Scalars['Int']>;
  paidSearchSummary?: InputMaybe<PaidSearchSummaryUpdateOneWithoutOverallBingInput>;
  phoneCalls?: InputMaybe<Scalars['Float']>;
  revenue?: InputMaybe<Scalars['Float']>;
  roas?: InputMaybe<Scalars['Float']>;
  spend?: InputMaybe<Scalars['Float']>;
};

export type PaidSearchBingUnitUpdateWithoutPaidSearchSummaryDataInput = {
  byDate?: InputMaybe<PaidSeachBingDateUnitUpdateManyWithoutPaidSearchBingUnitInput>;
  clicks?: InputMaybe<Scalars['Int']>;
  conversions?: InputMaybe<Scalars['Float']>;
  cost?: InputMaybe<Scalars['Float']>;
  cpc?: InputMaybe<Scalars['Float']>;
  cpm?: InputMaybe<Scalars['Float']>;
  ctr?: InputMaybe<Scalars['Float']>;
  impressions?: InputMaybe<Scalars['Int']>;
  paidSearchBingCampaign?: InputMaybe<PaidSearchBingCampaignsUpdateOneWithoutDataInput>;
  phoneCalls?: InputMaybe<Scalars['Float']>;
  revenue?: InputMaybe<Scalars['Float']>;
  roas?: InputMaybe<Scalars['Float']>;
  spend?: InputMaybe<Scalars['Float']>;
};

export type PaidSearchBingUnitUpsertWithoutPaidSearchBingCampaignInput = {
  create: PaidSearchBingUnitCreateWithoutPaidSearchBingCampaignInput;
  update: PaidSearchBingUnitUpdateWithoutPaidSearchBingCampaignDataInput;
};

export type PaidSearchBingUnitUpsertWithoutPaidSearchSummaryInput = {
  create: PaidSearchBingUnitCreateWithoutPaidSearchSummaryInput;
  update: PaidSearchBingUnitUpdateWithoutPaidSearchSummaryDataInput;
};

export type PaidSearchBingUnitWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<PaidSearchBingUnitWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<PaidSearchBingUnitWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<PaidSearchBingUnitWhereInput>>;
  byDate_every?: InputMaybe<PaidSeachBingDateUnitWhereInput>;
  byDate_none?: InputMaybe<PaidSeachBingDateUnitWhereInput>;
  byDate_some?: InputMaybe<PaidSeachBingDateUnitWhereInput>;
  clicks?: InputMaybe<Scalars['Int']>;
  /** All values greater than the given value. */
  clicks_gt?: InputMaybe<Scalars['Int']>;
  /** All values greater than or equal the given value. */
  clicks_gte?: InputMaybe<Scalars['Int']>;
  /** All values that are contained in given list. */
  clicks_in?: InputMaybe<Array<Scalars['Int']>>;
  /** All values less than the given value. */
  clicks_lt?: InputMaybe<Scalars['Int']>;
  /** All values less than or equal the given value. */
  clicks_lte?: InputMaybe<Scalars['Int']>;
  /** All values that are not equal to given value. */
  clicks_not?: InputMaybe<Scalars['Int']>;
  /** All values that are not contained in given list. */
  clicks_not_in?: InputMaybe<Array<Scalars['Int']>>;
  conversions?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  conversions_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  conversions_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  conversions_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  conversions_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  conversions_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  conversions_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  conversions_not_in?: InputMaybe<Array<Scalars['Float']>>;
  cost?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  cost_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  cost_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  cost_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  cost_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  cost_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  cost_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  cost_not_in?: InputMaybe<Array<Scalars['Float']>>;
  cpc?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  cpc_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  cpc_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  cpc_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  cpc_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  cpc_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  cpc_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  cpc_not_in?: InputMaybe<Array<Scalars['Float']>>;
  cpm?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  cpm_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  cpm_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  cpm_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  cpm_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  cpm_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  cpm_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  cpm_not_in?: InputMaybe<Array<Scalars['Float']>>;
  ctr?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  ctr_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  ctr_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  ctr_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  ctr_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  ctr_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  ctr_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  ctr_not_in?: InputMaybe<Array<Scalars['Float']>>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: InputMaybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: InputMaybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: InputMaybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  impressions?: InputMaybe<Scalars['Int']>;
  /** All values greater than the given value. */
  impressions_gt?: InputMaybe<Scalars['Int']>;
  /** All values greater than or equal the given value. */
  impressions_gte?: InputMaybe<Scalars['Int']>;
  /** All values that are contained in given list. */
  impressions_in?: InputMaybe<Array<Scalars['Int']>>;
  /** All values less than the given value. */
  impressions_lt?: InputMaybe<Scalars['Int']>;
  /** All values less than or equal the given value. */
  impressions_lte?: InputMaybe<Scalars['Int']>;
  /** All values that are not equal to given value. */
  impressions_not?: InputMaybe<Scalars['Int']>;
  /** All values that are not contained in given list. */
  impressions_not_in?: InputMaybe<Array<Scalars['Int']>>;
  paidSearchBingCampaign?: InputMaybe<PaidSearchBingCampaignsWhereInput>;
  paidSearchSummary?: InputMaybe<PaidSearchSummaryWhereInput>;
  phoneCalls?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  phoneCalls_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  phoneCalls_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  phoneCalls_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  phoneCalls_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  phoneCalls_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  phoneCalls_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  phoneCalls_not_in?: InputMaybe<Array<Scalars['Float']>>;
  revenue?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  revenue_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  revenue_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  revenue_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  revenue_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  revenue_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  revenue_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  revenue_not_in?: InputMaybe<Array<Scalars['Float']>>;
  roas?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  roas_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  roas_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  roas_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  roas_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  roas_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  roas_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  roas_not_in?: InputMaybe<Array<Scalars['Float']>>;
  spend?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  spend_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  spend_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  spend_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  spend_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  spend_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  spend_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  spend_not_in?: InputMaybe<Array<Scalars['Float']>>;
};

export type PaidSearchBingUnitWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export type PaidSearchCampaign = Node & {
  __typename?: 'PaidSearchCampaign';
  adProviderId: Scalars['String'];
  commerce?: Maybe<PaidSearchCommerceUnit>;
  data?: Maybe<PaidSearchUnit>;
  endDate: Scalars['DateTime'];
  id: Scalars['ID'];
  locations?: Maybe<PaidSearchLocationUnit>;
  name: Scalars['String'];
  paidSearchSummary: PaidSearchSummary;
  reportId?: Maybe<Scalars['String']>;
  startDate: Scalars['DateTime'];
  status?: Maybe<ServingStatus>;
};

export type PaidSearchCampaignCreateManyWithoutPaidSearchSummaryInput = {
  connect?: InputMaybe<Array<PaidSearchCampaignWhereUniqueInput>>;
  create?: InputMaybe<Array<PaidSearchCampaignCreateWithoutPaidSearchSummaryInput>>;
};

export type PaidSearchCampaignCreateOneWithoutCommerceInput = {
  connect?: InputMaybe<PaidSearchCampaignWhereUniqueInput>;
  create?: InputMaybe<PaidSearchCampaignCreateWithoutCommerceInput>;
};

export type PaidSearchCampaignCreateOneWithoutDataInput = {
  connect?: InputMaybe<PaidSearchCampaignWhereUniqueInput>;
  create?: InputMaybe<PaidSearchCampaignCreateWithoutDataInput>;
};

export type PaidSearchCampaignCreateOneWithoutLocationsInput = {
  connect?: InputMaybe<PaidSearchCampaignWhereUniqueInput>;
  create?: InputMaybe<PaidSearchCampaignCreateWithoutLocationsInput>;
};

export type PaidSearchCampaignCreateWithoutCommerceInput = {
  adProviderId: Scalars['String'];
  data?: InputMaybe<PaidSearchUnitCreateOneWithoutPaidSearchCampaignInput>;
  endDate: Scalars['DateTime'];
  locations?: InputMaybe<PaidSearchLocationUnitCreateOneWithoutPaidSearchCampaignInput>;
  name: Scalars['String'];
  paidSearchSummary: PaidSearchSummaryCreateOneWithoutPaidSearchCampaignsInput;
  reportId?: InputMaybe<Scalars['String']>;
  startDate: Scalars['DateTime'];
  status?: InputMaybe<ServingStatus>;
};

export type PaidSearchCampaignCreateWithoutDataInput = {
  adProviderId: Scalars['String'];
  commerce?: InputMaybe<PaidSearchCommerceUnitCreateOneWithoutPaidSearchCampaignInput>;
  endDate: Scalars['DateTime'];
  locations?: InputMaybe<PaidSearchLocationUnitCreateOneWithoutPaidSearchCampaignInput>;
  name: Scalars['String'];
  paidSearchSummary: PaidSearchSummaryCreateOneWithoutPaidSearchCampaignsInput;
  reportId?: InputMaybe<Scalars['String']>;
  startDate: Scalars['DateTime'];
  status?: InputMaybe<ServingStatus>;
};

export type PaidSearchCampaignCreateWithoutLocationsInput = {
  adProviderId: Scalars['String'];
  commerce?: InputMaybe<PaidSearchCommerceUnitCreateOneWithoutPaidSearchCampaignInput>;
  data?: InputMaybe<PaidSearchUnitCreateOneWithoutPaidSearchCampaignInput>;
  endDate: Scalars['DateTime'];
  name: Scalars['String'];
  paidSearchSummary: PaidSearchSummaryCreateOneWithoutPaidSearchCampaignsInput;
  reportId?: InputMaybe<Scalars['String']>;
  startDate: Scalars['DateTime'];
  status?: InputMaybe<ServingStatus>;
};

export type PaidSearchCampaignCreateWithoutPaidSearchSummaryInput = {
  adProviderId: Scalars['String'];
  commerce?: InputMaybe<PaidSearchCommerceUnitCreateOneWithoutPaidSearchCampaignInput>;
  data?: InputMaybe<PaidSearchUnitCreateOneWithoutPaidSearchCampaignInput>;
  endDate: Scalars['DateTime'];
  locations?: InputMaybe<PaidSearchLocationUnitCreateOneWithoutPaidSearchCampaignInput>;
  name: Scalars['String'];
  reportId?: InputMaybe<Scalars['String']>;
  startDate: Scalars['DateTime'];
  status?: InputMaybe<ServingStatus>;
};

export enum PaidSearchCampaignOrderByInput {
  AdProviderIdAsc = 'adProviderId_ASC',
  AdProviderIdDesc = 'adProviderId_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  EndDateAsc = 'endDate_ASC',
  EndDateDesc = 'endDate_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  NameAsc = 'name_ASC',
  NameDesc = 'name_DESC',
  ReportIdAsc = 'reportId_ASC',
  ReportIdDesc = 'reportId_DESC',
  StartDateAsc = 'startDate_ASC',
  StartDateDesc = 'startDate_DESC',
  StatusAsc = 'status_ASC',
  StatusDesc = 'status_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC'
}

export type PaidSearchCampaignUpdateManyWithoutPaidSearchSummaryInput = {
  connect?: InputMaybe<Array<PaidSearchCampaignWhereUniqueInput>>;
  create?: InputMaybe<Array<PaidSearchCampaignCreateWithoutPaidSearchSummaryInput>>;
  delete?: InputMaybe<Array<PaidSearchCampaignWhereUniqueInput>>;
  disconnect?: InputMaybe<Array<PaidSearchCampaignWhereUniqueInput>>;
  update?: InputMaybe<Array<PaidSearchCampaignUpdateWithWhereUniqueWithoutPaidSearchSummaryInput>>;
  upsert?: InputMaybe<Array<PaidSearchCampaignUpsertWithWhereUniqueWithoutPaidSearchSummaryInput>>;
};

export type PaidSearchCampaignUpdateOneWithoutCommerceInput = {
  connect?: InputMaybe<PaidSearchCampaignWhereUniqueInput>;
  create?: InputMaybe<PaidSearchCampaignCreateWithoutCommerceInput>;
  delete?: InputMaybe<Scalars['Boolean']>;
  disconnect?: InputMaybe<Scalars['Boolean']>;
  update?: InputMaybe<PaidSearchCampaignUpdateWithoutCommerceDataInput>;
  upsert?: InputMaybe<PaidSearchCampaignUpsertWithoutCommerceInput>;
};

export type PaidSearchCampaignUpdateOneWithoutDataInput = {
  connect?: InputMaybe<PaidSearchCampaignWhereUniqueInput>;
  create?: InputMaybe<PaidSearchCampaignCreateWithoutDataInput>;
  delete?: InputMaybe<Scalars['Boolean']>;
  disconnect?: InputMaybe<Scalars['Boolean']>;
  update?: InputMaybe<PaidSearchCampaignUpdateWithoutDataDataInput>;
  upsert?: InputMaybe<PaidSearchCampaignUpsertWithoutDataInput>;
};

export type PaidSearchCampaignUpdateOneWithoutLocationsInput = {
  connect?: InputMaybe<PaidSearchCampaignWhereUniqueInput>;
  create?: InputMaybe<PaidSearchCampaignCreateWithoutLocationsInput>;
  delete?: InputMaybe<Scalars['Boolean']>;
  disconnect?: InputMaybe<Scalars['Boolean']>;
  update?: InputMaybe<PaidSearchCampaignUpdateWithoutLocationsDataInput>;
  upsert?: InputMaybe<PaidSearchCampaignUpsertWithoutLocationsInput>;
};

export type PaidSearchCampaignUpdateWithWhereUniqueWithoutPaidSearchSummaryInput = {
  data: PaidSearchCampaignUpdateWithoutPaidSearchSummaryDataInput;
  where: PaidSearchCampaignWhereUniqueInput;
};

export type PaidSearchCampaignUpdateWithoutCommerceDataInput = {
  adProviderId?: InputMaybe<Scalars['String']>;
  data?: InputMaybe<PaidSearchUnitUpdateOneWithoutPaidSearchCampaignInput>;
  endDate?: InputMaybe<Scalars['DateTime']>;
  locations?: InputMaybe<PaidSearchLocationUnitUpdateOneWithoutPaidSearchCampaignInput>;
  name?: InputMaybe<Scalars['String']>;
  paidSearchSummary?: InputMaybe<PaidSearchSummaryUpdateOneRequiredWithoutPaidSearchCampaignsInput>;
  reportId?: InputMaybe<Scalars['String']>;
  startDate?: InputMaybe<Scalars['DateTime']>;
  status?: InputMaybe<ServingStatus>;
};

export type PaidSearchCampaignUpdateWithoutDataDataInput = {
  adProviderId?: InputMaybe<Scalars['String']>;
  commerce?: InputMaybe<PaidSearchCommerceUnitUpdateOneWithoutPaidSearchCampaignInput>;
  endDate?: InputMaybe<Scalars['DateTime']>;
  locations?: InputMaybe<PaidSearchLocationUnitUpdateOneWithoutPaidSearchCampaignInput>;
  name?: InputMaybe<Scalars['String']>;
  paidSearchSummary?: InputMaybe<PaidSearchSummaryUpdateOneRequiredWithoutPaidSearchCampaignsInput>;
  reportId?: InputMaybe<Scalars['String']>;
  startDate?: InputMaybe<Scalars['DateTime']>;
  status?: InputMaybe<ServingStatus>;
};

export type PaidSearchCampaignUpdateWithoutLocationsDataInput = {
  adProviderId?: InputMaybe<Scalars['String']>;
  commerce?: InputMaybe<PaidSearchCommerceUnitUpdateOneWithoutPaidSearchCampaignInput>;
  data?: InputMaybe<PaidSearchUnitUpdateOneWithoutPaidSearchCampaignInput>;
  endDate?: InputMaybe<Scalars['DateTime']>;
  name?: InputMaybe<Scalars['String']>;
  paidSearchSummary?: InputMaybe<PaidSearchSummaryUpdateOneRequiredWithoutPaidSearchCampaignsInput>;
  reportId?: InputMaybe<Scalars['String']>;
  startDate?: InputMaybe<Scalars['DateTime']>;
  status?: InputMaybe<ServingStatus>;
};

export type PaidSearchCampaignUpdateWithoutPaidSearchSummaryDataInput = {
  adProviderId?: InputMaybe<Scalars['String']>;
  commerce?: InputMaybe<PaidSearchCommerceUnitUpdateOneWithoutPaidSearchCampaignInput>;
  data?: InputMaybe<PaidSearchUnitUpdateOneWithoutPaidSearchCampaignInput>;
  endDate?: InputMaybe<Scalars['DateTime']>;
  locations?: InputMaybe<PaidSearchLocationUnitUpdateOneWithoutPaidSearchCampaignInput>;
  name?: InputMaybe<Scalars['String']>;
  reportId?: InputMaybe<Scalars['String']>;
  startDate?: InputMaybe<Scalars['DateTime']>;
  status?: InputMaybe<ServingStatus>;
};

export type PaidSearchCampaignUpsertWithWhereUniqueWithoutPaidSearchSummaryInput = {
  create: PaidSearchCampaignCreateWithoutPaidSearchSummaryInput;
  update: PaidSearchCampaignUpdateWithoutPaidSearchSummaryDataInput;
  where: PaidSearchCampaignWhereUniqueInput;
};

export type PaidSearchCampaignUpsertWithoutCommerceInput = {
  create: PaidSearchCampaignCreateWithoutCommerceInput;
  update: PaidSearchCampaignUpdateWithoutCommerceDataInput;
};

export type PaidSearchCampaignUpsertWithoutDataInput = {
  create: PaidSearchCampaignCreateWithoutDataInput;
  update: PaidSearchCampaignUpdateWithoutDataDataInput;
};

export type PaidSearchCampaignUpsertWithoutLocationsInput = {
  create: PaidSearchCampaignCreateWithoutLocationsInput;
  update: PaidSearchCampaignUpdateWithoutLocationsDataInput;
};

export type PaidSearchCampaignWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<PaidSearchCampaignWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<PaidSearchCampaignWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<PaidSearchCampaignWhereInput>>;
  adProviderId?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  adProviderId_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  adProviderId_ends_with?: InputMaybe<Scalars['String']>;
  /** All values greater than the given value. */
  adProviderId_gt?: InputMaybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  adProviderId_gte?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  adProviderId_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  adProviderId_lt?: InputMaybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  adProviderId_lte?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  adProviderId_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  adProviderId_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string. */
  adProviderId_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  adProviderId_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  adProviderId_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  adProviderId_starts_with?: InputMaybe<Scalars['String']>;
  commerce?: InputMaybe<PaidSearchCommerceUnitWhereInput>;
  data?: InputMaybe<PaidSearchUnitWhereInput>;
  endDate?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  endDate_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  endDate_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  endDate_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  endDate_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  endDate_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  endDate_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  endDate_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: InputMaybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: InputMaybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: InputMaybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  locations?: InputMaybe<PaidSearchLocationUnitWhereInput>;
  name?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  name_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  name_ends_with?: InputMaybe<Scalars['String']>;
  /** All values greater than the given value. */
  name_gt?: InputMaybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  name_gte?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  name_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  name_lt?: InputMaybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  name_lte?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  name_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  name_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string. */
  name_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  name_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  name_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  name_starts_with?: InputMaybe<Scalars['String']>;
  paidSearchSummary?: InputMaybe<PaidSearchSummaryWhereInput>;
  reportId?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  reportId_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  reportId_ends_with?: InputMaybe<Scalars['String']>;
  /** All values greater than the given value. */
  reportId_gt?: InputMaybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  reportId_gte?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  reportId_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  reportId_lt?: InputMaybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  reportId_lte?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  reportId_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  reportId_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string. */
  reportId_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  reportId_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  reportId_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  reportId_starts_with?: InputMaybe<Scalars['String']>;
  startDate?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  startDate_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  startDate_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  startDate_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  startDate_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  startDate_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  startDate_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  startDate_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  status?: InputMaybe<ServingStatus>;
  /** All values that are contained in given list. */
  status_in?: InputMaybe<Array<ServingStatus>>;
  /** All values that are not equal to given value. */
  status_not?: InputMaybe<ServingStatus>;
  /** All values that are not contained in given list. */
  status_not_in?: InputMaybe<Array<ServingStatus>>;
};

export type PaidSearchCampaignWhereUniqueInput = {
  adProviderId?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
};

export type PaidSearchCommerceDateUnit = Node & {
  __typename?: 'PaidSearchCommerceDateUnit';
  clicks?: Maybe<Scalars['Int']>;
  conversions?: Maybe<Scalars['Int']>;
  customer?: Maybe<Scalars['Int']>;
  date?: Maybe<Scalars['DateTime']>;
  id: Scalars['ID'];
  impressions?: Maybe<Scalars['Int']>;
  key: Scalars['String'];
  paidSearchCommerceUnit?: Maybe<PaidSearchCommerceUnit>;
  revenue?: Maybe<Scalars['Float']>;
  roas?: Maybe<Scalars['Float']>;
  spend?: Maybe<Scalars['Float']>;
  uniqueUsers?: Maybe<Scalars['Json']>;
  xAxis?: Maybe<Scalars['DateTime']>;
};

export type PaidSearchCommerceDateUnitCreateManyWithoutPaidSearchCommerceUnitInput = {
  connect?: InputMaybe<Array<PaidSearchCommerceDateUnitWhereUniqueInput>>;
  create?: InputMaybe<Array<PaidSearchCommerceDateUnitCreateWithoutPaidSearchCommerceUnitInput>>;
};

export type PaidSearchCommerceDateUnitCreateWithoutPaidSearchCommerceUnitInput = {
  clicks?: InputMaybe<Scalars['Int']>;
  conversions?: InputMaybe<Scalars['Int']>;
  customer?: InputMaybe<Scalars['Int']>;
  date?: InputMaybe<Scalars['DateTime']>;
  impressions?: InputMaybe<Scalars['Int']>;
  key: Scalars['String'];
  revenue?: InputMaybe<Scalars['Float']>;
  roas?: InputMaybe<Scalars['Float']>;
  spend?: InputMaybe<Scalars['Float']>;
  uniqueUsers?: InputMaybe<Scalars['Json']>;
  xAxis?: InputMaybe<Scalars['DateTime']>;
};

export enum PaidSearchCommerceDateUnitOrderByInput {
  ClicksAsc = 'clicks_ASC',
  ClicksDesc = 'clicks_DESC',
  ConversionsAsc = 'conversions_ASC',
  ConversionsDesc = 'conversions_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  CustomerAsc = 'customer_ASC',
  CustomerDesc = 'customer_DESC',
  DateAsc = 'date_ASC',
  DateDesc = 'date_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  ImpressionsAsc = 'impressions_ASC',
  ImpressionsDesc = 'impressions_DESC',
  KeyAsc = 'key_ASC',
  KeyDesc = 'key_DESC',
  RevenueAsc = 'revenue_ASC',
  RevenueDesc = 'revenue_DESC',
  RoasAsc = 'roas_ASC',
  RoasDesc = 'roas_DESC',
  SpendAsc = 'spend_ASC',
  SpendDesc = 'spend_DESC',
  UniqueUsersAsc = 'uniqueUsers_ASC',
  UniqueUsersDesc = 'uniqueUsers_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  XAxisAsc = 'xAxis_ASC',
  XAxisDesc = 'xAxis_DESC'
}

export type PaidSearchCommerceDateUnitUpdateManyWithoutPaidSearchCommerceUnitInput = {
  connect?: InputMaybe<Array<PaidSearchCommerceDateUnitWhereUniqueInput>>;
  create?: InputMaybe<Array<PaidSearchCommerceDateUnitCreateWithoutPaidSearchCommerceUnitInput>>;
  delete?: InputMaybe<Array<PaidSearchCommerceDateUnitWhereUniqueInput>>;
  disconnect?: InputMaybe<Array<PaidSearchCommerceDateUnitWhereUniqueInput>>;
  update?: InputMaybe<Array<PaidSearchCommerceDateUnitUpdateWithWhereUniqueWithoutPaidSearchCommerceUnitInput>>;
  upsert?: InputMaybe<Array<PaidSearchCommerceDateUnitUpsertWithWhereUniqueWithoutPaidSearchCommerceUnitInput>>;
};

export type PaidSearchCommerceDateUnitUpdateWithWhereUniqueWithoutPaidSearchCommerceUnitInput = {
  data: PaidSearchCommerceDateUnitUpdateWithoutPaidSearchCommerceUnitDataInput;
  where: PaidSearchCommerceDateUnitWhereUniqueInput;
};

export type PaidSearchCommerceDateUnitUpdateWithoutPaidSearchCommerceUnitDataInput = {
  clicks?: InputMaybe<Scalars['Int']>;
  conversions?: InputMaybe<Scalars['Int']>;
  customer?: InputMaybe<Scalars['Int']>;
  date?: InputMaybe<Scalars['DateTime']>;
  impressions?: InputMaybe<Scalars['Int']>;
  key?: InputMaybe<Scalars['String']>;
  revenue?: InputMaybe<Scalars['Float']>;
  roas?: InputMaybe<Scalars['Float']>;
  spend?: InputMaybe<Scalars['Float']>;
  uniqueUsers?: InputMaybe<Scalars['Json']>;
  xAxis?: InputMaybe<Scalars['DateTime']>;
};

export type PaidSearchCommerceDateUnitUpsertWithWhereUniqueWithoutPaidSearchCommerceUnitInput = {
  create: PaidSearchCommerceDateUnitCreateWithoutPaidSearchCommerceUnitInput;
  update: PaidSearchCommerceDateUnitUpdateWithoutPaidSearchCommerceUnitDataInput;
  where: PaidSearchCommerceDateUnitWhereUniqueInput;
};

export type PaidSearchCommerceDateUnitWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<PaidSearchCommerceDateUnitWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<PaidSearchCommerceDateUnitWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<PaidSearchCommerceDateUnitWhereInput>>;
  clicks?: InputMaybe<Scalars['Int']>;
  /** All values greater than the given value. */
  clicks_gt?: InputMaybe<Scalars['Int']>;
  /** All values greater than or equal the given value. */
  clicks_gte?: InputMaybe<Scalars['Int']>;
  /** All values that are contained in given list. */
  clicks_in?: InputMaybe<Array<Scalars['Int']>>;
  /** All values less than the given value. */
  clicks_lt?: InputMaybe<Scalars['Int']>;
  /** All values less than or equal the given value. */
  clicks_lte?: InputMaybe<Scalars['Int']>;
  /** All values that are not equal to given value. */
  clicks_not?: InputMaybe<Scalars['Int']>;
  /** All values that are not contained in given list. */
  clicks_not_in?: InputMaybe<Array<Scalars['Int']>>;
  conversions?: InputMaybe<Scalars['Int']>;
  /** All values greater than the given value. */
  conversions_gt?: InputMaybe<Scalars['Int']>;
  /** All values greater than or equal the given value. */
  conversions_gte?: InputMaybe<Scalars['Int']>;
  /** All values that are contained in given list. */
  conversions_in?: InputMaybe<Array<Scalars['Int']>>;
  /** All values less than the given value. */
  conversions_lt?: InputMaybe<Scalars['Int']>;
  /** All values less than or equal the given value. */
  conversions_lte?: InputMaybe<Scalars['Int']>;
  /** All values that are not equal to given value. */
  conversions_not?: InputMaybe<Scalars['Int']>;
  /** All values that are not contained in given list. */
  conversions_not_in?: InputMaybe<Array<Scalars['Int']>>;
  customer?: InputMaybe<Scalars['Int']>;
  /** All values greater than the given value. */
  customer_gt?: InputMaybe<Scalars['Int']>;
  /** All values greater than or equal the given value. */
  customer_gte?: InputMaybe<Scalars['Int']>;
  /** All values that are contained in given list. */
  customer_in?: InputMaybe<Array<Scalars['Int']>>;
  /** All values less than the given value. */
  customer_lt?: InputMaybe<Scalars['Int']>;
  /** All values less than or equal the given value. */
  customer_lte?: InputMaybe<Scalars['Int']>;
  /** All values that are not equal to given value. */
  customer_not?: InputMaybe<Scalars['Int']>;
  /** All values that are not contained in given list. */
  customer_not_in?: InputMaybe<Array<Scalars['Int']>>;
  date?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  date_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  date_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  date_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  date_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  date_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  date_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  date_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: InputMaybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: InputMaybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: InputMaybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  impressions?: InputMaybe<Scalars['Int']>;
  /** All values greater than the given value. */
  impressions_gt?: InputMaybe<Scalars['Int']>;
  /** All values greater than or equal the given value. */
  impressions_gte?: InputMaybe<Scalars['Int']>;
  /** All values that are contained in given list. */
  impressions_in?: InputMaybe<Array<Scalars['Int']>>;
  /** All values less than the given value. */
  impressions_lt?: InputMaybe<Scalars['Int']>;
  /** All values less than or equal the given value. */
  impressions_lte?: InputMaybe<Scalars['Int']>;
  /** All values that are not equal to given value. */
  impressions_not?: InputMaybe<Scalars['Int']>;
  /** All values that are not contained in given list. */
  impressions_not_in?: InputMaybe<Array<Scalars['Int']>>;
  key?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  key_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  key_ends_with?: InputMaybe<Scalars['String']>;
  /** All values greater than the given value. */
  key_gt?: InputMaybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  key_gte?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  key_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  key_lt?: InputMaybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  key_lte?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  key_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  key_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string. */
  key_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  key_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  key_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  key_starts_with?: InputMaybe<Scalars['String']>;
  paidSearchCommerceUnit?: InputMaybe<PaidSearchCommerceUnitWhereInput>;
  revenue?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  revenue_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  revenue_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  revenue_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  revenue_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  revenue_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  revenue_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  revenue_not_in?: InputMaybe<Array<Scalars['Float']>>;
  roas?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  roas_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  roas_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  roas_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  roas_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  roas_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  roas_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  roas_not_in?: InputMaybe<Array<Scalars['Float']>>;
  spend?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  spend_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  spend_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  spend_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  spend_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  spend_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  spend_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  spend_not_in?: InputMaybe<Array<Scalars['Float']>>;
  xAxis?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  xAxis_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  xAxis_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  xAxis_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  xAxis_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  xAxis_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  xAxis_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  xAxis_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
};

export type PaidSearchCommerceDateUnitWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
  key?: InputMaybe<Scalars['String']>;
};

export type PaidSearchCommerceUnit = Node & {
  __typename?: 'PaidSearchCommerceUnit';
  byDate?: Maybe<Array<PaidSearchCommerceDateUnit>>;
  clicks?: Maybe<Scalars['Int']>;
  conversions?: Maybe<Scalars['Int']>;
  customer?: Maybe<Scalars['Int']>;
  id: Scalars['ID'];
  impressions?: Maybe<Scalars['Int']>;
  paidSearchCampaign?: Maybe<PaidSearchCampaign>;
  paidSearchSummary?: Maybe<PaidSearchSummary>;
  reportId?: Maybe<Scalars['String']>;
  revenue?: Maybe<Scalars['Float']>;
  roas?: Maybe<Scalars['Float']>;
  spend?: Maybe<Scalars['Float']>;
  uniqueUsers?: Maybe<Scalars['Json']>;
};


export type PaidSearchCommerceUnitByDateArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<PaidSearchCommerceDateUnitOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<PaidSearchCommerceDateUnitWhereInput>;
};

export type PaidSearchCommerceUnitCreateOneWithoutPaidSearchCampaignInput = {
  connect?: InputMaybe<PaidSearchCommerceUnitWhereUniqueInput>;
  create?: InputMaybe<PaidSearchCommerceUnitCreateWithoutPaidSearchCampaignInput>;
};

export type PaidSearchCommerceUnitCreateOneWithoutPaidSearchSummaryInput = {
  connect?: InputMaybe<PaidSearchCommerceUnitWhereUniqueInput>;
  create?: InputMaybe<PaidSearchCommerceUnitCreateWithoutPaidSearchSummaryInput>;
};

export type PaidSearchCommerceUnitCreateWithoutPaidSearchCampaignInput = {
  byDate?: InputMaybe<PaidSearchCommerceDateUnitCreateManyWithoutPaidSearchCommerceUnitInput>;
  clicks?: InputMaybe<Scalars['Int']>;
  conversions?: InputMaybe<Scalars['Int']>;
  customer?: InputMaybe<Scalars['Int']>;
  impressions?: InputMaybe<Scalars['Int']>;
  paidSearchSummary?: InputMaybe<PaidSearchSummaryCreateOneWithoutOverallCommerceInput>;
  reportId?: InputMaybe<Scalars['String']>;
  revenue?: InputMaybe<Scalars['Float']>;
  roas?: InputMaybe<Scalars['Float']>;
  spend?: InputMaybe<Scalars['Float']>;
  uniqueUsers?: InputMaybe<Scalars['Json']>;
};

export type PaidSearchCommerceUnitCreateWithoutPaidSearchSummaryInput = {
  byDate?: InputMaybe<PaidSearchCommerceDateUnitCreateManyWithoutPaidSearchCommerceUnitInput>;
  clicks?: InputMaybe<Scalars['Int']>;
  conversions?: InputMaybe<Scalars['Int']>;
  customer?: InputMaybe<Scalars['Int']>;
  impressions?: InputMaybe<Scalars['Int']>;
  paidSearchCampaign?: InputMaybe<PaidSearchCampaignCreateOneWithoutCommerceInput>;
  reportId?: InputMaybe<Scalars['String']>;
  revenue?: InputMaybe<Scalars['Float']>;
  roas?: InputMaybe<Scalars['Float']>;
  spend?: InputMaybe<Scalars['Float']>;
  uniqueUsers?: InputMaybe<Scalars['Json']>;
};

export type PaidSearchCommerceUnitUpdateOneWithoutPaidSearchCampaignInput = {
  connect?: InputMaybe<PaidSearchCommerceUnitWhereUniqueInput>;
  create?: InputMaybe<PaidSearchCommerceUnitCreateWithoutPaidSearchCampaignInput>;
  delete?: InputMaybe<Scalars['Boolean']>;
  disconnect?: InputMaybe<Scalars['Boolean']>;
  update?: InputMaybe<PaidSearchCommerceUnitUpdateWithoutPaidSearchCampaignDataInput>;
  upsert?: InputMaybe<PaidSearchCommerceUnitUpsertWithoutPaidSearchCampaignInput>;
};

export type PaidSearchCommerceUnitUpdateOneWithoutPaidSearchSummaryInput = {
  connect?: InputMaybe<PaidSearchCommerceUnitWhereUniqueInput>;
  create?: InputMaybe<PaidSearchCommerceUnitCreateWithoutPaidSearchSummaryInput>;
  delete?: InputMaybe<Scalars['Boolean']>;
  disconnect?: InputMaybe<Scalars['Boolean']>;
  update?: InputMaybe<PaidSearchCommerceUnitUpdateWithoutPaidSearchSummaryDataInput>;
  upsert?: InputMaybe<PaidSearchCommerceUnitUpsertWithoutPaidSearchSummaryInput>;
};

export type PaidSearchCommerceUnitUpdateWithoutPaidSearchCampaignDataInput = {
  byDate?: InputMaybe<PaidSearchCommerceDateUnitUpdateManyWithoutPaidSearchCommerceUnitInput>;
  clicks?: InputMaybe<Scalars['Int']>;
  conversions?: InputMaybe<Scalars['Int']>;
  customer?: InputMaybe<Scalars['Int']>;
  impressions?: InputMaybe<Scalars['Int']>;
  paidSearchSummary?: InputMaybe<PaidSearchSummaryUpdateOneWithoutOverallCommerceInput>;
  reportId?: InputMaybe<Scalars['String']>;
  revenue?: InputMaybe<Scalars['Float']>;
  roas?: InputMaybe<Scalars['Float']>;
  spend?: InputMaybe<Scalars['Float']>;
  uniqueUsers?: InputMaybe<Scalars['Json']>;
};

export type PaidSearchCommerceUnitUpdateWithoutPaidSearchSummaryDataInput = {
  byDate?: InputMaybe<PaidSearchCommerceDateUnitUpdateManyWithoutPaidSearchCommerceUnitInput>;
  clicks?: InputMaybe<Scalars['Int']>;
  conversions?: InputMaybe<Scalars['Int']>;
  customer?: InputMaybe<Scalars['Int']>;
  impressions?: InputMaybe<Scalars['Int']>;
  paidSearchCampaign?: InputMaybe<PaidSearchCampaignUpdateOneWithoutCommerceInput>;
  reportId?: InputMaybe<Scalars['String']>;
  revenue?: InputMaybe<Scalars['Float']>;
  roas?: InputMaybe<Scalars['Float']>;
  spend?: InputMaybe<Scalars['Float']>;
  uniqueUsers?: InputMaybe<Scalars['Json']>;
};

export type PaidSearchCommerceUnitUpsertWithoutPaidSearchCampaignInput = {
  create: PaidSearchCommerceUnitCreateWithoutPaidSearchCampaignInput;
  update: PaidSearchCommerceUnitUpdateWithoutPaidSearchCampaignDataInput;
};

export type PaidSearchCommerceUnitUpsertWithoutPaidSearchSummaryInput = {
  create: PaidSearchCommerceUnitCreateWithoutPaidSearchSummaryInput;
  update: PaidSearchCommerceUnitUpdateWithoutPaidSearchSummaryDataInput;
};

export type PaidSearchCommerceUnitWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<PaidSearchCommerceUnitWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<PaidSearchCommerceUnitWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<PaidSearchCommerceUnitWhereInput>>;
  byDate_every?: InputMaybe<PaidSearchCommerceDateUnitWhereInput>;
  byDate_none?: InputMaybe<PaidSearchCommerceDateUnitWhereInput>;
  byDate_some?: InputMaybe<PaidSearchCommerceDateUnitWhereInput>;
  clicks?: InputMaybe<Scalars['Int']>;
  /** All values greater than the given value. */
  clicks_gt?: InputMaybe<Scalars['Int']>;
  /** All values greater than or equal the given value. */
  clicks_gte?: InputMaybe<Scalars['Int']>;
  /** All values that are contained in given list. */
  clicks_in?: InputMaybe<Array<Scalars['Int']>>;
  /** All values less than the given value. */
  clicks_lt?: InputMaybe<Scalars['Int']>;
  /** All values less than or equal the given value. */
  clicks_lte?: InputMaybe<Scalars['Int']>;
  /** All values that are not equal to given value. */
  clicks_not?: InputMaybe<Scalars['Int']>;
  /** All values that are not contained in given list. */
  clicks_not_in?: InputMaybe<Array<Scalars['Int']>>;
  conversions?: InputMaybe<Scalars['Int']>;
  /** All values greater than the given value. */
  conversions_gt?: InputMaybe<Scalars['Int']>;
  /** All values greater than or equal the given value. */
  conversions_gte?: InputMaybe<Scalars['Int']>;
  /** All values that are contained in given list. */
  conversions_in?: InputMaybe<Array<Scalars['Int']>>;
  /** All values less than the given value. */
  conversions_lt?: InputMaybe<Scalars['Int']>;
  /** All values less than or equal the given value. */
  conversions_lte?: InputMaybe<Scalars['Int']>;
  /** All values that are not equal to given value. */
  conversions_not?: InputMaybe<Scalars['Int']>;
  /** All values that are not contained in given list. */
  conversions_not_in?: InputMaybe<Array<Scalars['Int']>>;
  customer?: InputMaybe<Scalars['Int']>;
  /** All values greater than the given value. */
  customer_gt?: InputMaybe<Scalars['Int']>;
  /** All values greater than or equal the given value. */
  customer_gte?: InputMaybe<Scalars['Int']>;
  /** All values that are contained in given list. */
  customer_in?: InputMaybe<Array<Scalars['Int']>>;
  /** All values less than the given value. */
  customer_lt?: InputMaybe<Scalars['Int']>;
  /** All values less than or equal the given value. */
  customer_lte?: InputMaybe<Scalars['Int']>;
  /** All values that are not equal to given value. */
  customer_not?: InputMaybe<Scalars['Int']>;
  /** All values that are not contained in given list. */
  customer_not_in?: InputMaybe<Array<Scalars['Int']>>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: InputMaybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: InputMaybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: InputMaybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  impressions?: InputMaybe<Scalars['Int']>;
  /** All values greater than the given value. */
  impressions_gt?: InputMaybe<Scalars['Int']>;
  /** All values greater than or equal the given value. */
  impressions_gte?: InputMaybe<Scalars['Int']>;
  /** All values that are contained in given list. */
  impressions_in?: InputMaybe<Array<Scalars['Int']>>;
  /** All values less than the given value. */
  impressions_lt?: InputMaybe<Scalars['Int']>;
  /** All values less than or equal the given value. */
  impressions_lte?: InputMaybe<Scalars['Int']>;
  /** All values that are not equal to given value. */
  impressions_not?: InputMaybe<Scalars['Int']>;
  /** All values that are not contained in given list. */
  impressions_not_in?: InputMaybe<Array<Scalars['Int']>>;
  paidSearchCampaign?: InputMaybe<PaidSearchCampaignWhereInput>;
  paidSearchSummary?: InputMaybe<PaidSearchSummaryWhereInput>;
  reportId?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  reportId_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  reportId_ends_with?: InputMaybe<Scalars['String']>;
  /** All values greater than the given value. */
  reportId_gt?: InputMaybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  reportId_gte?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  reportId_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  reportId_lt?: InputMaybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  reportId_lte?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  reportId_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  reportId_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string. */
  reportId_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  reportId_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  reportId_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  reportId_starts_with?: InputMaybe<Scalars['String']>;
  revenue?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  revenue_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  revenue_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  revenue_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  revenue_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  revenue_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  revenue_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  revenue_not_in?: InputMaybe<Array<Scalars['Float']>>;
  roas?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  roas_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  roas_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  roas_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  roas_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  roas_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  roas_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  roas_not_in?: InputMaybe<Array<Scalars['Float']>>;
  spend?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  spend_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  spend_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  spend_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  spend_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  spend_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  spend_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  spend_not_in?: InputMaybe<Array<Scalars['Float']>>;
};

export type PaidSearchCommerceUnitWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export type PaidSearchConfig = Node & {
  __typename?: 'PaidSearchConfig';
  createdAt: Scalars['DateTime'];
  hasLocationRevenue?: Maybe<Scalars['Boolean']>;
  id: Scalars['ID'];
  locationsKey: Array<Scalars['String']>;
  managementFee?: Maybe<Scalars['Float']>;
  monthlyBudget?: Maybe<Scalars['Float']>;
  paidSearchSummaries?: Maybe<Array<PaidSearchSummary>>;
  processWithGoogleAds?: Maybe<Scalars['Boolean']>;
  updatedAt: Scalars['DateTime'];
};


export type PaidSearchConfigPaidSearchSummariesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<PaidSearchSummaryOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<PaidSearchSummaryWhereInput>;
};

export type PaidSearchConfigCreateOneWithoutPaidSearchSummariesInput = {
  connect?: InputMaybe<PaidSearchConfigWhereUniqueInput>;
  create?: InputMaybe<PaidSearchConfigCreateWithoutPaidSearchSummariesInput>;
};

export type PaidSearchConfigCreateWithoutPaidSearchSummariesInput = {
  hasLocationRevenue?: InputMaybe<Scalars['Boolean']>;
  locationsKey?: InputMaybe<PaidSearchConfigCreatelocationsKeyInput>;
  managementFee?: InputMaybe<Scalars['Float']>;
  monthlyBudget?: InputMaybe<Scalars['Float']>;
  processWithGoogleAds?: InputMaybe<Scalars['Boolean']>;
};

export type PaidSearchConfigCreatelocationsKeyInput = {
  set?: InputMaybe<Array<Scalars['String']>>;
};

export type PaidSearchConfigUpdateOneWithoutPaidSearchSummariesInput = {
  connect?: InputMaybe<PaidSearchConfigWhereUniqueInput>;
  create?: InputMaybe<PaidSearchConfigCreateWithoutPaidSearchSummariesInput>;
  delete?: InputMaybe<Scalars['Boolean']>;
  disconnect?: InputMaybe<Scalars['Boolean']>;
  update?: InputMaybe<PaidSearchConfigUpdateWithoutPaidSearchSummariesDataInput>;
  upsert?: InputMaybe<PaidSearchConfigUpsertWithoutPaidSearchSummariesInput>;
};

export type PaidSearchConfigUpdateWithoutPaidSearchSummariesDataInput = {
  hasLocationRevenue?: InputMaybe<Scalars['Boolean']>;
  locationsKey?: InputMaybe<PaidSearchConfigUpdatelocationsKeyInput>;
  managementFee?: InputMaybe<Scalars['Float']>;
  monthlyBudget?: InputMaybe<Scalars['Float']>;
  processWithGoogleAds?: InputMaybe<Scalars['Boolean']>;
};

export type PaidSearchConfigUpdatelocationsKeyInput = {
  set?: InputMaybe<Array<Scalars['String']>>;
};

export type PaidSearchConfigUpsertWithoutPaidSearchSummariesInput = {
  create: PaidSearchConfigCreateWithoutPaidSearchSummariesInput;
  update: PaidSearchConfigUpdateWithoutPaidSearchSummariesDataInput;
};

export type PaidSearchConfigWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<PaidSearchConfigWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<PaidSearchConfigWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<PaidSearchConfigWhereInput>>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  hasLocationRevenue?: InputMaybe<Scalars['Boolean']>;
  /** All values that are not equal to given value. */
  hasLocationRevenue_not?: InputMaybe<Scalars['Boolean']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: InputMaybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: InputMaybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: InputMaybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  managementFee?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  managementFee_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  managementFee_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  managementFee_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  managementFee_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  managementFee_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  managementFee_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  managementFee_not_in?: InputMaybe<Array<Scalars['Float']>>;
  monthlyBudget?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  monthlyBudget_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  monthlyBudget_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  monthlyBudget_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  monthlyBudget_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  monthlyBudget_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  monthlyBudget_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  monthlyBudget_not_in?: InputMaybe<Array<Scalars['Float']>>;
  paidSearchSummaries_every?: InputMaybe<PaidSearchSummaryWhereInput>;
  paidSearchSummaries_none?: InputMaybe<PaidSearchSummaryWhereInput>;
  paidSearchSummaries_some?: InputMaybe<PaidSearchSummaryWhereInput>;
  processWithGoogleAds?: InputMaybe<Scalars['Boolean']>;
  /** All values that are not equal to given value. */
  processWithGoogleAds_not?: InputMaybe<Scalars['Boolean']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
};

export type PaidSearchConfigWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export type PaidSearchDataConfig = {
  __typename?: 'PaidSearchDataConfig';
  containers?: Maybe<Array<PaidSerchContainter>>;
  isEnabled?: Maybe<Scalars['Boolean']>;
  orgDataConfigs?: Maybe<Array<OrgDataConfig>>;
};


export type PaidSearchDataConfigContainersArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<PaidSerchContainterOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<PaidSerchContainterWhereInput>;
};


export type PaidSearchDataConfigOrgDataConfigsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<OrgDataConfigOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<OrgDataConfigWhereInput>;
};

export type PaidSearchDataConfigCreateOneWithoutOrgDataConfigsInput = {
  create?: InputMaybe<PaidSearchDataConfigCreateWithoutOrgDataConfigsInput>;
};

export type PaidSearchDataConfigCreateWithoutOrgDataConfigsInput = {
  containers?: InputMaybe<PaidSerchContainterCreateManyWithoutPaidSearchDataConfigInput>;
  isEnabled?: InputMaybe<Scalars['Boolean']>;
};

export type PaidSearchDataConfigUpdateOneWithoutOrgDataConfigsInput = {
  create?: InputMaybe<PaidSearchDataConfigCreateWithoutOrgDataConfigsInput>;
  delete?: InputMaybe<Scalars['Boolean']>;
  disconnect?: InputMaybe<Scalars['Boolean']>;
  update?: InputMaybe<PaidSearchDataConfigUpdateWithoutOrgDataConfigsDataInput>;
  upsert?: InputMaybe<PaidSearchDataConfigUpsertWithoutOrgDataConfigsInput>;
};

export type PaidSearchDataConfigUpdateWithoutOrgDataConfigsDataInput = {
  containers?: InputMaybe<PaidSerchContainterUpdateManyWithoutPaidSearchDataConfigInput>;
  isEnabled?: InputMaybe<Scalars['Boolean']>;
};

export type PaidSearchDataConfigUpsertWithoutOrgDataConfigsInput = {
  create: PaidSearchDataConfigCreateWithoutOrgDataConfigsInput;
  update: PaidSearchDataConfigUpdateWithoutOrgDataConfigsDataInput;
};

export type PaidSearchDataConfigWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<PaidSearchDataConfigWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<PaidSearchDataConfigWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<PaidSearchDataConfigWhereInput>>;
  containers_every?: InputMaybe<PaidSerchContainterWhereInput>;
  containers_none?: InputMaybe<PaidSerchContainterWhereInput>;
  containers_some?: InputMaybe<PaidSerchContainterWhereInput>;
  isEnabled?: InputMaybe<Scalars['Boolean']>;
  /** All values that are not equal to given value. */
  isEnabled_not?: InputMaybe<Scalars['Boolean']>;
  orgDataConfigs_every?: InputMaybe<OrgDataConfigWhereInput>;
  orgDataConfigs_none?: InputMaybe<OrgDataConfigWhereInput>;
  orgDataConfigs_some?: InputMaybe<OrgDataConfigWhereInput>;
};

export type PaidSearchDateUnit = Node & {
  __typename?: 'PaidSearchDateUnit';
  clicks?: Maybe<Scalars['Int']>;
  conversions?: Maybe<Scalars['Int']>;
  cost?: Maybe<Scalars['Float']>;
  cpc?: Maybe<Scalars['Float']>;
  cpm?: Maybe<Scalars['Float']>;
  ctr?: Maybe<Scalars['Float']>;
  date?: Maybe<Scalars['DateTime']>;
  id: Scalars['ID'];
  impressions?: Maybe<Scalars['Int']>;
  key: Scalars['String'];
  keywords?: Maybe<Scalars['Int']>;
  locations?: Maybe<Scalars['Int']>;
  paidSearchUnit?: Maybe<PaidSearchUnit>;
  phoneCalls?: Maybe<Scalars['Float']>;
  revenue?: Maybe<Scalars['Float']>;
  roas?: Maybe<Scalars['Float']>;
  spend?: Maybe<Scalars['Float']>;
  xAxis?: Maybe<Scalars['DateTime']>;
};

export type PaidSearchDateUnitCreateManyWithoutPaidSearchUnitInput = {
  connect?: InputMaybe<Array<PaidSearchDateUnitWhereUniqueInput>>;
  create?: InputMaybe<Array<PaidSearchDateUnitCreateWithoutPaidSearchUnitInput>>;
};

export type PaidSearchDateUnitCreateWithoutPaidSearchUnitInput = {
  clicks?: InputMaybe<Scalars['Int']>;
  conversions?: InputMaybe<Scalars['Int']>;
  cost?: InputMaybe<Scalars['Float']>;
  cpc?: InputMaybe<Scalars['Float']>;
  cpm?: InputMaybe<Scalars['Float']>;
  ctr?: InputMaybe<Scalars['Float']>;
  date?: InputMaybe<Scalars['DateTime']>;
  impressions?: InputMaybe<Scalars['Int']>;
  key: Scalars['String'];
  keywords?: InputMaybe<Scalars['Int']>;
  locations?: InputMaybe<Scalars['Int']>;
  phoneCalls?: InputMaybe<Scalars['Float']>;
  revenue?: InputMaybe<Scalars['Float']>;
  roas?: InputMaybe<Scalars['Float']>;
  spend?: InputMaybe<Scalars['Float']>;
  xAxis?: InputMaybe<Scalars['DateTime']>;
};

export enum PaidSearchDateUnitOrderByInput {
  ClicksAsc = 'clicks_ASC',
  ClicksDesc = 'clicks_DESC',
  ConversionsAsc = 'conversions_ASC',
  ConversionsDesc = 'conversions_DESC',
  CostAsc = 'cost_ASC',
  CostDesc = 'cost_DESC',
  CpcAsc = 'cpc_ASC',
  CpcDesc = 'cpc_DESC',
  CpmAsc = 'cpm_ASC',
  CpmDesc = 'cpm_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  CtrAsc = 'ctr_ASC',
  CtrDesc = 'ctr_DESC',
  DateAsc = 'date_ASC',
  DateDesc = 'date_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  ImpressionsAsc = 'impressions_ASC',
  ImpressionsDesc = 'impressions_DESC',
  KeyAsc = 'key_ASC',
  KeyDesc = 'key_DESC',
  KeywordsAsc = 'keywords_ASC',
  KeywordsDesc = 'keywords_DESC',
  LocationsAsc = 'locations_ASC',
  LocationsDesc = 'locations_DESC',
  PhoneCallsAsc = 'phoneCalls_ASC',
  PhoneCallsDesc = 'phoneCalls_DESC',
  RevenueAsc = 'revenue_ASC',
  RevenueDesc = 'revenue_DESC',
  RoasAsc = 'roas_ASC',
  RoasDesc = 'roas_DESC',
  SpendAsc = 'spend_ASC',
  SpendDesc = 'spend_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  XAxisAsc = 'xAxis_ASC',
  XAxisDesc = 'xAxis_DESC'
}

export type PaidSearchDateUnitUpdateManyWithoutPaidSearchUnitInput = {
  connect?: InputMaybe<Array<PaidSearchDateUnitWhereUniqueInput>>;
  create?: InputMaybe<Array<PaidSearchDateUnitCreateWithoutPaidSearchUnitInput>>;
  delete?: InputMaybe<Array<PaidSearchDateUnitWhereUniqueInput>>;
  disconnect?: InputMaybe<Array<PaidSearchDateUnitWhereUniqueInput>>;
  update?: InputMaybe<Array<PaidSearchDateUnitUpdateWithWhereUniqueWithoutPaidSearchUnitInput>>;
  upsert?: InputMaybe<Array<PaidSearchDateUnitUpsertWithWhereUniqueWithoutPaidSearchUnitInput>>;
};

export type PaidSearchDateUnitUpdateWithWhereUniqueWithoutPaidSearchUnitInput = {
  data: PaidSearchDateUnitUpdateWithoutPaidSearchUnitDataInput;
  where: PaidSearchDateUnitWhereUniqueInput;
};

export type PaidSearchDateUnitUpdateWithoutPaidSearchUnitDataInput = {
  clicks?: InputMaybe<Scalars['Int']>;
  conversions?: InputMaybe<Scalars['Int']>;
  cost?: InputMaybe<Scalars['Float']>;
  cpc?: InputMaybe<Scalars['Float']>;
  cpm?: InputMaybe<Scalars['Float']>;
  ctr?: InputMaybe<Scalars['Float']>;
  date?: InputMaybe<Scalars['DateTime']>;
  impressions?: InputMaybe<Scalars['Int']>;
  key?: InputMaybe<Scalars['String']>;
  keywords?: InputMaybe<Scalars['Int']>;
  locations?: InputMaybe<Scalars['Int']>;
  phoneCalls?: InputMaybe<Scalars['Float']>;
  revenue?: InputMaybe<Scalars['Float']>;
  roas?: InputMaybe<Scalars['Float']>;
  spend?: InputMaybe<Scalars['Float']>;
  xAxis?: InputMaybe<Scalars['DateTime']>;
};

export type PaidSearchDateUnitUpsertWithWhereUniqueWithoutPaidSearchUnitInput = {
  create: PaidSearchDateUnitCreateWithoutPaidSearchUnitInput;
  update: PaidSearchDateUnitUpdateWithoutPaidSearchUnitDataInput;
  where: PaidSearchDateUnitWhereUniqueInput;
};

export type PaidSearchDateUnitWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<PaidSearchDateUnitWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<PaidSearchDateUnitWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<PaidSearchDateUnitWhereInput>>;
  clicks?: InputMaybe<Scalars['Int']>;
  /** All values greater than the given value. */
  clicks_gt?: InputMaybe<Scalars['Int']>;
  /** All values greater than or equal the given value. */
  clicks_gte?: InputMaybe<Scalars['Int']>;
  /** All values that are contained in given list. */
  clicks_in?: InputMaybe<Array<Scalars['Int']>>;
  /** All values less than the given value. */
  clicks_lt?: InputMaybe<Scalars['Int']>;
  /** All values less than or equal the given value. */
  clicks_lte?: InputMaybe<Scalars['Int']>;
  /** All values that are not equal to given value. */
  clicks_not?: InputMaybe<Scalars['Int']>;
  /** All values that are not contained in given list. */
  clicks_not_in?: InputMaybe<Array<Scalars['Int']>>;
  conversions?: InputMaybe<Scalars['Int']>;
  /** All values greater than the given value. */
  conversions_gt?: InputMaybe<Scalars['Int']>;
  /** All values greater than or equal the given value. */
  conversions_gte?: InputMaybe<Scalars['Int']>;
  /** All values that are contained in given list. */
  conversions_in?: InputMaybe<Array<Scalars['Int']>>;
  /** All values less than the given value. */
  conversions_lt?: InputMaybe<Scalars['Int']>;
  /** All values less than or equal the given value. */
  conversions_lte?: InputMaybe<Scalars['Int']>;
  /** All values that are not equal to given value. */
  conversions_not?: InputMaybe<Scalars['Int']>;
  /** All values that are not contained in given list. */
  conversions_not_in?: InputMaybe<Array<Scalars['Int']>>;
  cost?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  cost_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  cost_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  cost_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  cost_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  cost_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  cost_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  cost_not_in?: InputMaybe<Array<Scalars['Float']>>;
  cpc?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  cpc_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  cpc_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  cpc_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  cpc_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  cpc_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  cpc_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  cpc_not_in?: InputMaybe<Array<Scalars['Float']>>;
  cpm?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  cpm_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  cpm_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  cpm_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  cpm_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  cpm_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  cpm_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  cpm_not_in?: InputMaybe<Array<Scalars['Float']>>;
  ctr?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  ctr_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  ctr_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  ctr_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  ctr_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  ctr_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  ctr_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  ctr_not_in?: InputMaybe<Array<Scalars['Float']>>;
  date?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  date_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  date_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  date_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  date_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  date_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  date_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  date_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: InputMaybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: InputMaybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: InputMaybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  impressions?: InputMaybe<Scalars['Int']>;
  /** All values greater than the given value. */
  impressions_gt?: InputMaybe<Scalars['Int']>;
  /** All values greater than or equal the given value. */
  impressions_gte?: InputMaybe<Scalars['Int']>;
  /** All values that are contained in given list. */
  impressions_in?: InputMaybe<Array<Scalars['Int']>>;
  /** All values less than the given value. */
  impressions_lt?: InputMaybe<Scalars['Int']>;
  /** All values less than or equal the given value. */
  impressions_lte?: InputMaybe<Scalars['Int']>;
  /** All values that are not equal to given value. */
  impressions_not?: InputMaybe<Scalars['Int']>;
  /** All values that are not contained in given list. */
  impressions_not_in?: InputMaybe<Array<Scalars['Int']>>;
  key?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  key_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  key_ends_with?: InputMaybe<Scalars['String']>;
  /** All values greater than the given value. */
  key_gt?: InputMaybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  key_gte?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  key_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  key_lt?: InputMaybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  key_lte?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  key_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  key_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string. */
  key_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  key_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  key_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  key_starts_with?: InputMaybe<Scalars['String']>;
  keywords?: InputMaybe<Scalars['Int']>;
  /** All values greater than the given value. */
  keywords_gt?: InputMaybe<Scalars['Int']>;
  /** All values greater than or equal the given value. */
  keywords_gte?: InputMaybe<Scalars['Int']>;
  /** All values that are contained in given list. */
  keywords_in?: InputMaybe<Array<Scalars['Int']>>;
  /** All values less than the given value. */
  keywords_lt?: InputMaybe<Scalars['Int']>;
  /** All values less than or equal the given value. */
  keywords_lte?: InputMaybe<Scalars['Int']>;
  /** All values that are not equal to given value. */
  keywords_not?: InputMaybe<Scalars['Int']>;
  /** All values that are not contained in given list. */
  keywords_not_in?: InputMaybe<Array<Scalars['Int']>>;
  locations?: InputMaybe<Scalars['Int']>;
  /** All values greater than the given value. */
  locations_gt?: InputMaybe<Scalars['Int']>;
  /** All values greater than or equal the given value. */
  locations_gte?: InputMaybe<Scalars['Int']>;
  /** All values that are contained in given list. */
  locations_in?: InputMaybe<Array<Scalars['Int']>>;
  /** All values less than the given value. */
  locations_lt?: InputMaybe<Scalars['Int']>;
  /** All values less than or equal the given value. */
  locations_lte?: InputMaybe<Scalars['Int']>;
  /** All values that are not equal to given value. */
  locations_not?: InputMaybe<Scalars['Int']>;
  /** All values that are not contained in given list. */
  locations_not_in?: InputMaybe<Array<Scalars['Int']>>;
  paidSearchUnit?: InputMaybe<PaidSearchUnitWhereInput>;
  phoneCalls?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  phoneCalls_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  phoneCalls_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  phoneCalls_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  phoneCalls_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  phoneCalls_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  phoneCalls_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  phoneCalls_not_in?: InputMaybe<Array<Scalars['Float']>>;
  revenue?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  revenue_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  revenue_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  revenue_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  revenue_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  revenue_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  revenue_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  revenue_not_in?: InputMaybe<Array<Scalars['Float']>>;
  roas?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  roas_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  roas_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  roas_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  roas_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  roas_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  roas_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  roas_not_in?: InputMaybe<Array<Scalars['Float']>>;
  spend?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  spend_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  spend_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  spend_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  spend_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  spend_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  spend_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  spend_not_in?: InputMaybe<Array<Scalars['Float']>>;
  xAxis?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  xAxis_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  xAxis_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  xAxis_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  xAxis_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  xAxis_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  xAxis_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  xAxis_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
};

export type PaidSearchDateUnitWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
  key?: InputMaybe<Scalars['String']>;
};

export type PaidSearchLocationBingUnit = Node & {
  __typename?: 'PaidSearchLocationBingUnit';
  byDay?: Maybe<Array<PaidSearchLocationDateByDayUnit>>;
  byMonth?: Maybe<Array<PaidSearchLocationDateUnit>>;
  id: Scalars['ID'];
  paidSearchBingCampaign?: Maybe<PaidSearchBingCampaigns>;
  paidSearchSummary?: Maybe<PaidSearchSummary>;
  revenue?: Maybe<Scalars['Float']>;
};


export type PaidSearchLocationBingUnitByDayArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<PaidSearchLocationDateByDayUnitOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<PaidSearchLocationDateByDayUnitWhereInput>;
};


export type PaidSearchLocationBingUnitByMonthArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<PaidSearchLocationDateUnitOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<PaidSearchLocationDateUnitWhereInput>;
};

export type PaidSearchLocationBingUnitCreateOneWithoutPaidSearchBingCampaignInput = {
  connect?: InputMaybe<PaidSearchLocationBingUnitWhereUniqueInput>;
  create?: InputMaybe<PaidSearchLocationBingUnitCreateWithoutPaidSearchBingCampaignInput>;
};

export type PaidSearchLocationBingUnitCreateOneWithoutPaidSearchSummaryInput = {
  connect?: InputMaybe<PaidSearchLocationBingUnitWhereUniqueInput>;
  create?: InputMaybe<PaidSearchLocationBingUnitCreateWithoutPaidSearchSummaryInput>;
};

export type PaidSearchLocationBingUnitCreateWithoutPaidSearchBingCampaignInput = {
  byDay?: InputMaybe<PaidSearchLocationDateByDayUnitCreateManyInput>;
  byMonth?: InputMaybe<PaidSearchLocationDateUnitCreateManyInput>;
  paidSearchSummary?: InputMaybe<PaidSearchSummaryCreateOneWithoutOverallBingLocationsInput>;
  revenue?: InputMaybe<Scalars['Float']>;
};

export type PaidSearchLocationBingUnitCreateWithoutPaidSearchSummaryInput = {
  byDay?: InputMaybe<PaidSearchLocationDateByDayUnitCreateManyInput>;
  byMonth?: InputMaybe<PaidSearchLocationDateUnitCreateManyInput>;
  paidSearchBingCampaign?: InputMaybe<PaidSearchBingCampaignsCreateOneWithoutLocationsInput>;
  revenue?: InputMaybe<Scalars['Float']>;
};

export type PaidSearchLocationBingUnitUpdateOneWithoutPaidSearchBingCampaignInput = {
  connect?: InputMaybe<PaidSearchLocationBingUnitWhereUniqueInput>;
  create?: InputMaybe<PaidSearchLocationBingUnitCreateWithoutPaidSearchBingCampaignInput>;
  delete?: InputMaybe<Scalars['Boolean']>;
  disconnect?: InputMaybe<Scalars['Boolean']>;
  update?: InputMaybe<PaidSearchLocationBingUnitUpdateWithoutPaidSearchBingCampaignDataInput>;
  upsert?: InputMaybe<PaidSearchLocationBingUnitUpsertWithoutPaidSearchBingCampaignInput>;
};

export type PaidSearchLocationBingUnitUpdateOneWithoutPaidSearchSummaryInput = {
  connect?: InputMaybe<PaidSearchLocationBingUnitWhereUniqueInput>;
  create?: InputMaybe<PaidSearchLocationBingUnitCreateWithoutPaidSearchSummaryInput>;
  delete?: InputMaybe<Scalars['Boolean']>;
  disconnect?: InputMaybe<Scalars['Boolean']>;
  update?: InputMaybe<PaidSearchLocationBingUnitUpdateWithoutPaidSearchSummaryDataInput>;
  upsert?: InputMaybe<PaidSearchLocationBingUnitUpsertWithoutPaidSearchSummaryInput>;
};

export type PaidSearchLocationBingUnitUpdateWithoutPaidSearchBingCampaignDataInput = {
  byDay?: InputMaybe<PaidSearchLocationDateByDayUnitUpdateManyInput>;
  byMonth?: InputMaybe<PaidSearchLocationDateUnitUpdateManyInput>;
  paidSearchSummary?: InputMaybe<PaidSearchSummaryUpdateOneWithoutOverallBingLocationsInput>;
  revenue?: InputMaybe<Scalars['Float']>;
};

export type PaidSearchLocationBingUnitUpdateWithoutPaidSearchSummaryDataInput = {
  byDay?: InputMaybe<PaidSearchLocationDateByDayUnitUpdateManyInput>;
  byMonth?: InputMaybe<PaidSearchLocationDateUnitUpdateManyInput>;
  paidSearchBingCampaign?: InputMaybe<PaidSearchBingCampaignsUpdateOneWithoutLocationsInput>;
  revenue?: InputMaybe<Scalars['Float']>;
};

export type PaidSearchLocationBingUnitUpsertWithoutPaidSearchBingCampaignInput = {
  create: PaidSearchLocationBingUnitCreateWithoutPaidSearchBingCampaignInput;
  update: PaidSearchLocationBingUnitUpdateWithoutPaidSearchBingCampaignDataInput;
};

export type PaidSearchLocationBingUnitUpsertWithoutPaidSearchSummaryInput = {
  create: PaidSearchLocationBingUnitCreateWithoutPaidSearchSummaryInput;
  update: PaidSearchLocationBingUnitUpdateWithoutPaidSearchSummaryDataInput;
};

export type PaidSearchLocationBingUnitWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<PaidSearchLocationBingUnitWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<PaidSearchLocationBingUnitWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<PaidSearchLocationBingUnitWhereInput>>;
  byDay_every?: InputMaybe<PaidSearchLocationDateByDayUnitWhereInput>;
  byDay_none?: InputMaybe<PaidSearchLocationDateByDayUnitWhereInput>;
  byDay_some?: InputMaybe<PaidSearchLocationDateByDayUnitWhereInput>;
  byMonth_every?: InputMaybe<PaidSearchLocationDateUnitWhereInput>;
  byMonth_none?: InputMaybe<PaidSearchLocationDateUnitWhereInput>;
  byMonth_some?: InputMaybe<PaidSearchLocationDateUnitWhereInput>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: InputMaybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: InputMaybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: InputMaybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  paidSearchBingCampaign?: InputMaybe<PaidSearchBingCampaignsWhereInput>;
  paidSearchSummary?: InputMaybe<PaidSearchSummaryWhereInput>;
  revenue?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  revenue_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  revenue_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  revenue_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  revenue_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  revenue_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  revenue_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  revenue_not_in?: InputMaybe<Array<Scalars['Float']>>;
};

export type PaidSearchLocationBingUnitWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export type PaidSearchLocationDateByDayUnit = Node & {
  __typename?: 'PaidSearchLocationDateByDayUnit';
  clicks?: Maybe<Scalars['Int']>;
  conversions?: Maybe<Scalars['Int']>;
  cost?: Maybe<Scalars['Float']>;
  cpc?: Maybe<Scalars['Float']>;
  cpm?: Maybe<Scalars['Float']>;
  ctr?: Maybe<Scalars['Float']>;
  date?: Maybe<Scalars['DateTime']>;
  id: Scalars['ID'];
  impressions?: Maybe<Scalars['Int']>;
  key: Scalars['String'];
  location?: Maybe<Scalars['String']>;
  revenue?: Maybe<Scalars['Float']>;
  roas?: Maybe<Scalars['Float']>;
  spend?: Maybe<Scalars['Float']>;
  xAxis?: Maybe<Scalars['DateTime']>;
};

export type PaidSearchLocationDateByDayUnitCreateInput = {
  clicks?: InputMaybe<Scalars['Int']>;
  conversions?: InputMaybe<Scalars['Int']>;
  cost?: InputMaybe<Scalars['Float']>;
  cpc?: InputMaybe<Scalars['Float']>;
  cpm?: InputMaybe<Scalars['Float']>;
  ctr?: InputMaybe<Scalars['Float']>;
  date?: InputMaybe<Scalars['DateTime']>;
  impressions?: InputMaybe<Scalars['Int']>;
  key: Scalars['String'];
  location?: InputMaybe<Scalars['String']>;
  revenue?: InputMaybe<Scalars['Float']>;
  roas?: InputMaybe<Scalars['Float']>;
  spend?: InputMaybe<Scalars['Float']>;
  xAxis?: InputMaybe<Scalars['DateTime']>;
};

export type PaidSearchLocationDateByDayUnitCreateManyInput = {
  connect?: InputMaybe<Array<PaidSearchLocationDateByDayUnitWhereUniqueInput>>;
  create?: InputMaybe<Array<PaidSearchLocationDateByDayUnitCreateInput>>;
};

export enum PaidSearchLocationDateByDayUnitOrderByInput {
  ClicksAsc = 'clicks_ASC',
  ClicksDesc = 'clicks_DESC',
  ConversionsAsc = 'conversions_ASC',
  ConversionsDesc = 'conversions_DESC',
  CostAsc = 'cost_ASC',
  CostDesc = 'cost_DESC',
  CpcAsc = 'cpc_ASC',
  CpcDesc = 'cpc_DESC',
  CpmAsc = 'cpm_ASC',
  CpmDesc = 'cpm_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  CtrAsc = 'ctr_ASC',
  CtrDesc = 'ctr_DESC',
  DateAsc = 'date_ASC',
  DateDesc = 'date_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  ImpressionsAsc = 'impressions_ASC',
  ImpressionsDesc = 'impressions_DESC',
  KeyAsc = 'key_ASC',
  KeyDesc = 'key_DESC',
  LocationAsc = 'location_ASC',
  LocationDesc = 'location_DESC',
  RevenueAsc = 'revenue_ASC',
  RevenueDesc = 'revenue_DESC',
  RoasAsc = 'roas_ASC',
  RoasDesc = 'roas_DESC',
  SpendAsc = 'spend_ASC',
  SpendDesc = 'spend_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  XAxisAsc = 'xAxis_ASC',
  XAxisDesc = 'xAxis_DESC'
}

export type PaidSearchLocationDateByDayUnitUpdateDataInput = {
  clicks?: InputMaybe<Scalars['Int']>;
  conversions?: InputMaybe<Scalars['Int']>;
  cost?: InputMaybe<Scalars['Float']>;
  cpc?: InputMaybe<Scalars['Float']>;
  cpm?: InputMaybe<Scalars['Float']>;
  ctr?: InputMaybe<Scalars['Float']>;
  date?: InputMaybe<Scalars['DateTime']>;
  impressions?: InputMaybe<Scalars['Int']>;
  key?: InputMaybe<Scalars['String']>;
  location?: InputMaybe<Scalars['String']>;
  revenue?: InputMaybe<Scalars['Float']>;
  roas?: InputMaybe<Scalars['Float']>;
  spend?: InputMaybe<Scalars['Float']>;
  xAxis?: InputMaybe<Scalars['DateTime']>;
};

export type PaidSearchLocationDateByDayUnitUpdateManyInput = {
  connect?: InputMaybe<Array<PaidSearchLocationDateByDayUnitWhereUniqueInput>>;
  create?: InputMaybe<Array<PaidSearchLocationDateByDayUnitCreateInput>>;
  delete?: InputMaybe<Array<PaidSearchLocationDateByDayUnitWhereUniqueInput>>;
  disconnect?: InputMaybe<Array<PaidSearchLocationDateByDayUnitWhereUniqueInput>>;
  update?: InputMaybe<Array<PaidSearchLocationDateByDayUnitUpdateWithWhereUniqueNestedInput>>;
  upsert?: InputMaybe<Array<PaidSearchLocationDateByDayUnitUpsertWithWhereUniqueNestedInput>>;
};

export type PaidSearchLocationDateByDayUnitUpdateWithWhereUniqueNestedInput = {
  data: PaidSearchLocationDateByDayUnitUpdateDataInput;
  where: PaidSearchLocationDateByDayUnitWhereUniqueInput;
};

export type PaidSearchLocationDateByDayUnitUpsertWithWhereUniqueNestedInput = {
  create: PaidSearchLocationDateByDayUnitCreateInput;
  update: PaidSearchLocationDateByDayUnitUpdateDataInput;
  where: PaidSearchLocationDateByDayUnitWhereUniqueInput;
};

export type PaidSearchLocationDateByDayUnitWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<PaidSearchLocationDateByDayUnitWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<PaidSearchLocationDateByDayUnitWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<PaidSearchLocationDateByDayUnitWhereInput>>;
  clicks?: InputMaybe<Scalars['Int']>;
  /** All values greater than the given value. */
  clicks_gt?: InputMaybe<Scalars['Int']>;
  /** All values greater than or equal the given value. */
  clicks_gte?: InputMaybe<Scalars['Int']>;
  /** All values that are contained in given list. */
  clicks_in?: InputMaybe<Array<Scalars['Int']>>;
  /** All values less than the given value. */
  clicks_lt?: InputMaybe<Scalars['Int']>;
  /** All values less than or equal the given value. */
  clicks_lte?: InputMaybe<Scalars['Int']>;
  /** All values that are not equal to given value. */
  clicks_not?: InputMaybe<Scalars['Int']>;
  /** All values that are not contained in given list. */
  clicks_not_in?: InputMaybe<Array<Scalars['Int']>>;
  conversions?: InputMaybe<Scalars['Int']>;
  /** All values greater than the given value. */
  conversions_gt?: InputMaybe<Scalars['Int']>;
  /** All values greater than or equal the given value. */
  conversions_gte?: InputMaybe<Scalars['Int']>;
  /** All values that are contained in given list. */
  conversions_in?: InputMaybe<Array<Scalars['Int']>>;
  /** All values less than the given value. */
  conversions_lt?: InputMaybe<Scalars['Int']>;
  /** All values less than or equal the given value. */
  conversions_lte?: InputMaybe<Scalars['Int']>;
  /** All values that are not equal to given value. */
  conversions_not?: InputMaybe<Scalars['Int']>;
  /** All values that are not contained in given list. */
  conversions_not_in?: InputMaybe<Array<Scalars['Int']>>;
  cost?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  cost_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  cost_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  cost_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  cost_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  cost_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  cost_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  cost_not_in?: InputMaybe<Array<Scalars['Float']>>;
  cpc?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  cpc_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  cpc_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  cpc_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  cpc_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  cpc_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  cpc_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  cpc_not_in?: InputMaybe<Array<Scalars['Float']>>;
  cpm?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  cpm_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  cpm_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  cpm_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  cpm_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  cpm_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  cpm_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  cpm_not_in?: InputMaybe<Array<Scalars['Float']>>;
  ctr?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  ctr_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  ctr_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  ctr_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  ctr_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  ctr_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  ctr_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  ctr_not_in?: InputMaybe<Array<Scalars['Float']>>;
  date?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  date_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  date_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  date_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  date_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  date_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  date_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  date_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: InputMaybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: InputMaybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: InputMaybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  impressions?: InputMaybe<Scalars['Int']>;
  /** All values greater than the given value. */
  impressions_gt?: InputMaybe<Scalars['Int']>;
  /** All values greater than or equal the given value. */
  impressions_gte?: InputMaybe<Scalars['Int']>;
  /** All values that are contained in given list. */
  impressions_in?: InputMaybe<Array<Scalars['Int']>>;
  /** All values less than the given value. */
  impressions_lt?: InputMaybe<Scalars['Int']>;
  /** All values less than or equal the given value. */
  impressions_lte?: InputMaybe<Scalars['Int']>;
  /** All values that are not equal to given value. */
  impressions_not?: InputMaybe<Scalars['Int']>;
  /** All values that are not contained in given list. */
  impressions_not_in?: InputMaybe<Array<Scalars['Int']>>;
  key?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  key_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  key_ends_with?: InputMaybe<Scalars['String']>;
  /** All values greater than the given value. */
  key_gt?: InputMaybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  key_gte?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  key_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  key_lt?: InputMaybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  key_lte?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  key_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  key_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string. */
  key_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  key_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  key_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  key_starts_with?: InputMaybe<Scalars['String']>;
  location?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  location_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  location_ends_with?: InputMaybe<Scalars['String']>;
  /** All values greater than the given value. */
  location_gt?: InputMaybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  location_gte?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  location_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  location_lt?: InputMaybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  location_lte?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  location_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  location_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string. */
  location_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  location_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  location_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  location_starts_with?: InputMaybe<Scalars['String']>;
  revenue?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  revenue_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  revenue_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  revenue_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  revenue_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  revenue_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  revenue_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  revenue_not_in?: InputMaybe<Array<Scalars['Float']>>;
  roas?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  roas_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  roas_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  roas_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  roas_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  roas_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  roas_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  roas_not_in?: InputMaybe<Array<Scalars['Float']>>;
  spend?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  spend_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  spend_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  spend_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  spend_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  spend_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  spend_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  spend_not_in?: InputMaybe<Array<Scalars['Float']>>;
  xAxis?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  xAxis_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  xAxis_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  xAxis_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  xAxis_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  xAxis_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  xAxis_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  xAxis_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
};

export type PaidSearchLocationDateByDayUnitWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
  key?: InputMaybe<Scalars['String']>;
};

export type PaidSearchLocationDateUnit = Node & {
  __typename?: 'PaidSearchLocationDateUnit';
  date?: Maybe<Scalars['DateTime']>;
  id: Scalars['ID'];
  key: Scalars['String'];
  location?: Maybe<Scalars['String']>;
  revenue?: Maybe<Scalars['Float']>;
  xAxis?: Maybe<Scalars['DateTime']>;
};

export type PaidSearchLocationDateUnitCreateInput = {
  date?: InputMaybe<Scalars['DateTime']>;
  key: Scalars['String'];
  location?: InputMaybe<Scalars['String']>;
  revenue?: InputMaybe<Scalars['Float']>;
  xAxis?: InputMaybe<Scalars['DateTime']>;
};

export type PaidSearchLocationDateUnitCreateManyInput = {
  connect?: InputMaybe<Array<PaidSearchLocationDateUnitWhereUniqueInput>>;
  create?: InputMaybe<Array<PaidSearchLocationDateUnitCreateInput>>;
};

export enum PaidSearchLocationDateUnitOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DateAsc = 'date_ASC',
  DateDesc = 'date_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  KeyAsc = 'key_ASC',
  KeyDesc = 'key_DESC',
  LocationAsc = 'location_ASC',
  LocationDesc = 'location_DESC',
  RevenueAsc = 'revenue_ASC',
  RevenueDesc = 'revenue_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  XAxisAsc = 'xAxis_ASC',
  XAxisDesc = 'xAxis_DESC'
}

export type PaidSearchLocationDateUnitUpdateDataInput = {
  date?: InputMaybe<Scalars['DateTime']>;
  key?: InputMaybe<Scalars['String']>;
  location?: InputMaybe<Scalars['String']>;
  revenue?: InputMaybe<Scalars['Float']>;
  xAxis?: InputMaybe<Scalars['DateTime']>;
};

export type PaidSearchLocationDateUnitUpdateManyInput = {
  connect?: InputMaybe<Array<PaidSearchLocationDateUnitWhereUniqueInput>>;
  create?: InputMaybe<Array<PaidSearchLocationDateUnitCreateInput>>;
  delete?: InputMaybe<Array<PaidSearchLocationDateUnitWhereUniqueInput>>;
  disconnect?: InputMaybe<Array<PaidSearchLocationDateUnitWhereUniqueInput>>;
  update?: InputMaybe<Array<PaidSearchLocationDateUnitUpdateWithWhereUniqueNestedInput>>;
  upsert?: InputMaybe<Array<PaidSearchLocationDateUnitUpsertWithWhereUniqueNestedInput>>;
};

export type PaidSearchLocationDateUnitUpdateWithWhereUniqueNestedInput = {
  data: PaidSearchLocationDateUnitUpdateDataInput;
  where: PaidSearchLocationDateUnitWhereUniqueInput;
};

export type PaidSearchLocationDateUnitUpsertWithWhereUniqueNestedInput = {
  create: PaidSearchLocationDateUnitCreateInput;
  update: PaidSearchLocationDateUnitUpdateDataInput;
  where: PaidSearchLocationDateUnitWhereUniqueInput;
};

export type PaidSearchLocationDateUnitWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<PaidSearchLocationDateUnitWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<PaidSearchLocationDateUnitWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<PaidSearchLocationDateUnitWhereInput>>;
  date?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  date_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  date_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  date_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  date_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  date_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  date_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  date_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: InputMaybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: InputMaybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: InputMaybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  key?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  key_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  key_ends_with?: InputMaybe<Scalars['String']>;
  /** All values greater than the given value. */
  key_gt?: InputMaybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  key_gte?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  key_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  key_lt?: InputMaybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  key_lte?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  key_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  key_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string. */
  key_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  key_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  key_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  key_starts_with?: InputMaybe<Scalars['String']>;
  location?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  location_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  location_ends_with?: InputMaybe<Scalars['String']>;
  /** All values greater than the given value. */
  location_gt?: InputMaybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  location_gte?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  location_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  location_lt?: InputMaybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  location_lte?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  location_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  location_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string. */
  location_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  location_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  location_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  location_starts_with?: InputMaybe<Scalars['String']>;
  revenue?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  revenue_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  revenue_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  revenue_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  revenue_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  revenue_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  revenue_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  revenue_not_in?: InputMaybe<Array<Scalars['Float']>>;
  xAxis?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  xAxis_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  xAxis_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  xAxis_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  xAxis_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  xAxis_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  xAxis_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  xAxis_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
};

export type PaidSearchLocationDateUnitWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
  key?: InputMaybe<Scalars['String']>;
};

export type PaidSearchLocationUnit = Node & {
  __typename?: 'PaidSearchLocationUnit';
  byDate?: Maybe<Array<PaidSearchLocationDateUnit>>;
  byDay?: Maybe<Array<PaidSearchLocationDateByDayUnit>>;
  id: Scalars['ID'];
  paidSearchCampaign?: Maybe<PaidSearchCampaign>;
  paidSearchSummary?: Maybe<PaidSearchSummary>;
  revenue?: Maybe<Scalars['Float']>;
};


export type PaidSearchLocationUnitByDateArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<PaidSearchLocationDateUnitOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<PaidSearchLocationDateUnitWhereInput>;
};


export type PaidSearchLocationUnitByDayArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<PaidSearchLocationDateByDayUnitOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<PaidSearchLocationDateByDayUnitWhereInput>;
};

export type PaidSearchLocationUnitCreateOneWithoutPaidSearchCampaignInput = {
  connect?: InputMaybe<PaidSearchLocationUnitWhereUniqueInput>;
  create?: InputMaybe<PaidSearchLocationUnitCreateWithoutPaidSearchCampaignInput>;
};

export type PaidSearchLocationUnitCreateOneWithoutPaidSearchSummaryInput = {
  connect?: InputMaybe<PaidSearchLocationUnitWhereUniqueInput>;
  create?: InputMaybe<PaidSearchLocationUnitCreateWithoutPaidSearchSummaryInput>;
};

export type PaidSearchLocationUnitCreateWithoutPaidSearchCampaignInput = {
  byDate?: InputMaybe<PaidSearchLocationDateUnitCreateManyInput>;
  byDay?: InputMaybe<PaidSearchLocationDateByDayUnitCreateManyInput>;
  paidSearchSummary?: InputMaybe<PaidSearchSummaryCreateOneWithoutOverallLocationsInput>;
  revenue?: InputMaybe<Scalars['Float']>;
};

export type PaidSearchLocationUnitCreateWithoutPaidSearchSummaryInput = {
  byDate?: InputMaybe<PaidSearchLocationDateUnitCreateManyInput>;
  byDay?: InputMaybe<PaidSearchLocationDateByDayUnitCreateManyInput>;
  paidSearchCampaign?: InputMaybe<PaidSearchCampaignCreateOneWithoutLocationsInput>;
  revenue?: InputMaybe<Scalars['Float']>;
};

export type PaidSearchLocationUnitUpdateOneWithoutPaidSearchCampaignInput = {
  connect?: InputMaybe<PaidSearchLocationUnitWhereUniqueInput>;
  create?: InputMaybe<PaidSearchLocationUnitCreateWithoutPaidSearchCampaignInput>;
  delete?: InputMaybe<Scalars['Boolean']>;
  disconnect?: InputMaybe<Scalars['Boolean']>;
  update?: InputMaybe<PaidSearchLocationUnitUpdateWithoutPaidSearchCampaignDataInput>;
  upsert?: InputMaybe<PaidSearchLocationUnitUpsertWithoutPaidSearchCampaignInput>;
};

export type PaidSearchLocationUnitUpdateOneWithoutPaidSearchSummaryInput = {
  connect?: InputMaybe<PaidSearchLocationUnitWhereUniqueInput>;
  create?: InputMaybe<PaidSearchLocationUnitCreateWithoutPaidSearchSummaryInput>;
  delete?: InputMaybe<Scalars['Boolean']>;
  disconnect?: InputMaybe<Scalars['Boolean']>;
  update?: InputMaybe<PaidSearchLocationUnitUpdateWithoutPaidSearchSummaryDataInput>;
  upsert?: InputMaybe<PaidSearchLocationUnitUpsertWithoutPaidSearchSummaryInput>;
};

export type PaidSearchLocationUnitUpdateWithoutPaidSearchCampaignDataInput = {
  byDate?: InputMaybe<PaidSearchLocationDateUnitUpdateManyInput>;
  byDay?: InputMaybe<PaidSearchLocationDateByDayUnitUpdateManyInput>;
  paidSearchSummary?: InputMaybe<PaidSearchSummaryUpdateOneWithoutOverallLocationsInput>;
  revenue?: InputMaybe<Scalars['Float']>;
};

export type PaidSearchLocationUnitUpdateWithoutPaidSearchSummaryDataInput = {
  byDate?: InputMaybe<PaidSearchLocationDateUnitUpdateManyInput>;
  byDay?: InputMaybe<PaidSearchLocationDateByDayUnitUpdateManyInput>;
  paidSearchCampaign?: InputMaybe<PaidSearchCampaignUpdateOneWithoutLocationsInput>;
  revenue?: InputMaybe<Scalars['Float']>;
};

export type PaidSearchLocationUnitUpsertWithoutPaidSearchCampaignInput = {
  create: PaidSearchLocationUnitCreateWithoutPaidSearchCampaignInput;
  update: PaidSearchLocationUnitUpdateWithoutPaidSearchCampaignDataInput;
};

export type PaidSearchLocationUnitUpsertWithoutPaidSearchSummaryInput = {
  create: PaidSearchLocationUnitCreateWithoutPaidSearchSummaryInput;
  update: PaidSearchLocationUnitUpdateWithoutPaidSearchSummaryDataInput;
};

export type PaidSearchLocationUnitWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<PaidSearchLocationUnitWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<PaidSearchLocationUnitWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<PaidSearchLocationUnitWhereInput>>;
  byDate_every?: InputMaybe<PaidSearchLocationDateUnitWhereInput>;
  byDate_none?: InputMaybe<PaidSearchLocationDateUnitWhereInput>;
  byDate_some?: InputMaybe<PaidSearchLocationDateUnitWhereInput>;
  byDay_every?: InputMaybe<PaidSearchLocationDateByDayUnitWhereInput>;
  byDay_none?: InputMaybe<PaidSearchLocationDateByDayUnitWhereInput>;
  byDay_some?: InputMaybe<PaidSearchLocationDateByDayUnitWhereInput>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: InputMaybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: InputMaybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: InputMaybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  paidSearchCampaign?: InputMaybe<PaidSearchCampaignWhereInput>;
  paidSearchSummary?: InputMaybe<PaidSearchSummaryWhereInput>;
  revenue?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  revenue_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  revenue_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  revenue_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  revenue_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  revenue_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  revenue_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  revenue_not_in?: InputMaybe<Array<Scalars['Float']>>;
};

export type PaidSearchLocationUnitWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export type PaidSearchPacingData = Node & {
  __typename?: 'PaidSearchPacingData';
  clicks?: Maybe<Scalars['Int']>;
  createdAt: Scalars['DateTime'];
  dailyRemainSpend?: Maybe<Scalars['Float']>;
  date?: Maybe<Scalars['DateTime']>;
  dayInMonth?: Maybe<Scalars['Int']>;
  dayOfMonth?: Maybe<Scalars['Int']>;
  id: Scalars['ID'];
  impressions?: Maybe<Scalars['Int']>;
  pace?: Maybe<Scalars['Float']>;
  spend?: Maybe<Scalars['Float']>;
  summary: PaidSearchSummary;
  updatedAt: Scalars['DateTime'];
};

export type PaidSearchPacingDataCreateOneWithoutSummaryInput = {
  connect?: InputMaybe<PaidSearchPacingDataWhereUniqueInput>;
  create?: InputMaybe<PaidSearchPacingDataCreateWithoutSummaryInput>;
};

export type PaidSearchPacingDataCreateWithoutSummaryInput = {
  clicks?: InputMaybe<Scalars['Int']>;
  dailyRemainSpend?: InputMaybe<Scalars['Float']>;
  date?: InputMaybe<Scalars['DateTime']>;
  dayInMonth?: InputMaybe<Scalars['Int']>;
  dayOfMonth?: InputMaybe<Scalars['Int']>;
  impressions?: InputMaybe<Scalars['Int']>;
  pace?: InputMaybe<Scalars['Float']>;
  spend?: InputMaybe<Scalars['Float']>;
};

export type PaidSearchPacingDataUpdateOneWithoutSummaryInput = {
  connect?: InputMaybe<PaidSearchPacingDataWhereUniqueInput>;
  create?: InputMaybe<PaidSearchPacingDataCreateWithoutSummaryInput>;
  delete?: InputMaybe<Scalars['Boolean']>;
  disconnect?: InputMaybe<Scalars['Boolean']>;
  update?: InputMaybe<PaidSearchPacingDataUpdateWithoutSummaryDataInput>;
  upsert?: InputMaybe<PaidSearchPacingDataUpsertWithoutSummaryInput>;
};

export type PaidSearchPacingDataUpdateWithoutSummaryDataInput = {
  clicks?: InputMaybe<Scalars['Int']>;
  dailyRemainSpend?: InputMaybe<Scalars['Float']>;
  date?: InputMaybe<Scalars['DateTime']>;
  dayInMonth?: InputMaybe<Scalars['Int']>;
  dayOfMonth?: InputMaybe<Scalars['Int']>;
  impressions?: InputMaybe<Scalars['Int']>;
  pace?: InputMaybe<Scalars['Float']>;
  spend?: InputMaybe<Scalars['Float']>;
};

export type PaidSearchPacingDataUpsertWithoutSummaryInput = {
  create: PaidSearchPacingDataCreateWithoutSummaryInput;
  update: PaidSearchPacingDataUpdateWithoutSummaryDataInput;
};

export type PaidSearchPacingDataWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<PaidSearchPacingDataWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<PaidSearchPacingDataWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<PaidSearchPacingDataWhereInput>>;
  clicks?: InputMaybe<Scalars['Int']>;
  /** All values greater than the given value. */
  clicks_gt?: InputMaybe<Scalars['Int']>;
  /** All values greater than or equal the given value. */
  clicks_gte?: InputMaybe<Scalars['Int']>;
  /** All values that are contained in given list. */
  clicks_in?: InputMaybe<Array<Scalars['Int']>>;
  /** All values less than the given value. */
  clicks_lt?: InputMaybe<Scalars['Int']>;
  /** All values less than or equal the given value. */
  clicks_lte?: InputMaybe<Scalars['Int']>;
  /** All values that are not equal to given value. */
  clicks_not?: InputMaybe<Scalars['Int']>;
  /** All values that are not contained in given list. */
  clicks_not_in?: InputMaybe<Array<Scalars['Int']>>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  dailyRemainSpend?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  dailyRemainSpend_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  dailyRemainSpend_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  dailyRemainSpend_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  dailyRemainSpend_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  dailyRemainSpend_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  dailyRemainSpend_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  dailyRemainSpend_not_in?: InputMaybe<Array<Scalars['Float']>>;
  date?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  date_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  date_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  date_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  date_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  date_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  date_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  date_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  dayInMonth?: InputMaybe<Scalars['Int']>;
  /** All values greater than the given value. */
  dayInMonth_gt?: InputMaybe<Scalars['Int']>;
  /** All values greater than or equal the given value. */
  dayInMonth_gte?: InputMaybe<Scalars['Int']>;
  /** All values that are contained in given list. */
  dayInMonth_in?: InputMaybe<Array<Scalars['Int']>>;
  /** All values less than the given value. */
  dayInMonth_lt?: InputMaybe<Scalars['Int']>;
  /** All values less than or equal the given value. */
  dayInMonth_lte?: InputMaybe<Scalars['Int']>;
  /** All values that are not equal to given value. */
  dayInMonth_not?: InputMaybe<Scalars['Int']>;
  /** All values that are not contained in given list. */
  dayInMonth_not_in?: InputMaybe<Array<Scalars['Int']>>;
  dayOfMonth?: InputMaybe<Scalars['Int']>;
  /** All values greater than the given value. */
  dayOfMonth_gt?: InputMaybe<Scalars['Int']>;
  /** All values greater than or equal the given value. */
  dayOfMonth_gte?: InputMaybe<Scalars['Int']>;
  /** All values that are contained in given list. */
  dayOfMonth_in?: InputMaybe<Array<Scalars['Int']>>;
  /** All values less than the given value. */
  dayOfMonth_lt?: InputMaybe<Scalars['Int']>;
  /** All values less than or equal the given value. */
  dayOfMonth_lte?: InputMaybe<Scalars['Int']>;
  /** All values that are not equal to given value. */
  dayOfMonth_not?: InputMaybe<Scalars['Int']>;
  /** All values that are not contained in given list. */
  dayOfMonth_not_in?: InputMaybe<Array<Scalars['Int']>>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: InputMaybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: InputMaybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: InputMaybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  impressions?: InputMaybe<Scalars['Int']>;
  /** All values greater than the given value. */
  impressions_gt?: InputMaybe<Scalars['Int']>;
  /** All values greater than or equal the given value. */
  impressions_gte?: InputMaybe<Scalars['Int']>;
  /** All values that are contained in given list. */
  impressions_in?: InputMaybe<Array<Scalars['Int']>>;
  /** All values less than the given value. */
  impressions_lt?: InputMaybe<Scalars['Int']>;
  /** All values less than or equal the given value. */
  impressions_lte?: InputMaybe<Scalars['Int']>;
  /** All values that are not equal to given value. */
  impressions_not?: InputMaybe<Scalars['Int']>;
  /** All values that are not contained in given list. */
  impressions_not_in?: InputMaybe<Array<Scalars['Int']>>;
  pace?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  pace_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  pace_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  pace_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  pace_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  pace_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  pace_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  pace_not_in?: InputMaybe<Array<Scalars['Float']>>;
  spend?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  spend_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  spend_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  spend_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  spend_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  spend_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  spend_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  spend_not_in?: InputMaybe<Array<Scalars['Float']>>;
  summary?: InputMaybe<PaidSearchSummaryWhereInput>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
};

export type PaidSearchPacingDataWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export type PaidSearchReports = {
  __typename?: 'PaidSearchReports';
  cpcReport?: Maybe<Scalars['JSON']>;
  keywords?: Maybe<Scalars['JSON']>;
  locations?: Maybe<Scalars['JSON']>;
  organicReport?: Maybe<Scalars['JSON']>;
};

export type PaidSearchSummary = Node & {
  __typename?: 'PaidSearchSummary';
  aggregateData?: Maybe<PaidSearchAggregatedUnit>;
  config?: Maybe<PaidSearchConfig>;
  cpcReport?: Maybe<Scalars['Json']>;
  createdAt: Scalars['DateTime'];
  endDate: Scalars['DateTime'];
  id: Scalars['ID'];
  org: Org;
  organicReport?: Maybe<Scalars['Json']>;
  overallBing?: Maybe<PaidSearchBingUnit>;
  overallBingLocations?: Maybe<PaidSearchLocationBingUnit>;
  overallCommerce?: Maybe<PaidSearchCommerceUnit>;
  overallData?: Maybe<PaidSearchUnit>;
  overallLocations?: Maybe<PaidSearchLocationUnit>;
  overallPacingData?: Maybe<PaidSearchPacingData>;
  paidSearchBingCampaigns?: Maybe<Array<PaidSearchBingCampaigns>>;
  paidSearchCampaigns?: Maybe<Array<PaidSearchCampaign>>;
  reportId?: Maybe<Scalars['String']>;
  sharedOrgs?: Maybe<Array<Org>>;
  startDate: Scalars['DateTime'];
  updatedAt: Scalars['DateTime'];
};


export type PaidSearchSummaryPaidSearchBingCampaignsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<PaidSearchBingCampaignsOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<PaidSearchBingCampaignsWhereInput>;
};


export type PaidSearchSummaryPaidSearchCampaignsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<PaidSearchCampaignOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<PaidSearchCampaignWhereInput>;
};


export type PaidSearchSummarySharedOrgsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<OrgOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<OrgWhereInput>;
};

/** A connection to a list of items. */
export type PaidSearchSummaryConnection = {
  __typename?: 'PaidSearchSummaryConnection';
  aggregate: AggregatePaidSearchSummary;
  /** A list of edges. */
  edges: Array<Maybe<PaidSearchSummaryEdge>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type PaidSearchSummaryCreateInput = {
  aggregateData?: InputMaybe<PaidSearchAggregatedUnitCreateOneWithoutPaidSearchSummaryInput>;
  config?: InputMaybe<PaidSearchConfigCreateOneWithoutPaidSearchSummariesInput>;
  cpcReport?: InputMaybe<Scalars['Json']>;
  endDate: Scalars['DateTime'];
  org: OrgCreateOneWithoutPaidSearchSummaryInput;
  organicReport?: InputMaybe<Scalars['Json']>;
  overallBing?: InputMaybe<PaidSearchBingUnitCreateOneWithoutPaidSearchSummaryInput>;
  overallBingLocations?: InputMaybe<PaidSearchLocationBingUnitCreateOneWithoutPaidSearchSummaryInput>;
  overallCommerce?: InputMaybe<PaidSearchCommerceUnitCreateOneWithoutPaidSearchSummaryInput>;
  overallData?: InputMaybe<PaidSearchUnitCreateOneWithoutPaidSearchSummaryInput>;
  overallLocations?: InputMaybe<PaidSearchLocationUnitCreateOneWithoutPaidSearchSummaryInput>;
  overallPacingData?: InputMaybe<PaidSearchPacingDataCreateOneWithoutSummaryInput>;
  paidSearchBingCampaigns?: InputMaybe<PaidSearchBingCampaignsCreateManyInput>;
  paidSearchCampaigns?: InputMaybe<PaidSearchCampaignCreateManyWithoutPaidSearchSummaryInput>;
  reportId?: InputMaybe<Scalars['String']>;
  sharedOrgs?: InputMaybe<OrgCreateManyWithoutPaidSearchSummarySharedOrgsInput>;
  startDate: Scalars['DateTime'];
};

export type PaidSearchSummaryCreateManyWithoutSharedOrgsInput = {
  connect?: InputMaybe<Array<PaidSearchSummaryWhereUniqueInput>>;
  create?: InputMaybe<Array<PaidSearchSummaryCreateWithoutSharedOrgsInput>>;
};

export type PaidSearchSummaryCreateOneInput = {
  connect?: InputMaybe<PaidSearchSummaryWhereUniqueInput>;
  create?: InputMaybe<PaidSearchSummaryCreateInput>;
};

export type PaidSearchSummaryCreateOneWithoutOrgInput = {
  connect?: InputMaybe<PaidSearchSummaryWhereUniqueInput>;
  create?: InputMaybe<PaidSearchSummaryCreateWithoutOrgInput>;
};

export type PaidSearchSummaryCreateOneWithoutOverallBingInput = {
  connect?: InputMaybe<PaidSearchSummaryWhereUniqueInput>;
  create?: InputMaybe<PaidSearchSummaryCreateWithoutOverallBingInput>;
};

export type PaidSearchSummaryCreateOneWithoutOverallBingLocationsInput = {
  connect?: InputMaybe<PaidSearchSummaryWhereUniqueInput>;
  create?: InputMaybe<PaidSearchSummaryCreateWithoutOverallBingLocationsInput>;
};

export type PaidSearchSummaryCreateOneWithoutOverallCommerceInput = {
  connect?: InputMaybe<PaidSearchSummaryWhereUniqueInput>;
  create?: InputMaybe<PaidSearchSummaryCreateWithoutOverallCommerceInput>;
};

export type PaidSearchSummaryCreateOneWithoutOverallDataInput = {
  connect?: InputMaybe<PaidSearchSummaryWhereUniqueInput>;
  create?: InputMaybe<PaidSearchSummaryCreateWithoutOverallDataInput>;
};

export type PaidSearchSummaryCreateOneWithoutOverallLocationsInput = {
  connect?: InputMaybe<PaidSearchSummaryWhereUniqueInput>;
  create?: InputMaybe<PaidSearchSummaryCreateWithoutOverallLocationsInput>;
};

export type PaidSearchSummaryCreateOneWithoutPaidSearchCampaignsInput = {
  connect?: InputMaybe<PaidSearchSummaryWhereUniqueInput>;
  create?: InputMaybe<PaidSearchSummaryCreateWithoutPaidSearchCampaignsInput>;
};

export type PaidSearchSummaryCreateWithoutOrgInput = {
  aggregateData?: InputMaybe<PaidSearchAggregatedUnitCreateOneWithoutPaidSearchSummaryInput>;
  config?: InputMaybe<PaidSearchConfigCreateOneWithoutPaidSearchSummariesInput>;
  cpcReport?: InputMaybe<Scalars['Json']>;
  endDate: Scalars['DateTime'];
  organicReport?: InputMaybe<Scalars['Json']>;
  overallBing?: InputMaybe<PaidSearchBingUnitCreateOneWithoutPaidSearchSummaryInput>;
  overallBingLocations?: InputMaybe<PaidSearchLocationBingUnitCreateOneWithoutPaidSearchSummaryInput>;
  overallCommerce?: InputMaybe<PaidSearchCommerceUnitCreateOneWithoutPaidSearchSummaryInput>;
  overallData?: InputMaybe<PaidSearchUnitCreateOneWithoutPaidSearchSummaryInput>;
  overallLocations?: InputMaybe<PaidSearchLocationUnitCreateOneWithoutPaidSearchSummaryInput>;
  overallPacingData?: InputMaybe<PaidSearchPacingDataCreateOneWithoutSummaryInput>;
  paidSearchBingCampaigns?: InputMaybe<PaidSearchBingCampaignsCreateManyInput>;
  paidSearchCampaigns?: InputMaybe<PaidSearchCampaignCreateManyWithoutPaidSearchSummaryInput>;
  reportId?: InputMaybe<Scalars['String']>;
  sharedOrgs?: InputMaybe<OrgCreateManyWithoutPaidSearchSummarySharedOrgsInput>;
  startDate: Scalars['DateTime'];
};

export type PaidSearchSummaryCreateWithoutOverallBingInput = {
  aggregateData?: InputMaybe<PaidSearchAggregatedUnitCreateOneWithoutPaidSearchSummaryInput>;
  config?: InputMaybe<PaidSearchConfigCreateOneWithoutPaidSearchSummariesInput>;
  cpcReport?: InputMaybe<Scalars['Json']>;
  endDate: Scalars['DateTime'];
  org: OrgCreateOneWithoutPaidSearchSummaryInput;
  organicReport?: InputMaybe<Scalars['Json']>;
  overallBingLocations?: InputMaybe<PaidSearchLocationBingUnitCreateOneWithoutPaidSearchSummaryInput>;
  overallCommerce?: InputMaybe<PaidSearchCommerceUnitCreateOneWithoutPaidSearchSummaryInput>;
  overallData?: InputMaybe<PaidSearchUnitCreateOneWithoutPaidSearchSummaryInput>;
  overallLocations?: InputMaybe<PaidSearchLocationUnitCreateOneWithoutPaidSearchSummaryInput>;
  overallPacingData?: InputMaybe<PaidSearchPacingDataCreateOneWithoutSummaryInput>;
  paidSearchBingCampaigns?: InputMaybe<PaidSearchBingCampaignsCreateManyInput>;
  paidSearchCampaigns?: InputMaybe<PaidSearchCampaignCreateManyWithoutPaidSearchSummaryInput>;
  reportId?: InputMaybe<Scalars['String']>;
  sharedOrgs?: InputMaybe<OrgCreateManyWithoutPaidSearchSummarySharedOrgsInput>;
  startDate: Scalars['DateTime'];
};

export type PaidSearchSummaryCreateWithoutOverallBingLocationsInput = {
  aggregateData?: InputMaybe<PaidSearchAggregatedUnitCreateOneWithoutPaidSearchSummaryInput>;
  config?: InputMaybe<PaidSearchConfigCreateOneWithoutPaidSearchSummariesInput>;
  cpcReport?: InputMaybe<Scalars['Json']>;
  endDate: Scalars['DateTime'];
  org: OrgCreateOneWithoutPaidSearchSummaryInput;
  organicReport?: InputMaybe<Scalars['Json']>;
  overallBing?: InputMaybe<PaidSearchBingUnitCreateOneWithoutPaidSearchSummaryInput>;
  overallCommerce?: InputMaybe<PaidSearchCommerceUnitCreateOneWithoutPaidSearchSummaryInput>;
  overallData?: InputMaybe<PaidSearchUnitCreateOneWithoutPaidSearchSummaryInput>;
  overallLocations?: InputMaybe<PaidSearchLocationUnitCreateOneWithoutPaidSearchSummaryInput>;
  overallPacingData?: InputMaybe<PaidSearchPacingDataCreateOneWithoutSummaryInput>;
  paidSearchBingCampaigns?: InputMaybe<PaidSearchBingCampaignsCreateManyInput>;
  paidSearchCampaigns?: InputMaybe<PaidSearchCampaignCreateManyWithoutPaidSearchSummaryInput>;
  reportId?: InputMaybe<Scalars['String']>;
  sharedOrgs?: InputMaybe<OrgCreateManyWithoutPaidSearchSummarySharedOrgsInput>;
  startDate: Scalars['DateTime'];
};

export type PaidSearchSummaryCreateWithoutOverallCommerceInput = {
  aggregateData?: InputMaybe<PaidSearchAggregatedUnitCreateOneWithoutPaidSearchSummaryInput>;
  config?: InputMaybe<PaidSearchConfigCreateOneWithoutPaidSearchSummariesInput>;
  cpcReport?: InputMaybe<Scalars['Json']>;
  endDate: Scalars['DateTime'];
  org: OrgCreateOneWithoutPaidSearchSummaryInput;
  organicReport?: InputMaybe<Scalars['Json']>;
  overallBing?: InputMaybe<PaidSearchBingUnitCreateOneWithoutPaidSearchSummaryInput>;
  overallBingLocations?: InputMaybe<PaidSearchLocationBingUnitCreateOneWithoutPaidSearchSummaryInput>;
  overallData?: InputMaybe<PaidSearchUnitCreateOneWithoutPaidSearchSummaryInput>;
  overallLocations?: InputMaybe<PaidSearchLocationUnitCreateOneWithoutPaidSearchSummaryInput>;
  overallPacingData?: InputMaybe<PaidSearchPacingDataCreateOneWithoutSummaryInput>;
  paidSearchBingCampaigns?: InputMaybe<PaidSearchBingCampaignsCreateManyInput>;
  paidSearchCampaigns?: InputMaybe<PaidSearchCampaignCreateManyWithoutPaidSearchSummaryInput>;
  reportId?: InputMaybe<Scalars['String']>;
  sharedOrgs?: InputMaybe<OrgCreateManyWithoutPaidSearchSummarySharedOrgsInput>;
  startDate: Scalars['DateTime'];
};

export type PaidSearchSummaryCreateWithoutOverallDataInput = {
  aggregateData?: InputMaybe<PaidSearchAggregatedUnitCreateOneWithoutPaidSearchSummaryInput>;
  config?: InputMaybe<PaidSearchConfigCreateOneWithoutPaidSearchSummariesInput>;
  cpcReport?: InputMaybe<Scalars['Json']>;
  endDate: Scalars['DateTime'];
  org: OrgCreateOneWithoutPaidSearchSummaryInput;
  organicReport?: InputMaybe<Scalars['Json']>;
  overallBing?: InputMaybe<PaidSearchBingUnitCreateOneWithoutPaidSearchSummaryInput>;
  overallBingLocations?: InputMaybe<PaidSearchLocationBingUnitCreateOneWithoutPaidSearchSummaryInput>;
  overallCommerce?: InputMaybe<PaidSearchCommerceUnitCreateOneWithoutPaidSearchSummaryInput>;
  overallLocations?: InputMaybe<PaidSearchLocationUnitCreateOneWithoutPaidSearchSummaryInput>;
  overallPacingData?: InputMaybe<PaidSearchPacingDataCreateOneWithoutSummaryInput>;
  paidSearchBingCampaigns?: InputMaybe<PaidSearchBingCampaignsCreateManyInput>;
  paidSearchCampaigns?: InputMaybe<PaidSearchCampaignCreateManyWithoutPaidSearchSummaryInput>;
  reportId?: InputMaybe<Scalars['String']>;
  sharedOrgs?: InputMaybe<OrgCreateManyWithoutPaidSearchSummarySharedOrgsInput>;
  startDate: Scalars['DateTime'];
};

export type PaidSearchSummaryCreateWithoutOverallLocationsInput = {
  aggregateData?: InputMaybe<PaidSearchAggregatedUnitCreateOneWithoutPaidSearchSummaryInput>;
  config?: InputMaybe<PaidSearchConfigCreateOneWithoutPaidSearchSummariesInput>;
  cpcReport?: InputMaybe<Scalars['Json']>;
  endDate: Scalars['DateTime'];
  org: OrgCreateOneWithoutPaidSearchSummaryInput;
  organicReport?: InputMaybe<Scalars['Json']>;
  overallBing?: InputMaybe<PaidSearchBingUnitCreateOneWithoutPaidSearchSummaryInput>;
  overallBingLocations?: InputMaybe<PaidSearchLocationBingUnitCreateOneWithoutPaidSearchSummaryInput>;
  overallCommerce?: InputMaybe<PaidSearchCommerceUnitCreateOneWithoutPaidSearchSummaryInput>;
  overallData?: InputMaybe<PaidSearchUnitCreateOneWithoutPaidSearchSummaryInput>;
  overallPacingData?: InputMaybe<PaidSearchPacingDataCreateOneWithoutSummaryInput>;
  paidSearchBingCampaigns?: InputMaybe<PaidSearchBingCampaignsCreateManyInput>;
  paidSearchCampaigns?: InputMaybe<PaidSearchCampaignCreateManyWithoutPaidSearchSummaryInput>;
  reportId?: InputMaybe<Scalars['String']>;
  sharedOrgs?: InputMaybe<OrgCreateManyWithoutPaidSearchSummarySharedOrgsInput>;
  startDate: Scalars['DateTime'];
};

export type PaidSearchSummaryCreateWithoutPaidSearchCampaignsInput = {
  aggregateData?: InputMaybe<PaidSearchAggregatedUnitCreateOneWithoutPaidSearchSummaryInput>;
  config?: InputMaybe<PaidSearchConfigCreateOneWithoutPaidSearchSummariesInput>;
  cpcReport?: InputMaybe<Scalars['Json']>;
  endDate: Scalars['DateTime'];
  org: OrgCreateOneWithoutPaidSearchSummaryInput;
  organicReport?: InputMaybe<Scalars['Json']>;
  overallBing?: InputMaybe<PaidSearchBingUnitCreateOneWithoutPaidSearchSummaryInput>;
  overallBingLocations?: InputMaybe<PaidSearchLocationBingUnitCreateOneWithoutPaidSearchSummaryInput>;
  overallCommerce?: InputMaybe<PaidSearchCommerceUnitCreateOneWithoutPaidSearchSummaryInput>;
  overallData?: InputMaybe<PaidSearchUnitCreateOneWithoutPaidSearchSummaryInput>;
  overallLocations?: InputMaybe<PaidSearchLocationUnitCreateOneWithoutPaidSearchSummaryInput>;
  overallPacingData?: InputMaybe<PaidSearchPacingDataCreateOneWithoutSummaryInput>;
  paidSearchBingCampaigns?: InputMaybe<PaidSearchBingCampaignsCreateManyInput>;
  reportId?: InputMaybe<Scalars['String']>;
  sharedOrgs?: InputMaybe<OrgCreateManyWithoutPaidSearchSummarySharedOrgsInput>;
  startDate: Scalars['DateTime'];
};

export type PaidSearchSummaryCreateWithoutSharedOrgsInput = {
  aggregateData?: InputMaybe<PaidSearchAggregatedUnitCreateOneWithoutPaidSearchSummaryInput>;
  config?: InputMaybe<PaidSearchConfigCreateOneWithoutPaidSearchSummariesInput>;
  cpcReport?: InputMaybe<Scalars['Json']>;
  endDate: Scalars['DateTime'];
  org: OrgCreateOneWithoutPaidSearchSummaryInput;
  organicReport?: InputMaybe<Scalars['Json']>;
  overallBing?: InputMaybe<PaidSearchBingUnitCreateOneWithoutPaidSearchSummaryInput>;
  overallBingLocations?: InputMaybe<PaidSearchLocationBingUnitCreateOneWithoutPaidSearchSummaryInput>;
  overallCommerce?: InputMaybe<PaidSearchCommerceUnitCreateOneWithoutPaidSearchSummaryInput>;
  overallData?: InputMaybe<PaidSearchUnitCreateOneWithoutPaidSearchSummaryInput>;
  overallLocations?: InputMaybe<PaidSearchLocationUnitCreateOneWithoutPaidSearchSummaryInput>;
  overallPacingData?: InputMaybe<PaidSearchPacingDataCreateOneWithoutSummaryInput>;
  paidSearchBingCampaigns?: InputMaybe<PaidSearchBingCampaignsCreateManyInput>;
  paidSearchCampaigns?: InputMaybe<PaidSearchCampaignCreateManyWithoutPaidSearchSummaryInput>;
  reportId?: InputMaybe<Scalars['String']>;
  startDate: Scalars['DateTime'];
};

/** An edge in a connection. */
export type PaidSearchSummaryEdge = {
  __typename?: 'PaidSearchSummaryEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: PaidSearchSummary;
};

export enum PaidSearchSummaryOrderByInput {
  CpcReportAsc = 'cpcReport_ASC',
  CpcReportDesc = 'cpcReport_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  EndDateAsc = 'endDate_ASC',
  EndDateDesc = 'endDate_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  OrganicReportAsc = 'organicReport_ASC',
  OrganicReportDesc = 'organicReport_DESC',
  ReportIdAsc = 'reportId_ASC',
  ReportIdDesc = 'reportId_DESC',
  StartDateAsc = 'startDate_ASC',
  StartDateDesc = 'startDate_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC'
}

export type PaidSearchSummaryUpdateDataInput = {
  aggregateData?: InputMaybe<PaidSearchAggregatedUnitUpdateOneWithoutPaidSearchSummaryInput>;
  config?: InputMaybe<PaidSearchConfigUpdateOneWithoutPaidSearchSummariesInput>;
  cpcReport?: InputMaybe<Scalars['Json']>;
  endDate?: InputMaybe<Scalars['DateTime']>;
  org?: InputMaybe<OrgUpdateOneRequiredWithoutPaidSearchSummaryInput>;
  organicReport?: InputMaybe<Scalars['Json']>;
  overallBing?: InputMaybe<PaidSearchBingUnitUpdateOneWithoutPaidSearchSummaryInput>;
  overallBingLocations?: InputMaybe<PaidSearchLocationBingUnitUpdateOneWithoutPaidSearchSummaryInput>;
  overallCommerce?: InputMaybe<PaidSearchCommerceUnitUpdateOneWithoutPaidSearchSummaryInput>;
  overallData?: InputMaybe<PaidSearchUnitUpdateOneWithoutPaidSearchSummaryInput>;
  overallLocations?: InputMaybe<PaidSearchLocationUnitUpdateOneWithoutPaidSearchSummaryInput>;
  overallPacingData?: InputMaybe<PaidSearchPacingDataUpdateOneWithoutSummaryInput>;
  paidSearchBingCampaigns?: InputMaybe<PaidSearchBingCampaignsUpdateManyInput>;
  paidSearchCampaigns?: InputMaybe<PaidSearchCampaignUpdateManyWithoutPaidSearchSummaryInput>;
  reportId?: InputMaybe<Scalars['String']>;
  sharedOrgs?: InputMaybe<OrgUpdateManyWithoutPaidSearchSummarySharedOrgsInput>;
  startDate?: InputMaybe<Scalars['DateTime']>;
};

export type PaidSearchSummaryUpdateInput = {
  aggregateData?: InputMaybe<PaidSearchAggregatedUnitUpdateOneWithoutPaidSearchSummaryInput>;
  config?: InputMaybe<PaidSearchConfigUpdateOneWithoutPaidSearchSummariesInput>;
  cpcReport?: InputMaybe<Scalars['Json']>;
  endDate?: InputMaybe<Scalars['DateTime']>;
  org?: InputMaybe<OrgUpdateOneRequiredWithoutPaidSearchSummaryInput>;
  organicReport?: InputMaybe<Scalars['Json']>;
  overallBing?: InputMaybe<PaidSearchBingUnitUpdateOneWithoutPaidSearchSummaryInput>;
  overallBingLocations?: InputMaybe<PaidSearchLocationBingUnitUpdateOneWithoutPaidSearchSummaryInput>;
  overallCommerce?: InputMaybe<PaidSearchCommerceUnitUpdateOneWithoutPaidSearchSummaryInput>;
  overallData?: InputMaybe<PaidSearchUnitUpdateOneWithoutPaidSearchSummaryInput>;
  overallLocations?: InputMaybe<PaidSearchLocationUnitUpdateOneWithoutPaidSearchSummaryInput>;
  overallPacingData?: InputMaybe<PaidSearchPacingDataUpdateOneWithoutSummaryInput>;
  paidSearchBingCampaigns?: InputMaybe<PaidSearchBingCampaignsUpdateManyInput>;
  paidSearchCampaigns?: InputMaybe<PaidSearchCampaignUpdateManyWithoutPaidSearchSummaryInput>;
  reportId?: InputMaybe<Scalars['String']>;
  sharedOrgs?: InputMaybe<OrgUpdateManyWithoutPaidSearchSummarySharedOrgsInput>;
  startDate?: InputMaybe<Scalars['DateTime']>;
};

export type PaidSearchSummaryUpdateManyWithoutSharedOrgsInput = {
  connect?: InputMaybe<Array<PaidSearchSummaryWhereUniqueInput>>;
  create?: InputMaybe<Array<PaidSearchSummaryCreateWithoutSharedOrgsInput>>;
  delete?: InputMaybe<Array<PaidSearchSummaryWhereUniqueInput>>;
  disconnect?: InputMaybe<Array<PaidSearchSummaryWhereUniqueInput>>;
  update?: InputMaybe<Array<PaidSearchSummaryUpdateWithWhereUniqueWithoutSharedOrgsInput>>;
  upsert?: InputMaybe<Array<PaidSearchSummaryUpsertWithWhereUniqueWithoutSharedOrgsInput>>;
};

export type PaidSearchSummaryUpdateOneRequiredInput = {
  connect?: InputMaybe<PaidSearchSummaryWhereUniqueInput>;
  create?: InputMaybe<PaidSearchSummaryCreateInput>;
  update?: InputMaybe<PaidSearchSummaryUpdateDataInput>;
  upsert?: InputMaybe<PaidSearchSummaryUpsertNestedInput>;
};

export type PaidSearchSummaryUpdateOneRequiredWithoutPaidSearchCampaignsInput = {
  connect?: InputMaybe<PaidSearchSummaryWhereUniqueInput>;
  create?: InputMaybe<PaidSearchSummaryCreateWithoutPaidSearchCampaignsInput>;
  update?: InputMaybe<PaidSearchSummaryUpdateWithoutPaidSearchCampaignsDataInput>;
  upsert?: InputMaybe<PaidSearchSummaryUpsertWithoutPaidSearchCampaignsInput>;
};

export type PaidSearchSummaryUpdateOneWithoutOrgInput = {
  connect?: InputMaybe<PaidSearchSummaryWhereUniqueInput>;
  create?: InputMaybe<PaidSearchSummaryCreateWithoutOrgInput>;
  delete?: InputMaybe<Scalars['Boolean']>;
  disconnect?: InputMaybe<Scalars['Boolean']>;
  update?: InputMaybe<PaidSearchSummaryUpdateWithoutOrgDataInput>;
  upsert?: InputMaybe<PaidSearchSummaryUpsertWithoutOrgInput>;
};

export type PaidSearchSummaryUpdateOneWithoutOverallBingInput = {
  connect?: InputMaybe<PaidSearchSummaryWhereUniqueInput>;
  create?: InputMaybe<PaidSearchSummaryCreateWithoutOverallBingInput>;
  delete?: InputMaybe<Scalars['Boolean']>;
  disconnect?: InputMaybe<Scalars['Boolean']>;
  update?: InputMaybe<PaidSearchSummaryUpdateWithoutOverallBingDataInput>;
  upsert?: InputMaybe<PaidSearchSummaryUpsertWithoutOverallBingInput>;
};

export type PaidSearchSummaryUpdateOneWithoutOverallBingLocationsInput = {
  connect?: InputMaybe<PaidSearchSummaryWhereUniqueInput>;
  create?: InputMaybe<PaidSearchSummaryCreateWithoutOverallBingLocationsInput>;
  delete?: InputMaybe<Scalars['Boolean']>;
  disconnect?: InputMaybe<Scalars['Boolean']>;
  update?: InputMaybe<PaidSearchSummaryUpdateWithoutOverallBingLocationsDataInput>;
  upsert?: InputMaybe<PaidSearchSummaryUpsertWithoutOverallBingLocationsInput>;
};

export type PaidSearchSummaryUpdateOneWithoutOverallCommerceInput = {
  connect?: InputMaybe<PaidSearchSummaryWhereUniqueInput>;
  create?: InputMaybe<PaidSearchSummaryCreateWithoutOverallCommerceInput>;
  delete?: InputMaybe<Scalars['Boolean']>;
  disconnect?: InputMaybe<Scalars['Boolean']>;
  update?: InputMaybe<PaidSearchSummaryUpdateWithoutOverallCommerceDataInput>;
  upsert?: InputMaybe<PaidSearchSummaryUpsertWithoutOverallCommerceInput>;
};

export type PaidSearchSummaryUpdateOneWithoutOverallDataInput = {
  connect?: InputMaybe<PaidSearchSummaryWhereUniqueInput>;
  create?: InputMaybe<PaidSearchSummaryCreateWithoutOverallDataInput>;
  delete?: InputMaybe<Scalars['Boolean']>;
  disconnect?: InputMaybe<Scalars['Boolean']>;
  update?: InputMaybe<PaidSearchSummaryUpdateWithoutOverallDataDataInput>;
  upsert?: InputMaybe<PaidSearchSummaryUpsertWithoutOverallDataInput>;
};

export type PaidSearchSummaryUpdateOneWithoutOverallLocationsInput = {
  connect?: InputMaybe<PaidSearchSummaryWhereUniqueInput>;
  create?: InputMaybe<PaidSearchSummaryCreateWithoutOverallLocationsInput>;
  delete?: InputMaybe<Scalars['Boolean']>;
  disconnect?: InputMaybe<Scalars['Boolean']>;
  update?: InputMaybe<PaidSearchSummaryUpdateWithoutOverallLocationsDataInput>;
  upsert?: InputMaybe<PaidSearchSummaryUpsertWithoutOverallLocationsInput>;
};

export type PaidSearchSummaryUpdateWithWhereUniqueWithoutSharedOrgsInput = {
  data: PaidSearchSummaryUpdateWithoutSharedOrgsDataInput;
  where: PaidSearchSummaryWhereUniqueInput;
};

export type PaidSearchSummaryUpdateWithoutOrgDataInput = {
  aggregateData?: InputMaybe<PaidSearchAggregatedUnitUpdateOneWithoutPaidSearchSummaryInput>;
  config?: InputMaybe<PaidSearchConfigUpdateOneWithoutPaidSearchSummariesInput>;
  cpcReport?: InputMaybe<Scalars['Json']>;
  endDate?: InputMaybe<Scalars['DateTime']>;
  organicReport?: InputMaybe<Scalars['Json']>;
  overallBing?: InputMaybe<PaidSearchBingUnitUpdateOneWithoutPaidSearchSummaryInput>;
  overallBingLocations?: InputMaybe<PaidSearchLocationBingUnitUpdateOneWithoutPaidSearchSummaryInput>;
  overallCommerce?: InputMaybe<PaidSearchCommerceUnitUpdateOneWithoutPaidSearchSummaryInput>;
  overallData?: InputMaybe<PaidSearchUnitUpdateOneWithoutPaidSearchSummaryInput>;
  overallLocations?: InputMaybe<PaidSearchLocationUnitUpdateOneWithoutPaidSearchSummaryInput>;
  overallPacingData?: InputMaybe<PaidSearchPacingDataUpdateOneWithoutSummaryInput>;
  paidSearchBingCampaigns?: InputMaybe<PaidSearchBingCampaignsUpdateManyInput>;
  paidSearchCampaigns?: InputMaybe<PaidSearchCampaignUpdateManyWithoutPaidSearchSummaryInput>;
  reportId?: InputMaybe<Scalars['String']>;
  sharedOrgs?: InputMaybe<OrgUpdateManyWithoutPaidSearchSummarySharedOrgsInput>;
  startDate?: InputMaybe<Scalars['DateTime']>;
};

export type PaidSearchSummaryUpdateWithoutOverallBingDataInput = {
  aggregateData?: InputMaybe<PaidSearchAggregatedUnitUpdateOneWithoutPaidSearchSummaryInput>;
  config?: InputMaybe<PaidSearchConfigUpdateOneWithoutPaidSearchSummariesInput>;
  cpcReport?: InputMaybe<Scalars['Json']>;
  endDate?: InputMaybe<Scalars['DateTime']>;
  org?: InputMaybe<OrgUpdateOneRequiredWithoutPaidSearchSummaryInput>;
  organicReport?: InputMaybe<Scalars['Json']>;
  overallBingLocations?: InputMaybe<PaidSearchLocationBingUnitUpdateOneWithoutPaidSearchSummaryInput>;
  overallCommerce?: InputMaybe<PaidSearchCommerceUnitUpdateOneWithoutPaidSearchSummaryInput>;
  overallData?: InputMaybe<PaidSearchUnitUpdateOneWithoutPaidSearchSummaryInput>;
  overallLocations?: InputMaybe<PaidSearchLocationUnitUpdateOneWithoutPaidSearchSummaryInput>;
  overallPacingData?: InputMaybe<PaidSearchPacingDataUpdateOneWithoutSummaryInput>;
  paidSearchBingCampaigns?: InputMaybe<PaidSearchBingCampaignsUpdateManyInput>;
  paidSearchCampaigns?: InputMaybe<PaidSearchCampaignUpdateManyWithoutPaidSearchSummaryInput>;
  reportId?: InputMaybe<Scalars['String']>;
  sharedOrgs?: InputMaybe<OrgUpdateManyWithoutPaidSearchSummarySharedOrgsInput>;
  startDate?: InputMaybe<Scalars['DateTime']>;
};

export type PaidSearchSummaryUpdateWithoutOverallBingLocationsDataInput = {
  aggregateData?: InputMaybe<PaidSearchAggregatedUnitUpdateOneWithoutPaidSearchSummaryInput>;
  config?: InputMaybe<PaidSearchConfigUpdateOneWithoutPaidSearchSummariesInput>;
  cpcReport?: InputMaybe<Scalars['Json']>;
  endDate?: InputMaybe<Scalars['DateTime']>;
  org?: InputMaybe<OrgUpdateOneRequiredWithoutPaidSearchSummaryInput>;
  organicReport?: InputMaybe<Scalars['Json']>;
  overallBing?: InputMaybe<PaidSearchBingUnitUpdateOneWithoutPaidSearchSummaryInput>;
  overallCommerce?: InputMaybe<PaidSearchCommerceUnitUpdateOneWithoutPaidSearchSummaryInput>;
  overallData?: InputMaybe<PaidSearchUnitUpdateOneWithoutPaidSearchSummaryInput>;
  overallLocations?: InputMaybe<PaidSearchLocationUnitUpdateOneWithoutPaidSearchSummaryInput>;
  overallPacingData?: InputMaybe<PaidSearchPacingDataUpdateOneWithoutSummaryInput>;
  paidSearchBingCampaigns?: InputMaybe<PaidSearchBingCampaignsUpdateManyInput>;
  paidSearchCampaigns?: InputMaybe<PaidSearchCampaignUpdateManyWithoutPaidSearchSummaryInput>;
  reportId?: InputMaybe<Scalars['String']>;
  sharedOrgs?: InputMaybe<OrgUpdateManyWithoutPaidSearchSummarySharedOrgsInput>;
  startDate?: InputMaybe<Scalars['DateTime']>;
};

export type PaidSearchSummaryUpdateWithoutOverallCommerceDataInput = {
  aggregateData?: InputMaybe<PaidSearchAggregatedUnitUpdateOneWithoutPaidSearchSummaryInput>;
  config?: InputMaybe<PaidSearchConfigUpdateOneWithoutPaidSearchSummariesInput>;
  cpcReport?: InputMaybe<Scalars['Json']>;
  endDate?: InputMaybe<Scalars['DateTime']>;
  org?: InputMaybe<OrgUpdateOneRequiredWithoutPaidSearchSummaryInput>;
  organicReport?: InputMaybe<Scalars['Json']>;
  overallBing?: InputMaybe<PaidSearchBingUnitUpdateOneWithoutPaidSearchSummaryInput>;
  overallBingLocations?: InputMaybe<PaidSearchLocationBingUnitUpdateOneWithoutPaidSearchSummaryInput>;
  overallData?: InputMaybe<PaidSearchUnitUpdateOneWithoutPaidSearchSummaryInput>;
  overallLocations?: InputMaybe<PaidSearchLocationUnitUpdateOneWithoutPaidSearchSummaryInput>;
  overallPacingData?: InputMaybe<PaidSearchPacingDataUpdateOneWithoutSummaryInput>;
  paidSearchBingCampaigns?: InputMaybe<PaidSearchBingCampaignsUpdateManyInput>;
  paidSearchCampaigns?: InputMaybe<PaidSearchCampaignUpdateManyWithoutPaidSearchSummaryInput>;
  reportId?: InputMaybe<Scalars['String']>;
  sharedOrgs?: InputMaybe<OrgUpdateManyWithoutPaidSearchSummarySharedOrgsInput>;
  startDate?: InputMaybe<Scalars['DateTime']>;
};

export type PaidSearchSummaryUpdateWithoutOverallDataDataInput = {
  aggregateData?: InputMaybe<PaidSearchAggregatedUnitUpdateOneWithoutPaidSearchSummaryInput>;
  config?: InputMaybe<PaidSearchConfigUpdateOneWithoutPaidSearchSummariesInput>;
  cpcReport?: InputMaybe<Scalars['Json']>;
  endDate?: InputMaybe<Scalars['DateTime']>;
  org?: InputMaybe<OrgUpdateOneRequiredWithoutPaidSearchSummaryInput>;
  organicReport?: InputMaybe<Scalars['Json']>;
  overallBing?: InputMaybe<PaidSearchBingUnitUpdateOneWithoutPaidSearchSummaryInput>;
  overallBingLocations?: InputMaybe<PaidSearchLocationBingUnitUpdateOneWithoutPaidSearchSummaryInput>;
  overallCommerce?: InputMaybe<PaidSearchCommerceUnitUpdateOneWithoutPaidSearchSummaryInput>;
  overallLocations?: InputMaybe<PaidSearchLocationUnitUpdateOneWithoutPaidSearchSummaryInput>;
  overallPacingData?: InputMaybe<PaidSearchPacingDataUpdateOneWithoutSummaryInput>;
  paidSearchBingCampaigns?: InputMaybe<PaidSearchBingCampaignsUpdateManyInput>;
  paidSearchCampaigns?: InputMaybe<PaidSearchCampaignUpdateManyWithoutPaidSearchSummaryInput>;
  reportId?: InputMaybe<Scalars['String']>;
  sharedOrgs?: InputMaybe<OrgUpdateManyWithoutPaidSearchSummarySharedOrgsInput>;
  startDate?: InputMaybe<Scalars['DateTime']>;
};

export type PaidSearchSummaryUpdateWithoutOverallLocationsDataInput = {
  aggregateData?: InputMaybe<PaidSearchAggregatedUnitUpdateOneWithoutPaidSearchSummaryInput>;
  config?: InputMaybe<PaidSearchConfigUpdateOneWithoutPaidSearchSummariesInput>;
  cpcReport?: InputMaybe<Scalars['Json']>;
  endDate?: InputMaybe<Scalars['DateTime']>;
  org?: InputMaybe<OrgUpdateOneRequiredWithoutPaidSearchSummaryInput>;
  organicReport?: InputMaybe<Scalars['Json']>;
  overallBing?: InputMaybe<PaidSearchBingUnitUpdateOneWithoutPaidSearchSummaryInput>;
  overallBingLocations?: InputMaybe<PaidSearchLocationBingUnitUpdateOneWithoutPaidSearchSummaryInput>;
  overallCommerce?: InputMaybe<PaidSearchCommerceUnitUpdateOneWithoutPaidSearchSummaryInput>;
  overallData?: InputMaybe<PaidSearchUnitUpdateOneWithoutPaidSearchSummaryInput>;
  overallPacingData?: InputMaybe<PaidSearchPacingDataUpdateOneWithoutSummaryInput>;
  paidSearchBingCampaigns?: InputMaybe<PaidSearchBingCampaignsUpdateManyInput>;
  paidSearchCampaigns?: InputMaybe<PaidSearchCampaignUpdateManyWithoutPaidSearchSummaryInput>;
  reportId?: InputMaybe<Scalars['String']>;
  sharedOrgs?: InputMaybe<OrgUpdateManyWithoutPaidSearchSummarySharedOrgsInput>;
  startDate?: InputMaybe<Scalars['DateTime']>;
};

export type PaidSearchSummaryUpdateWithoutPaidSearchCampaignsDataInput = {
  aggregateData?: InputMaybe<PaidSearchAggregatedUnitUpdateOneWithoutPaidSearchSummaryInput>;
  config?: InputMaybe<PaidSearchConfigUpdateOneWithoutPaidSearchSummariesInput>;
  cpcReport?: InputMaybe<Scalars['Json']>;
  endDate?: InputMaybe<Scalars['DateTime']>;
  org?: InputMaybe<OrgUpdateOneRequiredWithoutPaidSearchSummaryInput>;
  organicReport?: InputMaybe<Scalars['Json']>;
  overallBing?: InputMaybe<PaidSearchBingUnitUpdateOneWithoutPaidSearchSummaryInput>;
  overallBingLocations?: InputMaybe<PaidSearchLocationBingUnitUpdateOneWithoutPaidSearchSummaryInput>;
  overallCommerce?: InputMaybe<PaidSearchCommerceUnitUpdateOneWithoutPaidSearchSummaryInput>;
  overallData?: InputMaybe<PaidSearchUnitUpdateOneWithoutPaidSearchSummaryInput>;
  overallLocations?: InputMaybe<PaidSearchLocationUnitUpdateOneWithoutPaidSearchSummaryInput>;
  overallPacingData?: InputMaybe<PaidSearchPacingDataUpdateOneWithoutSummaryInput>;
  paidSearchBingCampaigns?: InputMaybe<PaidSearchBingCampaignsUpdateManyInput>;
  reportId?: InputMaybe<Scalars['String']>;
  sharedOrgs?: InputMaybe<OrgUpdateManyWithoutPaidSearchSummarySharedOrgsInput>;
  startDate?: InputMaybe<Scalars['DateTime']>;
};

export type PaidSearchSummaryUpdateWithoutSharedOrgsDataInput = {
  aggregateData?: InputMaybe<PaidSearchAggregatedUnitUpdateOneWithoutPaidSearchSummaryInput>;
  config?: InputMaybe<PaidSearchConfigUpdateOneWithoutPaidSearchSummariesInput>;
  cpcReport?: InputMaybe<Scalars['Json']>;
  endDate?: InputMaybe<Scalars['DateTime']>;
  org?: InputMaybe<OrgUpdateOneRequiredWithoutPaidSearchSummaryInput>;
  organicReport?: InputMaybe<Scalars['Json']>;
  overallBing?: InputMaybe<PaidSearchBingUnitUpdateOneWithoutPaidSearchSummaryInput>;
  overallBingLocations?: InputMaybe<PaidSearchLocationBingUnitUpdateOneWithoutPaidSearchSummaryInput>;
  overallCommerce?: InputMaybe<PaidSearchCommerceUnitUpdateOneWithoutPaidSearchSummaryInput>;
  overallData?: InputMaybe<PaidSearchUnitUpdateOneWithoutPaidSearchSummaryInput>;
  overallLocations?: InputMaybe<PaidSearchLocationUnitUpdateOneWithoutPaidSearchSummaryInput>;
  overallPacingData?: InputMaybe<PaidSearchPacingDataUpdateOneWithoutSummaryInput>;
  paidSearchBingCampaigns?: InputMaybe<PaidSearchBingCampaignsUpdateManyInput>;
  paidSearchCampaigns?: InputMaybe<PaidSearchCampaignUpdateManyWithoutPaidSearchSummaryInput>;
  reportId?: InputMaybe<Scalars['String']>;
  startDate?: InputMaybe<Scalars['DateTime']>;
};

export type PaidSearchSummaryUpsertNestedInput = {
  create: PaidSearchSummaryCreateInput;
  update: PaidSearchSummaryUpdateDataInput;
};

export type PaidSearchSummaryUpsertWithWhereUniqueWithoutSharedOrgsInput = {
  create: PaidSearchSummaryCreateWithoutSharedOrgsInput;
  update: PaidSearchSummaryUpdateWithoutSharedOrgsDataInput;
  where: PaidSearchSummaryWhereUniqueInput;
};

export type PaidSearchSummaryUpsertWithoutOrgInput = {
  create: PaidSearchSummaryCreateWithoutOrgInput;
  update: PaidSearchSummaryUpdateWithoutOrgDataInput;
};

export type PaidSearchSummaryUpsertWithoutOverallBingInput = {
  create: PaidSearchSummaryCreateWithoutOverallBingInput;
  update: PaidSearchSummaryUpdateWithoutOverallBingDataInput;
};

export type PaidSearchSummaryUpsertWithoutOverallBingLocationsInput = {
  create: PaidSearchSummaryCreateWithoutOverallBingLocationsInput;
  update: PaidSearchSummaryUpdateWithoutOverallBingLocationsDataInput;
};

export type PaidSearchSummaryUpsertWithoutOverallCommerceInput = {
  create: PaidSearchSummaryCreateWithoutOverallCommerceInput;
  update: PaidSearchSummaryUpdateWithoutOverallCommerceDataInput;
};

export type PaidSearchSummaryUpsertWithoutOverallDataInput = {
  create: PaidSearchSummaryCreateWithoutOverallDataInput;
  update: PaidSearchSummaryUpdateWithoutOverallDataDataInput;
};

export type PaidSearchSummaryUpsertWithoutOverallLocationsInput = {
  create: PaidSearchSummaryCreateWithoutOverallLocationsInput;
  update: PaidSearchSummaryUpdateWithoutOverallLocationsDataInput;
};

export type PaidSearchSummaryUpsertWithoutPaidSearchCampaignsInput = {
  create: PaidSearchSummaryCreateWithoutPaidSearchCampaignsInput;
  update: PaidSearchSummaryUpdateWithoutPaidSearchCampaignsDataInput;
};

export type PaidSearchSummaryWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<PaidSearchSummaryWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<PaidSearchSummaryWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<PaidSearchSummaryWhereInput>>;
  aggregateData?: InputMaybe<PaidSearchAggregatedUnitWhereInput>;
  config?: InputMaybe<PaidSearchConfigWhereInput>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  endDate?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  endDate_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  endDate_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  endDate_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  endDate_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  endDate_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  endDate_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  endDate_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: InputMaybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: InputMaybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: InputMaybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  org?: InputMaybe<OrgWhereInput>;
  overallBing?: InputMaybe<PaidSearchBingUnitWhereInput>;
  overallBingLocations?: InputMaybe<PaidSearchLocationBingUnitWhereInput>;
  overallCommerce?: InputMaybe<PaidSearchCommerceUnitWhereInput>;
  overallData?: InputMaybe<PaidSearchUnitWhereInput>;
  overallLocations?: InputMaybe<PaidSearchLocationUnitWhereInput>;
  overallPacingData?: InputMaybe<PaidSearchPacingDataWhereInput>;
  paidSearchBingCampaigns_every?: InputMaybe<PaidSearchBingCampaignsWhereInput>;
  paidSearchBingCampaigns_none?: InputMaybe<PaidSearchBingCampaignsWhereInput>;
  paidSearchBingCampaigns_some?: InputMaybe<PaidSearchBingCampaignsWhereInput>;
  paidSearchCampaigns_every?: InputMaybe<PaidSearchCampaignWhereInput>;
  paidSearchCampaigns_none?: InputMaybe<PaidSearchCampaignWhereInput>;
  paidSearchCampaigns_some?: InputMaybe<PaidSearchCampaignWhereInput>;
  reportId?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  reportId_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  reportId_ends_with?: InputMaybe<Scalars['String']>;
  /** All values greater than the given value. */
  reportId_gt?: InputMaybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  reportId_gte?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  reportId_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  reportId_lt?: InputMaybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  reportId_lte?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  reportId_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  reportId_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string. */
  reportId_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  reportId_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  reportId_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  reportId_starts_with?: InputMaybe<Scalars['String']>;
  sharedOrgs_every?: InputMaybe<OrgWhereInput>;
  sharedOrgs_none?: InputMaybe<OrgWhereInput>;
  sharedOrgs_some?: InputMaybe<OrgWhereInput>;
  startDate?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  startDate_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  startDate_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  startDate_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  startDate_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  startDate_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  startDate_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  startDate_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
};

export type PaidSearchSummaryWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export type PaidSearchUnit = Node & {
  __typename?: 'PaidSearchUnit';
  byDate?: Maybe<Array<PaidSearchDateUnit>>;
  clicks?: Maybe<Scalars['Int']>;
  conversionRate?: Maybe<Scalars['Float']>;
  conversions?: Maybe<Scalars['Float']>;
  conversionsByDate?: Maybe<Scalars['Json']>;
  cost?: Maybe<Scalars['Float']>;
  cpc?: Maybe<Scalars['Float']>;
  cpm?: Maybe<Scalars['Float']>;
  ctr?: Maybe<Scalars['Float']>;
  id: Scalars['ID'];
  impressions?: Maybe<Scalars['Int']>;
  interactionRate?: Maybe<Scalars['Float']>;
  keywords?: Maybe<Scalars['Float']>;
  locations?: Maybe<Scalars['Float']>;
  pacing?: Maybe<Scalars['Float']>;
  paidSearchCampaign?: Maybe<PaidSearchCampaign>;
  paidSearchSummary?: Maybe<PaidSearchSummary>;
  phoneCalls?: Maybe<Scalars['Float']>;
  rawCost?: Maybe<Scalars['Float']>;
  revenue?: Maybe<Scalars['Float']>;
  roas?: Maybe<Scalars['Float']>;
  spend?: Maybe<Scalars['Float']>;
  topKeywordsByClicks?: Maybe<Scalars['Json']>;
  topKeywordsByImpressions?: Maybe<Scalars['Json']>;
  topLocationsByClicks?: Maybe<Scalars['Json']>;
  topLocationsByImpressions?: Maybe<Scalars['Json']>;
};


export type PaidSearchUnitByDateArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<PaidSearchDateUnitOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<PaidSearchDateUnitWhereInput>;
};

export type PaidSearchUnitCreateOneWithoutPaidSearchCampaignInput = {
  connect?: InputMaybe<PaidSearchUnitWhereUniqueInput>;
  create?: InputMaybe<PaidSearchUnitCreateWithoutPaidSearchCampaignInput>;
};

export type PaidSearchUnitCreateOneWithoutPaidSearchSummaryInput = {
  connect?: InputMaybe<PaidSearchUnitWhereUniqueInput>;
  create?: InputMaybe<PaidSearchUnitCreateWithoutPaidSearchSummaryInput>;
};

export type PaidSearchUnitCreateWithoutPaidSearchCampaignInput = {
  byDate?: InputMaybe<PaidSearchDateUnitCreateManyWithoutPaidSearchUnitInput>;
  clicks?: InputMaybe<Scalars['Int']>;
  conversionRate?: InputMaybe<Scalars['Float']>;
  conversions?: InputMaybe<Scalars['Float']>;
  conversionsByDate?: InputMaybe<Scalars['Json']>;
  cost?: InputMaybe<Scalars['Float']>;
  cpc?: InputMaybe<Scalars['Float']>;
  cpm?: InputMaybe<Scalars['Float']>;
  ctr?: InputMaybe<Scalars['Float']>;
  impressions?: InputMaybe<Scalars['Int']>;
  interactionRate?: InputMaybe<Scalars['Float']>;
  keywords?: InputMaybe<Scalars['Float']>;
  locations?: InputMaybe<Scalars['Float']>;
  pacing?: InputMaybe<Scalars['Float']>;
  paidSearchSummary?: InputMaybe<PaidSearchSummaryCreateOneWithoutOverallDataInput>;
  phoneCalls?: InputMaybe<Scalars['Float']>;
  rawCost?: InputMaybe<Scalars['Float']>;
  revenue?: InputMaybe<Scalars['Float']>;
  roas?: InputMaybe<Scalars['Float']>;
  spend?: InputMaybe<Scalars['Float']>;
  topKeywordsByClicks?: InputMaybe<Scalars['Json']>;
  topKeywordsByImpressions?: InputMaybe<Scalars['Json']>;
  topLocationsByClicks?: InputMaybe<Scalars['Json']>;
  topLocationsByImpressions?: InputMaybe<Scalars['Json']>;
};

export type PaidSearchUnitCreateWithoutPaidSearchSummaryInput = {
  byDate?: InputMaybe<PaidSearchDateUnitCreateManyWithoutPaidSearchUnitInput>;
  clicks?: InputMaybe<Scalars['Int']>;
  conversionRate?: InputMaybe<Scalars['Float']>;
  conversions?: InputMaybe<Scalars['Float']>;
  conversionsByDate?: InputMaybe<Scalars['Json']>;
  cost?: InputMaybe<Scalars['Float']>;
  cpc?: InputMaybe<Scalars['Float']>;
  cpm?: InputMaybe<Scalars['Float']>;
  ctr?: InputMaybe<Scalars['Float']>;
  impressions?: InputMaybe<Scalars['Int']>;
  interactionRate?: InputMaybe<Scalars['Float']>;
  keywords?: InputMaybe<Scalars['Float']>;
  locations?: InputMaybe<Scalars['Float']>;
  pacing?: InputMaybe<Scalars['Float']>;
  paidSearchCampaign?: InputMaybe<PaidSearchCampaignCreateOneWithoutDataInput>;
  phoneCalls?: InputMaybe<Scalars['Float']>;
  rawCost?: InputMaybe<Scalars['Float']>;
  revenue?: InputMaybe<Scalars['Float']>;
  roas?: InputMaybe<Scalars['Float']>;
  spend?: InputMaybe<Scalars['Float']>;
  topKeywordsByClicks?: InputMaybe<Scalars['Json']>;
  topKeywordsByImpressions?: InputMaybe<Scalars['Json']>;
  topLocationsByClicks?: InputMaybe<Scalars['Json']>;
  topLocationsByImpressions?: InputMaybe<Scalars['Json']>;
};

export type PaidSearchUnitUpdateOneWithoutPaidSearchCampaignInput = {
  connect?: InputMaybe<PaidSearchUnitWhereUniqueInput>;
  create?: InputMaybe<PaidSearchUnitCreateWithoutPaidSearchCampaignInput>;
  delete?: InputMaybe<Scalars['Boolean']>;
  disconnect?: InputMaybe<Scalars['Boolean']>;
  update?: InputMaybe<PaidSearchUnitUpdateWithoutPaidSearchCampaignDataInput>;
  upsert?: InputMaybe<PaidSearchUnitUpsertWithoutPaidSearchCampaignInput>;
};

export type PaidSearchUnitUpdateOneWithoutPaidSearchSummaryInput = {
  connect?: InputMaybe<PaidSearchUnitWhereUniqueInput>;
  create?: InputMaybe<PaidSearchUnitCreateWithoutPaidSearchSummaryInput>;
  delete?: InputMaybe<Scalars['Boolean']>;
  disconnect?: InputMaybe<Scalars['Boolean']>;
  update?: InputMaybe<PaidSearchUnitUpdateWithoutPaidSearchSummaryDataInput>;
  upsert?: InputMaybe<PaidSearchUnitUpsertWithoutPaidSearchSummaryInput>;
};

export type PaidSearchUnitUpdateWithoutPaidSearchCampaignDataInput = {
  byDate?: InputMaybe<PaidSearchDateUnitUpdateManyWithoutPaidSearchUnitInput>;
  clicks?: InputMaybe<Scalars['Int']>;
  conversionRate?: InputMaybe<Scalars['Float']>;
  conversions?: InputMaybe<Scalars['Float']>;
  conversionsByDate?: InputMaybe<Scalars['Json']>;
  cost?: InputMaybe<Scalars['Float']>;
  cpc?: InputMaybe<Scalars['Float']>;
  cpm?: InputMaybe<Scalars['Float']>;
  ctr?: InputMaybe<Scalars['Float']>;
  impressions?: InputMaybe<Scalars['Int']>;
  interactionRate?: InputMaybe<Scalars['Float']>;
  keywords?: InputMaybe<Scalars['Float']>;
  locations?: InputMaybe<Scalars['Float']>;
  pacing?: InputMaybe<Scalars['Float']>;
  paidSearchSummary?: InputMaybe<PaidSearchSummaryUpdateOneWithoutOverallDataInput>;
  phoneCalls?: InputMaybe<Scalars['Float']>;
  rawCost?: InputMaybe<Scalars['Float']>;
  revenue?: InputMaybe<Scalars['Float']>;
  roas?: InputMaybe<Scalars['Float']>;
  spend?: InputMaybe<Scalars['Float']>;
  topKeywordsByClicks?: InputMaybe<Scalars['Json']>;
  topKeywordsByImpressions?: InputMaybe<Scalars['Json']>;
  topLocationsByClicks?: InputMaybe<Scalars['Json']>;
  topLocationsByImpressions?: InputMaybe<Scalars['Json']>;
};

export type PaidSearchUnitUpdateWithoutPaidSearchSummaryDataInput = {
  byDate?: InputMaybe<PaidSearchDateUnitUpdateManyWithoutPaidSearchUnitInput>;
  clicks?: InputMaybe<Scalars['Int']>;
  conversionRate?: InputMaybe<Scalars['Float']>;
  conversions?: InputMaybe<Scalars['Float']>;
  conversionsByDate?: InputMaybe<Scalars['Json']>;
  cost?: InputMaybe<Scalars['Float']>;
  cpc?: InputMaybe<Scalars['Float']>;
  cpm?: InputMaybe<Scalars['Float']>;
  ctr?: InputMaybe<Scalars['Float']>;
  impressions?: InputMaybe<Scalars['Int']>;
  interactionRate?: InputMaybe<Scalars['Float']>;
  keywords?: InputMaybe<Scalars['Float']>;
  locations?: InputMaybe<Scalars['Float']>;
  pacing?: InputMaybe<Scalars['Float']>;
  paidSearchCampaign?: InputMaybe<PaidSearchCampaignUpdateOneWithoutDataInput>;
  phoneCalls?: InputMaybe<Scalars['Float']>;
  rawCost?: InputMaybe<Scalars['Float']>;
  revenue?: InputMaybe<Scalars['Float']>;
  roas?: InputMaybe<Scalars['Float']>;
  spend?: InputMaybe<Scalars['Float']>;
  topKeywordsByClicks?: InputMaybe<Scalars['Json']>;
  topKeywordsByImpressions?: InputMaybe<Scalars['Json']>;
  topLocationsByClicks?: InputMaybe<Scalars['Json']>;
  topLocationsByImpressions?: InputMaybe<Scalars['Json']>;
};

export type PaidSearchUnitUpsertWithoutPaidSearchCampaignInput = {
  create: PaidSearchUnitCreateWithoutPaidSearchCampaignInput;
  update: PaidSearchUnitUpdateWithoutPaidSearchCampaignDataInput;
};

export type PaidSearchUnitUpsertWithoutPaidSearchSummaryInput = {
  create: PaidSearchUnitCreateWithoutPaidSearchSummaryInput;
  update: PaidSearchUnitUpdateWithoutPaidSearchSummaryDataInput;
};

export type PaidSearchUnitWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<PaidSearchUnitWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<PaidSearchUnitWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<PaidSearchUnitWhereInput>>;
  byDate_every?: InputMaybe<PaidSearchDateUnitWhereInput>;
  byDate_none?: InputMaybe<PaidSearchDateUnitWhereInput>;
  byDate_some?: InputMaybe<PaidSearchDateUnitWhereInput>;
  clicks?: InputMaybe<Scalars['Int']>;
  /** All values greater than the given value. */
  clicks_gt?: InputMaybe<Scalars['Int']>;
  /** All values greater than or equal the given value. */
  clicks_gte?: InputMaybe<Scalars['Int']>;
  /** All values that are contained in given list. */
  clicks_in?: InputMaybe<Array<Scalars['Int']>>;
  /** All values less than the given value. */
  clicks_lt?: InputMaybe<Scalars['Int']>;
  /** All values less than or equal the given value. */
  clicks_lte?: InputMaybe<Scalars['Int']>;
  /** All values that are not equal to given value. */
  clicks_not?: InputMaybe<Scalars['Int']>;
  /** All values that are not contained in given list. */
  clicks_not_in?: InputMaybe<Array<Scalars['Int']>>;
  conversionRate?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  conversionRate_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  conversionRate_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  conversionRate_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  conversionRate_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  conversionRate_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  conversionRate_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  conversionRate_not_in?: InputMaybe<Array<Scalars['Float']>>;
  conversions?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  conversions_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  conversions_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  conversions_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  conversions_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  conversions_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  conversions_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  conversions_not_in?: InputMaybe<Array<Scalars['Float']>>;
  cost?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  cost_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  cost_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  cost_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  cost_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  cost_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  cost_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  cost_not_in?: InputMaybe<Array<Scalars['Float']>>;
  cpc?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  cpc_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  cpc_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  cpc_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  cpc_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  cpc_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  cpc_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  cpc_not_in?: InputMaybe<Array<Scalars['Float']>>;
  cpm?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  cpm_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  cpm_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  cpm_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  cpm_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  cpm_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  cpm_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  cpm_not_in?: InputMaybe<Array<Scalars['Float']>>;
  ctr?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  ctr_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  ctr_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  ctr_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  ctr_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  ctr_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  ctr_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  ctr_not_in?: InputMaybe<Array<Scalars['Float']>>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: InputMaybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: InputMaybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: InputMaybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  impressions?: InputMaybe<Scalars['Int']>;
  /** All values greater than the given value. */
  impressions_gt?: InputMaybe<Scalars['Int']>;
  /** All values greater than or equal the given value. */
  impressions_gte?: InputMaybe<Scalars['Int']>;
  /** All values that are contained in given list. */
  impressions_in?: InputMaybe<Array<Scalars['Int']>>;
  /** All values less than the given value. */
  impressions_lt?: InputMaybe<Scalars['Int']>;
  /** All values less than or equal the given value. */
  impressions_lte?: InputMaybe<Scalars['Int']>;
  /** All values that are not equal to given value. */
  impressions_not?: InputMaybe<Scalars['Int']>;
  /** All values that are not contained in given list. */
  impressions_not_in?: InputMaybe<Array<Scalars['Int']>>;
  interactionRate?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  interactionRate_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  interactionRate_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  interactionRate_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  interactionRate_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  interactionRate_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  interactionRate_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  interactionRate_not_in?: InputMaybe<Array<Scalars['Float']>>;
  keywords?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  keywords_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  keywords_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  keywords_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  keywords_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  keywords_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  keywords_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  keywords_not_in?: InputMaybe<Array<Scalars['Float']>>;
  locations?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  locations_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  locations_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  locations_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  locations_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  locations_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  locations_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  locations_not_in?: InputMaybe<Array<Scalars['Float']>>;
  pacing?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  pacing_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  pacing_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  pacing_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  pacing_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  pacing_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  pacing_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  pacing_not_in?: InputMaybe<Array<Scalars['Float']>>;
  paidSearchCampaign?: InputMaybe<PaidSearchCampaignWhereInput>;
  paidSearchSummary?: InputMaybe<PaidSearchSummaryWhereInput>;
  phoneCalls?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  phoneCalls_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  phoneCalls_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  phoneCalls_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  phoneCalls_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  phoneCalls_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  phoneCalls_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  phoneCalls_not_in?: InputMaybe<Array<Scalars['Float']>>;
  rawCost?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  rawCost_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  rawCost_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  rawCost_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  rawCost_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  rawCost_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  rawCost_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  rawCost_not_in?: InputMaybe<Array<Scalars['Float']>>;
  revenue?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  revenue_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  revenue_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  revenue_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  revenue_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  revenue_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  revenue_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  revenue_not_in?: InputMaybe<Array<Scalars['Float']>>;
  roas?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  roas_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  roas_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  roas_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  roas_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  roas_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  roas_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  roas_not_in?: InputMaybe<Array<Scalars['Float']>>;
  spend?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  spend_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  spend_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  spend_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  spend_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  spend_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  spend_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  spend_not_in?: InputMaybe<Array<Scalars['Float']>>;
};

export type PaidSearchUnitWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export type PaidSerchContainter = {
  __typename?: 'PaidSerchContainter';
  googleCustomerId?: Maybe<Scalars['String']>;
  paidSearchDataConfig?: Maybe<PaidSearchDataConfig>;
  viewIds: Array<Scalars['String']>;
};

export type PaidSerchContainterCreateManyWithoutPaidSearchDataConfigInput = {
  create?: InputMaybe<Array<PaidSerchContainterCreateWithoutPaidSearchDataConfigInput>>;
};

export type PaidSerchContainterCreateWithoutPaidSearchDataConfigInput = {
  googleCustomerId?: InputMaybe<Scalars['String']>;
  viewIds?: InputMaybe<PaidSerchContainterCreateviewIdsInput>;
};

export type PaidSerchContainterCreateviewIdsInput = {
  set?: InputMaybe<Array<Scalars['String']>>;
};

export enum PaidSerchContainterOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  GoogleCustomerIdAsc = 'googleCustomerId_ASC',
  GoogleCustomerIdDesc = 'googleCustomerId_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC'
}

export type PaidSerchContainterUpdateManyWithoutPaidSearchDataConfigInput = {
  create?: InputMaybe<Array<PaidSerchContainterCreateWithoutPaidSearchDataConfigInput>>;
};

export type PaidSerchContainterWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<PaidSerchContainterWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<PaidSerchContainterWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<PaidSerchContainterWhereInput>>;
  googleCustomerId?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  googleCustomerId_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  googleCustomerId_ends_with?: InputMaybe<Scalars['String']>;
  /** All values greater than the given value. */
  googleCustomerId_gt?: InputMaybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  googleCustomerId_gte?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  googleCustomerId_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  googleCustomerId_lt?: InputMaybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  googleCustomerId_lte?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  googleCustomerId_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  googleCustomerId_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string. */
  googleCustomerId_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  googleCustomerId_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  googleCustomerId_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  googleCustomerId_starts_with?: InputMaybe<Scalars['String']>;
  paidSearchDataConfig?: InputMaybe<PaidSearchDataConfigWhereInput>;
};

export enum PartnerLevel {
  ChannelPartner = 'CHANNEL_PARTNER',
  Enterprise = 'ENTERPRISE',
  Premium = 'PREMIUM',
  Standard = 'STANDARD'
}

export type PaymentConfig = Node & {
  __typename?: 'PaymentConfig';
  createdAt: Scalars['DateTime'];
  id: Scalars['ID'];
  orgs?: Maybe<Array<Org>>;
  paymentProvider?: Maybe<Scalars['String']>;
  providerId?: Maybe<Scalars['String']>;
  updatedAt: Scalars['DateTime'];
};


export type PaymentConfigOrgsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<OrgOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<OrgWhereInput>;
};

export type PaymentConfigCreateOneWithoutOrgsInput = {
  connect?: InputMaybe<PaymentConfigWhereUniqueInput>;
  create?: InputMaybe<PaymentConfigCreateWithoutOrgsInput>;
};

export type PaymentConfigCreateWithoutOrgsInput = {
  paymentProvider?: InputMaybe<Scalars['String']>;
  providerId?: InputMaybe<Scalars['String']>;
};

export type PaymentConfigUpdateOneWithoutOrgsInput = {
  connect?: InputMaybe<PaymentConfigWhereUniqueInput>;
  create?: InputMaybe<PaymentConfigCreateWithoutOrgsInput>;
  delete?: InputMaybe<Scalars['Boolean']>;
  disconnect?: InputMaybe<Scalars['Boolean']>;
  update?: InputMaybe<PaymentConfigUpdateWithoutOrgsDataInput>;
  upsert?: InputMaybe<PaymentConfigUpsertWithoutOrgsInput>;
};

export type PaymentConfigUpdateWithoutOrgsDataInput = {
  paymentProvider?: InputMaybe<Scalars['String']>;
  providerId?: InputMaybe<Scalars['String']>;
};

export type PaymentConfigUpsertWithoutOrgsInput = {
  create: PaymentConfigCreateWithoutOrgsInput;
  update: PaymentConfigUpdateWithoutOrgsDataInput;
};

export type PaymentConfigWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<PaymentConfigWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<PaymentConfigWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<PaymentConfigWhereInput>>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: InputMaybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: InputMaybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: InputMaybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  orgs_every?: InputMaybe<OrgWhereInput>;
  orgs_none?: InputMaybe<OrgWhereInput>;
  orgs_some?: InputMaybe<OrgWhereInput>;
  paymentProvider?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  paymentProvider_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  paymentProvider_ends_with?: InputMaybe<Scalars['String']>;
  /** All values greater than the given value. */
  paymentProvider_gt?: InputMaybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  paymentProvider_gte?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  paymentProvider_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  paymentProvider_lt?: InputMaybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  paymentProvider_lte?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  paymentProvider_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  paymentProvider_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string. */
  paymentProvider_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  paymentProvider_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  paymentProvider_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  paymentProvider_starts_with?: InputMaybe<Scalars['String']>;
  providerId?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  providerId_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  providerId_ends_with?: InputMaybe<Scalars['String']>;
  /** All values greater than the given value. */
  providerId_gt?: InputMaybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  providerId_gte?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  providerId_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  providerId_lt?: InputMaybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  providerId_lte?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  providerId_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  providerId_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string. */
  providerId_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  providerId_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  providerId_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  providerId_starts_with?: InputMaybe<Scalars['String']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
};

export type PaymentConfigWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export type Polygon = Node & {
  __typename?: 'Polygon';
  createdAt: Scalars['DateTime'];
  geoTarget?: Maybe<GeoTarget>;
  geometry: Scalars['Json'];
  id: Scalars['ID'];
  location?: Maybe<Location>;
  updatedAt: Scalars['DateTime'];
};

export type PolygonCreateManyWithoutGeoTargetInput = {
  connect?: InputMaybe<Array<PolygonWhereUniqueInput>>;
  create?: InputMaybe<Array<PolygonCreateWithoutGeoTargetInput>>;
};

export type PolygonCreateManyWithoutLocationInput = {
  connect?: InputMaybe<Array<PolygonWhereUniqueInput>>;
  create?: InputMaybe<Array<PolygonCreateWithoutLocationInput>>;
};

export type PolygonCreateWithoutGeoTargetInput = {
  geometry: Scalars['Json'];
  location?: InputMaybe<LocationCreateOneWithoutPolygonsInput>;
};

export type PolygonCreateWithoutLocationInput = {
  geoTarget?: InputMaybe<GeoTargetCreateOneWithoutPolygonsInput>;
  geometry: Scalars['Json'];
};

export enum PolygonOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  GeometryAsc = 'geometry_ASC',
  GeometryDesc = 'geometry_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC'
}

export type PolygonUpdateManyWithoutGeoTargetInput = {
  connect?: InputMaybe<Array<PolygonWhereUniqueInput>>;
  create?: InputMaybe<Array<PolygonCreateWithoutGeoTargetInput>>;
  delete?: InputMaybe<Array<PolygonWhereUniqueInput>>;
  disconnect?: InputMaybe<Array<PolygonWhereUniqueInput>>;
  update?: InputMaybe<Array<PolygonUpdateWithWhereUniqueWithoutGeoTargetInput>>;
  upsert?: InputMaybe<Array<PolygonUpsertWithWhereUniqueWithoutGeoTargetInput>>;
};

export type PolygonUpdateManyWithoutLocationInput = {
  connect?: InputMaybe<Array<PolygonWhereUniqueInput>>;
  create?: InputMaybe<Array<PolygonCreateWithoutLocationInput>>;
  delete?: InputMaybe<Array<PolygonWhereUniqueInput>>;
  disconnect?: InputMaybe<Array<PolygonWhereUniqueInput>>;
  update?: InputMaybe<Array<PolygonUpdateWithWhereUniqueWithoutLocationInput>>;
  upsert?: InputMaybe<Array<PolygonUpsertWithWhereUniqueWithoutLocationInput>>;
};

export type PolygonUpdateWithWhereUniqueWithoutGeoTargetInput = {
  data: PolygonUpdateWithoutGeoTargetDataInput;
  where: PolygonWhereUniqueInput;
};

export type PolygonUpdateWithWhereUniqueWithoutLocationInput = {
  data: PolygonUpdateWithoutLocationDataInput;
  where: PolygonWhereUniqueInput;
};

export type PolygonUpdateWithoutGeoTargetDataInput = {
  geometry?: InputMaybe<Scalars['Json']>;
  location?: InputMaybe<LocationUpdateOneWithoutPolygonsInput>;
};

export type PolygonUpdateWithoutLocationDataInput = {
  geoTarget?: InputMaybe<GeoTargetUpdateOneWithoutPolygonsInput>;
  geometry?: InputMaybe<Scalars['Json']>;
};

export type PolygonUpsertWithWhereUniqueWithoutGeoTargetInput = {
  create: PolygonCreateWithoutGeoTargetInput;
  update: PolygonUpdateWithoutGeoTargetDataInput;
  where: PolygonWhereUniqueInput;
};

export type PolygonUpsertWithWhereUniqueWithoutLocationInput = {
  create: PolygonCreateWithoutLocationInput;
  update: PolygonUpdateWithoutLocationDataInput;
  where: PolygonWhereUniqueInput;
};

export type PolygonWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<PolygonWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<PolygonWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<PolygonWhereInput>>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  geoTarget?: InputMaybe<GeoTargetWhereInput>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: InputMaybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: InputMaybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: InputMaybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  location?: InputMaybe<LocationWhereInput>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
};

export type PolygonWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export type PosConfig = Node & {
  __typename?: 'PosConfig';
  apiKey?: Maybe<Scalars['String']>;
  clientId?: Maybe<Scalars['String']>;
  createdAt: Scalars['DateTime'];
  existingCustomers?: Maybe<Scalars['Int']>;
  id: Scalars['ID'];
  newCustomers?: Maybe<Scalars['Int']>;
  org: Org;
  treezDispensaryName?: Maybe<Scalars['String']>;
  type: Pos;
  updatedAt: Scalars['DateTime'];
};

export type PosConfigCreateManyWithoutOrgInput = {
  connect?: InputMaybe<Array<PosConfigWhereUniqueInput>>;
  create?: InputMaybe<Array<PosConfigCreateWithoutOrgInput>>;
};

export type PosConfigCreateWithoutOrgInput = {
  apiKey?: InputMaybe<Scalars['String']>;
  clientId?: InputMaybe<Scalars['String']>;
  existingCustomers?: InputMaybe<Scalars['Int']>;
  newCustomers?: InputMaybe<Scalars['Int']>;
  treezDispensaryName?: InputMaybe<Scalars['String']>;
  type: Pos;
};

export enum PosConfigOrderByInput {
  ApiKeyAsc = 'apiKey_ASC',
  ApiKeyDesc = 'apiKey_DESC',
  ClientIdAsc = 'clientId_ASC',
  ClientIdDesc = 'clientId_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  ExistingCustomersAsc = 'existingCustomers_ASC',
  ExistingCustomersDesc = 'existingCustomers_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  NewCustomersAsc = 'newCustomers_ASC',
  NewCustomersDesc = 'newCustomers_DESC',
  TreezDispensaryNameAsc = 'treezDispensaryName_ASC',
  TreezDispensaryNameDesc = 'treezDispensaryName_DESC',
  TypeAsc = 'type_ASC',
  TypeDesc = 'type_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC'
}

export type PosConfigUpdateManyWithoutOrgInput = {
  connect?: InputMaybe<Array<PosConfigWhereUniqueInput>>;
  create?: InputMaybe<Array<PosConfigCreateWithoutOrgInput>>;
  delete?: InputMaybe<Array<PosConfigWhereUniqueInput>>;
  disconnect?: InputMaybe<Array<PosConfigWhereUniqueInput>>;
  update?: InputMaybe<Array<PosConfigUpdateWithWhereUniqueWithoutOrgInput>>;
  upsert?: InputMaybe<Array<PosConfigUpsertWithWhereUniqueWithoutOrgInput>>;
};

export type PosConfigUpdateWithWhereUniqueWithoutOrgInput = {
  data: PosConfigUpdateWithoutOrgDataInput;
  where: PosConfigWhereUniqueInput;
};

export type PosConfigUpdateWithoutOrgDataInput = {
  apiKey?: InputMaybe<Scalars['String']>;
  clientId?: InputMaybe<Scalars['String']>;
  existingCustomers?: InputMaybe<Scalars['Int']>;
  newCustomers?: InputMaybe<Scalars['Int']>;
  treezDispensaryName?: InputMaybe<Scalars['String']>;
  type?: InputMaybe<Pos>;
};

export type PosConfigUpsertWithWhereUniqueWithoutOrgInput = {
  create: PosConfigCreateWithoutOrgInput;
  update: PosConfigUpdateWithoutOrgDataInput;
  where: PosConfigWhereUniqueInput;
};

export type PosConfigWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<PosConfigWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<PosConfigWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<PosConfigWhereInput>>;
  apiKey?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  apiKey_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  apiKey_ends_with?: InputMaybe<Scalars['String']>;
  /** All values greater than the given value. */
  apiKey_gt?: InputMaybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  apiKey_gte?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  apiKey_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  apiKey_lt?: InputMaybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  apiKey_lte?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  apiKey_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  apiKey_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string. */
  apiKey_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  apiKey_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  apiKey_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  apiKey_starts_with?: InputMaybe<Scalars['String']>;
  clientId?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  clientId_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  clientId_ends_with?: InputMaybe<Scalars['String']>;
  /** All values greater than the given value. */
  clientId_gt?: InputMaybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  clientId_gte?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  clientId_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  clientId_lt?: InputMaybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  clientId_lte?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  clientId_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  clientId_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string. */
  clientId_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  clientId_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  clientId_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  clientId_starts_with?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  existingCustomers?: InputMaybe<Scalars['Int']>;
  /** All values greater than the given value. */
  existingCustomers_gt?: InputMaybe<Scalars['Int']>;
  /** All values greater than or equal the given value. */
  existingCustomers_gte?: InputMaybe<Scalars['Int']>;
  /** All values that are contained in given list. */
  existingCustomers_in?: InputMaybe<Array<Scalars['Int']>>;
  /** All values less than the given value. */
  existingCustomers_lt?: InputMaybe<Scalars['Int']>;
  /** All values less than or equal the given value. */
  existingCustomers_lte?: InputMaybe<Scalars['Int']>;
  /** All values that are not equal to given value. */
  existingCustomers_not?: InputMaybe<Scalars['Int']>;
  /** All values that are not contained in given list. */
  existingCustomers_not_in?: InputMaybe<Array<Scalars['Int']>>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: InputMaybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: InputMaybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: InputMaybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  newCustomers?: InputMaybe<Scalars['Int']>;
  /** All values greater than the given value. */
  newCustomers_gt?: InputMaybe<Scalars['Int']>;
  /** All values greater than or equal the given value. */
  newCustomers_gte?: InputMaybe<Scalars['Int']>;
  /** All values that are contained in given list. */
  newCustomers_in?: InputMaybe<Array<Scalars['Int']>>;
  /** All values less than the given value. */
  newCustomers_lt?: InputMaybe<Scalars['Int']>;
  /** All values less than or equal the given value. */
  newCustomers_lte?: InputMaybe<Scalars['Int']>;
  /** All values that are not equal to given value. */
  newCustomers_not?: InputMaybe<Scalars['Int']>;
  /** All values that are not contained in given list. */
  newCustomers_not_in?: InputMaybe<Array<Scalars['Int']>>;
  org?: InputMaybe<OrgWhereInput>;
  treezDispensaryName?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  treezDispensaryName_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  treezDispensaryName_ends_with?: InputMaybe<Scalars['String']>;
  /** All values greater than the given value. */
  treezDispensaryName_gt?: InputMaybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  treezDispensaryName_gte?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  treezDispensaryName_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  treezDispensaryName_lt?: InputMaybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  treezDispensaryName_lte?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  treezDispensaryName_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  treezDispensaryName_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string. */
  treezDispensaryName_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  treezDispensaryName_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  treezDispensaryName_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  treezDispensaryName_starts_with?: InputMaybe<Scalars['String']>;
  type?: InputMaybe<Pos>;
  /** All values that are contained in given list. */
  type_in?: InputMaybe<Array<Pos>>;
  /** All values that are not equal to given value. */
  type_not?: InputMaybe<Pos>;
  /** All values that are not contained in given list. */
  type_not_in?: InputMaybe<Array<Pos>>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
};

export type PosConfigWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export type Product = Node & {
  __typename?: 'Product';
  aroma?: Maybe<Aroma>;
  aromaList: Array<Scalars['String']>;
  brand?: Maybe<Brand>;
  catalog?: Maybe<Catalog>;
  catalogItems?: Maybe<Array<CatalogItem>>;
  category: Category;
  cbd?: Maybe<Scalars['Int']>;
  createdAt: Scalars['DateTime'];
  createdBy?: Maybe<User>;
  description?: Maybe<Scalars['String']>;
  doses?: Maybe<Scalars['Int']>;
  effectsList: Array<Scalars['String']>;
  featuredMedia?: Maybe<Media>;
  id: Scalars['ID'];
  mediaList?: Maybe<Array<Media>>;
  name: Scalars['String'];
  productType?: Maybe<ProductType>;
  reviews?: Maybe<Array<Review>>;
  sku?: Maybe<Scalars['String']>;
  strainTypeEffects?: Maybe<StrainType>;
  strains?: Maybe<Array<Strain>>;
  subCategory?: Maybe<SubCategory>;
  taste?: Maybe<Taste>;
  tasteList: Array<Scalars['String']>;
  tests?: Maybe<Array<Test>>;
  thc?: Maybe<Scalars['Int']>;
  updatedAt: Scalars['DateTime'];
  weight?: Maybe<Scalars['Float']>;
  wellnessEffect?: Maybe<WellnessEffect>;
  wellnessList: Array<Scalars['String']>;
};


export type ProductCatalogItemsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<CatalogItemOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<CatalogItemWhereInput>;
};


export type ProductMediaListArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MediaOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<MediaWhereInput>;
};


export type ProductReviewsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ReviewOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ReviewWhereInput>;
};


export type ProductStrainsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<StrainOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<StrainWhereInput>;
};


export type ProductTestsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<TestOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<TestWhereInput>;
};

export type ProductCreateInput = {
  aroma?: InputMaybe<AromaCreateOneWithoutProductsInput>;
  aromaList?: InputMaybe<ProductCreatearomaListInput>;
  brand?: InputMaybe<BrandCreateOneWithoutProductsInput>;
  catalog?: InputMaybe<CatalogCreateOneWithoutProductsInput>;
  catalogItems?: InputMaybe<CatalogItemCreateManyWithoutProductInput>;
  category: Category;
  cbd?: InputMaybe<Scalars['Int']>;
  createdBy?: InputMaybe<UserCreateOneWithoutProductsInput>;
  description?: InputMaybe<Scalars['String']>;
  doses?: InputMaybe<Scalars['Int']>;
  effectsList?: InputMaybe<ProductCreateeffectsListInput>;
  featuredMedia?: InputMaybe<MediaCreateOneInput>;
  mediaList?: InputMaybe<MediaCreateManyInput>;
  name: Scalars['String'];
  productType?: InputMaybe<ProductType>;
  reviews?: InputMaybe<ReviewCreateManyInput>;
  sku?: InputMaybe<Scalars['String']>;
  strainTypeEffects?: InputMaybe<StrainTypeCreateOneWithoutProductsInput>;
  strains?: InputMaybe<StrainCreateManyInput>;
  subCategory?: InputMaybe<SubCategory>;
  taste?: InputMaybe<TasteCreateOneWithoutProductsInput>;
  tasteList?: InputMaybe<ProductCreatetasteListInput>;
  tests?: InputMaybe<TestCreateManyInput>;
  thc?: InputMaybe<Scalars['Int']>;
  weight?: InputMaybe<Scalars['Float']>;
  wellnessEffect?: InputMaybe<WellnessEffectCreateOneWithoutProductsInput>;
  wellnessList?: InputMaybe<ProductCreatewellnessListInput>;
};

export type ProductCreateManyInput = {
  connect?: InputMaybe<Array<ProductWhereUniqueInput>>;
  create?: InputMaybe<Array<ProductCreateInput>>;
};

export type ProductCreateManyWithoutAromaInput = {
  connect?: InputMaybe<Array<ProductWhereUniqueInput>>;
  create?: InputMaybe<Array<ProductCreateWithoutAromaInput>>;
};

export type ProductCreateManyWithoutBrandInput = {
  connect?: InputMaybe<Array<ProductWhereUniqueInput>>;
  create?: InputMaybe<Array<ProductCreateWithoutBrandInput>>;
};

export type ProductCreateManyWithoutCatalogInput = {
  connect?: InputMaybe<Array<ProductWhereUniqueInput>>;
  create?: InputMaybe<Array<ProductCreateWithoutCatalogInput>>;
};

export type ProductCreateManyWithoutCreatedByInput = {
  connect?: InputMaybe<Array<ProductWhereUniqueInput>>;
  create?: InputMaybe<Array<ProductCreateWithoutCreatedByInput>>;
};

export type ProductCreateManyWithoutStrainTypeEffectsInput = {
  connect?: InputMaybe<Array<ProductWhereUniqueInput>>;
  create?: InputMaybe<Array<ProductCreateWithoutStrainTypeEffectsInput>>;
};

export type ProductCreateManyWithoutTasteInput = {
  connect?: InputMaybe<Array<ProductWhereUniqueInput>>;
  create?: InputMaybe<Array<ProductCreateWithoutTasteInput>>;
};

export type ProductCreateManyWithoutWellnessEffectInput = {
  connect?: InputMaybe<Array<ProductWhereUniqueInput>>;
  create?: InputMaybe<Array<ProductCreateWithoutWellnessEffectInput>>;
};

export type ProductCreateOneInput = {
  connect?: InputMaybe<ProductWhereUniqueInput>;
  create?: InputMaybe<ProductCreateInput>;
};

export type ProductCreateOneWithoutCatalogItemsInput = {
  connect?: InputMaybe<ProductWhereUniqueInput>;
  create?: InputMaybe<ProductCreateWithoutCatalogItemsInput>;
};

export type ProductCreateWithoutAromaInput = {
  aromaList?: InputMaybe<ProductCreatearomaListInput>;
  brand?: InputMaybe<BrandCreateOneWithoutProductsInput>;
  catalog?: InputMaybe<CatalogCreateOneWithoutProductsInput>;
  catalogItems?: InputMaybe<CatalogItemCreateManyWithoutProductInput>;
  category: Category;
  cbd?: InputMaybe<Scalars['Int']>;
  createdBy?: InputMaybe<UserCreateOneWithoutProductsInput>;
  description?: InputMaybe<Scalars['String']>;
  doses?: InputMaybe<Scalars['Int']>;
  effectsList?: InputMaybe<ProductCreateeffectsListInput>;
  featuredMedia?: InputMaybe<MediaCreateOneInput>;
  mediaList?: InputMaybe<MediaCreateManyInput>;
  name: Scalars['String'];
  productType?: InputMaybe<ProductType>;
  reviews?: InputMaybe<ReviewCreateManyInput>;
  sku?: InputMaybe<Scalars['String']>;
  strainTypeEffects?: InputMaybe<StrainTypeCreateOneWithoutProductsInput>;
  strains?: InputMaybe<StrainCreateManyInput>;
  subCategory?: InputMaybe<SubCategory>;
  taste?: InputMaybe<TasteCreateOneWithoutProductsInput>;
  tasteList?: InputMaybe<ProductCreatetasteListInput>;
  tests?: InputMaybe<TestCreateManyInput>;
  thc?: InputMaybe<Scalars['Int']>;
  weight?: InputMaybe<Scalars['Float']>;
  wellnessEffect?: InputMaybe<WellnessEffectCreateOneWithoutProductsInput>;
  wellnessList?: InputMaybe<ProductCreatewellnessListInput>;
};

export type ProductCreateWithoutBrandInput = {
  aroma?: InputMaybe<AromaCreateOneWithoutProductsInput>;
  aromaList?: InputMaybe<ProductCreatearomaListInput>;
  catalog?: InputMaybe<CatalogCreateOneWithoutProductsInput>;
  catalogItems?: InputMaybe<CatalogItemCreateManyWithoutProductInput>;
  category: Category;
  cbd?: InputMaybe<Scalars['Int']>;
  createdBy?: InputMaybe<UserCreateOneWithoutProductsInput>;
  description?: InputMaybe<Scalars['String']>;
  doses?: InputMaybe<Scalars['Int']>;
  effectsList?: InputMaybe<ProductCreateeffectsListInput>;
  featuredMedia?: InputMaybe<MediaCreateOneInput>;
  mediaList?: InputMaybe<MediaCreateManyInput>;
  name: Scalars['String'];
  productType?: InputMaybe<ProductType>;
  reviews?: InputMaybe<ReviewCreateManyInput>;
  sku?: InputMaybe<Scalars['String']>;
  strainTypeEffects?: InputMaybe<StrainTypeCreateOneWithoutProductsInput>;
  strains?: InputMaybe<StrainCreateManyInput>;
  subCategory?: InputMaybe<SubCategory>;
  taste?: InputMaybe<TasteCreateOneWithoutProductsInput>;
  tasteList?: InputMaybe<ProductCreatetasteListInput>;
  tests?: InputMaybe<TestCreateManyInput>;
  thc?: InputMaybe<Scalars['Int']>;
  weight?: InputMaybe<Scalars['Float']>;
  wellnessEffect?: InputMaybe<WellnessEffectCreateOneWithoutProductsInput>;
  wellnessList?: InputMaybe<ProductCreatewellnessListInput>;
};

export type ProductCreateWithoutCatalogInput = {
  aroma?: InputMaybe<AromaCreateOneWithoutProductsInput>;
  aromaList?: InputMaybe<ProductCreatearomaListInput>;
  brand?: InputMaybe<BrandCreateOneWithoutProductsInput>;
  catalogItems?: InputMaybe<CatalogItemCreateManyWithoutProductInput>;
  category: Category;
  cbd?: InputMaybe<Scalars['Int']>;
  createdBy?: InputMaybe<UserCreateOneWithoutProductsInput>;
  description?: InputMaybe<Scalars['String']>;
  doses?: InputMaybe<Scalars['Int']>;
  effectsList?: InputMaybe<ProductCreateeffectsListInput>;
  featuredMedia?: InputMaybe<MediaCreateOneInput>;
  mediaList?: InputMaybe<MediaCreateManyInput>;
  name: Scalars['String'];
  productType?: InputMaybe<ProductType>;
  reviews?: InputMaybe<ReviewCreateManyInput>;
  sku?: InputMaybe<Scalars['String']>;
  strainTypeEffects?: InputMaybe<StrainTypeCreateOneWithoutProductsInput>;
  strains?: InputMaybe<StrainCreateManyInput>;
  subCategory?: InputMaybe<SubCategory>;
  taste?: InputMaybe<TasteCreateOneWithoutProductsInput>;
  tasteList?: InputMaybe<ProductCreatetasteListInput>;
  tests?: InputMaybe<TestCreateManyInput>;
  thc?: InputMaybe<Scalars['Int']>;
  weight?: InputMaybe<Scalars['Float']>;
  wellnessEffect?: InputMaybe<WellnessEffectCreateOneWithoutProductsInput>;
  wellnessList?: InputMaybe<ProductCreatewellnessListInput>;
};

export type ProductCreateWithoutCatalogItemsInput = {
  aroma?: InputMaybe<AromaCreateOneWithoutProductsInput>;
  aromaList?: InputMaybe<ProductCreatearomaListInput>;
  brand?: InputMaybe<BrandCreateOneWithoutProductsInput>;
  catalog?: InputMaybe<CatalogCreateOneWithoutProductsInput>;
  category: Category;
  cbd?: InputMaybe<Scalars['Int']>;
  createdBy?: InputMaybe<UserCreateOneWithoutProductsInput>;
  description?: InputMaybe<Scalars['String']>;
  doses?: InputMaybe<Scalars['Int']>;
  effectsList?: InputMaybe<ProductCreateeffectsListInput>;
  featuredMedia?: InputMaybe<MediaCreateOneInput>;
  mediaList?: InputMaybe<MediaCreateManyInput>;
  name: Scalars['String'];
  productType?: InputMaybe<ProductType>;
  reviews?: InputMaybe<ReviewCreateManyInput>;
  sku?: InputMaybe<Scalars['String']>;
  strainTypeEffects?: InputMaybe<StrainTypeCreateOneWithoutProductsInput>;
  strains?: InputMaybe<StrainCreateManyInput>;
  subCategory?: InputMaybe<SubCategory>;
  taste?: InputMaybe<TasteCreateOneWithoutProductsInput>;
  tasteList?: InputMaybe<ProductCreatetasteListInput>;
  tests?: InputMaybe<TestCreateManyInput>;
  thc?: InputMaybe<Scalars['Int']>;
  weight?: InputMaybe<Scalars['Float']>;
  wellnessEffect?: InputMaybe<WellnessEffectCreateOneWithoutProductsInput>;
  wellnessList?: InputMaybe<ProductCreatewellnessListInput>;
};

export type ProductCreateWithoutCreatedByInput = {
  aroma?: InputMaybe<AromaCreateOneWithoutProductsInput>;
  aromaList?: InputMaybe<ProductCreatearomaListInput>;
  brand?: InputMaybe<BrandCreateOneWithoutProductsInput>;
  catalog?: InputMaybe<CatalogCreateOneWithoutProductsInput>;
  catalogItems?: InputMaybe<CatalogItemCreateManyWithoutProductInput>;
  category: Category;
  cbd?: InputMaybe<Scalars['Int']>;
  description?: InputMaybe<Scalars['String']>;
  doses?: InputMaybe<Scalars['Int']>;
  effectsList?: InputMaybe<ProductCreateeffectsListInput>;
  featuredMedia?: InputMaybe<MediaCreateOneInput>;
  mediaList?: InputMaybe<MediaCreateManyInput>;
  name: Scalars['String'];
  productType?: InputMaybe<ProductType>;
  reviews?: InputMaybe<ReviewCreateManyInput>;
  sku?: InputMaybe<Scalars['String']>;
  strainTypeEffects?: InputMaybe<StrainTypeCreateOneWithoutProductsInput>;
  strains?: InputMaybe<StrainCreateManyInput>;
  subCategory?: InputMaybe<SubCategory>;
  taste?: InputMaybe<TasteCreateOneWithoutProductsInput>;
  tasteList?: InputMaybe<ProductCreatetasteListInput>;
  tests?: InputMaybe<TestCreateManyInput>;
  thc?: InputMaybe<Scalars['Int']>;
  weight?: InputMaybe<Scalars['Float']>;
  wellnessEffect?: InputMaybe<WellnessEffectCreateOneWithoutProductsInput>;
  wellnessList?: InputMaybe<ProductCreatewellnessListInput>;
};

export type ProductCreateWithoutStrainTypeEffectsInput = {
  aroma?: InputMaybe<AromaCreateOneWithoutProductsInput>;
  aromaList?: InputMaybe<ProductCreatearomaListInput>;
  brand?: InputMaybe<BrandCreateOneWithoutProductsInput>;
  catalog?: InputMaybe<CatalogCreateOneWithoutProductsInput>;
  catalogItems?: InputMaybe<CatalogItemCreateManyWithoutProductInput>;
  category: Category;
  cbd?: InputMaybe<Scalars['Int']>;
  createdBy?: InputMaybe<UserCreateOneWithoutProductsInput>;
  description?: InputMaybe<Scalars['String']>;
  doses?: InputMaybe<Scalars['Int']>;
  effectsList?: InputMaybe<ProductCreateeffectsListInput>;
  featuredMedia?: InputMaybe<MediaCreateOneInput>;
  mediaList?: InputMaybe<MediaCreateManyInput>;
  name: Scalars['String'];
  productType?: InputMaybe<ProductType>;
  reviews?: InputMaybe<ReviewCreateManyInput>;
  sku?: InputMaybe<Scalars['String']>;
  strains?: InputMaybe<StrainCreateManyInput>;
  subCategory?: InputMaybe<SubCategory>;
  taste?: InputMaybe<TasteCreateOneWithoutProductsInput>;
  tasteList?: InputMaybe<ProductCreatetasteListInput>;
  tests?: InputMaybe<TestCreateManyInput>;
  thc?: InputMaybe<Scalars['Int']>;
  weight?: InputMaybe<Scalars['Float']>;
  wellnessEffect?: InputMaybe<WellnessEffectCreateOneWithoutProductsInput>;
  wellnessList?: InputMaybe<ProductCreatewellnessListInput>;
};

export type ProductCreateWithoutTasteInput = {
  aroma?: InputMaybe<AromaCreateOneWithoutProductsInput>;
  aromaList?: InputMaybe<ProductCreatearomaListInput>;
  brand?: InputMaybe<BrandCreateOneWithoutProductsInput>;
  catalog?: InputMaybe<CatalogCreateOneWithoutProductsInput>;
  catalogItems?: InputMaybe<CatalogItemCreateManyWithoutProductInput>;
  category: Category;
  cbd?: InputMaybe<Scalars['Int']>;
  createdBy?: InputMaybe<UserCreateOneWithoutProductsInput>;
  description?: InputMaybe<Scalars['String']>;
  doses?: InputMaybe<Scalars['Int']>;
  effectsList?: InputMaybe<ProductCreateeffectsListInput>;
  featuredMedia?: InputMaybe<MediaCreateOneInput>;
  mediaList?: InputMaybe<MediaCreateManyInput>;
  name: Scalars['String'];
  productType?: InputMaybe<ProductType>;
  reviews?: InputMaybe<ReviewCreateManyInput>;
  sku?: InputMaybe<Scalars['String']>;
  strainTypeEffects?: InputMaybe<StrainTypeCreateOneWithoutProductsInput>;
  strains?: InputMaybe<StrainCreateManyInput>;
  subCategory?: InputMaybe<SubCategory>;
  tasteList?: InputMaybe<ProductCreatetasteListInput>;
  tests?: InputMaybe<TestCreateManyInput>;
  thc?: InputMaybe<Scalars['Int']>;
  weight?: InputMaybe<Scalars['Float']>;
  wellnessEffect?: InputMaybe<WellnessEffectCreateOneWithoutProductsInput>;
  wellnessList?: InputMaybe<ProductCreatewellnessListInput>;
};

export type ProductCreateWithoutWellnessEffectInput = {
  aroma?: InputMaybe<AromaCreateOneWithoutProductsInput>;
  aromaList?: InputMaybe<ProductCreatearomaListInput>;
  brand?: InputMaybe<BrandCreateOneWithoutProductsInput>;
  catalog?: InputMaybe<CatalogCreateOneWithoutProductsInput>;
  catalogItems?: InputMaybe<CatalogItemCreateManyWithoutProductInput>;
  category: Category;
  cbd?: InputMaybe<Scalars['Int']>;
  createdBy?: InputMaybe<UserCreateOneWithoutProductsInput>;
  description?: InputMaybe<Scalars['String']>;
  doses?: InputMaybe<Scalars['Int']>;
  effectsList?: InputMaybe<ProductCreateeffectsListInput>;
  featuredMedia?: InputMaybe<MediaCreateOneInput>;
  mediaList?: InputMaybe<MediaCreateManyInput>;
  name: Scalars['String'];
  productType?: InputMaybe<ProductType>;
  reviews?: InputMaybe<ReviewCreateManyInput>;
  sku?: InputMaybe<Scalars['String']>;
  strainTypeEffects?: InputMaybe<StrainTypeCreateOneWithoutProductsInput>;
  strains?: InputMaybe<StrainCreateManyInput>;
  subCategory?: InputMaybe<SubCategory>;
  taste?: InputMaybe<TasteCreateOneWithoutProductsInput>;
  tasteList?: InputMaybe<ProductCreatetasteListInput>;
  tests?: InputMaybe<TestCreateManyInput>;
  thc?: InputMaybe<Scalars['Int']>;
  weight?: InputMaybe<Scalars['Float']>;
  wellnessList?: InputMaybe<ProductCreatewellnessListInput>;
};

export type ProductCreatearomaListInput = {
  set?: InputMaybe<Array<Scalars['String']>>;
};

export type ProductCreateeffectsListInput = {
  set?: InputMaybe<Array<Scalars['String']>>;
};

export type ProductCreatetasteListInput = {
  set?: InputMaybe<Array<Scalars['String']>>;
};

export type ProductCreatewellnessListInput = {
  set?: InputMaybe<Array<Scalars['String']>>;
};

export enum ProductOrderByInput {
  CategoryAsc = 'category_ASC',
  CategoryDesc = 'category_DESC',
  CbdAsc = 'cbd_ASC',
  CbdDesc = 'cbd_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DescriptionAsc = 'description_ASC',
  DescriptionDesc = 'description_DESC',
  DosesAsc = 'doses_ASC',
  DosesDesc = 'doses_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  NameAsc = 'name_ASC',
  NameDesc = 'name_DESC',
  ProductTypeAsc = 'productType_ASC',
  ProductTypeDesc = 'productType_DESC',
  SkuAsc = 'sku_ASC',
  SkuDesc = 'sku_DESC',
  SubCategoryAsc = 'subCategory_ASC',
  SubCategoryDesc = 'subCategory_DESC',
  ThcAsc = 'thc_ASC',
  ThcDesc = 'thc_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  WeightAsc = 'weight_ASC',
  WeightDesc = 'weight_DESC'
}

export enum ProductType {
  Iheartjane = 'IHEARTJANE',
  Manual = 'MANUAL',
  Treez = 'TREEZ',
  Weedmaps = 'WEEDMAPS',
  Zefyr = 'ZEFYR'
}

export type ProductUpdateDataInput = {
  aroma?: InputMaybe<AromaUpdateOneWithoutProductsInput>;
  aromaList?: InputMaybe<ProductUpdatearomaListInput>;
  brand?: InputMaybe<BrandUpdateOneWithoutProductsInput>;
  catalog?: InputMaybe<CatalogUpdateOneWithoutProductsInput>;
  catalogItems?: InputMaybe<CatalogItemUpdateManyWithoutProductInput>;
  category?: InputMaybe<Category>;
  cbd?: InputMaybe<Scalars['Int']>;
  createdBy?: InputMaybe<UserUpdateOneWithoutProductsInput>;
  description?: InputMaybe<Scalars['String']>;
  doses?: InputMaybe<Scalars['Int']>;
  effectsList?: InputMaybe<ProductUpdateeffectsListInput>;
  featuredMedia?: InputMaybe<MediaUpdateOneInput>;
  mediaList?: InputMaybe<MediaUpdateManyInput>;
  name?: InputMaybe<Scalars['String']>;
  productType?: InputMaybe<ProductType>;
  reviews?: InputMaybe<ReviewUpdateManyInput>;
  sku?: InputMaybe<Scalars['String']>;
  strainTypeEffects?: InputMaybe<StrainTypeUpdateOneWithoutProductsInput>;
  strains?: InputMaybe<StrainUpdateManyInput>;
  subCategory?: InputMaybe<SubCategory>;
  taste?: InputMaybe<TasteUpdateOneWithoutProductsInput>;
  tasteList?: InputMaybe<ProductUpdatetasteListInput>;
  tests?: InputMaybe<TestUpdateManyInput>;
  thc?: InputMaybe<Scalars['Int']>;
  weight?: InputMaybe<Scalars['Float']>;
  wellnessEffect?: InputMaybe<WellnessEffectUpdateOneWithoutProductsInput>;
  wellnessList?: InputMaybe<ProductUpdatewellnessListInput>;
};

export type ProductUpdateInput = {
  aroma?: InputMaybe<AromaUpdateOneWithoutProductsInput>;
  aromaList?: InputMaybe<ProductUpdatearomaListInput>;
  brand?: InputMaybe<BrandUpdateOneWithoutProductsInput>;
  catalog?: InputMaybe<CatalogUpdateOneWithoutProductsInput>;
  catalogItems?: InputMaybe<CatalogItemUpdateManyWithoutProductInput>;
  category?: InputMaybe<Category>;
  cbd?: InputMaybe<Scalars['Int']>;
  createdBy?: InputMaybe<UserUpdateOneWithoutProductsInput>;
  description?: InputMaybe<Scalars['String']>;
  doses?: InputMaybe<Scalars['Int']>;
  effectsList?: InputMaybe<ProductUpdateeffectsListInput>;
  featuredMedia?: InputMaybe<MediaUpdateOneInput>;
  mediaList?: InputMaybe<MediaUpdateManyInput>;
  name?: InputMaybe<Scalars['String']>;
  productType?: InputMaybe<ProductType>;
  reviews?: InputMaybe<ReviewUpdateManyInput>;
  sku?: InputMaybe<Scalars['String']>;
  strainTypeEffects?: InputMaybe<StrainTypeUpdateOneWithoutProductsInput>;
  strains?: InputMaybe<StrainUpdateManyInput>;
  subCategory?: InputMaybe<SubCategory>;
  taste?: InputMaybe<TasteUpdateOneWithoutProductsInput>;
  tasteList?: InputMaybe<ProductUpdatetasteListInput>;
  tests?: InputMaybe<TestUpdateManyInput>;
  thc?: InputMaybe<Scalars['Int']>;
  weight?: InputMaybe<Scalars['Float']>;
  wellnessEffect?: InputMaybe<WellnessEffectUpdateOneWithoutProductsInput>;
  wellnessList?: InputMaybe<ProductUpdatewellnessListInput>;
};

export type ProductUpdateManyInput = {
  connect?: InputMaybe<Array<ProductWhereUniqueInput>>;
  create?: InputMaybe<Array<ProductCreateInput>>;
  delete?: InputMaybe<Array<ProductWhereUniqueInput>>;
  disconnect?: InputMaybe<Array<ProductWhereUniqueInput>>;
  update?: InputMaybe<Array<ProductUpdateWithWhereUniqueNestedInput>>;
  upsert?: InputMaybe<Array<ProductUpsertWithWhereUniqueNestedInput>>;
};

export type ProductUpdateManyWithoutAromaInput = {
  connect?: InputMaybe<Array<ProductWhereUniqueInput>>;
  create?: InputMaybe<Array<ProductCreateWithoutAromaInput>>;
  delete?: InputMaybe<Array<ProductWhereUniqueInput>>;
  disconnect?: InputMaybe<Array<ProductWhereUniqueInput>>;
  update?: InputMaybe<Array<ProductUpdateWithWhereUniqueWithoutAromaInput>>;
  upsert?: InputMaybe<Array<ProductUpsertWithWhereUniqueWithoutAromaInput>>;
};

export type ProductUpdateManyWithoutBrandInput = {
  connect?: InputMaybe<Array<ProductWhereUniqueInput>>;
  create?: InputMaybe<Array<ProductCreateWithoutBrandInput>>;
  delete?: InputMaybe<Array<ProductWhereUniqueInput>>;
  disconnect?: InputMaybe<Array<ProductWhereUniqueInput>>;
  update?: InputMaybe<Array<ProductUpdateWithWhereUniqueWithoutBrandInput>>;
  upsert?: InputMaybe<Array<ProductUpsertWithWhereUniqueWithoutBrandInput>>;
};

export type ProductUpdateManyWithoutCatalogInput = {
  connect?: InputMaybe<Array<ProductWhereUniqueInput>>;
  create?: InputMaybe<Array<ProductCreateWithoutCatalogInput>>;
  delete?: InputMaybe<Array<ProductWhereUniqueInput>>;
  disconnect?: InputMaybe<Array<ProductWhereUniqueInput>>;
  update?: InputMaybe<Array<ProductUpdateWithWhereUniqueWithoutCatalogInput>>;
  upsert?: InputMaybe<Array<ProductUpsertWithWhereUniqueWithoutCatalogInput>>;
};

export type ProductUpdateManyWithoutCreatedByInput = {
  connect?: InputMaybe<Array<ProductWhereUniqueInput>>;
  create?: InputMaybe<Array<ProductCreateWithoutCreatedByInput>>;
  delete?: InputMaybe<Array<ProductWhereUniqueInput>>;
  disconnect?: InputMaybe<Array<ProductWhereUniqueInput>>;
  update?: InputMaybe<Array<ProductUpdateWithWhereUniqueWithoutCreatedByInput>>;
  upsert?: InputMaybe<Array<ProductUpsertWithWhereUniqueWithoutCreatedByInput>>;
};

export type ProductUpdateManyWithoutStrainTypeEffectsInput = {
  connect?: InputMaybe<Array<ProductWhereUniqueInput>>;
  create?: InputMaybe<Array<ProductCreateWithoutStrainTypeEffectsInput>>;
  delete?: InputMaybe<Array<ProductWhereUniqueInput>>;
  disconnect?: InputMaybe<Array<ProductWhereUniqueInput>>;
  update?: InputMaybe<Array<ProductUpdateWithWhereUniqueWithoutStrainTypeEffectsInput>>;
  upsert?: InputMaybe<Array<ProductUpsertWithWhereUniqueWithoutStrainTypeEffectsInput>>;
};

export type ProductUpdateManyWithoutTasteInput = {
  connect?: InputMaybe<Array<ProductWhereUniqueInput>>;
  create?: InputMaybe<Array<ProductCreateWithoutTasteInput>>;
  delete?: InputMaybe<Array<ProductWhereUniqueInput>>;
  disconnect?: InputMaybe<Array<ProductWhereUniqueInput>>;
  update?: InputMaybe<Array<ProductUpdateWithWhereUniqueWithoutTasteInput>>;
  upsert?: InputMaybe<Array<ProductUpsertWithWhereUniqueWithoutTasteInput>>;
};

export type ProductUpdateManyWithoutWellnessEffectInput = {
  connect?: InputMaybe<Array<ProductWhereUniqueInput>>;
  create?: InputMaybe<Array<ProductCreateWithoutWellnessEffectInput>>;
  delete?: InputMaybe<Array<ProductWhereUniqueInput>>;
  disconnect?: InputMaybe<Array<ProductWhereUniqueInput>>;
  update?: InputMaybe<Array<ProductUpdateWithWhereUniqueWithoutWellnessEffectInput>>;
  upsert?: InputMaybe<Array<ProductUpsertWithWhereUniqueWithoutWellnessEffectInput>>;
};

export type ProductUpdateOneInput = {
  connect?: InputMaybe<ProductWhereUniqueInput>;
  create?: InputMaybe<ProductCreateInput>;
  delete?: InputMaybe<Scalars['Boolean']>;
  disconnect?: InputMaybe<Scalars['Boolean']>;
  update?: InputMaybe<ProductUpdateDataInput>;
  upsert?: InputMaybe<ProductUpsertNestedInput>;
};

export type ProductUpdateOneRequiredWithoutCatalogItemsInput = {
  connect?: InputMaybe<ProductWhereUniqueInput>;
  create?: InputMaybe<ProductCreateWithoutCatalogItemsInput>;
  update?: InputMaybe<ProductUpdateWithoutCatalogItemsDataInput>;
  upsert?: InputMaybe<ProductUpsertWithoutCatalogItemsInput>;
};

export type ProductUpdateWithWhereUniqueNestedInput = {
  data: ProductUpdateDataInput;
  where: ProductWhereUniqueInput;
};

export type ProductUpdateWithWhereUniqueWithoutAromaInput = {
  data: ProductUpdateWithoutAromaDataInput;
  where: ProductWhereUniqueInput;
};

export type ProductUpdateWithWhereUniqueWithoutBrandInput = {
  data: ProductUpdateWithoutBrandDataInput;
  where: ProductWhereUniqueInput;
};

export type ProductUpdateWithWhereUniqueWithoutCatalogInput = {
  data: ProductUpdateWithoutCatalogDataInput;
  where: ProductWhereUniqueInput;
};

export type ProductUpdateWithWhereUniqueWithoutCreatedByInput = {
  data: ProductUpdateWithoutCreatedByDataInput;
  where: ProductWhereUniqueInput;
};

export type ProductUpdateWithWhereUniqueWithoutStrainTypeEffectsInput = {
  data: ProductUpdateWithoutStrainTypeEffectsDataInput;
  where: ProductWhereUniqueInput;
};

export type ProductUpdateWithWhereUniqueWithoutTasteInput = {
  data: ProductUpdateWithoutTasteDataInput;
  where: ProductWhereUniqueInput;
};

export type ProductUpdateWithWhereUniqueWithoutWellnessEffectInput = {
  data: ProductUpdateWithoutWellnessEffectDataInput;
  where: ProductWhereUniqueInput;
};

export type ProductUpdateWithoutAromaDataInput = {
  aromaList?: InputMaybe<ProductUpdatearomaListInput>;
  brand?: InputMaybe<BrandUpdateOneWithoutProductsInput>;
  catalog?: InputMaybe<CatalogUpdateOneWithoutProductsInput>;
  catalogItems?: InputMaybe<CatalogItemUpdateManyWithoutProductInput>;
  category?: InputMaybe<Category>;
  cbd?: InputMaybe<Scalars['Int']>;
  createdBy?: InputMaybe<UserUpdateOneWithoutProductsInput>;
  description?: InputMaybe<Scalars['String']>;
  doses?: InputMaybe<Scalars['Int']>;
  effectsList?: InputMaybe<ProductUpdateeffectsListInput>;
  featuredMedia?: InputMaybe<MediaUpdateOneInput>;
  mediaList?: InputMaybe<MediaUpdateManyInput>;
  name?: InputMaybe<Scalars['String']>;
  productType?: InputMaybe<ProductType>;
  reviews?: InputMaybe<ReviewUpdateManyInput>;
  sku?: InputMaybe<Scalars['String']>;
  strainTypeEffects?: InputMaybe<StrainTypeUpdateOneWithoutProductsInput>;
  strains?: InputMaybe<StrainUpdateManyInput>;
  subCategory?: InputMaybe<SubCategory>;
  taste?: InputMaybe<TasteUpdateOneWithoutProductsInput>;
  tasteList?: InputMaybe<ProductUpdatetasteListInput>;
  tests?: InputMaybe<TestUpdateManyInput>;
  thc?: InputMaybe<Scalars['Int']>;
  weight?: InputMaybe<Scalars['Float']>;
  wellnessEffect?: InputMaybe<WellnessEffectUpdateOneWithoutProductsInput>;
  wellnessList?: InputMaybe<ProductUpdatewellnessListInput>;
};

export type ProductUpdateWithoutBrandDataInput = {
  aroma?: InputMaybe<AromaUpdateOneWithoutProductsInput>;
  aromaList?: InputMaybe<ProductUpdatearomaListInput>;
  catalog?: InputMaybe<CatalogUpdateOneWithoutProductsInput>;
  catalogItems?: InputMaybe<CatalogItemUpdateManyWithoutProductInput>;
  category?: InputMaybe<Category>;
  cbd?: InputMaybe<Scalars['Int']>;
  createdBy?: InputMaybe<UserUpdateOneWithoutProductsInput>;
  description?: InputMaybe<Scalars['String']>;
  doses?: InputMaybe<Scalars['Int']>;
  effectsList?: InputMaybe<ProductUpdateeffectsListInput>;
  featuredMedia?: InputMaybe<MediaUpdateOneInput>;
  mediaList?: InputMaybe<MediaUpdateManyInput>;
  name?: InputMaybe<Scalars['String']>;
  productType?: InputMaybe<ProductType>;
  reviews?: InputMaybe<ReviewUpdateManyInput>;
  sku?: InputMaybe<Scalars['String']>;
  strainTypeEffects?: InputMaybe<StrainTypeUpdateOneWithoutProductsInput>;
  strains?: InputMaybe<StrainUpdateManyInput>;
  subCategory?: InputMaybe<SubCategory>;
  taste?: InputMaybe<TasteUpdateOneWithoutProductsInput>;
  tasteList?: InputMaybe<ProductUpdatetasteListInput>;
  tests?: InputMaybe<TestUpdateManyInput>;
  thc?: InputMaybe<Scalars['Int']>;
  weight?: InputMaybe<Scalars['Float']>;
  wellnessEffect?: InputMaybe<WellnessEffectUpdateOneWithoutProductsInput>;
  wellnessList?: InputMaybe<ProductUpdatewellnessListInput>;
};

export type ProductUpdateWithoutCatalogDataInput = {
  aroma?: InputMaybe<AromaUpdateOneWithoutProductsInput>;
  aromaList?: InputMaybe<ProductUpdatearomaListInput>;
  brand?: InputMaybe<BrandUpdateOneWithoutProductsInput>;
  catalogItems?: InputMaybe<CatalogItemUpdateManyWithoutProductInput>;
  category?: InputMaybe<Category>;
  cbd?: InputMaybe<Scalars['Int']>;
  createdBy?: InputMaybe<UserUpdateOneWithoutProductsInput>;
  description?: InputMaybe<Scalars['String']>;
  doses?: InputMaybe<Scalars['Int']>;
  effectsList?: InputMaybe<ProductUpdateeffectsListInput>;
  featuredMedia?: InputMaybe<MediaUpdateOneInput>;
  mediaList?: InputMaybe<MediaUpdateManyInput>;
  name?: InputMaybe<Scalars['String']>;
  productType?: InputMaybe<ProductType>;
  reviews?: InputMaybe<ReviewUpdateManyInput>;
  sku?: InputMaybe<Scalars['String']>;
  strainTypeEffects?: InputMaybe<StrainTypeUpdateOneWithoutProductsInput>;
  strains?: InputMaybe<StrainUpdateManyInput>;
  subCategory?: InputMaybe<SubCategory>;
  taste?: InputMaybe<TasteUpdateOneWithoutProductsInput>;
  tasteList?: InputMaybe<ProductUpdatetasteListInput>;
  tests?: InputMaybe<TestUpdateManyInput>;
  thc?: InputMaybe<Scalars['Int']>;
  weight?: InputMaybe<Scalars['Float']>;
  wellnessEffect?: InputMaybe<WellnessEffectUpdateOneWithoutProductsInput>;
  wellnessList?: InputMaybe<ProductUpdatewellnessListInput>;
};

export type ProductUpdateWithoutCatalogItemsDataInput = {
  aroma?: InputMaybe<AromaUpdateOneWithoutProductsInput>;
  aromaList?: InputMaybe<ProductUpdatearomaListInput>;
  brand?: InputMaybe<BrandUpdateOneWithoutProductsInput>;
  catalog?: InputMaybe<CatalogUpdateOneWithoutProductsInput>;
  category?: InputMaybe<Category>;
  cbd?: InputMaybe<Scalars['Int']>;
  createdBy?: InputMaybe<UserUpdateOneWithoutProductsInput>;
  description?: InputMaybe<Scalars['String']>;
  doses?: InputMaybe<Scalars['Int']>;
  effectsList?: InputMaybe<ProductUpdateeffectsListInput>;
  featuredMedia?: InputMaybe<MediaUpdateOneInput>;
  mediaList?: InputMaybe<MediaUpdateManyInput>;
  name?: InputMaybe<Scalars['String']>;
  productType?: InputMaybe<ProductType>;
  reviews?: InputMaybe<ReviewUpdateManyInput>;
  sku?: InputMaybe<Scalars['String']>;
  strainTypeEffects?: InputMaybe<StrainTypeUpdateOneWithoutProductsInput>;
  strains?: InputMaybe<StrainUpdateManyInput>;
  subCategory?: InputMaybe<SubCategory>;
  taste?: InputMaybe<TasteUpdateOneWithoutProductsInput>;
  tasteList?: InputMaybe<ProductUpdatetasteListInput>;
  tests?: InputMaybe<TestUpdateManyInput>;
  thc?: InputMaybe<Scalars['Int']>;
  weight?: InputMaybe<Scalars['Float']>;
  wellnessEffect?: InputMaybe<WellnessEffectUpdateOneWithoutProductsInput>;
  wellnessList?: InputMaybe<ProductUpdatewellnessListInput>;
};

export type ProductUpdateWithoutCreatedByDataInput = {
  aroma?: InputMaybe<AromaUpdateOneWithoutProductsInput>;
  aromaList?: InputMaybe<ProductUpdatearomaListInput>;
  brand?: InputMaybe<BrandUpdateOneWithoutProductsInput>;
  catalog?: InputMaybe<CatalogUpdateOneWithoutProductsInput>;
  catalogItems?: InputMaybe<CatalogItemUpdateManyWithoutProductInput>;
  category?: InputMaybe<Category>;
  cbd?: InputMaybe<Scalars['Int']>;
  description?: InputMaybe<Scalars['String']>;
  doses?: InputMaybe<Scalars['Int']>;
  effectsList?: InputMaybe<ProductUpdateeffectsListInput>;
  featuredMedia?: InputMaybe<MediaUpdateOneInput>;
  mediaList?: InputMaybe<MediaUpdateManyInput>;
  name?: InputMaybe<Scalars['String']>;
  productType?: InputMaybe<ProductType>;
  reviews?: InputMaybe<ReviewUpdateManyInput>;
  sku?: InputMaybe<Scalars['String']>;
  strainTypeEffects?: InputMaybe<StrainTypeUpdateOneWithoutProductsInput>;
  strains?: InputMaybe<StrainUpdateManyInput>;
  subCategory?: InputMaybe<SubCategory>;
  taste?: InputMaybe<TasteUpdateOneWithoutProductsInput>;
  tasteList?: InputMaybe<ProductUpdatetasteListInput>;
  tests?: InputMaybe<TestUpdateManyInput>;
  thc?: InputMaybe<Scalars['Int']>;
  weight?: InputMaybe<Scalars['Float']>;
  wellnessEffect?: InputMaybe<WellnessEffectUpdateOneWithoutProductsInput>;
  wellnessList?: InputMaybe<ProductUpdatewellnessListInput>;
};

export type ProductUpdateWithoutStrainTypeEffectsDataInput = {
  aroma?: InputMaybe<AromaUpdateOneWithoutProductsInput>;
  aromaList?: InputMaybe<ProductUpdatearomaListInput>;
  brand?: InputMaybe<BrandUpdateOneWithoutProductsInput>;
  catalog?: InputMaybe<CatalogUpdateOneWithoutProductsInput>;
  catalogItems?: InputMaybe<CatalogItemUpdateManyWithoutProductInput>;
  category?: InputMaybe<Category>;
  cbd?: InputMaybe<Scalars['Int']>;
  createdBy?: InputMaybe<UserUpdateOneWithoutProductsInput>;
  description?: InputMaybe<Scalars['String']>;
  doses?: InputMaybe<Scalars['Int']>;
  effectsList?: InputMaybe<ProductUpdateeffectsListInput>;
  featuredMedia?: InputMaybe<MediaUpdateOneInput>;
  mediaList?: InputMaybe<MediaUpdateManyInput>;
  name?: InputMaybe<Scalars['String']>;
  productType?: InputMaybe<ProductType>;
  reviews?: InputMaybe<ReviewUpdateManyInput>;
  sku?: InputMaybe<Scalars['String']>;
  strains?: InputMaybe<StrainUpdateManyInput>;
  subCategory?: InputMaybe<SubCategory>;
  taste?: InputMaybe<TasteUpdateOneWithoutProductsInput>;
  tasteList?: InputMaybe<ProductUpdatetasteListInput>;
  tests?: InputMaybe<TestUpdateManyInput>;
  thc?: InputMaybe<Scalars['Int']>;
  weight?: InputMaybe<Scalars['Float']>;
  wellnessEffect?: InputMaybe<WellnessEffectUpdateOneWithoutProductsInput>;
  wellnessList?: InputMaybe<ProductUpdatewellnessListInput>;
};

export type ProductUpdateWithoutTasteDataInput = {
  aroma?: InputMaybe<AromaUpdateOneWithoutProductsInput>;
  aromaList?: InputMaybe<ProductUpdatearomaListInput>;
  brand?: InputMaybe<BrandUpdateOneWithoutProductsInput>;
  catalog?: InputMaybe<CatalogUpdateOneWithoutProductsInput>;
  catalogItems?: InputMaybe<CatalogItemUpdateManyWithoutProductInput>;
  category?: InputMaybe<Category>;
  cbd?: InputMaybe<Scalars['Int']>;
  createdBy?: InputMaybe<UserUpdateOneWithoutProductsInput>;
  description?: InputMaybe<Scalars['String']>;
  doses?: InputMaybe<Scalars['Int']>;
  effectsList?: InputMaybe<ProductUpdateeffectsListInput>;
  featuredMedia?: InputMaybe<MediaUpdateOneInput>;
  mediaList?: InputMaybe<MediaUpdateManyInput>;
  name?: InputMaybe<Scalars['String']>;
  productType?: InputMaybe<ProductType>;
  reviews?: InputMaybe<ReviewUpdateManyInput>;
  sku?: InputMaybe<Scalars['String']>;
  strainTypeEffects?: InputMaybe<StrainTypeUpdateOneWithoutProductsInput>;
  strains?: InputMaybe<StrainUpdateManyInput>;
  subCategory?: InputMaybe<SubCategory>;
  tasteList?: InputMaybe<ProductUpdatetasteListInput>;
  tests?: InputMaybe<TestUpdateManyInput>;
  thc?: InputMaybe<Scalars['Int']>;
  weight?: InputMaybe<Scalars['Float']>;
  wellnessEffect?: InputMaybe<WellnessEffectUpdateOneWithoutProductsInput>;
  wellnessList?: InputMaybe<ProductUpdatewellnessListInput>;
};

export type ProductUpdateWithoutWellnessEffectDataInput = {
  aroma?: InputMaybe<AromaUpdateOneWithoutProductsInput>;
  aromaList?: InputMaybe<ProductUpdatearomaListInput>;
  brand?: InputMaybe<BrandUpdateOneWithoutProductsInput>;
  catalog?: InputMaybe<CatalogUpdateOneWithoutProductsInput>;
  catalogItems?: InputMaybe<CatalogItemUpdateManyWithoutProductInput>;
  category?: InputMaybe<Category>;
  cbd?: InputMaybe<Scalars['Int']>;
  createdBy?: InputMaybe<UserUpdateOneWithoutProductsInput>;
  description?: InputMaybe<Scalars['String']>;
  doses?: InputMaybe<Scalars['Int']>;
  effectsList?: InputMaybe<ProductUpdateeffectsListInput>;
  featuredMedia?: InputMaybe<MediaUpdateOneInput>;
  mediaList?: InputMaybe<MediaUpdateManyInput>;
  name?: InputMaybe<Scalars['String']>;
  productType?: InputMaybe<ProductType>;
  reviews?: InputMaybe<ReviewUpdateManyInput>;
  sku?: InputMaybe<Scalars['String']>;
  strainTypeEffects?: InputMaybe<StrainTypeUpdateOneWithoutProductsInput>;
  strains?: InputMaybe<StrainUpdateManyInput>;
  subCategory?: InputMaybe<SubCategory>;
  taste?: InputMaybe<TasteUpdateOneWithoutProductsInput>;
  tasteList?: InputMaybe<ProductUpdatetasteListInput>;
  tests?: InputMaybe<TestUpdateManyInput>;
  thc?: InputMaybe<Scalars['Int']>;
  weight?: InputMaybe<Scalars['Float']>;
  wellnessList?: InputMaybe<ProductUpdatewellnessListInput>;
};

export type ProductUpdatearomaListInput = {
  set?: InputMaybe<Array<Scalars['String']>>;
};

export type ProductUpdateeffectsListInput = {
  set?: InputMaybe<Array<Scalars['String']>>;
};

export type ProductUpdatetasteListInput = {
  set?: InputMaybe<Array<Scalars['String']>>;
};

export type ProductUpdatewellnessListInput = {
  set?: InputMaybe<Array<Scalars['String']>>;
};

export type ProductUpsertNestedInput = {
  create: ProductCreateInput;
  update: ProductUpdateDataInput;
};

export type ProductUpsertWithWhereUniqueNestedInput = {
  create: ProductCreateInput;
  update: ProductUpdateDataInput;
  where: ProductWhereUniqueInput;
};

export type ProductUpsertWithWhereUniqueWithoutAromaInput = {
  create: ProductCreateWithoutAromaInput;
  update: ProductUpdateWithoutAromaDataInput;
  where: ProductWhereUniqueInput;
};

export type ProductUpsertWithWhereUniqueWithoutBrandInput = {
  create: ProductCreateWithoutBrandInput;
  update: ProductUpdateWithoutBrandDataInput;
  where: ProductWhereUniqueInput;
};

export type ProductUpsertWithWhereUniqueWithoutCatalogInput = {
  create: ProductCreateWithoutCatalogInput;
  update: ProductUpdateWithoutCatalogDataInput;
  where: ProductWhereUniqueInput;
};

export type ProductUpsertWithWhereUniqueWithoutCreatedByInput = {
  create: ProductCreateWithoutCreatedByInput;
  update: ProductUpdateWithoutCreatedByDataInput;
  where: ProductWhereUniqueInput;
};

export type ProductUpsertWithWhereUniqueWithoutStrainTypeEffectsInput = {
  create: ProductCreateWithoutStrainTypeEffectsInput;
  update: ProductUpdateWithoutStrainTypeEffectsDataInput;
  where: ProductWhereUniqueInput;
};

export type ProductUpsertWithWhereUniqueWithoutTasteInput = {
  create: ProductCreateWithoutTasteInput;
  update: ProductUpdateWithoutTasteDataInput;
  where: ProductWhereUniqueInput;
};

export type ProductUpsertWithWhereUniqueWithoutWellnessEffectInput = {
  create: ProductCreateWithoutWellnessEffectInput;
  update: ProductUpdateWithoutWellnessEffectDataInput;
  where: ProductWhereUniqueInput;
};

export type ProductUpsertWithoutCatalogItemsInput = {
  create: ProductCreateWithoutCatalogItemsInput;
  update: ProductUpdateWithoutCatalogItemsDataInput;
};

export type ProductWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<ProductWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<ProductWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<ProductWhereInput>>;
  aroma?: InputMaybe<AromaWhereInput>;
  brand?: InputMaybe<BrandWhereInput>;
  catalog?: InputMaybe<CatalogWhereInput>;
  catalogItems_every?: InputMaybe<CatalogItemWhereInput>;
  catalogItems_none?: InputMaybe<CatalogItemWhereInput>;
  catalogItems_some?: InputMaybe<CatalogItemWhereInput>;
  category?: InputMaybe<Category>;
  /** All values that are contained in given list. */
  category_in?: InputMaybe<Array<Category>>;
  /** All values that are not equal to given value. */
  category_not?: InputMaybe<Category>;
  /** All values that are not contained in given list. */
  category_not_in?: InputMaybe<Array<Category>>;
  cbd?: InputMaybe<Scalars['Int']>;
  /** All values greater than the given value. */
  cbd_gt?: InputMaybe<Scalars['Int']>;
  /** All values greater than or equal the given value. */
  cbd_gte?: InputMaybe<Scalars['Int']>;
  /** All values that are contained in given list. */
  cbd_in?: InputMaybe<Array<Scalars['Int']>>;
  /** All values less than the given value. */
  cbd_lt?: InputMaybe<Scalars['Int']>;
  /** All values less than or equal the given value. */
  cbd_lte?: InputMaybe<Scalars['Int']>;
  /** All values that are not equal to given value. */
  cbd_not?: InputMaybe<Scalars['Int']>;
  /** All values that are not contained in given list. */
  cbd_not_in?: InputMaybe<Array<Scalars['Int']>>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  createdBy?: InputMaybe<UserWhereInput>;
  description?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  description_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  description_ends_with?: InputMaybe<Scalars['String']>;
  /** All values greater than the given value. */
  description_gt?: InputMaybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  description_gte?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  description_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  description_lt?: InputMaybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  description_lte?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  description_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  description_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string. */
  description_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  description_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  description_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  description_starts_with?: InputMaybe<Scalars['String']>;
  doses?: InputMaybe<Scalars['Int']>;
  /** All values greater than the given value. */
  doses_gt?: InputMaybe<Scalars['Int']>;
  /** All values greater than or equal the given value. */
  doses_gte?: InputMaybe<Scalars['Int']>;
  /** All values that are contained in given list. */
  doses_in?: InputMaybe<Array<Scalars['Int']>>;
  /** All values less than the given value. */
  doses_lt?: InputMaybe<Scalars['Int']>;
  /** All values less than or equal the given value. */
  doses_lte?: InputMaybe<Scalars['Int']>;
  /** All values that are not equal to given value. */
  doses_not?: InputMaybe<Scalars['Int']>;
  /** All values that are not contained in given list. */
  doses_not_in?: InputMaybe<Array<Scalars['Int']>>;
  featuredMedia?: InputMaybe<MediaWhereInput>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: InputMaybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: InputMaybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: InputMaybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  mediaList_every?: InputMaybe<MediaWhereInput>;
  mediaList_none?: InputMaybe<MediaWhereInput>;
  mediaList_some?: InputMaybe<MediaWhereInput>;
  name?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  name_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  name_ends_with?: InputMaybe<Scalars['String']>;
  /** All values greater than the given value. */
  name_gt?: InputMaybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  name_gte?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  name_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  name_lt?: InputMaybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  name_lte?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  name_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  name_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string. */
  name_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  name_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  name_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  name_starts_with?: InputMaybe<Scalars['String']>;
  productType?: InputMaybe<ProductType>;
  /** All values that are contained in given list. */
  productType_in?: InputMaybe<Array<ProductType>>;
  /** All values that are not equal to given value. */
  productType_not?: InputMaybe<ProductType>;
  /** All values that are not contained in given list. */
  productType_not_in?: InputMaybe<Array<ProductType>>;
  reviews_every?: InputMaybe<ReviewWhereInput>;
  reviews_none?: InputMaybe<ReviewWhereInput>;
  reviews_some?: InputMaybe<ReviewWhereInput>;
  sku?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  sku_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  sku_ends_with?: InputMaybe<Scalars['String']>;
  /** All values greater than the given value. */
  sku_gt?: InputMaybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  sku_gte?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  sku_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  sku_lt?: InputMaybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  sku_lte?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  sku_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  sku_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string. */
  sku_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  sku_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  sku_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  sku_starts_with?: InputMaybe<Scalars['String']>;
  strainTypeEffects?: InputMaybe<StrainTypeWhereInput>;
  strains_every?: InputMaybe<StrainWhereInput>;
  strains_none?: InputMaybe<StrainWhereInput>;
  strains_some?: InputMaybe<StrainWhereInput>;
  subCategory?: InputMaybe<SubCategory>;
  /** All values that are contained in given list. */
  subCategory_in?: InputMaybe<Array<SubCategory>>;
  /** All values that are not equal to given value. */
  subCategory_not?: InputMaybe<SubCategory>;
  /** All values that are not contained in given list. */
  subCategory_not_in?: InputMaybe<Array<SubCategory>>;
  taste?: InputMaybe<TasteWhereInput>;
  tests_every?: InputMaybe<TestWhereInput>;
  tests_none?: InputMaybe<TestWhereInput>;
  tests_some?: InputMaybe<TestWhereInput>;
  thc?: InputMaybe<Scalars['Int']>;
  /** All values greater than the given value. */
  thc_gt?: InputMaybe<Scalars['Int']>;
  /** All values greater than or equal the given value. */
  thc_gte?: InputMaybe<Scalars['Int']>;
  /** All values that are contained in given list. */
  thc_in?: InputMaybe<Array<Scalars['Int']>>;
  /** All values less than the given value. */
  thc_lt?: InputMaybe<Scalars['Int']>;
  /** All values less than or equal the given value. */
  thc_lte?: InputMaybe<Scalars['Int']>;
  /** All values that are not equal to given value. */
  thc_not?: InputMaybe<Scalars['Int']>;
  /** All values that are not contained in given list. */
  thc_not_in?: InputMaybe<Array<Scalars['Int']>>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  weight?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  weight_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  weight_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  weight_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  weight_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  weight_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  weight_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  weight_not_in?: InputMaybe<Array<Scalars['Float']>>;
  wellnessEffect?: InputMaybe<WellnessEffectWhereInput>;
};

export type ProductWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export enum PublisherDeviceType {
  Android = 'ANDROID',
  Ios = 'IOS',
  Website = 'WEBSITE'
}

export type Qr = Node & {
  __typename?: 'QR';
  createdAt: Scalars['DateTime'];
  id: Scalars['ID'];
  location?: Maybe<Location>;
  qrType: QrType;
  tickets?: Maybe<Tickets>;
  updatedAt: Scalars['DateTime'];
  url: Scalars['String'];
};

export type QrCreateManyWithoutLocationInput = {
  connect?: InputMaybe<Array<QrWhereUniqueInput>>;
  create?: InputMaybe<Array<QrCreateWithoutLocationInput>>;
};

export type QrCreateOneWithoutTicketsInput = {
  connect?: InputMaybe<QrWhereUniqueInput>;
  create?: InputMaybe<QrCreateWithoutTicketsInput>;
};

export type QrCreateWithoutLocationInput = {
  qrType: QrType;
  tickets?: InputMaybe<TicketsCreateOneWithoutQrInput>;
  url: Scalars['String'];
};

export type QrCreateWithoutTicketsInput = {
  location?: InputMaybe<LocationCreateOneWithoutQrsInput>;
  qrType: QrType;
  url: Scalars['String'];
};

export enum QrOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  QrTypeAsc = 'qrType_ASC',
  QrTypeDesc = 'qrType_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  UrlAsc = 'url_ASC',
  UrlDesc = 'url_DESC'
}

export enum QrType {
  Shortlink = 'SHORTLINK',
  Ticket = 'TICKET'
}

export type QrUpdateManyWithoutLocationInput = {
  connect?: InputMaybe<Array<QrWhereUniqueInput>>;
  create?: InputMaybe<Array<QrCreateWithoutLocationInput>>;
  delete?: InputMaybe<Array<QrWhereUniqueInput>>;
  disconnect?: InputMaybe<Array<QrWhereUniqueInput>>;
  update?: InputMaybe<Array<QrUpdateWithWhereUniqueWithoutLocationInput>>;
  upsert?: InputMaybe<Array<QrUpsertWithWhereUniqueWithoutLocationInput>>;
};

export type QrUpdateOneWithoutTicketsInput = {
  connect?: InputMaybe<QrWhereUniqueInput>;
  create?: InputMaybe<QrCreateWithoutTicketsInput>;
  delete?: InputMaybe<Scalars['Boolean']>;
  disconnect?: InputMaybe<Scalars['Boolean']>;
  update?: InputMaybe<QrUpdateWithoutTicketsDataInput>;
  upsert?: InputMaybe<QrUpsertWithoutTicketsInput>;
};

export type QrUpdateWithWhereUniqueWithoutLocationInput = {
  data: QrUpdateWithoutLocationDataInput;
  where: QrWhereUniqueInput;
};

export type QrUpdateWithoutLocationDataInput = {
  qrType?: InputMaybe<QrType>;
  tickets?: InputMaybe<TicketsUpdateOneWithoutQrInput>;
  url?: InputMaybe<Scalars['String']>;
};

export type QrUpdateWithoutTicketsDataInput = {
  location?: InputMaybe<LocationUpdateOneWithoutQrsInput>;
  qrType?: InputMaybe<QrType>;
  url?: InputMaybe<Scalars['String']>;
};

export type QrUpsertWithWhereUniqueWithoutLocationInput = {
  create: QrCreateWithoutLocationInput;
  update: QrUpdateWithoutLocationDataInput;
  where: QrWhereUniqueInput;
};

export type QrUpsertWithoutTicketsInput = {
  create: QrCreateWithoutTicketsInput;
  update: QrUpdateWithoutTicketsDataInput;
};

export type QrWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<QrWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<QrWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<QrWhereInput>>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: InputMaybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: InputMaybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: InputMaybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  location?: InputMaybe<LocationWhereInput>;
  qrType?: InputMaybe<QrType>;
  /** All values that are contained in given list. */
  qrType_in?: InputMaybe<Array<QrType>>;
  /** All values that are not equal to given value. */
  qrType_not?: InputMaybe<QrType>;
  /** All values that are not contained in given list. */
  qrType_not_in?: InputMaybe<Array<QrType>>;
  tickets?: InputMaybe<TicketsWhereInput>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  url?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  url_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  url_ends_with?: InputMaybe<Scalars['String']>;
  /** All values greater than the given value. */
  url_gt?: InputMaybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  url_gte?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  url_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  url_lt?: InputMaybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  url_lte?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  url_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  url_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string. */
  url_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  url_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  url_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  url_starts_with?: InputMaybe<Scalars['String']>;
};

export type QrWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export type Query = {
  __typename?: 'Query';
  activateAudienceDevicesFromS3?: Maybe<Scalars['JSON']>;
  adGroupCreatives?: Maybe<AdGroupCreatives>;
  adGroupCreativeses: Array<Maybe<AdGroupCreatives>>;
  adPublisher?: Maybe<AdPublisher>;
  article?: Maybe<Article>;
  articleCategories: Array<Maybe<ArticleCategory>>;
  articleCategory?: Maybe<ArticleCategory>;
  articles: Array<Maybe<Article>>;
  audience?: Maybe<Audience>;
  audienceRetargeting?: Maybe<Scalars['JSON']>;
  audiences: Array<Maybe<Audience>>;
  audiencesConnection: AudienceConnection;
  brand?: Maybe<Brand>;
  brands: Array<Maybe<Brand>>;
  campaign?: Maybe<Campaign>;
  campaignOrder?: Maybe<CampaignOrder>;
  campaignOrders: Array<Maybe<CampaignOrder>>;
  campaignOrdersConnection: CampaignOrderConnection;
  campaignReportsConnection: CampaignReportConnection;
  campaigns: Array<Maybe<Campaign>>;
  campaignsConnection: CampaignConnection;
  cannatypes: Array<Maybe<Cannatype>>;
  catalog?: Maybe<Catalog>;
  catalogItems: Array<Maybe<CatalogItem>>;
  conversation?: Maybe<Conversation>;
  conversations: Array<Maybe<Conversation>>;
  creatives: Array<Maybe<Creative>>;
  customers: Array<Maybe<Customer>>;
  eventsTargets: Array<Maybe<EventsTarget>>;
  eventsTargetsConnection: EventsTargetConnection;
  executeCubeJsQuery: Scalars['JSON'];
  geoTargets?: Maybe<Array<GeoTarget>>;
  geoTargetsConnection: GeoTargetConnection;
  getAdServerProfile: Scalars['JSON'];
  getAdServerSegment: Scalars['JSON'];
  getAdServerSegments: Scalars['JSON'];
  getAdServerToken?: Maybe<Scalars['String']>;
  getAmobeeAdvertisers: Array<Maybe<AmobeeAdvertiser>>;
  getAmobeeCreatives: Array<Maybe<AmobeeCreative>>;
  getAmobeeInsertionOrders: Array<Maybe<AmobeeInsertionOrder>>;
  getAmobeeSegments: Array<Maybe<AmobeeSegment>>;
  getAudienceDevices?: Maybe<Scalars['JSON']>;
  getAudienceDevicesFromS3?: Maybe<Scalars['JSON']>;
  getBasicTagActivity?: Maybe<Scalars['String']>;
  getBasketItems?: Maybe<Scalars['JSON']>;
  getBatchReports?: Maybe<Scalars['JSON']>;
  getCampaignOrdersSummaryByDate?: Maybe<Scalars['JSON']>;
  getCampaignReportSignedURL?: Maybe<CampaignReportSignedUrl>;
  getCampaignReportSignedURLs?: Maybe<Array<CampaignReportSignedUrl>>;
  getCubeJsToken: Scalars['String'];
  getOnspotDemographics: Scalars['JSON'];
  getOnspotDeviceCount: Scalars['JSON'];
  getOrgReportSignedURL?: Maybe<OrgReportSignedUrl>;
  getOrgSendEmailConfig?: Maybe<OrgSendEmailConfigData>;
  getOrgTableConfig?: Maybe<OrgTableConfigData>;
  getOrgThemeConfig?: Maybe<OrgThemeConfigData>;
  getPacingReportFilterOptions?: Maybe<Scalars['JSON']>;
  getPaidSearchCpc?: Maybe<Scalars['JSON']>;
  getPaidSearchKeywords?: Maybe<Scalars['JSON']>;
  getPaidSearchLocations?: Maybe<Scalars['JSON']>;
  getPaidSearchOrganic?: Maybe<Scalars['JSON']>;
  getPaidSearchReports?: Maybe<PaidSearchReports>;
  getPaidSearchSummary?: Maybe<Org>;
  getRecommendationPercent: RecommendationValue;
  getRecommendationValue: RecommendationValue;
  getRecommendedProduct?: Maybe<Product>;
  getRetargetingDevices?: Maybe<Scalars['JSON']>;
  getRollUpDisplay?: Maybe<Scalars['JSON']>;
  getRollUpPaidSearch?: Maybe<Scalars['JSON']>;
  getRollUpPaidSearchAnalytics?: Maybe<Scalars['JSON']>;
  getRollUpSEO?: Maybe<Scalars['JSON']>;
  getRollUpSEOAnalytics?: Maybe<Scalars['JSON']>;
  getSegment: AppNexusSegment;
  getSegmentOnspotDemographics: Scalars['JSON'];
  getSegments: Array<AppNexusSegment>;
  getSegmentsWithObservations: GeoTargetConnection;
  getSharingRecord: AppNexusSharingRecord;
  getSharingRecords: Array<AppNexusSharingRecord>;
  getSignedURL?: Maybe<Scalars['String']>;
  getSummaryDeviceClicks?: Maybe<Scalars['JSON']>;
  iABCategoryGroups: Array<Maybe<IabCategoryGroup>>;
  license?: Maybe<License>;
  licenses: Array<Maybe<License>>;
  licensesConnection: LicenseConnection;
  liquidMAccounts?: Maybe<Scalars['JSON']>;
  liquidMAds?: Maybe<Scalars['JSON']>;
  liquidMAdsTargeting?: Maybe<Scalars['JSON']>;
  liquidMCampaign?: Maybe<Scalars['JSON']>;
  liquidMCampaignPause?: Maybe<Scalars['JSON']>;
  liquidMCampaignStart?: Maybe<Scalars['JSON']>;
  liquidMCampaigns?: Maybe<Scalars['JSON']>;
  liquidMRegions?: Maybe<Scalars['JSON']>;
  liquidMSetting?: Maybe<Scalars['JSON']>;
  liquidMSettings?: Maybe<Scalars['JSON']>;
  liquidMSupplies?: Maybe<Scalars['JSON']>;
  liquidMSupply?: Maybe<Scalars['JSON']>;
  location?: Maybe<Location>;
  locations: Array<Maybe<Location>>;
  loyaltyCampaigns: Array<Maybe<LoyaltyCampaign>>;
  media?: Maybe<Media>;
  medias: Array<Maybe<Media>>;
  message?: Maybe<Message>;
  messages: Array<Maybe<Message>>;
  notification?: Maybe<Notification>;
  notifications: Array<Maybe<Notification>>;
  org?: Maybe<Org>;
  orgSeoSummaries: Array<Maybe<OrgSeoSummary>>;
  orgSeoSummary?: Maybe<OrgSeoSummary>;
  orgSummaries: Array<Maybe<OrgSummary>>;
  orgSummary?: Maybe<OrgSummary>;
  orgTagsConfigs: Array<Maybe<OrgTagsConfig>>;
  orgs: Array<Maybe<Org>>;
  orgsConnection: OrgConnection;
  pacingDataObjectsConnection: PacingDataObjectConnection;
  paidSearchBingCampaignses: Array<Maybe<PaidSearchBingCampaigns>>;
  paidSearchBingUnit?: Maybe<PaidSearchBingUnit>;
  paidSearchBingUnits: Array<Maybe<PaidSearchBingUnit>>;
  paidSearchCampaign?: Maybe<PaidSearchCampaign>;
  paidSearchCampaigns: Array<Maybe<PaidSearchCampaign>>;
  paidSearchSummaries: Array<Maybe<PaidSearchSummary>>;
  paidSearchSummariesConnection?: Maybe<PaidSearchSummaryConnection>;
  paidSearchSummary?: Maybe<PaidSearchSummary>;
  product?: Maybe<Product>;
  products: Array<Maybe<Product>>;
  productsWithRecommendation: Array<Maybe<Product>>;
  regionGroups: Array<Maybe<RegionGroup>>;
  releaseReports: Array<Maybe<ReleaseReport>>;
  reprocessCampaign?: Maybe<Scalars['JSON']>;
  reviews: Array<Maybe<Review>>;
  scrapeDSPCampaigns?: Maybe<Scalars['JSON']>;
  strain?: Maybe<Strain>;
  strains: Array<Maybe<Strain>>;
  transactionsByCampaignOrder?: Maybe<Scalars['JSON']>;
  triggerAirflowDAG?: Maybe<Scalars['JSON']>;
  uglifyJS?: Maybe<Scalars['JSON']>;
  user?: Maybe<User>;
  users: Array<Maybe<User>>;
  viewGeoTargetUpdatedBase?: Maybe<Scalars['JSON']>;
  viewMappingRecords?: Maybe<Scalars['JSON']>;
  viewTaxonomy?: Maybe<Scalars['JSON']>;
};


export type QueryActivateAudienceDevicesFromS3Args = {
  audienceId: Scalars['String'];
  type: Scalars['String'];
};


export type QueryAdGroupCreativesArgs = {
  where: AdGroupCreativesWhereUniqueInput;
};


export type QueryAdGroupCreativesesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<AdGroupCreativesOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<AdGroupCreativesWhereInput>;
};


export type QueryAdPublisherArgs = {
  where?: InputMaybe<AdPublisherWhereInput>;
};


export type QueryArticleArgs = {
  where: ArticleWhereUniqueInput;
};


export type QueryArticleCategoriesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ArticleCategoryOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ArticleCategoryWhereInput>;
};


export type QueryArticleCategoryArgs = {
  where: ArticleCategoryWhereUniqueInput;
};


export type QueryArticlesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ArticleOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ArticleWhereInput>;
};


export type QueryAudienceArgs = {
  where: AudienceWhereUniqueInput;
};


export type QueryAudienceRetargetingArgs = {
  where: AudienceWhereUniqueInput;
};


export type QueryAudiencesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<AudienceOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<AudienceWhereInput>;
};


export type QueryAudiencesConnectionArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<AudienceOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<AudienceWhereInput>;
};


export type QueryBrandArgs = {
  where: BrandWhereUniqueInput;
};


export type QueryBrandsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<BrandOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<BrandWhereInput>;
};


export type QueryCampaignArgs = {
  where: CampaignWhereUniqueInput;
};


export type QueryCampaignOrderArgs = {
  where: CampaignOrderWhereUniqueInput;
};


export type QueryCampaignOrdersArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<CampaignOrderOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<CampaignOrderWhereInput>;
};


export type QueryCampaignOrdersConnectionArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<CampaignOrderOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<CampaignOrderWhereInput>;
};


export type QueryCampaignReportsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<CampaignReportOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<CampaignReportWhereInput>;
};


export type QueryCampaignsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<CampaignOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<CampaignWhereInput>;
};


export type QueryCampaignsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<CampaignOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<CampaignWhereInput>;
};


export type QueryCannatypesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<CannatypeOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<CannatypeWhereInput>;
};


export type QueryCatalogArgs = {
  where: CatalogWhereUniqueInput;
};


export type QueryCatalogItemsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<CatalogItemOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<CatalogItemWhereInput>;
};


export type QueryConversationArgs = {
  where: ConversationWhereUniqueInput;
};


export type QueryConversationsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ConversationOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ConversationWhereInput>;
};


export type QueryCreativesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<CreativeOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<CreativeWhereInput>;
};


export type QueryCustomersArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<CustomerOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<CustomerWhereInput>;
};


export type QueryEventsTargetsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<EventsTargetOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<EventsTargetWhereInput>;
};


export type QueryEventsTargetsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<EventsTargetOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<EventsTargetWhereInput>;
};


export type QueryExecuteCubeJsQueryArgs = {
  query: Scalars['JSON'];
  token: Scalars['String'];
};


export type QueryGeoTargetsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<GeoTargetOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<GeoTargetWhereInput>;
};


export type QueryGeoTargetsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<GeoTargetOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<GeoTargetWhereInput>;
};


export type QueryGetAdServerProfileArgs = {
  profileId: Scalars['String'];
  token: Scalars['String'];
};


export type QueryGetAdServerSegmentArgs = {
  segmentId: Scalars['String'];
  token: Scalars['String'];
};


export type QueryGetAdServerSegmentsArgs = {
  token: Scalars['String'];
};


export type QueryGetAudienceDevicesArgs = {
  audienceId: Scalars['String'];
};


export type QueryGetAudienceDevicesFromS3Args = {
  audienceId: Scalars['String'];
  type: Scalars['String'];
};


export type QueryGetBasicTagActivityArgs = {
  appId: Scalars['String'];
  orgId: Scalars['String'];
};


export type QueryGetBasketItemsArgs = {
  appId: Scalars['String'];
  transactionId: Scalars['String'];
};


export type QueryGetBatchReportsArgs = {
  endDate: Scalars['String'];
  keyFileName: Scalars['String'];
  scopes?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  startDate: Scalars['String'];
  viewId: Scalars['String'];
};


export type QueryGetCampaignOrdersSummaryByDateArgs = {
  campaignOrderIds: Array<InputMaybe<Scalars['String']>>;
};


export type QueryGetCampaignReportSignedUrlArgs = {
  reportId: Scalars['ID'];
};


export type QueryGetCampaignReportSignedUrLsArgs = {
  reportId: Array<Scalars['ID']>;
};


export type QueryGetOnspotDemographicsArgs = {
  coordinates: Array<InputMaybe<Array<InputMaybe<Array<InputMaybe<Scalars['Float']>>>>>>;
  demographics: Array<InputMaybe<Scalars['String']>>;
  end: Scalars['String'];
  name: Scalars['String'];
  start: Scalars['String'];
};


export type QueryGetOnspotDeviceCountArgs = {
  coordinates?: InputMaybe<Array<InputMaybe<Array<InputMaybe<Array<InputMaybe<Scalars['Float']>>>>>>>;
  endDate: Scalars['String'];
  startDate: Scalars['String'];
};


export type QueryGetOrgReportSignedUrlArgs = {
  reportId: Scalars['ID'];
};


export type QueryGetOrgSendEmailConfigArgs = {
  where: OrgWhereUniqueInput;
};


export type QueryGetOrgTableConfigArgs = {
  where: OrgWhereUniqueInput;
};


export type QueryGetOrgThemeConfigArgs = {
  where: OrgWhereUniqueInput;
};


export type QueryGetPaidSearchCpcArgs = {
  where: OrgWhereUniqueInput;
};


export type QueryGetPaidSearchKeywordsArgs = {
  where: OrgWhereUniqueInput;
};


export type QueryGetPaidSearchLocationsArgs = {
  where: OrgWhereUniqueInput;
};


export type QueryGetPaidSearchOrganicArgs = {
  where: OrgWhereUniqueInput;
};


export type QueryGetPaidSearchReportsArgs = {
  where: OrgWhereUniqueInput;
};


export type QueryGetPaidSearchSummaryArgs = {
  campaignsWhere: PaidSearchCampaignWhereInput;
  where: OrgWhereUniqueInput;
};


export type QueryGetRecommendationPercentArgs = {
  productId: Scalars['ID'];
};


export type QueryGetRecommendationValueArgs = {
  productId: Scalars['ID'];
};


export type QueryGetRecommendedProductArgs = {
  productCategory: Category;
};


export type QueryGetRetargetingDevicesArgs = {
  campaignOrderId: Scalars['ID'];
};


export type QueryGetRollUpDisplayArgs = {
  advertiserIds?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  endDate?: InputMaybe<Scalars['DateTime']>;
  orgId: Scalars['String'];
  parentOrgId?: InputMaybe<Scalars['String']>;
  startDate?: InputMaybe<Scalars['DateTime']>;
};


export type QueryGetRollUpPaidSearchArgs = {
  advertiserIds?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  endDate?: InputMaybe<Scalars['DateTime']>;
  orgId: Scalars['String'];
  parentOrgId?: InputMaybe<Scalars['String']>;
  startDate?: InputMaybe<Scalars['DateTime']>;
};


export type QueryGetRollUpPaidSearchAnalyticsArgs = {
  advertiserIds?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  endDate?: InputMaybe<Scalars['DateTime']>;
  orgId?: InputMaybe<Scalars['String']>;
  parentOrgId?: InputMaybe<Scalars['String']>;
  startDate?: InputMaybe<Scalars['DateTime']>;
};


export type QueryGetRollUpSeoArgs = {
  advertiserIds?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  endDate?: InputMaybe<Scalars['DateTime']>;
  orgId: Scalars['String'];
  parentOrgId?: InputMaybe<Scalars['String']>;
  startDate?: InputMaybe<Scalars['DateTime']>;
};


export type QueryGetRollUpSeoAnalyticsArgs = {
  advertiserIds?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  endDate?: InputMaybe<Scalars['DateTime']>;
  orgId: Scalars['String'];
  parentOrgId?: InputMaybe<Scalars['String']>;
  startDate?: InputMaybe<Scalars['DateTime']>;
};


export type QueryGetSegmentArgs = {
  where: AppNexusSegmentInput;
};


export type QueryGetSegmentOnspotDemographicsArgs = {
  demographics: Array<InputMaybe<Scalars['String']>>;
  segmentId: Scalars['String'];
};


export type QueryGetSegmentsArgs = {
  where: AppNexusSegmentInput;
};


export type QueryGetSegmentsWithObservationsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<GeoTargetOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<GeoTargetWhereInput>;
};


export type QueryGetSharingRecordArgs = {
  where: ById;
};


export type QueryGetSignedUrlArgs = {
  key: Scalars['String'];
};


export type QueryGetSummaryDeviceClicksArgs = {
  advertiserIds?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  campaignOrderIds?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  orgId: Scalars['String'];
  parentOrgId?: InputMaybe<Scalars['String']>;
};


export type QueryIAbCategoryGroupsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<IabCategoryGroupOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<IabCategoryGroupWhereInput>;
};


export type QueryLicenseArgs = {
  where: LicenseWhereUniqueInput;
};


export type QueryLicensesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<LicenseOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<LicenseWhereInput>;
};


export type QueryLicensesConnectionArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<LicenseOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<LicenseWhereInput>;
};


export type QueryLiquidMAdsArgs = {
  id?: InputMaybe<Scalars['Int']>;
};


export type QueryLiquidMAdsTargetingArgs = {
  id?: InputMaybe<Scalars['Int']>;
};


export type QueryLiquidMCampaignArgs = {
  id?: InputMaybe<Scalars['Int']>;
};


export type QueryLiquidMCampaignPauseArgs = {
  id?: InputMaybe<Scalars['Int']>;
};


export type QueryLiquidMCampaignStartArgs = {
  id?: InputMaybe<Scalars['Int']>;
};


export type QueryLiquidMRegionsArgs = {
  name?: InputMaybe<Scalars['String']>;
};


export type QueryLiquidMSettingArgs = {
  id?: InputMaybe<Scalars['Int']>;
};


export type QueryLiquidMSuppliesArgs = {
  attributes?: InputMaybe<LiquidMSupplyAttributeInput>;
  id?: InputMaybe<Scalars['String']>;
};


export type QueryLiquidMSupplyArgs = {
  attributes?: InputMaybe<LiquidMSupplyAttributeInput>;
  id?: InputMaybe<Scalars['String']>;
};


export type QueryLocationArgs = {
  where: LocationWhereUniqueInput;
};


export type QueryLocationsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<LocationOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<LocationWhereInput>;
};


export type QueryLoyaltyCampaignsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<LoyaltyCampaignOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<LoyaltyCampaignWhereInput>;
};


export type QueryMediaArgs = {
  where: MediaWhereUniqueInput;
};


export type QueryMediasArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MediaOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<MediaWhereInput>;
};


export type QueryMessageArgs = {
  where: MessageWhereUniqueInput;
};


export type QueryMessagesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MessageOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<MessageWhereInput>;
};


export type QueryNotificationArgs = {
  where: NotificationWhereUniqueInput;
};


export type QueryNotificationsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<NotificationOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<NotificationWhereInput>;
};


export type QueryOrgArgs = {
  where: OrgWhereUniqueInput;
};


export type QueryOrgSeoSummariesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<OrgSeoSummaryOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<OrgSeoSummaryWhereInput>;
};


export type QueryOrgSeoSummaryArgs = {
  where: OrgSeoSummaryWhereUniqueInput;
};


export type QueryOrgSummariesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<OrgSummaryOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<OrgSummaryWhereInput>;
};


export type QueryOrgSummaryArgs = {
  where: OrgSummaryWhereUniqueInput;
};


export type QueryOrgTagsConfigsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<OrgTagsConfigOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<OrgTagsConfigWhereInput>;
};


export type QueryOrgsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<OrgOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<OrgWhereInput>;
};


export type QueryOrgsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<OrgOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<OrgWhereInput>;
};


export type QueryPacingDataObjectsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<PacingDataObjectOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<PacingDataObjectWhereInput>;
};


export type QueryPaidSearchBingCampaignsesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<PaidSearchBingCampaignsOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<PaidSearchBingCampaignsWhereInput>;
};


export type QueryPaidSearchBingUnitArgs = {
  where: PaidSearchBingUnitWhereUniqueInput;
};


export type QueryPaidSearchBingUnitsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<PaidSearchBingUnitOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<PaidSearchBingUnitWhereInput>;
};


export type QueryPaidSearchCampaignArgs = {
  where?: InputMaybe<PaidSearchCampaignWhereInput>;
};


export type QueryPaidSearchCampaignsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<PaidSearchCampaignOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<PaidSearchCampaignWhereInput>;
};


export type QueryPaidSearchSummariesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<PaidSearchSummaryOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<PaidSearchSummaryWhereInput>;
};


export type QueryPaidSearchSummariesConnectionArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<PaidSearchSummaryOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<PaidSearchSummaryWhereInput>;
};


export type QueryPaidSearchSummaryArgs = {
  where: PaidSearchSummaryWhereUniqueInput;
};


export type QueryProductArgs = {
  where: ProductWhereUniqueInput;
};


export type QueryProductsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ProductOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ProductWhereInput>;
};


export type QueryProductsWithRecommendationArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ProductOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ProductWhereInput>;
};


export type QueryRegionGroupsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<RegionGroupOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<RegionGroupWhereInput>;
};


export type QueryReleaseReportsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ReleaseReportOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ReleaseReportWhereInput>;
};


export type QueryReprocessCampaignArgs = {
  where: CampaignOrderWhereUniqueInput;
};


export type QueryReviewsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ReviewOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ReviewWhereInput>;
};


export type QueryStrainArgs = {
  where: StrainWhereUniqueInput;
};


export type QueryStrainsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<StrainOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<StrainWhereInput>;
};


export type QueryTransactionsByCampaignOrderArgs = {
  appId: Scalars['String'];
  campaignOrderId: Scalars['ID'];
};


export type QueryTriggerAirflowDagArgs = {
  where?: InputMaybe<Scalars['JSON']>;
};


export type QueryUglifyJsArgs = {
  jscode: Scalars['String'];
};


export type QueryUserArgs = {
  where: UserWhereUniqueInput;
};


export type QueryUsersArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<UserOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<UserWhereInput>;
};

export type RecommendationValue = {
  __typename?: 'RecommendationValue';
  value?: Maybe<Scalars['Float']>;
};

export type RegionGroup = Node & {
  __typename?: 'RegionGroup';
  createdAt: Scalars['DateTime'];
  createdBy?: Maybe<User>;
  id: Scalars['ID'];
  isActive?: Maybe<Scalars['Boolean']>;
  name: Scalars['String'];
  orgs?: Maybe<Array<Org>>;
  regions: Array<Scalars['String']>;
  updatedAt: Scalars['DateTime'];
  updatedBy?: Maybe<User>;
};


export type RegionGroupOrgsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<OrgOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<OrgWhereInput>;
};

export type RegionGroupCreateInput = {
  createdBy?: InputMaybe<UserCreateOneWithoutCreatedRegionGroupsInput>;
  isActive?: InputMaybe<Scalars['Boolean']>;
  name: Scalars['String'];
  orgs?: InputMaybe<OrgCreateManyWithoutRegionGroupInput>;
  regions?: InputMaybe<RegionGroupCreateregionsInput>;
  updatedBy?: InputMaybe<UserCreateOneWithoutUpdatedRegionGroupsInput>;
};

export type RegionGroupCreateManyWithoutCreatedByInput = {
  connect?: InputMaybe<Array<RegionGroupWhereUniqueInput>>;
  create?: InputMaybe<Array<RegionGroupCreateWithoutCreatedByInput>>;
};

export type RegionGroupCreateManyWithoutOrgsInput = {
  connect?: InputMaybe<Array<RegionGroupWhereUniqueInput>>;
  create?: InputMaybe<Array<RegionGroupCreateWithoutOrgsInput>>;
};

export type RegionGroupCreateManyWithoutUpdatedByInput = {
  connect?: InputMaybe<Array<RegionGroupWhereUniqueInput>>;
  create?: InputMaybe<Array<RegionGroupCreateWithoutUpdatedByInput>>;
};

export type RegionGroupCreateWithoutCreatedByInput = {
  isActive?: InputMaybe<Scalars['Boolean']>;
  name: Scalars['String'];
  orgs?: InputMaybe<OrgCreateManyWithoutRegionGroupInput>;
  regions?: InputMaybe<RegionGroupCreateregionsInput>;
  updatedBy?: InputMaybe<UserCreateOneWithoutUpdatedRegionGroupsInput>;
};

export type RegionGroupCreateWithoutOrgsInput = {
  createdBy?: InputMaybe<UserCreateOneWithoutCreatedRegionGroupsInput>;
  isActive?: InputMaybe<Scalars['Boolean']>;
  name: Scalars['String'];
  regions?: InputMaybe<RegionGroupCreateregionsInput>;
  updatedBy?: InputMaybe<UserCreateOneWithoutUpdatedRegionGroupsInput>;
};

export type RegionGroupCreateWithoutUpdatedByInput = {
  createdBy?: InputMaybe<UserCreateOneWithoutCreatedRegionGroupsInput>;
  isActive?: InputMaybe<Scalars['Boolean']>;
  name: Scalars['String'];
  orgs?: InputMaybe<OrgCreateManyWithoutRegionGroupInput>;
  regions?: InputMaybe<RegionGroupCreateregionsInput>;
};

export type RegionGroupCreateregionsInput = {
  set?: InputMaybe<Array<Scalars['String']>>;
};

export enum RegionGroupOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  IsActiveAsc = 'isActive_ASC',
  IsActiveDesc = 'isActive_DESC',
  NameAsc = 'name_ASC',
  NameDesc = 'name_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC'
}

export type RegionGroupUpdateManyWithoutCreatedByInput = {
  connect?: InputMaybe<Array<RegionGroupWhereUniqueInput>>;
  create?: InputMaybe<Array<RegionGroupCreateWithoutCreatedByInput>>;
  delete?: InputMaybe<Array<RegionGroupWhereUniqueInput>>;
  disconnect?: InputMaybe<Array<RegionGroupWhereUniqueInput>>;
  update?: InputMaybe<Array<RegionGroupUpdateWithWhereUniqueWithoutCreatedByInput>>;
  upsert?: InputMaybe<Array<RegionGroupUpsertWithWhereUniqueWithoutCreatedByInput>>;
};

export type RegionGroupUpdateManyWithoutOrgsInput = {
  connect?: InputMaybe<Array<RegionGroupWhereUniqueInput>>;
  create?: InputMaybe<Array<RegionGroupCreateWithoutOrgsInput>>;
  delete?: InputMaybe<Array<RegionGroupWhereUniqueInput>>;
  disconnect?: InputMaybe<Array<RegionGroupWhereUniqueInput>>;
  update?: InputMaybe<Array<RegionGroupUpdateWithWhereUniqueWithoutOrgsInput>>;
  upsert?: InputMaybe<Array<RegionGroupUpsertWithWhereUniqueWithoutOrgsInput>>;
};

export type RegionGroupUpdateManyWithoutUpdatedByInput = {
  connect?: InputMaybe<Array<RegionGroupWhereUniqueInput>>;
  create?: InputMaybe<Array<RegionGroupCreateWithoutUpdatedByInput>>;
  delete?: InputMaybe<Array<RegionGroupWhereUniqueInput>>;
  disconnect?: InputMaybe<Array<RegionGroupWhereUniqueInput>>;
  update?: InputMaybe<Array<RegionGroupUpdateWithWhereUniqueWithoutUpdatedByInput>>;
  upsert?: InputMaybe<Array<RegionGroupUpsertWithWhereUniqueWithoutUpdatedByInput>>;
};

export type RegionGroupUpdateWithWhereUniqueWithoutCreatedByInput = {
  data: RegionGroupUpdateWithoutCreatedByDataInput;
  where: RegionGroupWhereUniqueInput;
};

export type RegionGroupUpdateWithWhereUniqueWithoutOrgsInput = {
  data: RegionGroupUpdateWithoutOrgsDataInput;
  where: RegionGroupWhereUniqueInput;
};

export type RegionGroupUpdateWithWhereUniqueWithoutUpdatedByInput = {
  data: RegionGroupUpdateWithoutUpdatedByDataInput;
  where: RegionGroupWhereUniqueInput;
};

export type RegionGroupUpdateWithoutCreatedByDataInput = {
  isActive?: InputMaybe<Scalars['Boolean']>;
  name?: InputMaybe<Scalars['String']>;
  orgs?: InputMaybe<OrgUpdateManyWithoutRegionGroupInput>;
  regions?: InputMaybe<RegionGroupUpdateregionsInput>;
  updatedBy?: InputMaybe<UserUpdateOneWithoutUpdatedRegionGroupsInput>;
};

export type RegionGroupUpdateWithoutOrgsDataInput = {
  createdBy?: InputMaybe<UserUpdateOneWithoutCreatedRegionGroupsInput>;
  isActive?: InputMaybe<Scalars['Boolean']>;
  name?: InputMaybe<Scalars['String']>;
  regions?: InputMaybe<RegionGroupUpdateregionsInput>;
  updatedBy?: InputMaybe<UserUpdateOneWithoutUpdatedRegionGroupsInput>;
};

export type RegionGroupUpdateWithoutUpdatedByDataInput = {
  createdBy?: InputMaybe<UserUpdateOneWithoutCreatedRegionGroupsInput>;
  isActive?: InputMaybe<Scalars['Boolean']>;
  name?: InputMaybe<Scalars['String']>;
  orgs?: InputMaybe<OrgUpdateManyWithoutRegionGroupInput>;
  regions?: InputMaybe<RegionGroupUpdateregionsInput>;
};

export type RegionGroupUpdateregionsInput = {
  set?: InputMaybe<Array<Scalars['String']>>;
};

export type RegionGroupUpsertWithWhereUniqueWithoutCreatedByInput = {
  create: RegionGroupCreateWithoutCreatedByInput;
  update: RegionGroupUpdateWithoutCreatedByDataInput;
  where: RegionGroupWhereUniqueInput;
};

export type RegionGroupUpsertWithWhereUniqueWithoutOrgsInput = {
  create: RegionGroupCreateWithoutOrgsInput;
  update: RegionGroupUpdateWithoutOrgsDataInput;
  where: RegionGroupWhereUniqueInput;
};

export type RegionGroupUpsertWithWhereUniqueWithoutUpdatedByInput = {
  create: RegionGroupCreateWithoutUpdatedByInput;
  update: RegionGroupUpdateWithoutUpdatedByDataInput;
  where: RegionGroupWhereUniqueInput;
};

export type RegionGroupWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<RegionGroupWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<RegionGroupWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<RegionGroupWhereInput>>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  createdBy?: InputMaybe<UserWhereInput>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: InputMaybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: InputMaybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: InputMaybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  isActive?: InputMaybe<Scalars['Boolean']>;
  /** All values that are not equal to given value. */
  isActive_not?: InputMaybe<Scalars['Boolean']>;
  name?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  name_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  name_ends_with?: InputMaybe<Scalars['String']>;
  /** All values greater than the given value. */
  name_gt?: InputMaybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  name_gte?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  name_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  name_lt?: InputMaybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  name_lte?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  name_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  name_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string. */
  name_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  name_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  name_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  name_starts_with?: InputMaybe<Scalars['String']>;
  orgs_every?: InputMaybe<OrgWhereInput>;
  orgs_none?: InputMaybe<OrgWhereInput>;
  orgs_some?: InputMaybe<OrgWhereInput>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

export type RegionGroupWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export type ReleaseReport = Node & {
  __typename?: 'ReleaseReport';
  body: Scalars['String'];
  createdAt: Scalars['DateTime'];
  draft?: Maybe<Scalars['Boolean']>;
  id: Scalars['ID'];
  source?: Maybe<Scalars['String']>;
  tag?: Maybe<Scalars['String']>;
  title: Scalars['String'];
  updatedAt: Scalars['DateTime'];
};

export enum ReleaseReportOrderByInput {
  BodyAsc = 'body_ASC',
  BodyDesc = 'body_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DraftAsc = 'draft_ASC',
  DraftDesc = 'draft_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  SourceAsc = 'source_ASC',
  SourceDesc = 'source_DESC',
  TagAsc = 'tag_ASC',
  TagDesc = 'tag_DESC',
  TitleAsc = 'title_ASC',
  TitleDesc = 'title_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC'
}

export type ReleaseReportWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<ReleaseReportWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<ReleaseReportWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<ReleaseReportWhereInput>>;
  body?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  body_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  body_ends_with?: InputMaybe<Scalars['String']>;
  /** All values greater than the given value. */
  body_gt?: InputMaybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  body_gte?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  body_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  body_lt?: InputMaybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  body_lte?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  body_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  body_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string. */
  body_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  body_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  body_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  body_starts_with?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  draft?: InputMaybe<Scalars['Boolean']>;
  /** All values that are not equal to given value. */
  draft_not?: InputMaybe<Scalars['Boolean']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: InputMaybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: InputMaybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: InputMaybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  source?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  source_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  source_ends_with?: InputMaybe<Scalars['String']>;
  /** All values greater than the given value. */
  source_gt?: InputMaybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  source_gte?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  source_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  source_lt?: InputMaybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  source_lte?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  source_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  source_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string. */
  source_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  source_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  source_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  source_starts_with?: InputMaybe<Scalars['String']>;
  tag?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  tag_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  tag_ends_with?: InputMaybe<Scalars['String']>;
  /** All values greater than the given value. */
  tag_gt?: InputMaybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  tag_gte?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  tag_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  tag_lt?: InputMaybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  tag_lte?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  tag_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  tag_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string. */
  tag_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  tag_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  tag_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  tag_starts_with?: InputMaybe<Scalars['String']>;
  title?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  title_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  title_ends_with?: InputMaybe<Scalars['String']>;
  /** All values greater than the given value. */
  title_gt?: InputMaybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  title_gte?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  title_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  title_lt?: InputMaybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  title_lte?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  title_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  title_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string. */
  title_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  title_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  title_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  title_starts_with?: InputMaybe<Scalars['String']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
};

export enum ReportType {
  Attribution = 'ATTRIBUTION',
  Audience = 'AUDIENCE',
  CampaignOrderBasketItems = 'CAMPAIGN_ORDER_BASKET_ITEMS',
  CampaignOrderDisplay = 'CAMPAIGN_ORDER_DISPLAY',
  CampaignOrderOrganic = 'CAMPAIGN_ORDER_ORGANIC',
  CampaignOrderSignups = 'CAMPAIGN_ORDER_SIGNUPS',
  CampaignOrderSummary = 'CAMPAIGN_ORDER_SUMMARY',
  CampaignOrderTransactions = 'CAMPAIGN_ORDER_TRANSACTIONS',
  CampaignOrderVisitors = 'CAMPAIGN_ORDER_VISITORS',
  CampignOrderOverallExport = 'CAMPIGN_ORDER_OVERALL_EXPORT',
  Demographics = 'DEMOGRAPHICS',
  Devices = 'DEVICES',
  Display = 'DISPLAY',
  DisplayCustom = 'DISPLAY_CUSTOM',
  Dooh = 'DOOH',
  Events = 'EVENTS',
  Extension = 'EXTENSION',
  Firsttransaction = 'FIRSTTRANSACTION',
  Household = 'HOUSEHOLD',
  Install = 'INSTALL',
  Loyalty = 'LOYALTY',
  Observation = 'OBSERVATION',
  Ooh = 'OOH',
  Retargeting = 'RETARGETING',
  Signup = 'SIGNUP',
  Social = 'SOCIAL',
  Transaction = 'TRANSACTION',
  Transactioncharts = 'TRANSACTIONCHARTS',
  Walkins = 'WALKINS'
}

export type RequestAttributes = {
  latitude?: InputMaybe<Scalars['Float']>;
  longitude?: InputMaybe<Scalars['Float']>;
};

export type Review = Node & {
  __typename?: 'Review';
  body?: Maybe<Scalars['String']>;
  brand?: Maybe<Brand>;
  createdAt: Scalars['DateTime'];
  createdBy: User;
  id: Scalars['ID'];
  isPublished: Scalars['Boolean'];
  location?: Maybe<Location>;
  name?: Maybe<Scalars['String']>;
  product?: Maybe<Product>;
  rating?: Maybe<Scalars['Boolean']>;
  strain?: Maybe<Strain>;
  updatedAt: Scalars['DateTime'];
};

export type ReviewCreateInput = {
  body?: InputMaybe<Scalars['String']>;
  brand?: InputMaybe<BrandCreateOneInput>;
  createdBy: UserCreateOneWithoutReviewsInput;
  isPublished?: InputMaybe<Scalars['Boolean']>;
  location?: InputMaybe<LocationCreateOneWithoutReviewsInput>;
  name?: InputMaybe<Scalars['String']>;
  product?: InputMaybe<ProductCreateOneInput>;
  rating?: InputMaybe<Scalars['Boolean']>;
  strain?: InputMaybe<StrainCreateOneWithoutReviewsInput>;
};

export type ReviewCreateManyInput = {
  connect?: InputMaybe<Array<ReviewWhereUniqueInput>>;
  create?: InputMaybe<Array<ReviewCreateInput>>;
};

export type ReviewCreateManyWithoutCreatedByInput = {
  connect?: InputMaybe<Array<ReviewWhereUniqueInput>>;
  create?: InputMaybe<Array<ReviewCreateWithoutCreatedByInput>>;
};

export type ReviewCreateManyWithoutLocationInput = {
  connect?: InputMaybe<Array<ReviewWhereUniqueInput>>;
  create?: InputMaybe<Array<ReviewCreateWithoutLocationInput>>;
};

export type ReviewCreateManyWithoutStrainInput = {
  connect?: InputMaybe<Array<ReviewWhereUniqueInput>>;
  create?: InputMaybe<Array<ReviewCreateWithoutStrainInput>>;
};

export type ReviewCreateWithoutCreatedByInput = {
  body?: InputMaybe<Scalars['String']>;
  brand?: InputMaybe<BrandCreateOneInput>;
  isPublished?: InputMaybe<Scalars['Boolean']>;
  location?: InputMaybe<LocationCreateOneWithoutReviewsInput>;
  name?: InputMaybe<Scalars['String']>;
  product?: InputMaybe<ProductCreateOneInput>;
  rating?: InputMaybe<Scalars['Boolean']>;
  strain?: InputMaybe<StrainCreateOneWithoutReviewsInput>;
};

export type ReviewCreateWithoutLocationInput = {
  body?: InputMaybe<Scalars['String']>;
  brand?: InputMaybe<BrandCreateOneInput>;
  createdBy: UserCreateOneWithoutReviewsInput;
  isPublished?: InputMaybe<Scalars['Boolean']>;
  name?: InputMaybe<Scalars['String']>;
  product?: InputMaybe<ProductCreateOneInput>;
  rating?: InputMaybe<Scalars['Boolean']>;
  strain?: InputMaybe<StrainCreateOneWithoutReviewsInput>;
};

export type ReviewCreateWithoutStrainInput = {
  body?: InputMaybe<Scalars['String']>;
  brand?: InputMaybe<BrandCreateOneInput>;
  createdBy: UserCreateOneWithoutReviewsInput;
  isPublished?: InputMaybe<Scalars['Boolean']>;
  location?: InputMaybe<LocationCreateOneWithoutReviewsInput>;
  name?: InputMaybe<Scalars['String']>;
  product?: InputMaybe<ProductCreateOneInput>;
  rating?: InputMaybe<Scalars['Boolean']>;
};

export enum ReviewOrderByInput {
  BodyAsc = 'body_ASC',
  BodyDesc = 'body_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  IsPublishedAsc = 'isPublished_ASC',
  IsPublishedDesc = 'isPublished_DESC',
  NameAsc = 'name_ASC',
  NameDesc = 'name_DESC',
  RatingAsc = 'rating_ASC',
  RatingDesc = 'rating_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC'
}

export type ReviewUpdateDataInput = {
  body?: InputMaybe<Scalars['String']>;
  brand?: InputMaybe<BrandUpdateOneInput>;
  createdBy?: InputMaybe<UserUpdateOneRequiredWithoutReviewsInput>;
  isPublished?: InputMaybe<Scalars['Boolean']>;
  location?: InputMaybe<LocationUpdateOneWithoutReviewsInput>;
  name?: InputMaybe<Scalars['String']>;
  product?: InputMaybe<ProductUpdateOneInput>;
  rating?: InputMaybe<Scalars['Boolean']>;
  strain?: InputMaybe<StrainUpdateOneWithoutReviewsInput>;
};

export type ReviewUpdateManyInput = {
  connect?: InputMaybe<Array<ReviewWhereUniqueInput>>;
  create?: InputMaybe<Array<ReviewCreateInput>>;
  delete?: InputMaybe<Array<ReviewWhereUniqueInput>>;
  disconnect?: InputMaybe<Array<ReviewWhereUniqueInput>>;
  update?: InputMaybe<Array<ReviewUpdateWithWhereUniqueNestedInput>>;
  upsert?: InputMaybe<Array<ReviewUpsertWithWhereUniqueNestedInput>>;
};

export type ReviewUpdateManyWithoutCreatedByInput = {
  connect?: InputMaybe<Array<ReviewWhereUniqueInput>>;
  create?: InputMaybe<Array<ReviewCreateWithoutCreatedByInput>>;
  delete?: InputMaybe<Array<ReviewWhereUniqueInput>>;
  disconnect?: InputMaybe<Array<ReviewWhereUniqueInput>>;
  update?: InputMaybe<Array<ReviewUpdateWithWhereUniqueWithoutCreatedByInput>>;
  upsert?: InputMaybe<Array<ReviewUpsertWithWhereUniqueWithoutCreatedByInput>>;
};

export type ReviewUpdateManyWithoutLocationInput = {
  connect?: InputMaybe<Array<ReviewWhereUniqueInput>>;
  create?: InputMaybe<Array<ReviewCreateWithoutLocationInput>>;
  delete?: InputMaybe<Array<ReviewWhereUniqueInput>>;
  disconnect?: InputMaybe<Array<ReviewWhereUniqueInput>>;
  update?: InputMaybe<Array<ReviewUpdateWithWhereUniqueWithoutLocationInput>>;
  upsert?: InputMaybe<Array<ReviewUpsertWithWhereUniqueWithoutLocationInput>>;
};

export type ReviewUpdateManyWithoutStrainInput = {
  connect?: InputMaybe<Array<ReviewWhereUniqueInput>>;
  create?: InputMaybe<Array<ReviewCreateWithoutStrainInput>>;
  delete?: InputMaybe<Array<ReviewWhereUniqueInput>>;
  disconnect?: InputMaybe<Array<ReviewWhereUniqueInput>>;
  update?: InputMaybe<Array<ReviewUpdateWithWhereUniqueWithoutStrainInput>>;
  upsert?: InputMaybe<Array<ReviewUpsertWithWhereUniqueWithoutStrainInput>>;
};

export type ReviewUpdateWithWhereUniqueNestedInput = {
  data: ReviewUpdateDataInput;
  where: ReviewWhereUniqueInput;
};

export type ReviewUpdateWithWhereUniqueWithoutCreatedByInput = {
  data: ReviewUpdateWithoutCreatedByDataInput;
  where: ReviewWhereUniqueInput;
};

export type ReviewUpdateWithWhereUniqueWithoutLocationInput = {
  data: ReviewUpdateWithoutLocationDataInput;
  where: ReviewWhereUniqueInput;
};

export type ReviewUpdateWithWhereUniqueWithoutStrainInput = {
  data: ReviewUpdateWithoutStrainDataInput;
  where: ReviewWhereUniqueInput;
};

export type ReviewUpdateWithoutCreatedByDataInput = {
  body?: InputMaybe<Scalars['String']>;
  brand?: InputMaybe<BrandUpdateOneInput>;
  isPublished?: InputMaybe<Scalars['Boolean']>;
  location?: InputMaybe<LocationUpdateOneWithoutReviewsInput>;
  name?: InputMaybe<Scalars['String']>;
  product?: InputMaybe<ProductUpdateOneInput>;
  rating?: InputMaybe<Scalars['Boolean']>;
  strain?: InputMaybe<StrainUpdateOneWithoutReviewsInput>;
};

export type ReviewUpdateWithoutLocationDataInput = {
  body?: InputMaybe<Scalars['String']>;
  brand?: InputMaybe<BrandUpdateOneInput>;
  createdBy?: InputMaybe<UserUpdateOneRequiredWithoutReviewsInput>;
  isPublished?: InputMaybe<Scalars['Boolean']>;
  name?: InputMaybe<Scalars['String']>;
  product?: InputMaybe<ProductUpdateOneInput>;
  rating?: InputMaybe<Scalars['Boolean']>;
  strain?: InputMaybe<StrainUpdateOneWithoutReviewsInput>;
};

export type ReviewUpdateWithoutStrainDataInput = {
  body?: InputMaybe<Scalars['String']>;
  brand?: InputMaybe<BrandUpdateOneInput>;
  createdBy?: InputMaybe<UserUpdateOneRequiredWithoutReviewsInput>;
  isPublished?: InputMaybe<Scalars['Boolean']>;
  location?: InputMaybe<LocationUpdateOneWithoutReviewsInput>;
  name?: InputMaybe<Scalars['String']>;
  product?: InputMaybe<ProductUpdateOneInput>;
  rating?: InputMaybe<Scalars['Boolean']>;
};

export type ReviewUpsertWithWhereUniqueNestedInput = {
  create: ReviewCreateInput;
  update: ReviewUpdateDataInput;
  where: ReviewWhereUniqueInput;
};

export type ReviewUpsertWithWhereUniqueWithoutCreatedByInput = {
  create: ReviewCreateWithoutCreatedByInput;
  update: ReviewUpdateWithoutCreatedByDataInput;
  where: ReviewWhereUniqueInput;
};

export type ReviewUpsertWithWhereUniqueWithoutLocationInput = {
  create: ReviewCreateWithoutLocationInput;
  update: ReviewUpdateWithoutLocationDataInput;
  where: ReviewWhereUniqueInput;
};

export type ReviewUpsertWithWhereUniqueWithoutStrainInput = {
  create: ReviewCreateWithoutStrainInput;
  update: ReviewUpdateWithoutStrainDataInput;
  where: ReviewWhereUniqueInput;
};

export type ReviewWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<ReviewWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<ReviewWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<ReviewWhereInput>>;
  body?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  body_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  body_ends_with?: InputMaybe<Scalars['String']>;
  /** All values greater than the given value. */
  body_gt?: InputMaybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  body_gte?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  body_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  body_lt?: InputMaybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  body_lte?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  body_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  body_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string. */
  body_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  body_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  body_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  body_starts_with?: InputMaybe<Scalars['String']>;
  brand?: InputMaybe<BrandWhereInput>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  createdBy?: InputMaybe<UserWhereInput>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: InputMaybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: InputMaybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: InputMaybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  isPublished?: InputMaybe<Scalars['Boolean']>;
  /** All values that are not equal to given value. */
  isPublished_not?: InputMaybe<Scalars['Boolean']>;
  location?: InputMaybe<LocationWhereInput>;
  name?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  name_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  name_ends_with?: InputMaybe<Scalars['String']>;
  /** All values greater than the given value. */
  name_gt?: InputMaybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  name_gte?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  name_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  name_lt?: InputMaybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  name_lte?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  name_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  name_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string. */
  name_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  name_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  name_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  name_starts_with?: InputMaybe<Scalars['String']>;
  product?: InputMaybe<ProductWhereInput>;
  rating?: InputMaybe<Scalars['Boolean']>;
  /** All values that are not equal to given value. */
  rating_not?: InputMaybe<Scalars['Boolean']>;
  strain?: InputMaybe<StrainWhereInput>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
};

export type ReviewWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export enum RoasFormat {
  Dollar = 'DOLLAR',
  Flat = 'FLAT',
  Percent = 'PERCENT'
}

export type Role = Node & {
  __typename?: 'Role';
  createdAt: Scalars['DateTime'];
  id: Scalars['ID'];
  isMaster?: Maybe<Scalars['Boolean']>;
  name?: Maybe<Scalars['String']>;
  org: Org;
  roleItems?: Maybe<Array<RoleItem>>;
  type?: Maybe<RoleType>;
  updatedAt: Scalars['DateTime'];
  users?: Maybe<Array<User>>;
};


export type RoleRoleItemsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<RoleItemOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<RoleItemWhereInput>;
};


export type RoleUsersArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<UserOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<UserWhereInput>;
};

export type RoleCreateManyWithoutOrgInput = {
  connect?: InputMaybe<Array<RoleWhereUniqueInput>>;
  create?: InputMaybe<Array<RoleCreateWithoutOrgInput>>;
};

export type RoleCreateManyWithoutUsersInput = {
  connect?: InputMaybe<Array<RoleWhereUniqueInput>>;
  create?: InputMaybe<Array<RoleCreateWithoutUsersInput>>;
};

export type RoleCreateWithoutOrgInput = {
  isMaster?: InputMaybe<Scalars['Boolean']>;
  name?: InputMaybe<Scalars['String']>;
  roleItems?: InputMaybe<RoleItemCreateManyWithoutRoleInput>;
  type?: InputMaybe<RoleType>;
  users?: InputMaybe<UserCreateManyWithoutRolesInput>;
};

export type RoleCreateWithoutUsersInput = {
  isMaster?: InputMaybe<Scalars['Boolean']>;
  name?: InputMaybe<Scalars['String']>;
  org: OrgCreateOneWithoutRolesInput;
  roleItems?: InputMaybe<RoleItemCreateManyWithoutRoleInput>;
  type?: InputMaybe<RoleType>;
};

export type RoleItem = Node & {
  __typename?: 'RoleItem';
  actions: Array<FeatureActions>;
  createdAt: Scalars['DateTime'];
  feature: Feature;
  id: Scalars['ID'];
  role?: Maybe<Role>;
  updatedAt: Scalars['DateTime'];
};

export type RoleItemCreateManyWithoutRoleInput = {
  connect?: InputMaybe<Array<RoleItemWhereUniqueInput>>;
  create?: InputMaybe<Array<RoleItemCreateWithoutRoleInput>>;
};

export type RoleItemCreateWithoutRoleInput = {
  actions?: InputMaybe<RoleItemCreateactionsInput>;
  feature: Feature;
};

export type RoleItemCreateactionsInput = {
  set?: InputMaybe<Array<FeatureActions>>;
};

export enum RoleItemOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  FeatureAsc = 'feature_ASC',
  FeatureDesc = 'feature_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC'
}

export type RoleItemUpdateManyWithoutRoleInput = {
  connect?: InputMaybe<Array<RoleItemWhereUniqueInput>>;
  create?: InputMaybe<Array<RoleItemCreateWithoutRoleInput>>;
  delete?: InputMaybe<Array<RoleItemWhereUniqueInput>>;
  disconnect?: InputMaybe<Array<RoleItemWhereUniqueInput>>;
  update?: InputMaybe<Array<RoleItemUpdateWithWhereUniqueWithoutRoleInput>>;
  upsert?: InputMaybe<Array<RoleItemUpsertWithWhereUniqueWithoutRoleInput>>;
};

export type RoleItemUpdateWithWhereUniqueWithoutRoleInput = {
  data: RoleItemUpdateWithoutRoleDataInput;
  where: RoleItemWhereUniqueInput;
};

export type RoleItemUpdateWithoutRoleDataInput = {
  actions?: InputMaybe<RoleItemUpdateactionsInput>;
  feature?: InputMaybe<Feature>;
};

export type RoleItemUpdateactionsInput = {
  set?: InputMaybe<Array<FeatureActions>>;
};

export type RoleItemUpsertWithWhereUniqueWithoutRoleInput = {
  create: RoleItemCreateWithoutRoleInput;
  update: RoleItemUpdateWithoutRoleDataInput;
  where: RoleItemWhereUniqueInput;
};

export type RoleItemWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<RoleItemWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<RoleItemWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<RoleItemWhereInput>>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  feature?: InputMaybe<Feature>;
  /** All values that are contained in given list. */
  feature_in?: InputMaybe<Array<Feature>>;
  /** All values that are not equal to given value. */
  feature_not?: InputMaybe<Feature>;
  /** All values that are not contained in given list. */
  feature_not_in?: InputMaybe<Array<Feature>>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: InputMaybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: InputMaybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: InputMaybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  role?: InputMaybe<RoleWhereInput>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
};

export type RoleItemWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export enum RoleOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  IsMasterAsc = 'isMaster_ASC',
  IsMasterDesc = 'isMaster_DESC',
  NameAsc = 'name_ASC',
  NameDesc = 'name_DESC',
  TypeAsc = 'type_ASC',
  TypeDesc = 'type_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC'
}

export enum RoleType {
  Org = 'ORG',
  OrgInherit = 'ORG_INHERIT',
  User = 'USER'
}

export type RoleUpdateManyWithoutOrgInput = {
  connect?: InputMaybe<Array<RoleWhereUniqueInput>>;
  create?: InputMaybe<Array<RoleCreateWithoutOrgInput>>;
  delete?: InputMaybe<Array<RoleWhereUniqueInput>>;
  disconnect?: InputMaybe<Array<RoleWhereUniqueInput>>;
  update?: InputMaybe<Array<RoleUpdateWithWhereUniqueWithoutOrgInput>>;
  upsert?: InputMaybe<Array<RoleUpsertWithWhereUniqueWithoutOrgInput>>;
};

export type RoleUpdateManyWithoutUsersInput = {
  connect?: InputMaybe<Array<RoleWhereUniqueInput>>;
  create?: InputMaybe<Array<RoleCreateWithoutUsersInput>>;
  delete?: InputMaybe<Array<RoleWhereUniqueInput>>;
  disconnect?: InputMaybe<Array<RoleWhereUniqueInput>>;
  update?: InputMaybe<Array<RoleUpdateWithWhereUniqueWithoutUsersInput>>;
  upsert?: InputMaybe<Array<RoleUpsertWithWhereUniqueWithoutUsersInput>>;
};

export type RoleUpdateWithWhereUniqueWithoutOrgInput = {
  data: RoleUpdateWithoutOrgDataInput;
  where: RoleWhereUniqueInput;
};

export type RoleUpdateWithWhereUniqueWithoutUsersInput = {
  data: RoleUpdateWithoutUsersDataInput;
  where: RoleWhereUniqueInput;
};

export type RoleUpdateWithoutOrgDataInput = {
  isMaster?: InputMaybe<Scalars['Boolean']>;
  name?: InputMaybe<Scalars['String']>;
  roleItems?: InputMaybe<RoleItemUpdateManyWithoutRoleInput>;
  type?: InputMaybe<RoleType>;
  users?: InputMaybe<UserUpdateManyWithoutRolesInput>;
};

export type RoleUpdateWithoutUsersDataInput = {
  isMaster?: InputMaybe<Scalars['Boolean']>;
  name?: InputMaybe<Scalars['String']>;
  org?: InputMaybe<OrgUpdateOneRequiredWithoutRolesInput>;
  roleItems?: InputMaybe<RoleItemUpdateManyWithoutRoleInput>;
  type?: InputMaybe<RoleType>;
};

export type RoleUpsertWithWhereUniqueWithoutOrgInput = {
  create: RoleCreateWithoutOrgInput;
  update: RoleUpdateWithoutOrgDataInput;
  where: RoleWhereUniqueInput;
};

export type RoleUpsertWithWhereUniqueWithoutUsersInput = {
  create: RoleCreateWithoutUsersInput;
  update: RoleUpdateWithoutUsersDataInput;
  where: RoleWhereUniqueInput;
};

export type RoleWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<RoleWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<RoleWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<RoleWhereInput>>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: InputMaybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: InputMaybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: InputMaybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  isMaster?: InputMaybe<Scalars['Boolean']>;
  /** All values that are not equal to given value. */
  isMaster_not?: InputMaybe<Scalars['Boolean']>;
  name?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  name_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  name_ends_with?: InputMaybe<Scalars['String']>;
  /** All values greater than the given value. */
  name_gt?: InputMaybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  name_gte?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  name_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  name_lt?: InputMaybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  name_lte?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  name_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  name_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string. */
  name_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  name_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  name_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  name_starts_with?: InputMaybe<Scalars['String']>;
  org?: InputMaybe<OrgWhereInput>;
  roleItems_every?: InputMaybe<RoleItemWhereInput>;
  roleItems_none?: InputMaybe<RoleItemWhereInput>;
  roleItems_some?: InputMaybe<RoleItemWhereInput>;
  type?: InputMaybe<RoleType>;
  /** All values that are contained in given list. */
  type_in?: InputMaybe<Array<RoleType>>;
  /** All values that are not equal to given value. */
  type_not?: InputMaybe<RoleType>;
  /** All values that are not contained in given list. */
  type_not_in?: InputMaybe<Array<RoleType>>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  users_every?: InputMaybe<UserWhereInput>;
  users_none?: InputMaybe<UserWhereInput>;
  users_some?: InputMaybe<UserWhereInput>;
};

export type RoleWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export type SativaEffects = Node & {
  __typename?: 'SativaEffects';
  alert?: Maybe<Scalars['Float']>;
  cheerful?: Maybe<Scalars['Float']>;
  createdAt: Scalars['DateTime'];
  creative?: Maybe<Scalars['Float']>;
  energetic?: Maybe<Scalars['Float']>;
  euphoria?: Maybe<Scalars['Float']>;
  id: Scalars['ID'];
  sociable?: Maybe<Scalars['Float']>;
  strainTypes?: Maybe<Array<StrainType>>;
  updatedAt: Scalars['DateTime'];
  uplifting?: Maybe<Scalars['Float']>;
};


export type SativaEffectsStrainTypesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<StrainTypeOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<StrainTypeWhereInput>;
};

export type SativaEffectsCreateOneWithoutStrainTypesInput = {
  connect?: InputMaybe<SativaEffectsWhereUniqueInput>;
  create?: InputMaybe<SativaEffectsCreateWithoutStrainTypesInput>;
};

export type SativaEffectsCreateWithoutStrainTypesInput = {
  alert?: InputMaybe<Scalars['Float']>;
  cheerful?: InputMaybe<Scalars['Float']>;
  creative?: InputMaybe<Scalars['Float']>;
  energetic?: InputMaybe<Scalars['Float']>;
  euphoria?: InputMaybe<Scalars['Float']>;
  sociable?: InputMaybe<Scalars['Float']>;
  uplifting?: InputMaybe<Scalars['Float']>;
};

export type SativaEffectsUpdateOneWithoutStrainTypesInput = {
  connect?: InputMaybe<SativaEffectsWhereUniqueInput>;
  create?: InputMaybe<SativaEffectsCreateWithoutStrainTypesInput>;
  delete?: InputMaybe<Scalars['Boolean']>;
  disconnect?: InputMaybe<Scalars['Boolean']>;
  update?: InputMaybe<SativaEffectsUpdateWithoutStrainTypesDataInput>;
  upsert?: InputMaybe<SativaEffectsUpsertWithoutStrainTypesInput>;
};

export type SativaEffectsUpdateWithoutStrainTypesDataInput = {
  alert?: InputMaybe<Scalars['Float']>;
  cheerful?: InputMaybe<Scalars['Float']>;
  creative?: InputMaybe<Scalars['Float']>;
  energetic?: InputMaybe<Scalars['Float']>;
  euphoria?: InputMaybe<Scalars['Float']>;
  sociable?: InputMaybe<Scalars['Float']>;
  uplifting?: InputMaybe<Scalars['Float']>;
};

export type SativaEffectsUpsertWithoutStrainTypesInput = {
  create: SativaEffectsCreateWithoutStrainTypesInput;
  update: SativaEffectsUpdateWithoutStrainTypesDataInput;
};

export type SativaEffectsWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<SativaEffectsWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<SativaEffectsWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<SativaEffectsWhereInput>>;
  alert?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  alert_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  alert_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  alert_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  alert_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  alert_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  alert_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  alert_not_in?: InputMaybe<Array<Scalars['Float']>>;
  cheerful?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  cheerful_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  cheerful_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  cheerful_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  cheerful_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  cheerful_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  cheerful_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  cheerful_not_in?: InputMaybe<Array<Scalars['Float']>>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  creative?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  creative_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  creative_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  creative_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  creative_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  creative_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  creative_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  creative_not_in?: InputMaybe<Array<Scalars['Float']>>;
  energetic?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  energetic_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  energetic_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  energetic_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  energetic_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  energetic_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  energetic_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  energetic_not_in?: InputMaybe<Array<Scalars['Float']>>;
  euphoria?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  euphoria_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  euphoria_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  euphoria_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  euphoria_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  euphoria_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  euphoria_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  euphoria_not_in?: InputMaybe<Array<Scalars['Float']>>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: InputMaybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: InputMaybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: InputMaybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  sociable?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  sociable_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  sociable_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  sociable_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  sociable_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  sociable_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  sociable_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  sociable_not_in?: InputMaybe<Array<Scalars['Float']>>;
  strainTypes_every?: InputMaybe<StrainTypeWhereInput>;
  strainTypes_none?: InputMaybe<StrainTypeWhereInput>;
  strainTypes_some?: InputMaybe<StrainTypeWhereInput>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  uplifting?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  uplifting_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  uplifting_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  uplifting_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  uplifting_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  uplifting_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  uplifting_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  uplifting_not_in?: InputMaybe<Array<Scalars['Float']>>;
};

export type SativaEffectsWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export type SendEmailConfig = Node & {
  __typename?: 'SendEmailConfig';
  campaignOrders?: Maybe<Scalars['String']>;
  dayOfWeek?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  frequency?: Maybe<Scalars['String']>;
  frequencyValue?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  orgs?: Maybe<Array<Org>>;
};


export type SendEmailConfigOrgsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<OrgOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<OrgWhereInput>;
};

export type SendEmailConfigCreateOneWithoutOrgsInput = {
  connect?: InputMaybe<SendEmailConfigWhereUniqueInput>;
  create?: InputMaybe<SendEmailConfigCreateWithoutOrgsInput>;
};

export type SendEmailConfigCreateWithoutOrgsInput = {
  campaignOrders?: InputMaybe<Scalars['String']>;
  dayOfWeek?: InputMaybe<Scalars['String']>;
  email?: InputMaybe<Scalars['String']>;
  frequency?: InputMaybe<Scalars['String']>;
  frequencyValue?: InputMaybe<Scalars['String']>;
};

export type SendEmailConfigUpdateOneWithoutOrgsInput = {
  connect?: InputMaybe<SendEmailConfigWhereUniqueInput>;
  create?: InputMaybe<SendEmailConfigCreateWithoutOrgsInput>;
  delete?: InputMaybe<Scalars['Boolean']>;
  disconnect?: InputMaybe<Scalars['Boolean']>;
  update?: InputMaybe<SendEmailConfigUpdateWithoutOrgsDataInput>;
  upsert?: InputMaybe<SendEmailConfigUpsertWithoutOrgsInput>;
};

export type SendEmailConfigUpdateWithoutOrgsDataInput = {
  campaignOrders?: InputMaybe<Scalars['String']>;
  dayOfWeek?: InputMaybe<Scalars['String']>;
  email?: InputMaybe<Scalars['String']>;
  frequency?: InputMaybe<Scalars['String']>;
  frequencyValue?: InputMaybe<Scalars['String']>;
};

export type SendEmailConfigUpsertWithoutOrgsInput = {
  create: SendEmailConfigCreateWithoutOrgsInput;
  update: SendEmailConfigUpdateWithoutOrgsDataInput;
};

export type SendEmailConfigWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<SendEmailConfigWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<SendEmailConfigWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<SendEmailConfigWhereInput>>;
  campaignOrders?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  campaignOrders_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  campaignOrders_ends_with?: InputMaybe<Scalars['String']>;
  /** All values greater than the given value. */
  campaignOrders_gt?: InputMaybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  campaignOrders_gte?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  campaignOrders_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  campaignOrders_lt?: InputMaybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  campaignOrders_lte?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  campaignOrders_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  campaignOrders_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string. */
  campaignOrders_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  campaignOrders_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  campaignOrders_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  campaignOrders_starts_with?: InputMaybe<Scalars['String']>;
  dayOfWeek?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  dayOfWeek_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  dayOfWeek_ends_with?: InputMaybe<Scalars['String']>;
  /** All values greater than the given value. */
  dayOfWeek_gt?: InputMaybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  dayOfWeek_gte?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  dayOfWeek_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  dayOfWeek_lt?: InputMaybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  dayOfWeek_lte?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  dayOfWeek_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  dayOfWeek_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string. */
  dayOfWeek_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  dayOfWeek_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  dayOfWeek_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  dayOfWeek_starts_with?: InputMaybe<Scalars['String']>;
  email?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  email_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  email_ends_with?: InputMaybe<Scalars['String']>;
  /** All values greater than the given value. */
  email_gt?: InputMaybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  email_gte?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  email_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  email_lt?: InputMaybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  email_lte?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  email_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  email_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string. */
  email_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  email_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  email_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  email_starts_with?: InputMaybe<Scalars['String']>;
  frequency?: InputMaybe<Scalars['String']>;
  frequencyValue?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  frequencyValue_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  frequencyValue_ends_with?: InputMaybe<Scalars['String']>;
  /** All values greater than the given value. */
  frequencyValue_gt?: InputMaybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  frequencyValue_gte?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  frequencyValue_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  frequencyValue_lt?: InputMaybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  frequencyValue_lte?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  frequencyValue_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  frequencyValue_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string. */
  frequencyValue_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  frequencyValue_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  frequencyValue_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  frequencyValue_starts_with?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  frequency_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  frequency_ends_with?: InputMaybe<Scalars['String']>;
  /** All values greater than the given value. */
  frequency_gt?: InputMaybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  frequency_gte?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  frequency_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  frequency_lt?: InputMaybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  frequency_lte?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  frequency_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  frequency_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string. */
  frequency_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  frequency_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  frequency_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  frequency_starts_with?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: InputMaybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: InputMaybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: InputMaybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  orgs_every?: InputMaybe<OrgWhereInput>;
  orgs_none?: InputMaybe<OrgWhereInput>;
  orgs_some?: InputMaybe<OrgWhereInput>;
};

export type SendEmailConfigWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export type SeoConfig = Node & {
  __typename?: 'SeoConfig';
  createdAt: Scalars['DateTime'];
  id: Scalars['ID'];
  managementFee?: Maybe<Scalars['Float']>;
  monthlyRetainer?: Maybe<Scalars['Float']>;
  orgSeoSummaries?: Maybe<Array<OrgSeoSummary>>;
  updatedAt: Scalars['DateTime'];
};


export type SeoConfigOrgSeoSummariesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<OrgSeoSummaryOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<OrgSeoSummaryWhereInput>;
};

export type SeoConfigCreateOneWithoutOrgSeoSummariesInput = {
  connect?: InputMaybe<SeoConfigWhereUniqueInput>;
  create?: InputMaybe<SeoConfigCreateWithoutOrgSeoSummariesInput>;
};

export type SeoConfigCreateWithoutOrgSeoSummariesInput = {
  managementFee?: InputMaybe<Scalars['Float']>;
  monthlyRetainer?: InputMaybe<Scalars['Float']>;
};

export type SeoConfigUpdateOneWithoutOrgSeoSummariesInput = {
  connect?: InputMaybe<SeoConfigWhereUniqueInput>;
  create?: InputMaybe<SeoConfigCreateWithoutOrgSeoSummariesInput>;
  delete?: InputMaybe<Scalars['Boolean']>;
  disconnect?: InputMaybe<Scalars['Boolean']>;
  update?: InputMaybe<SeoConfigUpdateWithoutOrgSeoSummariesDataInput>;
  upsert?: InputMaybe<SeoConfigUpsertWithoutOrgSeoSummariesInput>;
};

export type SeoConfigUpdateWithoutOrgSeoSummariesDataInput = {
  managementFee?: InputMaybe<Scalars['Float']>;
  monthlyRetainer?: InputMaybe<Scalars['Float']>;
};

export type SeoConfigUpsertWithoutOrgSeoSummariesInput = {
  create: SeoConfigCreateWithoutOrgSeoSummariesInput;
  update: SeoConfigUpdateWithoutOrgSeoSummariesDataInput;
};

export type SeoConfigWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<SeoConfigWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<SeoConfigWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<SeoConfigWhereInput>>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: InputMaybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: InputMaybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: InputMaybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  managementFee?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  managementFee_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  managementFee_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  managementFee_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  managementFee_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  managementFee_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  managementFee_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  managementFee_not_in?: InputMaybe<Array<Scalars['Float']>>;
  monthlyRetainer?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  monthlyRetainer_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  monthlyRetainer_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  monthlyRetainer_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  monthlyRetainer_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  monthlyRetainer_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  monthlyRetainer_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  monthlyRetainer_not_in?: InputMaybe<Array<Scalars['Float']>>;
  orgSeoSummaries_every?: InputMaybe<OrgSeoSummaryWhereInput>;
  orgSeoSummaries_none?: InputMaybe<OrgSeoSummaryWhereInput>;
  orgSeoSummaries_some?: InputMaybe<OrgSeoSummaryWhereInput>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
};

export type SeoConfigWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export type SeoUnit = Node & {
  __typename?: 'SeoUnit';
  avgOrderValue?: Maybe<Scalars['Float']>;
  avgSessionDuration?: Maybe<Scalars['Float']>;
  bounceRate?: Maybe<Scalars['Float']>;
  conversionRate?: Maybe<Scalars['Float']>;
  cost?: Maybe<Scalars['Float']>;
  date: Scalars['DateTime'];
  id: Scalars['ID'];
  key: Scalars['String'];
  newUsers?: Maybe<Scalars['Float']>;
  orgSeoSummary?: Maybe<OrgSeoSummary>;
  pageView?: Maybe<Scalars['Float']>;
  revenue?: Maybe<Scalars['Float']>;
  session?: Maybe<Scalars['Float']>;
  transactions?: Maybe<Scalars['Float']>;
  transactionsPerSession?: Maybe<Scalars['Float']>;
  users?: Maybe<Scalars['Float']>;
};

export type SeoUnitCreateManyWithoutOrgSeoSummaryInput = {
  connect?: InputMaybe<Array<SeoUnitWhereUniqueInput>>;
  create?: InputMaybe<Array<SeoUnitCreateWithoutOrgSeoSummaryInput>>;
};

export type SeoUnitCreateWithoutOrgSeoSummaryInput = {
  avgOrderValue?: InputMaybe<Scalars['Float']>;
  avgSessionDuration?: InputMaybe<Scalars['Float']>;
  bounceRate?: InputMaybe<Scalars['Float']>;
  conversionRate?: InputMaybe<Scalars['Float']>;
  cost?: InputMaybe<Scalars['Float']>;
  date: Scalars['DateTime'];
  key: Scalars['String'];
  newUsers?: InputMaybe<Scalars['Float']>;
  pageView?: InputMaybe<Scalars['Float']>;
  revenue?: InputMaybe<Scalars['Float']>;
  session?: InputMaybe<Scalars['Float']>;
  transactions?: InputMaybe<Scalars['Float']>;
  transactionsPerSession?: InputMaybe<Scalars['Float']>;
  users?: InputMaybe<Scalars['Float']>;
};

export enum SeoUnitOrderByInput {
  AvgOrderValueAsc = 'avgOrderValue_ASC',
  AvgOrderValueDesc = 'avgOrderValue_DESC',
  AvgSessionDurationAsc = 'avgSessionDuration_ASC',
  AvgSessionDurationDesc = 'avgSessionDuration_DESC',
  BounceRateAsc = 'bounceRate_ASC',
  BounceRateDesc = 'bounceRate_DESC',
  ConversionRateAsc = 'conversionRate_ASC',
  ConversionRateDesc = 'conversionRate_DESC',
  CostAsc = 'cost_ASC',
  CostDesc = 'cost_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DateAsc = 'date_ASC',
  DateDesc = 'date_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  KeyAsc = 'key_ASC',
  KeyDesc = 'key_DESC',
  NewUsersAsc = 'newUsers_ASC',
  NewUsersDesc = 'newUsers_DESC',
  PageViewAsc = 'pageView_ASC',
  PageViewDesc = 'pageView_DESC',
  RevenueAsc = 'revenue_ASC',
  RevenueDesc = 'revenue_DESC',
  SessionAsc = 'session_ASC',
  SessionDesc = 'session_DESC',
  TransactionsPerSessionAsc = 'transactionsPerSession_ASC',
  TransactionsPerSessionDesc = 'transactionsPerSession_DESC',
  TransactionsAsc = 'transactions_ASC',
  TransactionsDesc = 'transactions_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  UsersAsc = 'users_ASC',
  UsersDesc = 'users_DESC'
}

export type SeoUnitUpdateManyWithoutOrgSeoSummaryInput = {
  connect?: InputMaybe<Array<SeoUnitWhereUniqueInput>>;
  create?: InputMaybe<Array<SeoUnitCreateWithoutOrgSeoSummaryInput>>;
  delete?: InputMaybe<Array<SeoUnitWhereUniqueInput>>;
  disconnect?: InputMaybe<Array<SeoUnitWhereUniqueInput>>;
  update?: InputMaybe<Array<SeoUnitUpdateWithWhereUniqueWithoutOrgSeoSummaryInput>>;
  upsert?: InputMaybe<Array<SeoUnitUpsertWithWhereUniqueWithoutOrgSeoSummaryInput>>;
};

export type SeoUnitUpdateWithWhereUniqueWithoutOrgSeoSummaryInput = {
  data: SeoUnitUpdateWithoutOrgSeoSummaryDataInput;
  where: SeoUnitWhereUniqueInput;
};

export type SeoUnitUpdateWithoutOrgSeoSummaryDataInput = {
  avgOrderValue?: InputMaybe<Scalars['Float']>;
  avgSessionDuration?: InputMaybe<Scalars['Float']>;
  bounceRate?: InputMaybe<Scalars['Float']>;
  conversionRate?: InputMaybe<Scalars['Float']>;
  cost?: InputMaybe<Scalars['Float']>;
  date?: InputMaybe<Scalars['DateTime']>;
  key?: InputMaybe<Scalars['String']>;
  newUsers?: InputMaybe<Scalars['Float']>;
  pageView?: InputMaybe<Scalars['Float']>;
  revenue?: InputMaybe<Scalars['Float']>;
  session?: InputMaybe<Scalars['Float']>;
  transactions?: InputMaybe<Scalars['Float']>;
  transactionsPerSession?: InputMaybe<Scalars['Float']>;
  users?: InputMaybe<Scalars['Float']>;
};

export type SeoUnitUpsertWithWhereUniqueWithoutOrgSeoSummaryInput = {
  create: SeoUnitCreateWithoutOrgSeoSummaryInput;
  update: SeoUnitUpdateWithoutOrgSeoSummaryDataInput;
  where: SeoUnitWhereUniqueInput;
};

export type SeoUnitWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<SeoUnitWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<SeoUnitWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<SeoUnitWhereInput>>;
  avgOrderValue?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  avgOrderValue_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  avgOrderValue_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  avgOrderValue_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  avgOrderValue_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  avgOrderValue_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  avgOrderValue_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  avgOrderValue_not_in?: InputMaybe<Array<Scalars['Float']>>;
  avgSessionDuration?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  avgSessionDuration_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  avgSessionDuration_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  avgSessionDuration_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  avgSessionDuration_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  avgSessionDuration_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  avgSessionDuration_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  avgSessionDuration_not_in?: InputMaybe<Array<Scalars['Float']>>;
  bounceRate?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  bounceRate_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  bounceRate_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  bounceRate_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  bounceRate_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  bounceRate_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  bounceRate_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  bounceRate_not_in?: InputMaybe<Array<Scalars['Float']>>;
  conversionRate?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  conversionRate_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  conversionRate_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  conversionRate_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  conversionRate_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  conversionRate_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  conversionRate_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  conversionRate_not_in?: InputMaybe<Array<Scalars['Float']>>;
  cost?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  cost_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  cost_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  cost_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  cost_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  cost_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  cost_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  cost_not_in?: InputMaybe<Array<Scalars['Float']>>;
  date?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  date_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  date_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  date_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  date_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  date_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  date_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  date_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: InputMaybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: InputMaybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: InputMaybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  key?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  key_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  key_ends_with?: InputMaybe<Scalars['String']>;
  /** All values greater than the given value. */
  key_gt?: InputMaybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  key_gte?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  key_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  key_lt?: InputMaybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  key_lte?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  key_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  key_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string. */
  key_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  key_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  key_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  key_starts_with?: InputMaybe<Scalars['String']>;
  newUsers?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  newUsers_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  newUsers_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  newUsers_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  newUsers_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  newUsers_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  newUsers_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  newUsers_not_in?: InputMaybe<Array<Scalars['Float']>>;
  orgSeoSummary?: InputMaybe<OrgSeoSummaryWhereInput>;
  pageView?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  pageView_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  pageView_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  pageView_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  pageView_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  pageView_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  pageView_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  pageView_not_in?: InputMaybe<Array<Scalars['Float']>>;
  revenue?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  revenue_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  revenue_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  revenue_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  revenue_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  revenue_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  revenue_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  revenue_not_in?: InputMaybe<Array<Scalars['Float']>>;
  session?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  session_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  session_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  session_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  session_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  session_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  session_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  session_not_in?: InputMaybe<Array<Scalars['Float']>>;
  transactions?: InputMaybe<Scalars['Float']>;
  transactionsPerSession?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  transactionsPerSession_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  transactionsPerSession_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  transactionsPerSession_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  transactionsPerSession_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  transactionsPerSession_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  transactionsPerSession_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  transactionsPerSession_not_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values greater than the given value. */
  transactions_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  transactions_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  transactions_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  transactions_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  transactions_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  transactions_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  transactions_not_in?: InputMaybe<Array<Scalars['Float']>>;
  users?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  users_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  users_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  users_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  users_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  users_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  users_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  users_not_in?: InputMaybe<Array<Scalars['Float']>>;
};

export type SeoUnitWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
  key?: InputMaybe<Scalars['String']>;
};

export enum ServingStatus {
  Ended = 'ENDED',
  None = 'NONE',
  Pending = 'PENDING',
  Serving = 'SERVING',
  Suspended = 'SUSPENDED',
  Unknown = 'UNKNOWN',
  Unspecified = 'UNSPECIFIED'
}

export type SessionInputAttributes = {
  conversationId: Scalars['String'];
};

export type SessionOuputAttributes = {
  __typename?: 'SessionOuputAttributes';
  conversationId: Scalars['String'];
};

export type SignUpConfig = Node & {
  __typename?: 'SignUpConfig';
  appId?: Maybe<Scalars['String']>;
  campaignOrders?: Maybe<Array<CampaignOrder>>;
  createdAt: Scalars['DateTime'];
  id: Scalars['ID'];
  locationId?: Maybe<Scalars['String']>;
  updatedAt: Scalars['DateTime'];
};


export type SignUpConfigCampaignOrdersArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<CampaignOrderOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<CampaignOrderWhereInput>;
};

export type SignUpConfigCreateOneWithoutCampaignOrdersInput = {
  connect?: InputMaybe<SignUpConfigWhereUniqueInput>;
  create?: InputMaybe<SignUpConfigCreateWithoutCampaignOrdersInput>;
};

export type SignUpConfigCreateWithoutCampaignOrdersInput = {
  appId?: InputMaybe<Scalars['String']>;
  locationId?: InputMaybe<Scalars['String']>;
};

export type SignUpConfigUpdateOneWithoutCampaignOrdersInput = {
  connect?: InputMaybe<SignUpConfigWhereUniqueInput>;
  create?: InputMaybe<SignUpConfigCreateWithoutCampaignOrdersInput>;
  delete?: InputMaybe<Scalars['Boolean']>;
  disconnect?: InputMaybe<Scalars['Boolean']>;
  update?: InputMaybe<SignUpConfigUpdateWithoutCampaignOrdersDataInput>;
  upsert?: InputMaybe<SignUpConfigUpsertWithoutCampaignOrdersInput>;
};

export type SignUpConfigUpdateWithoutCampaignOrdersDataInput = {
  appId?: InputMaybe<Scalars['String']>;
  locationId?: InputMaybe<Scalars['String']>;
};

export type SignUpConfigUpsertWithoutCampaignOrdersInput = {
  create: SignUpConfigCreateWithoutCampaignOrdersInput;
  update: SignUpConfigUpdateWithoutCampaignOrdersDataInput;
};

export type SignUpConfigWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<SignUpConfigWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<SignUpConfigWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<SignUpConfigWhereInput>>;
  appId?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  appId_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  appId_ends_with?: InputMaybe<Scalars['String']>;
  /** All values greater than the given value. */
  appId_gt?: InputMaybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  appId_gte?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  appId_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  appId_lt?: InputMaybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  appId_lte?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  appId_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  appId_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string. */
  appId_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  appId_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  appId_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  appId_starts_with?: InputMaybe<Scalars['String']>;
  campaignOrders_every?: InputMaybe<CampaignOrderWhereInput>;
  campaignOrders_none?: InputMaybe<CampaignOrderWhereInput>;
  campaignOrders_some?: InputMaybe<CampaignOrderWhereInput>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: InputMaybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: InputMaybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: InputMaybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  locationId?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  locationId_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  locationId_ends_with?: InputMaybe<Scalars['String']>;
  /** All values greater than the given value. */
  locationId_gt?: InputMaybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  locationId_gte?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  locationId_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  locationId_lt?: InputMaybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  locationId_lte?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  locationId_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  locationId_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string. */
  locationId_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  locationId_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  locationId_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  locationId_starts_with?: InputMaybe<Scalars['String']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
};

export type SignUpConfigWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export enum Species {
  Hybrid = 'HYBRID',
  Indica = 'INDICA',
  Ruderalis = 'RUDERALIS',
  Sativa = 'SATIVA'
}

export enum StateType {
  Alabama = 'ALABAMA',
  Alaska = 'ALASKA',
  Alberta = 'ALBERTA',
  AmericanSamoa = 'AMERICAN_SAMOA',
  Arizona = 'ARIZONA',
  Arkansas = 'ARKANSAS',
  BritishColumbia = 'BRITISH_COLUMBIA',
  California = 'CALIFORNIA',
  Colorado = 'COLORADO',
  Connecticut = 'CONNECTICUT',
  Delaware = 'DELAWARE',
  DistrictOfColumbia = 'DISTRICT_OF_COLUMBIA',
  FederatedStatesOfMicronesia = 'FEDERATED_STATES_OF_MICRONESIA',
  Florida = 'FLORIDA',
  Georgia = 'GEORGIA',
  Guam = 'GUAM',
  Hawaii = 'HAWAII',
  Idaho = 'IDAHO',
  Illinois = 'ILLINOIS',
  Indiana = 'INDIANA',
  Iowa = 'IOWA',
  Kansas = 'KANSAS',
  Kentucky = 'KENTUCKY',
  Louisiana = 'LOUISIANA',
  Maine = 'MAINE',
  Manitoba = 'MANITOBA',
  MarshallIslands = 'MARSHALL_ISLANDS',
  Maryland = 'MARYLAND',
  Massachusetts = 'MASSACHUSETTS',
  Michigan = 'MICHIGAN',
  Minnesota = 'MINNESOTA',
  Mississippi = 'MISSISSIPPI',
  Missouri = 'MISSOURI',
  Montana = 'MONTANA',
  Nebraska = 'NEBRASKA',
  Nevada = 'NEVADA',
  NewfoundlandAndLabrador = 'NEWFOUNDLAND_AND_LABRADOR',
  NewBrunswick = 'NEW_BRUNSWICK',
  NewHampshire = 'NEW_HAMPSHIRE',
  NewJersey = 'NEW_JERSEY',
  NewMexico = 'NEW_MEXICO',
  NewYork = 'NEW_YORK',
  NorthernMarianaIslands = 'NORTHERN_MARIANA_ISLANDS',
  NorthCarolina = 'NORTH_CAROLINA',
  NorthDakota = 'NORTH_DAKOTA',
  NovaScotia = 'NOVA_SCOTIA',
  Ohio = 'OHIO',
  Oklahoma = 'OKLAHOMA',
  Ontario = 'ONTARIO',
  Oregon = 'OREGON',
  Palau = 'PALAU',
  Pennsylvania = 'PENNSYLVANIA',
  PrinceEdwardIsland = 'PRINCE_EDWARD_ISLAND',
  PuertoRico = 'PUERTO_RICO',
  Quebec = 'QUEBEC',
  RhodeIsland = 'RHODE_ISLAND',
  Saskatchewan = 'SASKATCHEWAN',
  SouthCarolina = 'SOUTH_CAROLINA',
  SouthDakota = 'SOUTH_DAKOTA',
  Tennessee = 'TENNESSEE',
  Texas = 'TEXAS',
  Unknown = 'UNKNOWN',
  Utah = 'UTAH',
  Vermont = 'VERMONT',
  Virginia = 'VIRGINIA',
  VirginIsland = 'VIRGIN_ISLAND',
  Washington = 'WASHINGTON',
  WestVirginia = 'WEST_VIRGINIA',
  Wisconsin = 'WISCONSIN',
  Wyoming = 'WYOMING'
}

export type Strain = Node & {
  __typename?: 'Strain';
  aroma?: Maybe<Aroma>;
  createdAt: Scalars['DateTime'];
  createdBy?: Maybe<User>;
  description: Scalars['String'];
  featuredMedia?: Maybe<Media>;
  id: Scalars['ID'];
  isPublished: Scalars['Boolean'];
  lineage?: Maybe<Array<Strain>>;
  locations?: Maybe<Array<Location>>;
  mediaList?: Maybe<Array<Media>>;
  message?: Maybe<Message>;
  name: Scalars['String'];
  products?: Maybe<Array<Product>>;
  reviews?: Maybe<Array<Review>>;
  species: Species;
  strainTypeEffects?: Maybe<StrainType>;
  taste?: Maybe<Taste>;
  tests?: Maybe<Array<Test>>;
  updatedAt: Scalars['DateTime'];
  wellnessEffect?: Maybe<WellnessEffect>;
};


export type StrainLineageArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<StrainOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<StrainWhereInput>;
};


export type StrainLocationsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<LocationOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<LocationWhereInput>;
};


export type StrainMediaListArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MediaOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<MediaWhereInput>;
};


export type StrainProductsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ProductOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ProductWhereInput>;
};


export type StrainReviewsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ReviewOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ReviewWhereInput>;
};


export type StrainTestsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<TestOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<TestWhereInput>;
};

export type StrainCreateInput = {
  aroma?: InputMaybe<AromaCreateOneWithoutStrainsInput>;
  createdBy?: InputMaybe<UserCreateOneWithoutStrainsInput>;
  description: Scalars['String'];
  featuredMedia?: InputMaybe<MediaCreateOneInput>;
  isPublished?: InputMaybe<Scalars['Boolean']>;
  lineage?: InputMaybe<StrainCreateManyInput>;
  locations?: InputMaybe<LocationCreateManyWithoutStrainsInput>;
  mediaList?: InputMaybe<MediaCreateManyInput>;
  message?: InputMaybe<MessageCreateOneWithoutStrainsInput>;
  name: Scalars['String'];
  products?: InputMaybe<ProductCreateManyInput>;
  reviews?: InputMaybe<ReviewCreateManyWithoutStrainInput>;
  species: Species;
  strainTypeEffects?: InputMaybe<StrainTypeCreateOneWithoutStrainsInput>;
  taste?: InputMaybe<TasteCreateOneWithoutStrainsInput>;
  tests?: InputMaybe<TestCreateManyWithoutStrainInput>;
  wellnessEffect?: InputMaybe<WellnessEffectCreateOneWithoutStrainsInput>;
};

export type StrainCreateManyInput = {
  connect?: InputMaybe<Array<StrainWhereUniqueInput>>;
  create?: InputMaybe<Array<StrainCreateInput>>;
};

export type StrainCreateManyWithoutAromaInput = {
  connect?: InputMaybe<Array<StrainWhereUniqueInput>>;
  create?: InputMaybe<Array<StrainCreateWithoutAromaInput>>;
};

export type StrainCreateManyWithoutCreatedByInput = {
  connect?: InputMaybe<Array<StrainWhereUniqueInput>>;
  create?: InputMaybe<Array<StrainCreateWithoutCreatedByInput>>;
};

export type StrainCreateManyWithoutLocationsInput = {
  connect?: InputMaybe<Array<StrainWhereUniqueInput>>;
  create?: InputMaybe<Array<StrainCreateWithoutLocationsInput>>;
};

export type StrainCreateManyWithoutMessageInput = {
  connect?: InputMaybe<Array<StrainWhereUniqueInput>>;
  create?: InputMaybe<Array<StrainCreateWithoutMessageInput>>;
};

export type StrainCreateManyWithoutStrainTypeEffectsInput = {
  connect?: InputMaybe<Array<StrainWhereUniqueInput>>;
  create?: InputMaybe<Array<StrainCreateWithoutStrainTypeEffectsInput>>;
};

export type StrainCreateManyWithoutTasteInput = {
  connect?: InputMaybe<Array<StrainWhereUniqueInput>>;
  create?: InputMaybe<Array<StrainCreateWithoutTasteInput>>;
};

export type StrainCreateManyWithoutWellnessEffectInput = {
  connect?: InputMaybe<Array<StrainWhereUniqueInput>>;
  create?: InputMaybe<Array<StrainCreateWithoutWellnessEffectInput>>;
};

export type StrainCreateOneWithoutReviewsInput = {
  connect?: InputMaybe<StrainWhereUniqueInput>;
  create?: InputMaybe<StrainCreateWithoutReviewsInput>;
};

export type StrainCreateOneWithoutTestsInput = {
  connect?: InputMaybe<StrainWhereUniqueInput>;
  create?: InputMaybe<StrainCreateWithoutTestsInput>;
};

export type StrainCreateWithoutAromaInput = {
  createdBy?: InputMaybe<UserCreateOneWithoutStrainsInput>;
  description: Scalars['String'];
  featuredMedia?: InputMaybe<MediaCreateOneInput>;
  isPublished?: InputMaybe<Scalars['Boolean']>;
  lineage?: InputMaybe<StrainCreateManyInput>;
  locations?: InputMaybe<LocationCreateManyWithoutStrainsInput>;
  mediaList?: InputMaybe<MediaCreateManyInput>;
  message?: InputMaybe<MessageCreateOneWithoutStrainsInput>;
  name: Scalars['String'];
  products?: InputMaybe<ProductCreateManyInput>;
  reviews?: InputMaybe<ReviewCreateManyWithoutStrainInput>;
  species: Species;
  strainTypeEffects?: InputMaybe<StrainTypeCreateOneWithoutStrainsInput>;
  taste?: InputMaybe<TasteCreateOneWithoutStrainsInput>;
  tests?: InputMaybe<TestCreateManyWithoutStrainInput>;
  wellnessEffect?: InputMaybe<WellnessEffectCreateOneWithoutStrainsInput>;
};

export type StrainCreateWithoutCreatedByInput = {
  aroma?: InputMaybe<AromaCreateOneWithoutStrainsInput>;
  description: Scalars['String'];
  featuredMedia?: InputMaybe<MediaCreateOneInput>;
  isPublished?: InputMaybe<Scalars['Boolean']>;
  lineage?: InputMaybe<StrainCreateManyInput>;
  locations?: InputMaybe<LocationCreateManyWithoutStrainsInput>;
  mediaList?: InputMaybe<MediaCreateManyInput>;
  message?: InputMaybe<MessageCreateOneWithoutStrainsInput>;
  name: Scalars['String'];
  products?: InputMaybe<ProductCreateManyInput>;
  reviews?: InputMaybe<ReviewCreateManyWithoutStrainInput>;
  species: Species;
  strainTypeEffects?: InputMaybe<StrainTypeCreateOneWithoutStrainsInput>;
  taste?: InputMaybe<TasteCreateOneWithoutStrainsInput>;
  tests?: InputMaybe<TestCreateManyWithoutStrainInput>;
  wellnessEffect?: InputMaybe<WellnessEffectCreateOneWithoutStrainsInput>;
};

export type StrainCreateWithoutLocationsInput = {
  aroma?: InputMaybe<AromaCreateOneWithoutStrainsInput>;
  createdBy?: InputMaybe<UserCreateOneWithoutStrainsInput>;
  description: Scalars['String'];
  featuredMedia?: InputMaybe<MediaCreateOneInput>;
  isPublished?: InputMaybe<Scalars['Boolean']>;
  lineage?: InputMaybe<StrainCreateManyInput>;
  mediaList?: InputMaybe<MediaCreateManyInput>;
  message?: InputMaybe<MessageCreateOneWithoutStrainsInput>;
  name: Scalars['String'];
  products?: InputMaybe<ProductCreateManyInput>;
  reviews?: InputMaybe<ReviewCreateManyWithoutStrainInput>;
  species: Species;
  strainTypeEffects?: InputMaybe<StrainTypeCreateOneWithoutStrainsInput>;
  taste?: InputMaybe<TasteCreateOneWithoutStrainsInput>;
  tests?: InputMaybe<TestCreateManyWithoutStrainInput>;
  wellnessEffect?: InputMaybe<WellnessEffectCreateOneWithoutStrainsInput>;
};

export type StrainCreateWithoutMessageInput = {
  aroma?: InputMaybe<AromaCreateOneWithoutStrainsInput>;
  createdBy?: InputMaybe<UserCreateOneWithoutStrainsInput>;
  description: Scalars['String'];
  featuredMedia?: InputMaybe<MediaCreateOneInput>;
  isPublished?: InputMaybe<Scalars['Boolean']>;
  lineage?: InputMaybe<StrainCreateManyInput>;
  locations?: InputMaybe<LocationCreateManyWithoutStrainsInput>;
  mediaList?: InputMaybe<MediaCreateManyInput>;
  name: Scalars['String'];
  products?: InputMaybe<ProductCreateManyInput>;
  reviews?: InputMaybe<ReviewCreateManyWithoutStrainInput>;
  species: Species;
  strainTypeEffects?: InputMaybe<StrainTypeCreateOneWithoutStrainsInput>;
  taste?: InputMaybe<TasteCreateOneWithoutStrainsInput>;
  tests?: InputMaybe<TestCreateManyWithoutStrainInput>;
  wellnessEffect?: InputMaybe<WellnessEffectCreateOneWithoutStrainsInput>;
};

export type StrainCreateWithoutReviewsInput = {
  aroma?: InputMaybe<AromaCreateOneWithoutStrainsInput>;
  createdBy?: InputMaybe<UserCreateOneWithoutStrainsInput>;
  description: Scalars['String'];
  featuredMedia?: InputMaybe<MediaCreateOneInput>;
  isPublished?: InputMaybe<Scalars['Boolean']>;
  lineage?: InputMaybe<StrainCreateManyInput>;
  locations?: InputMaybe<LocationCreateManyWithoutStrainsInput>;
  mediaList?: InputMaybe<MediaCreateManyInput>;
  message?: InputMaybe<MessageCreateOneWithoutStrainsInput>;
  name: Scalars['String'];
  products?: InputMaybe<ProductCreateManyInput>;
  species: Species;
  strainTypeEffects?: InputMaybe<StrainTypeCreateOneWithoutStrainsInput>;
  taste?: InputMaybe<TasteCreateOneWithoutStrainsInput>;
  tests?: InputMaybe<TestCreateManyWithoutStrainInput>;
  wellnessEffect?: InputMaybe<WellnessEffectCreateOneWithoutStrainsInput>;
};

export type StrainCreateWithoutStrainTypeEffectsInput = {
  aroma?: InputMaybe<AromaCreateOneWithoutStrainsInput>;
  createdBy?: InputMaybe<UserCreateOneWithoutStrainsInput>;
  description: Scalars['String'];
  featuredMedia?: InputMaybe<MediaCreateOneInput>;
  isPublished?: InputMaybe<Scalars['Boolean']>;
  lineage?: InputMaybe<StrainCreateManyInput>;
  locations?: InputMaybe<LocationCreateManyWithoutStrainsInput>;
  mediaList?: InputMaybe<MediaCreateManyInput>;
  message?: InputMaybe<MessageCreateOneWithoutStrainsInput>;
  name: Scalars['String'];
  products?: InputMaybe<ProductCreateManyInput>;
  reviews?: InputMaybe<ReviewCreateManyWithoutStrainInput>;
  species: Species;
  taste?: InputMaybe<TasteCreateOneWithoutStrainsInput>;
  tests?: InputMaybe<TestCreateManyWithoutStrainInput>;
  wellnessEffect?: InputMaybe<WellnessEffectCreateOneWithoutStrainsInput>;
};

export type StrainCreateWithoutTasteInput = {
  aroma?: InputMaybe<AromaCreateOneWithoutStrainsInput>;
  createdBy?: InputMaybe<UserCreateOneWithoutStrainsInput>;
  description: Scalars['String'];
  featuredMedia?: InputMaybe<MediaCreateOneInput>;
  isPublished?: InputMaybe<Scalars['Boolean']>;
  lineage?: InputMaybe<StrainCreateManyInput>;
  locations?: InputMaybe<LocationCreateManyWithoutStrainsInput>;
  mediaList?: InputMaybe<MediaCreateManyInput>;
  message?: InputMaybe<MessageCreateOneWithoutStrainsInput>;
  name: Scalars['String'];
  products?: InputMaybe<ProductCreateManyInput>;
  reviews?: InputMaybe<ReviewCreateManyWithoutStrainInput>;
  species: Species;
  strainTypeEffects?: InputMaybe<StrainTypeCreateOneWithoutStrainsInput>;
  tests?: InputMaybe<TestCreateManyWithoutStrainInput>;
  wellnessEffect?: InputMaybe<WellnessEffectCreateOneWithoutStrainsInput>;
};

export type StrainCreateWithoutTestsInput = {
  aroma?: InputMaybe<AromaCreateOneWithoutStrainsInput>;
  createdBy?: InputMaybe<UserCreateOneWithoutStrainsInput>;
  description: Scalars['String'];
  featuredMedia?: InputMaybe<MediaCreateOneInput>;
  isPublished?: InputMaybe<Scalars['Boolean']>;
  lineage?: InputMaybe<StrainCreateManyInput>;
  locations?: InputMaybe<LocationCreateManyWithoutStrainsInput>;
  mediaList?: InputMaybe<MediaCreateManyInput>;
  message?: InputMaybe<MessageCreateOneWithoutStrainsInput>;
  name: Scalars['String'];
  products?: InputMaybe<ProductCreateManyInput>;
  reviews?: InputMaybe<ReviewCreateManyWithoutStrainInput>;
  species: Species;
  strainTypeEffects?: InputMaybe<StrainTypeCreateOneWithoutStrainsInput>;
  taste?: InputMaybe<TasteCreateOneWithoutStrainsInput>;
  wellnessEffect?: InputMaybe<WellnessEffectCreateOneWithoutStrainsInput>;
};

export type StrainCreateWithoutWellnessEffectInput = {
  aroma?: InputMaybe<AromaCreateOneWithoutStrainsInput>;
  createdBy?: InputMaybe<UserCreateOneWithoutStrainsInput>;
  description: Scalars['String'];
  featuredMedia?: InputMaybe<MediaCreateOneInput>;
  isPublished?: InputMaybe<Scalars['Boolean']>;
  lineage?: InputMaybe<StrainCreateManyInput>;
  locations?: InputMaybe<LocationCreateManyWithoutStrainsInput>;
  mediaList?: InputMaybe<MediaCreateManyInput>;
  message?: InputMaybe<MessageCreateOneWithoutStrainsInput>;
  name: Scalars['String'];
  products?: InputMaybe<ProductCreateManyInput>;
  reviews?: InputMaybe<ReviewCreateManyWithoutStrainInput>;
  species: Species;
  strainTypeEffects?: InputMaybe<StrainTypeCreateOneWithoutStrainsInput>;
  taste?: InputMaybe<TasteCreateOneWithoutStrainsInput>;
  tests?: InputMaybe<TestCreateManyWithoutStrainInput>;
};

export enum StrainOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DescriptionAsc = 'description_ASC',
  DescriptionDesc = 'description_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  IsPublishedAsc = 'isPublished_ASC',
  IsPublishedDesc = 'isPublished_DESC',
  NameAsc = 'name_ASC',
  NameDesc = 'name_DESC',
  SpeciesAsc = 'species_ASC',
  SpeciesDesc = 'species_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC'
}

export type StrainType = Node & {
  __typename?: 'StrainType';
  cannatypes?: Maybe<Array<Cannatype>>;
  createdAt: Scalars['DateTime'];
  id: Scalars['ID'];
  indica?: Maybe<IndicaEffects>;
  products?: Maybe<Array<Product>>;
  ruderalis?: Maybe<Scalars['String']>;
  sativa?: Maybe<SativaEffects>;
  strains?: Maybe<Array<Strain>>;
  updatedAt: Scalars['DateTime'];
};


export type StrainTypeCannatypesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<CannatypeOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<CannatypeWhereInput>;
};


export type StrainTypeProductsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ProductOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ProductWhereInput>;
};


export type StrainTypeStrainsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<StrainOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<StrainWhereInput>;
};

export type StrainTypeCreateOneWithoutCannatypesInput = {
  connect?: InputMaybe<StrainTypeWhereUniqueInput>;
  create?: InputMaybe<StrainTypeCreateWithoutCannatypesInput>;
};

export type StrainTypeCreateOneWithoutProductsInput = {
  connect?: InputMaybe<StrainTypeWhereUniqueInput>;
  create?: InputMaybe<StrainTypeCreateWithoutProductsInput>;
};

export type StrainTypeCreateOneWithoutStrainsInput = {
  connect?: InputMaybe<StrainTypeWhereUniqueInput>;
  create?: InputMaybe<StrainTypeCreateWithoutStrainsInput>;
};

export type StrainTypeCreateWithoutCannatypesInput = {
  indica?: InputMaybe<IndicaEffectsCreateOneWithoutStrainTypesInput>;
  products?: InputMaybe<ProductCreateManyWithoutStrainTypeEffectsInput>;
  ruderalis?: InputMaybe<Scalars['String']>;
  sativa?: InputMaybe<SativaEffectsCreateOneWithoutStrainTypesInput>;
  strains?: InputMaybe<StrainCreateManyWithoutStrainTypeEffectsInput>;
};

export type StrainTypeCreateWithoutProductsInput = {
  cannatypes?: InputMaybe<CannatypeCreateManyWithoutStrainTypeEffectsInput>;
  indica?: InputMaybe<IndicaEffectsCreateOneWithoutStrainTypesInput>;
  ruderalis?: InputMaybe<Scalars['String']>;
  sativa?: InputMaybe<SativaEffectsCreateOneWithoutStrainTypesInput>;
  strains?: InputMaybe<StrainCreateManyWithoutStrainTypeEffectsInput>;
};

export type StrainTypeCreateWithoutStrainsInput = {
  cannatypes?: InputMaybe<CannatypeCreateManyWithoutStrainTypeEffectsInput>;
  indica?: InputMaybe<IndicaEffectsCreateOneWithoutStrainTypesInput>;
  products?: InputMaybe<ProductCreateManyWithoutStrainTypeEffectsInput>;
  ruderalis?: InputMaybe<Scalars['String']>;
  sativa?: InputMaybe<SativaEffectsCreateOneWithoutStrainTypesInput>;
};

export enum StrainTypeOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  RuderalisAsc = 'ruderalis_ASC',
  RuderalisDesc = 'ruderalis_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC'
}

export type StrainTypeUpdateOneWithoutCannatypesInput = {
  connect?: InputMaybe<StrainTypeWhereUniqueInput>;
  create?: InputMaybe<StrainTypeCreateWithoutCannatypesInput>;
  delete?: InputMaybe<Scalars['Boolean']>;
  disconnect?: InputMaybe<Scalars['Boolean']>;
  update?: InputMaybe<StrainTypeUpdateWithoutCannatypesDataInput>;
  upsert?: InputMaybe<StrainTypeUpsertWithoutCannatypesInput>;
};

export type StrainTypeUpdateOneWithoutProductsInput = {
  connect?: InputMaybe<StrainTypeWhereUniqueInput>;
  create?: InputMaybe<StrainTypeCreateWithoutProductsInput>;
  delete?: InputMaybe<Scalars['Boolean']>;
  disconnect?: InputMaybe<Scalars['Boolean']>;
  update?: InputMaybe<StrainTypeUpdateWithoutProductsDataInput>;
  upsert?: InputMaybe<StrainTypeUpsertWithoutProductsInput>;
};

export type StrainTypeUpdateOneWithoutStrainsInput = {
  connect?: InputMaybe<StrainTypeWhereUniqueInput>;
  create?: InputMaybe<StrainTypeCreateWithoutStrainsInput>;
  delete?: InputMaybe<Scalars['Boolean']>;
  disconnect?: InputMaybe<Scalars['Boolean']>;
  update?: InputMaybe<StrainTypeUpdateWithoutStrainsDataInput>;
  upsert?: InputMaybe<StrainTypeUpsertWithoutStrainsInput>;
};

export type StrainTypeUpdateWithoutCannatypesDataInput = {
  indica?: InputMaybe<IndicaEffectsUpdateOneWithoutStrainTypesInput>;
  products?: InputMaybe<ProductUpdateManyWithoutStrainTypeEffectsInput>;
  ruderalis?: InputMaybe<Scalars['String']>;
  sativa?: InputMaybe<SativaEffectsUpdateOneWithoutStrainTypesInput>;
  strains?: InputMaybe<StrainUpdateManyWithoutStrainTypeEffectsInput>;
};

export type StrainTypeUpdateWithoutProductsDataInput = {
  cannatypes?: InputMaybe<CannatypeUpdateManyWithoutStrainTypeEffectsInput>;
  indica?: InputMaybe<IndicaEffectsUpdateOneWithoutStrainTypesInput>;
  ruderalis?: InputMaybe<Scalars['String']>;
  sativa?: InputMaybe<SativaEffectsUpdateOneWithoutStrainTypesInput>;
  strains?: InputMaybe<StrainUpdateManyWithoutStrainTypeEffectsInput>;
};

export type StrainTypeUpdateWithoutStrainsDataInput = {
  cannatypes?: InputMaybe<CannatypeUpdateManyWithoutStrainTypeEffectsInput>;
  indica?: InputMaybe<IndicaEffectsUpdateOneWithoutStrainTypesInput>;
  products?: InputMaybe<ProductUpdateManyWithoutStrainTypeEffectsInput>;
  ruderalis?: InputMaybe<Scalars['String']>;
  sativa?: InputMaybe<SativaEffectsUpdateOneWithoutStrainTypesInput>;
};

export type StrainTypeUpsertWithoutCannatypesInput = {
  create: StrainTypeCreateWithoutCannatypesInput;
  update: StrainTypeUpdateWithoutCannatypesDataInput;
};

export type StrainTypeUpsertWithoutProductsInput = {
  create: StrainTypeCreateWithoutProductsInput;
  update: StrainTypeUpdateWithoutProductsDataInput;
};

export type StrainTypeUpsertWithoutStrainsInput = {
  create: StrainTypeCreateWithoutStrainsInput;
  update: StrainTypeUpdateWithoutStrainsDataInput;
};

export type StrainTypeWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<StrainTypeWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<StrainTypeWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<StrainTypeWhereInput>>;
  cannatypes_every?: InputMaybe<CannatypeWhereInput>;
  cannatypes_none?: InputMaybe<CannatypeWhereInput>;
  cannatypes_some?: InputMaybe<CannatypeWhereInput>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: InputMaybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: InputMaybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: InputMaybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  indica?: InputMaybe<IndicaEffectsWhereInput>;
  products_every?: InputMaybe<ProductWhereInput>;
  products_none?: InputMaybe<ProductWhereInput>;
  products_some?: InputMaybe<ProductWhereInput>;
  ruderalis?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  ruderalis_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  ruderalis_ends_with?: InputMaybe<Scalars['String']>;
  /** All values greater than the given value. */
  ruderalis_gt?: InputMaybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  ruderalis_gte?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  ruderalis_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  ruderalis_lt?: InputMaybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  ruderalis_lte?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  ruderalis_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  ruderalis_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string. */
  ruderalis_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  ruderalis_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  ruderalis_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  ruderalis_starts_with?: InputMaybe<Scalars['String']>;
  sativa?: InputMaybe<SativaEffectsWhereInput>;
  strains_every?: InputMaybe<StrainWhereInput>;
  strains_none?: InputMaybe<StrainWhereInput>;
  strains_some?: InputMaybe<StrainWhereInput>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
};

export type StrainTypeWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export type StrainUpdateDataInput = {
  aroma?: InputMaybe<AromaUpdateOneWithoutStrainsInput>;
  createdBy?: InputMaybe<UserUpdateOneWithoutStrainsInput>;
  description?: InputMaybe<Scalars['String']>;
  featuredMedia?: InputMaybe<MediaUpdateOneInput>;
  isPublished?: InputMaybe<Scalars['Boolean']>;
  lineage?: InputMaybe<StrainUpdateManyInput>;
  locations?: InputMaybe<LocationUpdateManyWithoutStrainsInput>;
  mediaList?: InputMaybe<MediaUpdateManyInput>;
  message?: InputMaybe<MessageUpdateOneWithoutStrainsInput>;
  name?: InputMaybe<Scalars['String']>;
  products?: InputMaybe<ProductUpdateManyInput>;
  reviews?: InputMaybe<ReviewUpdateManyWithoutStrainInput>;
  species?: InputMaybe<Species>;
  strainTypeEffects?: InputMaybe<StrainTypeUpdateOneWithoutStrainsInput>;
  taste?: InputMaybe<TasteUpdateOneWithoutStrainsInput>;
  tests?: InputMaybe<TestUpdateManyWithoutStrainInput>;
  wellnessEffect?: InputMaybe<WellnessEffectUpdateOneWithoutStrainsInput>;
};

export type StrainUpdateInput = {
  aroma?: InputMaybe<AromaUpdateOneWithoutStrainsInput>;
  createdBy?: InputMaybe<UserUpdateOneWithoutStrainsInput>;
  description?: InputMaybe<Scalars['String']>;
  featuredMedia?: InputMaybe<MediaUpdateOneInput>;
  isPublished?: InputMaybe<Scalars['Boolean']>;
  lineage?: InputMaybe<StrainUpdateManyInput>;
  locations?: InputMaybe<LocationUpdateManyWithoutStrainsInput>;
  mediaList?: InputMaybe<MediaUpdateManyInput>;
  message?: InputMaybe<MessageUpdateOneWithoutStrainsInput>;
  name?: InputMaybe<Scalars['String']>;
  products?: InputMaybe<ProductUpdateManyInput>;
  reviews?: InputMaybe<ReviewUpdateManyWithoutStrainInput>;
  species?: InputMaybe<Species>;
  strainTypeEffects?: InputMaybe<StrainTypeUpdateOneWithoutStrainsInput>;
  taste?: InputMaybe<TasteUpdateOneWithoutStrainsInput>;
  tests?: InputMaybe<TestUpdateManyWithoutStrainInput>;
  wellnessEffect?: InputMaybe<WellnessEffectUpdateOneWithoutStrainsInput>;
};

export type StrainUpdateManyInput = {
  connect?: InputMaybe<Array<StrainWhereUniqueInput>>;
  create?: InputMaybe<Array<StrainCreateInput>>;
  delete?: InputMaybe<Array<StrainWhereUniqueInput>>;
  disconnect?: InputMaybe<Array<StrainWhereUniqueInput>>;
  update?: InputMaybe<Array<StrainUpdateWithWhereUniqueNestedInput>>;
  upsert?: InputMaybe<Array<StrainUpsertWithWhereUniqueNestedInput>>;
};

export type StrainUpdateManyWithoutAromaInput = {
  connect?: InputMaybe<Array<StrainWhereUniqueInput>>;
  create?: InputMaybe<Array<StrainCreateWithoutAromaInput>>;
  delete?: InputMaybe<Array<StrainWhereUniqueInput>>;
  disconnect?: InputMaybe<Array<StrainWhereUniqueInput>>;
  update?: InputMaybe<Array<StrainUpdateWithWhereUniqueWithoutAromaInput>>;
  upsert?: InputMaybe<Array<StrainUpsertWithWhereUniqueWithoutAromaInput>>;
};

export type StrainUpdateManyWithoutCreatedByInput = {
  connect?: InputMaybe<Array<StrainWhereUniqueInput>>;
  create?: InputMaybe<Array<StrainCreateWithoutCreatedByInput>>;
  delete?: InputMaybe<Array<StrainWhereUniqueInput>>;
  disconnect?: InputMaybe<Array<StrainWhereUniqueInput>>;
  update?: InputMaybe<Array<StrainUpdateWithWhereUniqueWithoutCreatedByInput>>;
  upsert?: InputMaybe<Array<StrainUpsertWithWhereUniqueWithoutCreatedByInput>>;
};

export type StrainUpdateManyWithoutLocationsInput = {
  connect?: InputMaybe<Array<StrainWhereUniqueInput>>;
  create?: InputMaybe<Array<StrainCreateWithoutLocationsInput>>;
  delete?: InputMaybe<Array<StrainWhereUniqueInput>>;
  disconnect?: InputMaybe<Array<StrainWhereUniqueInput>>;
  update?: InputMaybe<Array<StrainUpdateWithWhereUniqueWithoutLocationsInput>>;
  upsert?: InputMaybe<Array<StrainUpsertWithWhereUniqueWithoutLocationsInput>>;
};

export type StrainUpdateManyWithoutMessageInput = {
  connect?: InputMaybe<Array<StrainWhereUniqueInput>>;
  create?: InputMaybe<Array<StrainCreateWithoutMessageInput>>;
  delete?: InputMaybe<Array<StrainWhereUniqueInput>>;
  disconnect?: InputMaybe<Array<StrainWhereUniqueInput>>;
  update?: InputMaybe<Array<StrainUpdateWithWhereUniqueWithoutMessageInput>>;
  upsert?: InputMaybe<Array<StrainUpsertWithWhereUniqueWithoutMessageInput>>;
};

export type StrainUpdateManyWithoutStrainTypeEffectsInput = {
  connect?: InputMaybe<Array<StrainWhereUniqueInput>>;
  create?: InputMaybe<Array<StrainCreateWithoutStrainTypeEffectsInput>>;
  delete?: InputMaybe<Array<StrainWhereUniqueInput>>;
  disconnect?: InputMaybe<Array<StrainWhereUniqueInput>>;
  update?: InputMaybe<Array<StrainUpdateWithWhereUniqueWithoutStrainTypeEffectsInput>>;
  upsert?: InputMaybe<Array<StrainUpsertWithWhereUniqueWithoutStrainTypeEffectsInput>>;
};

export type StrainUpdateManyWithoutTasteInput = {
  connect?: InputMaybe<Array<StrainWhereUniqueInput>>;
  create?: InputMaybe<Array<StrainCreateWithoutTasteInput>>;
  delete?: InputMaybe<Array<StrainWhereUniqueInput>>;
  disconnect?: InputMaybe<Array<StrainWhereUniqueInput>>;
  update?: InputMaybe<Array<StrainUpdateWithWhereUniqueWithoutTasteInput>>;
  upsert?: InputMaybe<Array<StrainUpsertWithWhereUniqueWithoutTasteInput>>;
};

export type StrainUpdateManyWithoutWellnessEffectInput = {
  connect?: InputMaybe<Array<StrainWhereUniqueInput>>;
  create?: InputMaybe<Array<StrainCreateWithoutWellnessEffectInput>>;
  delete?: InputMaybe<Array<StrainWhereUniqueInput>>;
  disconnect?: InputMaybe<Array<StrainWhereUniqueInput>>;
  update?: InputMaybe<Array<StrainUpdateWithWhereUniqueWithoutWellnessEffectInput>>;
  upsert?: InputMaybe<Array<StrainUpsertWithWhereUniqueWithoutWellnessEffectInput>>;
};

export type StrainUpdateOneWithoutReviewsInput = {
  connect?: InputMaybe<StrainWhereUniqueInput>;
  create?: InputMaybe<StrainCreateWithoutReviewsInput>;
  delete?: InputMaybe<Scalars['Boolean']>;
  disconnect?: InputMaybe<Scalars['Boolean']>;
  update?: InputMaybe<StrainUpdateWithoutReviewsDataInput>;
  upsert?: InputMaybe<StrainUpsertWithoutReviewsInput>;
};

export type StrainUpdateOneWithoutTestsInput = {
  connect?: InputMaybe<StrainWhereUniqueInput>;
  create?: InputMaybe<StrainCreateWithoutTestsInput>;
  delete?: InputMaybe<Scalars['Boolean']>;
  disconnect?: InputMaybe<Scalars['Boolean']>;
  update?: InputMaybe<StrainUpdateWithoutTestsDataInput>;
  upsert?: InputMaybe<StrainUpsertWithoutTestsInput>;
};

export type StrainUpdateWithWhereUniqueNestedInput = {
  data: StrainUpdateDataInput;
  where: StrainWhereUniqueInput;
};

export type StrainUpdateWithWhereUniqueWithoutAromaInput = {
  data: StrainUpdateWithoutAromaDataInput;
  where: StrainWhereUniqueInput;
};

export type StrainUpdateWithWhereUniqueWithoutCreatedByInput = {
  data: StrainUpdateWithoutCreatedByDataInput;
  where: StrainWhereUniqueInput;
};

export type StrainUpdateWithWhereUniqueWithoutLocationsInput = {
  data: StrainUpdateWithoutLocationsDataInput;
  where: StrainWhereUniqueInput;
};

export type StrainUpdateWithWhereUniqueWithoutMessageInput = {
  data: StrainUpdateWithoutMessageDataInput;
  where: StrainWhereUniqueInput;
};

export type StrainUpdateWithWhereUniqueWithoutStrainTypeEffectsInput = {
  data: StrainUpdateWithoutStrainTypeEffectsDataInput;
  where: StrainWhereUniqueInput;
};

export type StrainUpdateWithWhereUniqueWithoutTasteInput = {
  data: StrainUpdateWithoutTasteDataInput;
  where: StrainWhereUniqueInput;
};

export type StrainUpdateWithWhereUniqueWithoutWellnessEffectInput = {
  data: StrainUpdateWithoutWellnessEffectDataInput;
  where: StrainWhereUniqueInput;
};

export type StrainUpdateWithoutAromaDataInput = {
  createdBy?: InputMaybe<UserUpdateOneWithoutStrainsInput>;
  description?: InputMaybe<Scalars['String']>;
  featuredMedia?: InputMaybe<MediaUpdateOneInput>;
  isPublished?: InputMaybe<Scalars['Boolean']>;
  lineage?: InputMaybe<StrainUpdateManyInput>;
  locations?: InputMaybe<LocationUpdateManyWithoutStrainsInput>;
  mediaList?: InputMaybe<MediaUpdateManyInput>;
  message?: InputMaybe<MessageUpdateOneWithoutStrainsInput>;
  name?: InputMaybe<Scalars['String']>;
  products?: InputMaybe<ProductUpdateManyInput>;
  reviews?: InputMaybe<ReviewUpdateManyWithoutStrainInput>;
  species?: InputMaybe<Species>;
  strainTypeEffects?: InputMaybe<StrainTypeUpdateOneWithoutStrainsInput>;
  taste?: InputMaybe<TasteUpdateOneWithoutStrainsInput>;
  tests?: InputMaybe<TestUpdateManyWithoutStrainInput>;
  wellnessEffect?: InputMaybe<WellnessEffectUpdateOneWithoutStrainsInput>;
};

export type StrainUpdateWithoutCreatedByDataInput = {
  aroma?: InputMaybe<AromaUpdateOneWithoutStrainsInput>;
  description?: InputMaybe<Scalars['String']>;
  featuredMedia?: InputMaybe<MediaUpdateOneInput>;
  isPublished?: InputMaybe<Scalars['Boolean']>;
  lineage?: InputMaybe<StrainUpdateManyInput>;
  locations?: InputMaybe<LocationUpdateManyWithoutStrainsInput>;
  mediaList?: InputMaybe<MediaUpdateManyInput>;
  message?: InputMaybe<MessageUpdateOneWithoutStrainsInput>;
  name?: InputMaybe<Scalars['String']>;
  products?: InputMaybe<ProductUpdateManyInput>;
  reviews?: InputMaybe<ReviewUpdateManyWithoutStrainInput>;
  species?: InputMaybe<Species>;
  strainTypeEffects?: InputMaybe<StrainTypeUpdateOneWithoutStrainsInput>;
  taste?: InputMaybe<TasteUpdateOneWithoutStrainsInput>;
  tests?: InputMaybe<TestUpdateManyWithoutStrainInput>;
  wellnessEffect?: InputMaybe<WellnessEffectUpdateOneWithoutStrainsInput>;
};

export type StrainUpdateWithoutLocationsDataInput = {
  aroma?: InputMaybe<AromaUpdateOneWithoutStrainsInput>;
  createdBy?: InputMaybe<UserUpdateOneWithoutStrainsInput>;
  description?: InputMaybe<Scalars['String']>;
  featuredMedia?: InputMaybe<MediaUpdateOneInput>;
  isPublished?: InputMaybe<Scalars['Boolean']>;
  lineage?: InputMaybe<StrainUpdateManyInput>;
  mediaList?: InputMaybe<MediaUpdateManyInput>;
  message?: InputMaybe<MessageUpdateOneWithoutStrainsInput>;
  name?: InputMaybe<Scalars['String']>;
  products?: InputMaybe<ProductUpdateManyInput>;
  reviews?: InputMaybe<ReviewUpdateManyWithoutStrainInput>;
  species?: InputMaybe<Species>;
  strainTypeEffects?: InputMaybe<StrainTypeUpdateOneWithoutStrainsInput>;
  taste?: InputMaybe<TasteUpdateOneWithoutStrainsInput>;
  tests?: InputMaybe<TestUpdateManyWithoutStrainInput>;
  wellnessEffect?: InputMaybe<WellnessEffectUpdateOneWithoutStrainsInput>;
};

export type StrainUpdateWithoutMessageDataInput = {
  aroma?: InputMaybe<AromaUpdateOneWithoutStrainsInput>;
  createdBy?: InputMaybe<UserUpdateOneWithoutStrainsInput>;
  description?: InputMaybe<Scalars['String']>;
  featuredMedia?: InputMaybe<MediaUpdateOneInput>;
  isPublished?: InputMaybe<Scalars['Boolean']>;
  lineage?: InputMaybe<StrainUpdateManyInput>;
  locations?: InputMaybe<LocationUpdateManyWithoutStrainsInput>;
  mediaList?: InputMaybe<MediaUpdateManyInput>;
  name?: InputMaybe<Scalars['String']>;
  products?: InputMaybe<ProductUpdateManyInput>;
  reviews?: InputMaybe<ReviewUpdateManyWithoutStrainInput>;
  species?: InputMaybe<Species>;
  strainTypeEffects?: InputMaybe<StrainTypeUpdateOneWithoutStrainsInput>;
  taste?: InputMaybe<TasteUpdateOneWithoutStrainsInput>;
  tests?: InputMaybe<TestUpdateManyWithoutStrainInput>;
  wellnessEffect?: InputMaybe<WellnessEffectUpdateOneWithoutStrainsInput>;
};

export type StrainUpdateWithoutReviewsDataInput = {
  aroma?: InputMaybe<AromaUpdateOneWithoutStrainsInput>;
  createdBy?: InputMaybe<UserUpdateOneWithoutStrainsInput>;
  description?: InputMaybe<Scalars['String']>;
  featuredMedia?: InputMaybe<MediaUpdateOneInput>;
  isPublished?: InputMaybe<Scalars['Boolean']>;
  lineage?: InputMaybe<StrainUpdateManyInput>;
  locations?: InputMaybe<LocationUpdateManyWithoutStrainsInput>;
  mediaList?: InputMaybe<MediaUpdateManyInput>;
  message?: InputMaybe<MessageUpdateOneWithoutStrainsInput>;
  name?: InputMaybe<Scalars['String']>;
  products?: InputMaybe<ProductUpdateManyInput>;
  species?: InputMaybe<Species>;
  strainTypeEffects?: InputMaybe<StrainTypeUpdateOneWithoutStrainsInput>;
  taste?: InputMaybe<TasteUpdateOneWithoutStrainsInput>;
  tests?: InputMaybe<TestUpdateManyWithoutStrainInput>;
  wellnessEffect?: InputMaybe<WellnessEffectUpdateOneWithoutStrainsInput>;
};

export type StrainUpdateWithoutStrainTypeEffectsDataInput = {
  aroma?: InputMaybe<AromaUpdateOneWithoutStrainsInput>;
  createdBy?: InputMaybe<UserUpdateOneWithoutStrainsInput>;
  description?: InputMaybe<Scalars['String']>;
  featuredMedia?: InputMaybe<MediaUpdateOneInput>;
  isPublished?: InputMaybe<Scalars['Boolean']>;
  lineage?: InputMaybe<StrainUpdateManyInput>;
  locations?: InputMaybe<LocationUpdateManyWithoutStrainsInput>;
  mediaList?: InputMaybe<MediaUpdateManyInput>;
  message?: InputMaybe<MessageUpdateOneWithoutStrainsInput>;
  name?: InputMaybe<Scalars['String']>;
  products?: InputMaybe<ProductUpdateManyInput>;
  reviews?: InputMaybe<ReviewUpdateManyWithoutStrainInput>;
  species?: InputMaybe<Species>;
  taste?: InputMaybe<TasteUpdateOneWithoutStrainsInput>;
  tests?: InputMaybe<TestUpdateManyWithoutStrainInput>;
  wellnessEffect?: InputMaybe<WellnessEffectUpdateOneWithoutStrainsInput>;
};

export type StrainUpdateWithoutTasteDataInput = {
  aroma?: InputMaybe<AromaUpdateOneWithoutStrainsInput>;
  createdBy?: InputMaybe<UserUpdateOneWithoutStrainsInput>;
  description?: InputMaybe<Scalars['String']>;
  featuredMedia?: InputMaybe<MediaUpdateOneInput>;
  isPublished?: InputMaybe<Scalars['Boolean']>;
  lineage?: InputMaybe<StrainUpdateManyInput>;
  locations?: InputMaybe<LocationUpdateManyWithoutStrainsInput>;
  mediaList?: InputMaybe<MediaUpdateManyInput>;
  message?: InputMaybe<MessageUpdateOneWithoutStrainsInput>;
  name?: InputMaybe<Scalars['String']>;
  products?: InputMaybe<ProductUpdateManyInput>;
  reviews?: InputMaybe<ReviewUpdateManyWithoutStrainInput>;
  species?: InputMaybe<Species>;
  strainTypeEffects?: InputMaybe<StrainTypeUpdateOneWithoutStrainsInput>;
  tests?: InputMaybe<TestUpdateManyWithoutStrainInput>;
  wellnessEffect?: InputMaybe<WellnessEffectUpdateOneWithoutStrainsInput>;
};

export type StrainUpdateWithoutTestsDataInput = {
  aroma?: InputMaybe<AromaUpdateOneWithoutStrainsInput>;
  createdBy?: InputMaybe<UserUpdateOneWithoutStrainsInput>;
  description?: InputMaybe<Scalars['String']>;
  featuredMedia?: InputMaybe<MediaUpdateOneInput>;
  isPublished?: InputMaybe<Scalars['Boolean']>;
  lineage?: InputMaybe<StrainUpdateManyInput>;
  locations?: InputMaybe<LocationUpdateManyWithoutStrainsInput>;
  mediaList?: InputMaybe<MediaUpdateManyInput>;
  message?: InputMaybe<MessageUpdateOneWithoutStrainsInput>;
  name?: InputMaybe<Scalars['String']>;
  products?: InputMaybe<ProductUpdateManyInput>;
  reviews?: InputMaybe<ReviewUpdateManyWithoutStrainInput>;
  species?: InputMaybe<Species>;
  strainTypeEffects?: InputMaybe<StrainTypeUpdateOneWithoutStrainsInput>;
  taste?: InputMaybe<TasteUpdateOneWithoutStrainsInput>;
  wellnessEffect?: InputMaybe<WellnessEffectUpdateOneWithoutStrainsInput>;
};

export type StrainUpdateWithoutWellnessEffectDataInput = {
  aroma?: InputMaybe<AromaUpdateOneWithoutStrainsInput>;
  createdBy?: InputMaybe<UserUpdateOneWithoutStrainsInput>;
  description?: InputMaybe<Scalars['String']>;
  featuredMedia?: InputMaybe<MediaUpdateOneInput>;
  isPublished?: InputMaybe<Scalars['Boolean']>;
  lineage?: InputMaybe<StrainUpdateManyInput>;
  locations?: InputMaybe<LocationUpdateManyWithoutStrainsInput>;
  mediaList?: InputMaybe<MediaUpdateManyInput>;
  message?: InputMaybe<MessageUpdateOneWithoutStrainsInput>;
  name?: InputMaybe<Scalars['String']>;
  products?: InputMaybe<ProductUpdateManyInput>;
  reviews?: InputMaybe<ReviewUpdateManyWithoutStrainInput>;
  species?: InputMaybe<Species>;
  strainTypeEffects?: InputMaybe<StrainTypeUpdateOneWithoutStrainsInput>;
  taste?: InputMaybe<TasteUpdateOneWithoutStrainsInput>;
  tests?: InputMaybe<TestUpdateManyWithoutStrainInput>;
};

export type StrainUpsertWithWhereUniqueNestedInput = {
  create: StrainCreateInput;
  update: StrainUpdateDataInput;
  where: StrainWhereUniqueInput;
};

export type StrainUpsertWithWhereUniqueWithoutAromaInput = {
  create: StrainCreateWithoutAromaInput;
  update: StrainUpdateWithoutAromaDataInput;
  where: StrainWhereUniqueInput;
};

export type StrainUpsertWithWhereUniqueWithoutCreatedByInput = {
  create: StrainCreateWithoutCreatedByInput;
  update: StrainUpdateWithoutCreatedByDataInput;
  where: StrainWhereUniqueInput;
};

export type StrainUpsertWithWhereUniqueWithoutLocationsInput = {
  create: StrainCreateWithoutLocationsInput;
  update: StrainUpdateWithoutLocationsDataInput;
  where: StrainWhereUniqueInput;
};

export type StrainUpsertWithWhereUniqueWithoutMessageInput = {
  create: StrainCreateWithoutMessageInput;
  update: StrainUpdateWithoutMessageDataInput;
  where: StrainWhereUniqueInput;
};

export type StrainUpsertWithWhereUniqueWithoutStrainTypeEffectsInput = {
  create: StrainCreateWithoutStrainTypeEffectsInput;
  update: StrainUpdateWithoutStrainTypeEffectsDataInput;
  where: StrainWhereUniqueInput;
};

export type StrainUpsertWithWhereUniqueWithoutTasteInput = {
  create: StrainCreateWithoutTasteInput;
  update: StrainUpdateWithoutTasteDataInput;
  where: StrainWhereUniqueInput;
};

export type StrainUpsertWithWhereUniqueWithoutWellnessEffectInput = {
  create: StrainCreateWithoutWellnessEffectInput;
  update: StrainUpdateWithoutWellnessEffectDataInput;
  where: StrainWhereUniqueInput;
};

export type StrainUpsertWithoutReviewsInput = {
  create: StrainCreateWithoutReviewsInput;
  update: StrainUpdateWithoutReviewsDataInput;
};

export type StrainUpsertWithoutTestsInput = {
  create: StrainCreateWithoutTestsInput;
  update: StrainUpdateWithoutTestsDataInput;
};

export type StrainWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<StrainWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<StrainWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<StrainWhereInput>>;
  aroma?: InputMaybe<AromaWhereInput>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  createdBy?: InputMaybe<UserWhereInput>;
  description?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  description_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  description_ends_with?: InputMaybe<Scalars['String']>;
  /** All values greater than the given value. */
  description_gt?: InputMaybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  description_gte?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  description_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  description_lt?: InputMaybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  description_lte?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  description_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  description_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string. */
  description_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  description_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  description_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  description_starts_with?: InputMaybe<Scalars['String']>;
  featuredMedia?: InputMaybe<MediaWhereInput>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: InputMaybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: InputMaybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: InputMaybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  isPublished?: InputMaybe<Scalars['Boolean']>;
  /** All values that are not equal to given value. */
  isPublished_not?: InputMaybe<Scalars['Boolean']>;
  lineage_every?: InputMaybe<StrainWhereInput>;
  lineage_none?: InputMaybe<StrainWhereInput>;
  lineage_some?: InputMaybe<StrainWhereInput>;
  locations_every?: InputMaybe<LocationWhereInput>;
  locations_none?: InputMaybe<LocationWhereInput>;
  locations_some?: InputMaybe<LocationWhereInput>;
  mediaList_every?: InputMaybe<MediaWhereInput>;
  mediaList_none?: InputMaybe<MediaWhereInput>;
  mediaList_some?: InputMaybe<MediaWhereInput>;
  message?: InputMaybe<MessageWhereInput>;
  name?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  name_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  name_ends_with?: InputMaybe<Scalars['String']>;
  /** All values greater than the given value. */
  name_gt?: InputMaybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  name_gte?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  name_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  name_lt?: InputMaybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  name_lte?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  name_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  name_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string. */
  name_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  name_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  name_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  name_starts_with?: InputMaybe<Scalars['String']>;
  products_every?: InputMaybe<ProductWhereInput>;
  products_none?: InputMaybe<ProductWhereInput>;
  products_some?: InputMaybe<ProductWhereInput>;
  reviews_every?: InputMaybe<ReviewWhereInput>;
  reviews_none?: InputMaybe<ReviewWhereInput>;
  reviews_some?: InputMaybe<ReviewWhereInput>;
  species?: InputMaybe<Species>;
  /** All values that are contained in given list. */
  species_in?: InputMaybe<Array<Species>>;
  /** All values that are not equal to given value. */
  species_not?: InputMaybe<Species>;
  /** All values that are not contained in given list. */
  species_not_in?: InputMaybe<Array<Species>>;
  strainTypeEffects?: InputMaybe<StrainTypeWhereInput>;
  taste?: InputMaybe<TasteWhereInput>;
  tests_every?: InputMaybe<TestWhereInput>;
  tests_none?: InputMaybe<TestWhereInput>;
  tests_some?: InputMaybe<TestWhereInput>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  wellnessEffect?: InputMaybe<WellnessEffectWhereInput>;
};

export type StrainWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
  name?: InputMaybe<Scalars['String']>;
};

export enum SubCategory {
  AllInOneDisposable = 'ALL_IN_ONE_DISPOSABLE',
  AllInOneRechargeable = 'ALL_IN_ONE_RECHARGEABLE',
  BadderBudder = 'BADDER_BUDDER',
  BathSaltsSoaksAndScrubs = 'BATH_SALTS_SOAKS_AND_SCRUBS',
  Blunts = 'BLUNTS',
  Breathstrips = 'BREATHSTRIPS',
  BrownieBlondieAndCerealBars = 'BROWNIE_BLONDIE_AND_CEREAL_BARS',
  BubbleHash = 'BUBBLE_HASH',
  CakeAndPie = 'CAKE_AND_PIE',
  CandyLozengeAndGum = 'CANDY_LOZENGE_AND_GUM',
  Cannagar = 'CANNAGAR',
  CaramelsChewsTaffy = 'CARAMELS_CHEWS_TAFFY',
  Carbonated = 'CARBONATED',
  Cartridge = 'CARTRIDGE',
  Cbd = 'CBD',
  CbdPopcorn = 'CBD_POPCORN',
  CbdSingleStrain = 'CBD_SINGLE_STRAIN',
  Cbn = 'CBN',
  Chocolate = 'CHOCOLATE',
  Clones = 'CLONES',
  ConnoisseurInfused = 'CONNOISSEUR_INFUSED',
  Cookie = 'COOKIE',
  CrackersCrispsPretzelsAndPopcorn = 'CRACKERS_CRISPS_PRETZELS_AND_POPCORN',
  Crystalline = 'CRYSTALLINE',
  Distillate = 'DISTILLATE',
  DriedFruitNutsAndGranola = 'DRIED_FRUIT_NUTS_AND_GRANOLA',
  DropsAndMixes = 'DROPS_AND_MIXES',
  ElixirsAndSyrups = 'ELIXIRS_AND_SYRUPS',
  Frozen = 'FROZEN',
  Fruit = 'FRUIT',
  Gummies = 'GUMMIES',
  Hash = 'HASH',
  HoneycombCrumble = 'HONEYCOMB_CRUMBLE',
  HoneyOilHashOil = 'HONEY_OIL_HASH_OIL',
  HoneySugarAndSweeteners = 'HONEY_SUGAR_AND_SWEETENERS',
  Hte = 'HTE',
  Hybrid = 'HYBRID',
  HybridPopcorn = 'HYBRID_POPCORN',
  HybridSingleStrain = 'HYBRID_SINGLE_STRAIN',
  IcedTeaAndLemonade = 'ICED_TEA_AND_LEMONADE',
  Indica = 'INDICA',
  IndicaPopcorn = 'INDICA_POPCORN',
  IndicaSingleStrain = 'INDICA_SINGLE_STRAIN',
  IngredientsCookingOilFlourEtc = 'INGREDIENTS_COOKING_OIL_FLOUR_ETC',
  Kief = 'KIEF',
  LipBalm = 'LIP_BALM',
  LiveResin = 'LIVE_RESIN',
  LotionAndSalve = 'LOTION_AND_SALVE',
  MassageOilLube = 'MASSAGE_OIL_LUBE',
  Milk = 'MILK',
  Mints = 'MINTS',
  MixedStrain = 'MIXED_STRAIN',
  OralSpray = 'ORAL_SPRAY',
  Patch = 'PATCH',
  Refill = 'REFILL',
  Rosin = 'ROSIN',
  RsoWpe = 'RSO_WPE',
  Sativa = 'SATIVA',
  SativaPopcorn = 'SATIVA_POPCORN',
  SativaSingleStrain = 'SATIVA_SINGLE_STRAIN',
  Seeds = 'SEEDS',
  ShakeAndTrim = 'SHAKE_AND_TRIM',
  Shatter = 'SHATTER',
  Soup = 'SOUP',
  Specialty = 'SPECIALTY',
  SportsAndEnergy = 'SPORTS_AND_ENERGY',
  Suppository = 'SUPPOSITORY',
  TankerApplicatorSyringe = 'TANKER_APPLICATOR_SYRINGE',
  TeaCoffeeAndHotCocoa = 'TEA_COFFEE_AND_HOT_COCOA',
  Test = 'TEST',
  ThcA = 'THC_A',
  Tincture = 'TINCTURE',
  Toner = 'TONER',
  TransdermalGel = 'TRANSDERMAL_GEL',
  TransdermalSpray = 'TRANSDERMAL_SPRAY',
  Truffles = 'TRUFFLES',
  Unspecified = 'UNSPECIFIED',
  Water = 'WATER',
  Wax = 'WAX'
}

export type Subscription = {
  __typename?: 'Subscription';
  campaign?: Maybe<CampaignSubscriptionPayload>;
  campaignOrder?: Maybe<CampaignOrderSubscriptionPayload>;
  customer?: Maybe<CustomerSubscriptionPayload>;
  license?: Maybe<LicenseSubscriptionPayload>;
  loyaltyCampaign?: Maybe<LoyaltyCampaignSubscriptionPayload>;
  org?: Maybe<OrgSubscriptionPayload>;
  user?: Maybe<UserSubscriptionPayload>;
};


export type SubscriptionCampaignArgs = {
  where?: InputMaybe<CampaignSubscriptionWhereInput>;
};


export type SubscriptionCampaignOrderArgs = {
  where?: InputMaybe<CampaignOrderSubscriptionWhereInput>;
};


export type SubscriptionCustomerArgs = {
  where?: InputMaybe<CustomerSubscriptionWhereInput>;
};


export type SubscriptionLicenseArgs = {
  where?: InputMaybe<LicenseSubscriptionWhereInput>;
};


export type SubscriptionLoyaltyCampaignArgs = {
  where?: InputMaybe<LoyaltyCampaignSubscriptionWhereInput>;
};


export type SubscriptionOrgArgs = {
  where?: InputMaybe<OrgSubscriptionWhereInput>;
};


export type SubscriptionUserArgs = {
  where?: InputMaybe<UserSubscriptionWhereInput>;
};

export type Taste = Node & {
  __typename?: 'Taste';
  bitter?: Maybe<TasteBitter>;
  cannatypes?: Maybe<Array<Cannatype>>;
  createdAt: Scalars['DateTime'];
  id: Scalars['ID'];
  products?: Maybe<Array<Product>>;
  savory?: Maybe<TasteSavory>;
  sour?: Maybe<TasteSour>;
  spicy?: Maybe<TasteSpicy>;
  strains?: Maybe<Array<Strain>>;
  sweet?: Maybe<TasteSweet>;
  updatedAt: Scalars['DateTime'];
};


export type TasteCannatypesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<CannatypeOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<CannatypeWhereInput>;
};


export type TasteProductsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ProductOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ProductWhereInput>;
};


export type TasteStrainsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<StrainOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<StrainWhereInput>;
};

export type TasteBitter = Node & {
  __typename?: 'TasteBitter';
  acrid?: Maybe<Scalars['Float']>;
  astrigent?: Maybe<Scalars['Float']>;
  chemical?: Maybe<Scalars['Float']>;
  createdAt: Scalars['DateTime'];
  diesel?: Maybe<Scalars['Float']>;
  id: Scalars['ID'];
  metallic?: Maybe<Scalars['Float']>;
  pungent?: Maybe<Scalars['Float']>;
  skunky?: Maybe<Scalars['Float']>;
  tastes?: Maybe<Array<Taste>>;
  updatedAt: Scalars['DateTime'];
};


export type TasteBitterTastesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<TasteOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<TasteWhereInput>;
};

export type TasteBitterCreateOneWithoutTastesInput = {
  connect?: InputMaybe<TasteBitterWhereUniqueInput>;
  create?: InputMaybe<TasteBitterCreateWithoutTastesInput>;
};

export type TasteBitterCreateWithoutTastesInput = {
  acrid?: InputMaybe<Scalars['Float']>;
  astrigent?: InputMaybe<Scalars['Float']>;
  chemical?: InputMaybe<Scalars['Float']>;
  diesel?: InputMaybe<Scalars['Float']>;
  metallic?: InputMaybe<Scalars['Float']>;
  pungent?: InputMaybe<Scalars['Float']>;
  skunky?: InputMaybe<Scalars['Float']>;
};

export type TasteBitterUpdateOneWithoutTastesInput = {
  connect?: InputMaybe<TasteBitterWhereUniqueInput>;
  create?: InputMaybe<TasteBitterCreateWithoutTastesInput>;
  delete?: InputMaybe<Scalars['Boolean']>;
  disconnect?: InputMaybe<Scalars['Boolean']>;
  update?: InputMaybe<TasteBitterUpdateWithoutTastesDataInput>;
  upsert?: InputMaybe<TasteBitterUpsertWithoutTastesInput>;
};

export type TasteBitterUpdateWithoutTastesDataInput = {
  acrid?: InputMaybe<Scalars['Float']>;
  astrigent?: InputMaybe<Scalars['Float']>;
  chemical?: InputMaybe<Scalars['Float']>;
  diesel?: InputMaybe<Scalars['Float']>;
  metallic?: InputMaybe<Scalars['Float']>;
  pungent?: InputMaybe<Scalars['Float']>;
  skunky?: InputMaybe<Scalars['Float']>;
};

export type TasteBitterUpsertWithoutTastesInput = {
  create: TasteBitterCreateWithoutTastesInput;
  update: TasteBitterUpdateWithoutTastesDataInput;
};

export type TasteBitterWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<TasteBitterWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<TasteBitterWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<TasteBitterWhereInput>>;
  acrid?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  acrid_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  acrid_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  acrid_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  acrid_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  acrid_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  acrid_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  acrid_not_in?: InputMaybe<Array<Scalars['Float']>>;
  astrigent?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  astrigent_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  astrigent_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  astrigent_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  astrigent_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  astrigent_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  astrigent_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  astrigent_not_in?: InputMaybe<Array<Scalars['Float']>>;
  chemical?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  chemical_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  chemical_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  chemical_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  chemical_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  chemical_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  chemical_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  chemical_not_in?: InputMaybe<Array<Scalars['Float']>>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  diesel?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  diesel_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  diesel_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  diesel_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  diesel_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  diesel_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  diesel_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  diesel_not_in?: InputMaybe<Array<Scalars['Float']>>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: InputMaybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: InputMaybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: InputMaybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  metallic?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  metallic_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  metallic_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  metallic_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  metallic_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  metallic_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  metallic_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  metallic_not_in?: InputMaybe<Array<Scalars['Float']>>;
  pungent?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  pungent_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  pungent_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  pungent_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  pungent_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  pungent_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  pungent_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  pungent_not_in?: InputMaybe<Array<Scalars['Float']>>;
  skunky?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  skunky_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  skunky_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  skunky_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  skunky_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  skunky_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  skunky_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  skunky_not_in?: InputMaybe<Array<Scalars['Float']>>;
  tastes_every?: InputMaybe<TasteWhereInput>;
  tastes_none?: InputMaybe<TasteWhereInput>;
  tastes_some?: InputMaybe<TasteWhereInput>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
};

export type TasteBitterWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export type TasteCreateOneWithoutCannatypesInput = {
  connect?: InputMaybe<TasteWhereUniqueInput>;
  create?: InputMaybe<TasteCreateWithoutCannatypesInput>;
};

export type TasteCreateOneWithoutProductsInput = {
  connect?: InputMaybe<TasteWhereUniqueInput>;
  create?: InputMaybe<TasteCreateWithoutProductsInput>;
};

export type TasteCreateOneWithoutStrainsInput = {
  connect?: InputMaybe<TasteWhereUniqueInput>;
  create?: InputMaybe<TasteCreateWithoutStrainsInput>;
};

export type TasteCreateWithoutCannatypesInput = {
  bitter?: InputMaybe<TasteBitterCreateOneWithoutTastesInput>;
  products?: InputMaybe<ProductCreateManyWithoutTasteInput>;
  savory?: InputMaybe<TasteSavoryCreateOneWithoutTastesInput>;
  sour?: InputMaybe<TasteSourCreateOneWithoutTastesInput>;
  spicy?: InputMaybe<TasteSpicyCreateOneWithoutTastesInput>;
  strains?: InputMaybe<StrainCreateManyWithoutTasteInput>;
  sweet?: InputMaybe<TasteSweetCreateOneWithoutTastesInput>;
};

export type TasteCreateWithoutProductsInput = {
  bitter?: InputMaybe<TasteBitterCreateOneWithoutTastesInput>;
  cannatypes?: InputMaybe<CannatypeCreateManyWithoutTasteInput>;
  savory?: InputMaybe<TasteSavoryCreateOneWithoutTastesInput>;
  sour?: InputMaybe<TasteSourCreateOneWithoutTastesInput>;
  spicy?: InputMaybe<TasteSpicyCreateOneWithoutTastesInput>;
  strains?: InputMaybe<StrainCreateManyWithoutTasteInput>;
  sweet?: InputMaybe<TasteSweetCreateOneWithoutTastesInput>;
};

export type TasteCreateWithoutStrainsInput = {
  bitter?: InputMaybe<TasteBitterCreateOneWithoutTastesInput>;
  cannatypes?: InputMaybe<CannatypeCreateManyWithoutTasteInput>;
  products?: InputMaybe<ProductCreateManyWithoutTasteInput>;
  savory?: InputMaybe<TasteSavoryCreateOneWithoutTastesInput>;
  sour?: InputMaybe<TasteSourCreateOneWithoutTastesInput>;
  spicy?: InputMaybe<TasteSpicyCreateOneWithoutTastesInput>;
  sweet?: InputMaybe<TasteSweetCreateOneWithoutTastesInput>;
};

export enum TasteOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC'
}

export type TasteSavory = Node & {
  __typename?: 'TasteSavory';
  buttery?: Maybe<Scalars['Float']>;
  cheesy?: Maybe<Scalars['Float']>;
  creamy?: Maybe<Scalars['Float']>;
  createdAt: Scalars['DateTime'];
  dairy?: Maybe<Scalars['Float']>;
  id: Scalars['ID'];
  oily?: Maybe<Scalars['Float']>;
  tangy?: Maybe<Scalars['Float']>;
  tastes?: Maybe<Array<Taste>>;
  updatedAt: Scalars['DateTime'];
  zesty?: Maybe<Scalars['Float']>;
};


export type TasteSavoryTastesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<TasteOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<TasteWhereInput>;
};

export type TasteSavoryCreateOneWithoutTastesInput = {
  connect?: InputMaybe<TasteSavoryWhereUniqueInput>;
  create?: InputMaybe<TasteSavoryCreateWithoutTastesInput>;
};

export type TasteSavoryCreateWithoutTastesInput = {
  buttery?: InputMaybe<Scalars['Float']>;
  cheesy?: InputMaybe<Scalars['Float']>;
  creamy?: InputMaybe<Scalars['Float']>;
  dairy?: InputMaybe<Scalars['Float']>;
  oily?: InputMaybe<Scalars['Float']>;
  tangy?: InputMaybe<Scalars['Float']>;
  zesty?: InputMaybe<Scalars['Float']>;
};

export type TasteSavoryUpdateOneWithoutTastesInput = {
  connect?: InputMaybe<TasteSavoryWhereUniqueInput>;
  create?: InputMaybe<TasteSavoryCreateWithoutTastesInput>;
  delete?: InputMaybe<Scalars['Boolean']>;
  disconnect?: InputMaybe<Scalars['Boolean']>;
  update?: InputMaybe<TasteSavoryUpdateWithoutTastesDataInput>;
  upsert?: InputMaybe<TasteSavoryUpsertWithoutTastesInput>;
};

export type TasteSavoryUpdateWithoutTastesDataInput = {
  buttery?: InputMaybe<Scalars['Float']>;
  cheesy?: InputMaybe<Scalars['Float']>;
  creamy?: InputMaybe<Scalars['Float']>;
  dairy?: InputMaybe<Scalars['Float']>;
  oily?: InputMaybe<Scalars['Float']>;
  tangy?: InputMaybe<Scalars['Float']>;
  zesty?: InputMaybe<Scalars['Float']>;
};

export type TasteSavoryUpsertWithoutTastesInput = {
  create: TasteSavoryCreateWithoutTastesInput;
  update: TasteSavoryUpdateWithoutTastesDataInput;
};

export type TasteSavoryWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<TasteSavoryWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<TasteSavoryWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<TasteSavoryWhereInput>>;
  buttery?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  buttery_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  buttery_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  buttery_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  buttery_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  buttery_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  buttery_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  buttery_not_in?: InputMaybe<Array<Scalars['Float']>>;
  cheesy?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  cheesy_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  cheesy_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  cheesy_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  cheesy_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  cheesy_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  cheesy_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  cheesy_not_in?: InputMaybe<Array<Scalars['Float']>>;
  creamy?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  creamy_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  creamy_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  creamy_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  creamy_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  creamy_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  creamy_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  creamy_not_in?: InputMaybe<Array<Scalars['Float']>>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  dairy?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  dairy_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  dairy_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  dairy_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  dairy_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  dairy_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  dairy_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  dairy_not_in?: InputMaybe<Array<Scalars['Float']>>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: InputMaybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: InputMaybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: InputMaybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  oily?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  oily_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  oily_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  oily_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  oily_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  oily_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  oily_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  oily_not_in?: InputMaybe<Array<Scalars['Float']>>;
  tangy?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  tangy_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  tangy_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  tangy_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  tangy_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  tangy_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  tangy_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  tangy_not_in?: InputMaybe<Array<Scalars['Float']>>;
  tastes_every?: InputMaybe<TasteWhereInput>;
  tastes_none?: InputMaybe<TasteWhereInput>;
  tastes_some?: InputMaybe<TasteWhereInput>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  zesty?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  zesty_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  zesty_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  zesty_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  zesty_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  zesty_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  zesty_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  zesty_not_in?: InputMaybe<Array<Scalars['Float']>>;
};

export type TasteSavoryWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export type TasteSour = Node & {
  __typename?: 'TasteSour';
  citrus?: Maybe<Scalars['Float']>;
  createdAt: Scalars['DateTime'];
  fuel?: Maybe<Scalars['Float']>;
  id: Scalars['ID'];
  sour?: Maybe<Scalars['Float']>;
  tart?: Maybe<Scalars['Float']>;
  tastes?: Maybe<Array<Taste>>;
  turpentine?: Maybe<Scalars['Float']>;
  updatedAt: Scalars['DateTime'];
};


export type TasteSourTastesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<TasteOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<TasteWhereInput>;
};

export type TasteSourCreateOneWithoutTastesInput = {
  connect?: InputMaybe<TasteSourWhereUniqueInput>;
  create?: InputMaybe<TasteSourCreateWithoutTastesInput>;
};

export type TasteSourCreateWithoutTastesInput = {
  citrus?: InputMaybe<Scalars['Float']>;
  fuel?: InputMaybe<Scalars['Float']>;
  sour?: InputMaybe<Scalars['Float']>;
  tart?: InputMaybe<Scalars['Float']>;
  turpentine?: InputMaybe<Scalars['Float']>;
};

export type TasteSourUpdateOneWithoutTastesInput = {
  connect?: InputMaybe<TasteSourWhereUniqueInput>;
  create?: InputMaybe<TasteSourCreateWithoutTastesInput>;
  delete?: InputMaybe<Scalars['Boolean']>;
  disconnect?: InputMaybe<Scalars['Boolean']>;
  update?: InputMaybe<TasteSourUpdateWithoutTastesDataInput>;
  upsert?: InputMaybe<TasteSourUpsertWithoutTastesInput>;
};

export type TasteSourUpdateWithoutTastesDataInput = {
  citrus?: InputMaybe<Scalars['Float']>;
  fuel?: InputMaybe<Scalars['Float']>;
  sour?: InputMaybe<Scalars['Float']>;
  tart?: InputMaybe<Scalars['Float']>;
  turpentine?: InputMaybe<Scalars['Float']>;
};

export type TasteSourUpsertWithoutTastesInput = {
  create: TasteSourCreateWithoutTastesInput;
  update: TasteSourUpdateWithoutTastesDataInput;
};

export type TasteSourWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<TasteSourWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<TasteSourWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<TasteSourWhereInput>>;
  citrus?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  citrus_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  citrus_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  citrus_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  citrus_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  citrus_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  citrus_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  citrus_not_in?: InputMaybe<Array<Scalars['Float']>>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  fuel?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  fuel_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  fuel_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  fuel_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  fuel_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  fuel_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  fuel_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  fuel_not_in?: InputMaybe<Array<Scalars['Float']>>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: InputMaybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: InputMaybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: InputMaybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  sour?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  sour_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  sour_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  sour_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  sour_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  sour_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  sour_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  sour_not_in?: InputMaybe<Array<Scalars['Float']>>;
  tart?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  tart_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  tart_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  tart_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  tart_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  tart_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  tart_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  tart_not_in?: InputMaybe<Array<Scalars['Float']>>;
  tastes_every?: InputMaybe<TasteWhereInput>;
  tastes_none?: InputMaybe<TasteWhereInput>;
  tastes_some?: InputMaybe<TasteWhereInput>;
  turpentine?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  turpentine_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  turpentine_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  turpentine_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  turpentine_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  turpentine_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  turpentine_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  turpentine_not_in?: InputMaybe<Array<Scalars['Float']>>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
};

export type TasteSourWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export type TasteSpicy = Node & {
  __typename?: 'TasteSpicy';
  createdAt: Scalars['DateTime'];
  earthy?: Maybe<Scalars['Float']>;
  herbs?: Maybe<Scalars['Float']>;
  husky?: Maybe<Scalars['Float']>;
  id: Scalars['ID'];
  peppery?: Maybe<Scalars['Float']>;
  piney?: Maybe<Scalars['Float']>;
  spicy?: Maybe<Scalars['Float']>;
  tastes?: Maybe<Array<Taste>>;
  updatedAt: Scalars['DateTime'];
  woody?: Maybe<Scalars['Float']>;
};


export type TasteSpicyTastesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<TasteOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<TasteWhereInput>;
};

export type TasteSpicyCreateOneWithoutTastesInput = {
  connect?: InputMaybe<TasteSpicyWhereUniqueInput>;
  create?: InputMaybe<TasteSpicyCreateWithoutTastesInput>;
};

export type TasteSpicyCreateWithoutTastesInput = {
  earthy?: InputMaybe<Scalars['Float']>;
  herbs?: InputMaybe<Scalars['Float']>;
  husky?: InputMaybe<Scalars['Float']>;
  peppery?: InputMaybe<Scalars['Float']>;
  piney?: InputMaybe<Scalars['Float']>;
  spicy?: InputMaybe<Scalars['Float']>;
  woody?: InputMaybe<Scalars['Float']>;
};

export type TasteSpicyUpdateOneWithoutTastesInput = {
  connect?: InputMaybe<TasteSpicyWhereUniqueInput>;
  create?: InputMaybe<TasteSpicyCreateWithoutTastesInput>;
  delete?: InputMaybe<Scalars['Boolean']>;
  disconnect?: InputMaybe<Scalars['Boolean']>;
  update?: InputMaybe<TasteSpicyUpdateWithoutTastesDataInput>;
  upsert?: InputMaybe<TasteSpicyUpsertWithoutTastesInput>;
};

export type TasteSpicyUpdateWithoutTastesDataInput = {
  earthy?: InputMaybe<Scalars['Float']>;
  herbs?: InputMaybe<Scalars['Float']>;
  husky?: InputMaybe<Scalars['Float']>;
  peppery?: InputMaybe<Scalars['Float']>;
  piney?: InputMaybe<Scalars['Float']>;
  spicy?: InputMaybe<Scalars['Float']>;
  woody?: InputMaybe<Scalars['Float']>;
};

export type TasteSpicyUpsertWithoutTastesInput = {
  create: TasteSpicyCreateWithoutTastesInput;
  update: TasteSpicyUpdateWithoutTastesDataInput;
};

export type TasteSpicyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<TasteSpicyWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<TasteSpicyWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<TasteSpicyWhereInput>>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  earthy?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  earthy_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  earthy_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  earthy_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  earthy_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  earthy_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  earthy_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  earthy_not_in?: InputMaybe<Array<Scalars['Float']>>;
  herbs?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  herbs_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  herbs_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  herbs_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  herbs_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  herbs_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  herbs_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  herbs_not_in?: InputMaybe<Array<Scalars['Float']>>;
  husky?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  husky_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  husky_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  husky_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  husky_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  husky_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  husky_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  husky_not_in?: InputMaybe<Array<Scalars['Float']>>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: InputMaybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: InputMaybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: InputMaybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  peppery?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  peppery_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  peppery_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  peppery_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  peppery_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  peppery_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  peppery_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  peppery_not_in?: InputMaybe<Array<Scalars['Float']>>;
  piney?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  piney_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  piney_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  piney_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  piney_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  piney_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  piney_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  piney_not_in?: InputMaybe<Array<Scalars['Float']>>;
  spicy?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  spicy_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  spicy_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  spicy_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  spicy_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  spicy_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  spicy_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  spicy_not_in?: InputMaybe<Array<Scalars['Float']>>;
  tastes_every?: InputMaybe<TasteWhereInput>;
  tastes_none?: InputMaybe<TasteWhereInput>;
  tastes_some?: InputMaybe<TasteWhereInput>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  woody?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  woody_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  woody_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  woody_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  woody_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  woody_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  woody_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  woody_not_in?: InputMaybe<Array<Scalars['Float']>>;
};

export type TasteSpicyWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export type TasteSweet = Node & {
  __typename?: 'TasteSweet';
  berry?: Maybe<Scalars['Float']>;
  candy?: Maybe<Scalars['Float']>;
  createdAt: Scalars['DateTime'];
  floral?: Maybe<Scalars['Float']>;
  fruity?: Maybe<Scalars['Float']>;
  id: Scalars['ID'];
  minty?: Maybe<Scalars['Float']>;
  sugary?: Maybe<Scalars['Float']>;
  sweet?: Maybe<Scalars['Float']>;
  tastes?: Maybe<Array<Taste>>;
  tropical?: Maybe<Scalars['Float']>;
  updatedAt: Scalars['DateTime'];
};


export type TasteSweetTastesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<TasteOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<TasteWhereInput>;
};

export type TasteSweetCreateOneWithoutTastesInput = {
  connect?: InputMaybe<TasteSweetWhereUniqueInput>;
  create?: InputMaybe<TasteSweetCreateWithoutTastesInput>;
};

export type TasteSweetCreateWithoutTastesInput = {
  berry?: InputMaybe<Scalars['Float']>;
  candy?: InputMaybe<Scalars['Float']>;
  floral?: InputMaybe<Scalars['Float']>;
  fruity?: InputMaybe<Scalars['Float']>;
  minty?: InputMaybe<Scalars['Float']>;
  sugary?: InputMaybe<Scalars['Float']>;
  sweet?: InputMaybe<Scalars['Float']>;
  tropical?: InputMaybe<Scalars['Float']>;
};

export type TasteSweetUpdateOneWithoutTastesInput = {
  connect?: InputMaybe<TasteSweetWhereUniqueInput>;
  create?: InputMaybe<TasteSweetCreateWithoutTastesInput>;
  delete?: InputMaybe<Scalars['Boolean']>;
  disconnect?: InputMaybe<Scalars['Boolean']>;
  update?: InputMaybe<TasteSweetUpdateWithoutTastesDataInput>;
  upsert?: InputMaybe<TasteSweetUpsertWithoutTastesInput>;
};

export type TasteSweetUpdateWithoutTastesDataInput = {
  berry?: InputMaybe<Scalars['Float']>;
  candy?: InputMaybe<Scalars['Float']>;
  floral?: InputMaybe<Scalars['Float']>;
  fruity?: InputMaybe<Scalars['Float']>;
  minty?: InputMaybe<Scalars['Float']>;
  sugary?: InputMaybe<Scalars['Float']>;
  sweet?: InputMaybe<Scalars['Float']>;
  tropical?: InputMaybe<Scalars['Float']>;
};

export type TasteSweetUpsertWithoutTastesInput = {
  create: TasteSweetCreateWithoutTastesInput;
  update: TasteSweetUpdateWithoutTastesDataInput;
};

export type TasteSweetWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<TasteSweetWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<TasteSweetWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<TasteSweetWhereInput>>;
  berry?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  berry_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  berry_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  berry_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  berry_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  berry_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  berry_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  berry_not_in?: InputMaybe<Array<Scalars['Float']>>;
  candy?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  candy_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  candy_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  candy_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  candy_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  candy_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  candy_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  candy_not_in?: InputMaybe<Array<Scalars['Float']>>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  floral?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  floral_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  floral_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  floral_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  floral_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  floral_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  floral_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  floral_not_in?: InputMaybe<Array<Scalars['Float']>>;
  fruity?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  fruity_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  fruity_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  fruity_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  fruity_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  fruity_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  fruity_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  fruity_not_in?: InputMaybe<Array<Scalars['Float']>>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: InputMaybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: InputMaybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: InputMaybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  minty?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  minty_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  minty_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  minty_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  minty_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  minty_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  minty_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  minty_not_in?: InputMaybe<Array<Scalars['Float']>>;
  sugary?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  sugary_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  sugary_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  sugary_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  sugary_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  sugary_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  sugary_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  sugary_not_in?: InputMaybe<Array<Scalars['Float']>>;
  sweet?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  sweet_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  sweet_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  sweet_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  sweet_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  sweet_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  sweet_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  sweet_not_in?: InputMaybe<Array<Scalars['Float']>>;
  tastes_every?: InputMaybe<TasteWhereInput>;
  tastes_none?: InputMaybe<TasteWhereInput>;
  tastes_some?: InputMaybe<TasteWhereInput>;
  tropical?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  tropical_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  tropical_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  tropical_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  tropical_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  tropical_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  tropical_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  tropical_not_in?: InputMaybe<Array<Scalars['Float']>>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
};

export type TasteSweetWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export type TasteUpdateOneWithoutCannatypesInput = {
  connect?: InputMaybe<TasteWhereUniqueInput>;
  create?: InputMaybe<TasteCreateWithoutCannatypesInput>;
  delete?: InputMaybe<Scalars['Boolean']>;
  disconnect?: InputMaybe<Scalars['Boolean']>;
  update?: InputMaybe<TasteUpdateWithoutCannatypesDataInput>;
  upsert?: InputMaybe<TasteUpsertWithoutCannatypesInput>;
};

export type TasteUpdateOneWithoutProductsInput = {
  connect?: InputMaybe<TasteWhereUniqueInput>;
  create?: InputMaybe<TasteCreateWithoutProductsInput>;
  delete?: InputMaybe<Scalars['Boolean']>;
  disconnect?: InputMaybe<Scalars['Boolean']>;
  update?: InputMaybe<TasteUpdateWithoutProductsDataInput>;
  upsert?: InputMaybe<TasteUpsertWithoutProductsInput>;
};

export type TasteUpdateOneWithoutStrainsInput = {
  connect?: InputMaybe<TasteWhereUniqueInput>;
  create?: InputMaybe<TasteCreateWithoutStrainsInput>;
  delete?: InputMaybe<Scalars['Boolean']>;
  disconnect?: InputMaybe<Scalars['Boolean']>;
  update?: InputMaybe<TasteUpdateWithoutStrainsDataInput>;
  upsert?: InputMaybe<TasteUpsertWithoutStrainsInput>;
};

export type TasteUpdateWithoutCannatypesDataInput = {
  bitter?: InputMaybe<TasteBitterUpdateOneWithoutTastesInput>;
  products?: InputMaybe<ProductUpdateManyWithoutTasteInput>;
  savory?: InputMaybe<TasteSavoryUpdateOneWithoutTastesInput>;
  sour?: InputMaybe<TasteSourUpdateOneWithoutTastesInput>;
  spicy?: InputMaybe<TasteSpicyUpdateOneWithoutTastesInput>;
  strains?: InputMaybe<StrainUpdateManyWithoutTasteInput>;
  sweet?: InputMaybe<TasteSweetUpdateOneWithoutTastesInput>;
};

export type TasteUpdateWithoutProductsDataInput = {
  bitter?: InputMaybe<TasteBitterUpdateOneWithoutTastesInput>;
  cannatypes?: InputMaybe<CannatypeUpdateManyWithoutTasteInput>;
  savory?: InputMaybe<TasteSavoryUpdateOneWithoutTastesInput>;
  sour?: InputMaybe<TasteSourUpdateOneWithoutTastesInput>;
  spicy?: InputMaybe<TasteSpicyUpdateOneWithoutTastesInput>;
  strains?: InputMaybe<StrainUpdateManyWithoutTasteInput>;
  sweet?: InputMaybe<TasteSweetUpdateOneWithoutTastesInput>;
};

export type TasteUpdateWithoutStrainsDataInput = {
  bitter?: InputMaybe<TasteBitterUpdateOneWithoutTastesInput>;
  cannatypes?: InputMaybe<CannatypeUpdateManyWithoutTasteInput>;
  products?: InputMaybe<ProductUpdateManyWithoutTasteInput>;
  savory?: InputMaybe<TasteSavoryUpdateOneWithoutTastesInput>;
  sour?: InputMaybe<TasteSourUpdateOneWithoutTastesInput>;
  spicy?: InputMaybe<TasteSpicyUpdateOneWithoutTastesInput>;
  sweet?: InputMaybe<TasteSweetUpdateOneWithoutTastesInput>;
};

export type TasteUpsertWithoutCannatypesInput = {
  create: TasteCreateWithoutCannatypesInput;
  update: TasteUpdateWithoutCannatypesDataInput;
};

export type TasteUpsertWithoutProductsInput = {
  create: TasteCreateWithoutProductsInput;
  update: TasteUpdateWithoutProductsDataInput;
};

export type TasteUpsertWithoutStrainsInput = {
  create: TasteCreateWithoutStrainsInput;
  update: TasteUpdateWithoutStrainsDataInput;
};

export type TasteWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<TasteWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<TasteWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<TasteWhereInput>>;
  bitter?: InputMaybe<TasteBitterWhereInput>;
  cannatypes_every?: InputMaybe<CannatypeWhereInput>;
  cannatypes_none?: InputMaybe<CannatypeWhereInput>;
  cannatypes_some?: InputMaybe<CannatypeWhereInput>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: InputMaybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: InputMaybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: InputMaybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  products_every?: InputMaybe<ProductWhereInput>;
  products_none?: InputMaybe<ProductWhereInput>;
  products_some?: InputMaybe<ProductWhereInput>;
  savory?: InputMaybe<TasteSavoryWhereInput>;
  sour?: InputMaybe<TasteSourWhereInput>;
  spicy?: InputMaybe<TasteSpicyWhereInput>;
  strains_every?: InputMaybe<StrainWhereInput>;
  strains_none?: InputMaybe<StrainWhereInput>;
  strains_some?: InputMaybe<StrainWhereInput>;
  sweet?: InputMaybe<TasteSweetWhereInput>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
};

export type TasteWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export type Test = Node & {
  __typename?: 'Test';
  createdAt: Scalars['DateTime'];
  date: Scalars['DateTime'];
  id: Scalars['ID'];
  isPublished: Scalars['Boolean'];
  product?: Maybe<Product>;
  status: TestStatus;
  strain?: Maybe<Strain>;
  tester?: Maybe<Array<Org>>;
  updatedAt: Scalars['DateTime'];
};


export type TestTesterArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<OrgOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<OrgWhereInput>;
};

export type TestCreateInput = {
  date: Scalars['DateTime'];
  isPublished?: InputMaybe<Scalars['Boolean']>;
  product?: InputMaybe<ProductCreateOneInput>;
  status: TestStatus;
  strain?: InputMaybe<StrainCreateOneWithoutTestsInput>;
  tester?: InputMaybe<OrgCreateManyInput>;
};

export type TestCreateManyInput = {
  connect?: InputMaybe<Array<TestWhereUniqueInput>>;
  create?: InputMaybe<Array<TestCreateInput>>;
};

export type TestCreateManyWithoutStrainInput = {
  connect?: InputMaybe<Array<TestWhereUniqueInput>>;
  create?: InputMaybe<Array<TestCreateWithoutStrainInput>>;
};

export type TestCreateWithoutStrainInput = {
  date: Scalars['DateTime'];
  isPublished?: InputMaybe<Scalars['Boolean']>;
  product?: InputMaybe<ProductCreateOneInput>;
  status: TestStatus;
  tester?: InputMaybe<OrgCreateManyInput>;
};

export enum TestOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DateAsc = 'date_ASC',
  DateDesc = 'date_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  IsPublishedAsc = 'isPublished_ASC',
  IsPublishedDesc = 'isPublished_DESC',
  StatusAsc = 'status_ASC',
  StatusDesc = 'status_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC'
}

export enum TestStatus {
  Fail = 'FAIL',
  Pass = 'PASS'
}

export type TestUpdateDataInput = {
  date?: InputMaybe<Scalars['DateTime']>;
  isPublished?: InputMaybe<Scalars['Boolean']>;
  product?: InputMaybe<ProductUpdateOneInput>;
  status?: InputMaybe<TestStatus>;
  strain?: InputMaybe<StrainUpdateOneWithoutTestsInput>;
  tester?: InputMaybe<OrgUpdateManyInput>;
};

export type TestUpdateManyInput = {
  connect?: InputMaybe<Array<TestWhereUniqueInput>>;
  create?: InputMaybe<Array<TestCreateInput>>;
  delete?: InputMaybe<Array<TestWhereUniqueInput>>;
  disconnect?: InputMaybe<Array<TestWhereUniqueInput>>;
  update?: InputMaybe<Array<TestUpdateWithWhereUniqueNestedInput>>;
  upsert?: InputMaybe<Array<TestUpsertWithWhereUniqueNestedInput>>;
};

export type TestUpdateManyWithoutStrainInput = {
  connect?: InputMaybe<Array<TestWhereUniqueInput>>;
  create?: InputMaybe<Array<TestCreateWithoutStrainInput>>;
  delete?: InputMaybe<Array<TestWhereUniqueInput>>;
  disconnect?: InputMaybe<Array<TestWhereUniqueInput>>;
  update?: InputMaybe<Array<TestUpdateWithWhereUniqueWithoutStrainInput>>;
  upsert?: InputMaybe<Array<TestUpsertWithWhereUniqueWithoutStrainInput>>;
};

export type TestUpdateWithWhereUniqueNestedInput = {
  data: TestUpdateDataInput;
  where: TestWhereUniqueInput;
};

export type TestUpdateWithWhereUniqueWithoutStrainInput = {
  data: TestUpdateWithoutStrainDataInput;
  where: TestWhereUniqueInput;
};

export type TestUpdateWithoutStrainDataInput = {
  date?: InputMaybe<Scalars['DateTime']>;
  isPublished?: InputMaybe<Scalars['Boolean']>;
  product?: InputMaybe<ProductUpdateOneInput>;
  status?: InputMaybe<TestStatus>;
  tester?: InputMaybe<OrgUpdateManyInput>;
};

export type TestUpsertWithWhereUniqueNestedInput = {
  create: TestCreateInput;
  update: TestUpdateDataInput;
  where: TestWhereUniqueInput;
};

export type TestUpsertWithWhereUniqueWithoutStrainInput = {
  create: TestCreateWithoutStrainInput;
  update: TestUpdateWithoutStrainDataInput;
  where: TestWhereUniqueInput;
};

export type TestWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<TestWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<TestWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<TestWhereInput>>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  date?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  date_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  date_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  date_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  date_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  date_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  date_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  date_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: InputMaybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: InputMaybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: InputMaybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  isPublished?: InputMaybe<Scalars['Boolean']>;
  /** All values that are not equal to given value. */
  isPublished_not?: InputMaybe<Scalars['Boolean']>;
  product?: InputMaybe<ProductWhereInput>;
  status?: InputMaybe<TestStatus>;
  /** All values that are contained in given list. */
  status_in?: InputMaybe<Array<TestStatus>>;
  /** All values that are not equal to given value. */
  status_not?: InputMaybe<TestStatus>;
  /** All values that are not contained in given list. */
  status_not_in?: InputMaybe<Array<TestStatus>>;
  strain?: InputMaybe<StrainWhereInput>;
  tester_every?: InputMaybe<OrgWhereInput>;
  tester_none?: InputMaybe<OrgWhereInput>;
  tester_some?: InputMaybe<OrgWhereInput>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
};

export type TestWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export type Tickets = Node & {
  __typename?: 'Tickets';
  createdAt: Scalars['DateTime'];
  event?: Maybe<Event>;
  id: Scalars['ID'];
  qr?: Maybe<Qr>;
  updatedAt: Scalars['DateTime'];
};

export type TicketsCreateManyWithoutEventInput = {
  connect?: InputMaybe<Array<TicketsWhereUniqueInput>>;
  create?: InputMaybe<Array<TicketsCreateWithoutEventInput>>;
};

export type TicketsCreateOneWithoutQrInput = {
  connect?: InputMaybe<TicketsWhereUniqueInput>;
  create?: InputMaybe<TicketsCreateWithoutQrInput>;
};

export type TicketsCreateWithoutEventInput = {
  qr?: InputMaybe<QrCreateOneWithoutTicketsInput>;
};

export type TicketsCreateWithoutQrInput = {
  event?: InputMaybe<EventCreateOneWithoutTicketsInput>;
};

export enum TicketsOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC'
}

export type TicketsUpdateManyWithoutEventInput = {
  connect?: InputMaybe<Array<TicketsWhereUniqueInput>>;
  create?: InputMaybe<Array<TicketsCreateWithoutEventInput>>;
  delete?: InputMaybe<Array<TicketsWhereUniqueInput>>;
  disconnect?: InputMaybe<Array<TicketsWhereUniqueInput>>;
  update?: InputMaybe<Array<TicketsUpdateWithWhereUniqueWithoutEventInput>>;
  upsert?: InputMaybe<Array<TicketsUpsertWithWhereUniqueWithoutEventInput>>;
};

export type TicketsUpdateOneWithoutQrInput = {
  connect?: InputMaybe<TicketsWhereUniqueInput>;
  create?: InputMaybe<TicketsCreateWithoutQrInput>;
  delete?: InputMaybe<Scalars['Boolean']>;
  disconnect?: InputMaybe<Scalars['Boolean']>;
  update?: InputMaybe<TicketsUpdateWithoutQrDataInput>;
  upsert?: InputMaybe<TicketsUpsertWithoutQrInput>;
};

export type TicketsUpdateWithWhereUniqueWithoutEventInput = {
  data: TicketsUpdateWithoutEventDataInput;
  where: TicketsWhereUniqueInput;
};

export type TicketsUpdateWithoutEventDataInput = {
  qr?: InputMaybe<QrUpdateOneWithoutTicketsInput>;
};

export type TicketsUpdateWithoutQrDataInput = {
  event?: InputMaybe<EventUpdateOneWithoutTicketsInput>;
};

export type TicketsUpsertWithWhereUniqueWithoutEventInput = {
  create: TicketsCreateWithoutEventInput;
  update: TicketsUpdateWithoutEventDataInput;
  where: TicketsWhereUniqueInput;
};

export type TicketsUpsertWithoutQrInput = {
  create: TicketsCreateWithoutQrInput;
  update: TicketsUpdateWithoutQrDataInput;
};

export type TicketsWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<TicketsWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<TicketsWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<TicketsWhereInput>>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  event?: InputMaybe<EventWhereInput>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: InputMaybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: InputMaybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: InputMaybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  qr?: InputMaybe<QrWhereInput>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
};

export type TicketsWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export type TokenInput = {
  token: Scalars['String'];
};

export type TransactionsConfig = Node & {
  __typename?: 'TransactionsConfig';
  appId?: Maybe<Scalars['String']>;
  campaignOrders?: Maybe<Array<CampaignOrder>>;
  cart?: Maybe<CartProvider>;
  createdAt: Scalars['DateTime'];
  gtmAccess?: Maybe<Scalars['Boolean']>;
  gtmStatus?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  locations?: Maybe<Array<Location>>;
  menuDataKey?: Maybe<Scalars['String']>;
  tag?: Maybe<Scalars['Json']>;
  tracksBasketItems?: Maybe<Scalars['Boolean']>;
  traffId?: Maybe<Scalars['String']>;
  updatedAt: Scalars['DateTime'];
  utmCampaign?: Maybe<Scalars['String']>;
};


export type TransactionsConfigCampaignOrdersArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<CampaignOrderOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<CampaignOrderWhereInput>;
};


export type TransactionsConfigLocationsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<LocationOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<LocationWhereInput>;
};

export type TransactionsConfigCreateOneWithoutCampaignOrdersInput = {
  connect?: InputMaybe<TransactionsConfigWhereUniqueInput>;
  create?: InputMaybe<TransactionsConfigCreateWithoutCampaignOrdersInput>;
};

export type TransactionsConfigCreateOneWithoutLocationsInput = {
  connect?: InputMaybe<TransactionsConfigWhereUniqueInput>;
  create?: InputMaybe<TransactionsConfigCreateWithoutLocationsInput>;
};

export type TransactionsConfigCreateWithoutCampaignOrdersInput = {
  appId?: InputMaybe<Scalars['String']>;
  cart?: InputMaybe<CartProvider>;
  gtmAccess?: InputMaybe<Scalars['Boolean']>;
  gtmStatus?: InputMaybe<Scalars['String']>;
  locations?: InputMaybe<LocationCreateManyWithoutTransConfigInput>;
  menuDataKey?: InputMaybe<Scalars['String']>;
  tag?: InputMaybe<Scalars['Json']>;
  tracksBasketItems?: InputMaybe<Scalars['Boolean']>;
  traffId?: InputMaybe<Scalars['String']>;
  utmCampaign?: InputMaybe<Scalars['String']>;
};

export type TransactionsConfigCreateWithoutLocationsInput = {
  appId?: InputMaybe<Scalars['String']>;
  campaignOrders?: InputMaybe<CampaignOrderCreateManyWithoutTransactionsConfigInput>;
  cart?: InputMaybe<CartProvider>;
  gtmAccess?: InputMaybe<Scalars['Boolean']>;
  gtmStatus?: InputMaybe<Scalars['String']>;
  menuDataKey?: InputMaybe<Scalars['String']>;
  tag?: InputMaybe<Scalars['Json']>;
  tracksBasketItems?: InputMaybe<Scalars['Boolean']>;
  traffId?: InputMaybe<Scalars['String']>;
  utmCampaign?: InputMaybe<Scalars['String']>;
};

export type TransactionsConfigUpdateOneWithoutCampaignOrdersInput = {
  connect?: InputMaybe<TransactionsConfigWhereUniqueInput>;
  create?: InputMaybe<TransactionsConfigCreateWithoutCampaignOrdersInput>;
  delete?: InputMaybe<Scalars['Boolean']>;
  disconnect?: InputMaybe<Scalars['Boolean']>;
  update?: InputMaybe<TransactionsConfigUpdateWithoutCampaignOrdersDataInput>;
  upsert?: InputMaybe<TransactionsConfigUpsertWithoutCampaignOrdersInput>;
};

export type TransactionsConfigUpdateOneWithoutLocationsInput = {
  connect?: InputMaybe<TransactionsConfigWhereUniqueInput>;
  create?: InputMaybe<TransactionsConfigCreateWithoutLocationsInput>;
  delete?: InputMaybe<Scalars['Boolean']>;
  disconnect?: InputMaybe<Scalars['Boolean']>;
  update?: InputMaybe<TransactionsConfigUpdateWithoutLocationsDataInput>;
  upsert?: InputMaybe<TransactionsConfigUpsertWithoutLocationsInput>;
};

export type TransactionsConfigUpdateWithoutCampaignOrdersDataInput = {
  appId?: InputMaybe<Scalars['String']>;
  cart?: InputMaybe<CartProvider>;
  gtmAccess?: InputMaybe<Scalars['Boolean']>;
  gtmStatus?: InputMaybe<Scalars['String']>;
  locations?: InputMaybe<LocationUpdateManyWithoutTransConfigInput>;
  menuDataKey?: InputMaybe<Scalars['String']>;
  tag?: InputMaybe<Scalars['Json']>;
  tracksBasketItems?: InputMaybe<Scalars['Boolean']>;
  traffId?: InputMaybe<Scalars['String']>;
  utmCampaign?: InputMaybe<Scalars['String']>;
};

export type TransactionsConfigUpdateWithoutLocationsDataInput = {
  appId?: InputMaybe<Scalars['String']>;
  campaignOrders?: InputMaybe<CampaignOrderUpdateManyWithoutTransactionsConfigInput>;
  cart?: InputMaybe<CartProvider>;
  gtmAccess?: InputMaybe<Scalars['Boolean']>;
  gtmStatus?: InputMaybe<Scalars['String']>;
  menuDataKey?: InputMaybe<Scalars['String']>;
  tag?: InputMaybe<Scalars['Json']>;
  tracksBasketItems?: InputMaybe<Scalars['Boolean']>;
  traffId?: InputMaybe<Scalars['String']>;
  utmCampaign?: InputMaybe<Scalars['String']>;
};

export type TransactionsConfigUpsertWithoutCampaignOrdersInput = {
  create: TransactionsConfigCreateWithoutCampaignOrdersInput;
  update: TransactionsConfigUpdateWithoutCampaignOrdersDataInput;
};

export type TransactionsConfigUpsertWithoutLocationsInput = {
  create: TransactionsConfigCreateWithoutLocationsInput;
  update: TransactionsConfigUpdateWithoutLocationsDataInput;
};

export type TransactionsConfigWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<TransactionsConfigWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<TransactionsConfigWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<TransactionsConfigWhereInput>>;
  appId?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  appId_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  appId_ends_with?: InputMaybe<Scalars['String']>;
  /** All values greater than the given value. */
  appId_gt?: InputMaybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  appId_gte?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  appId_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  appId_lt?: InputMaybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  appId_lte?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  appId_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  appId_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string. */
  appId_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  appId_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  appId_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  appId_starts_with?: InputMaybe<Scalars['String']>;
  campaignOrders_every?: InputMaybe<CampaignOrderWhereInput>;
  campaignOrders_none?: InputMaybe<CampaignOrderWhereInput>;
  campaignOrders_some?: InputMaybe<CampaignOrderWhereInput>;
  cart?: InputMaybe<CartProvider>;
  /** All values that are contained in given list. */
  cart_in?: InputMaybe<Array<CartProvider>>;
  /** All values that are not equal to given value. */
  cart_not?: InputMaybe<CartProvider>;
  /** All values that are not contained in given list. */
  cart_not_in?: InputMaybe<Array<CartProvider>>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  gtmAccess?: InputMaybe<Scalars['Boolean']>;
  /** All values that are not equal to given value. */
  gtmAccess_not?: InputMaybe<Scalars['Boolean']>;
  gtmStatus?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  gtmStatus_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  gtmStatus_ends_with?: InputMaybe<Scalars['String']>;
  /** All values greater than the given value. */
  gtmStatus_gt?: InputMaybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  gtmStatus_gte?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  gtmStatus_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  gtmStatus_lt?: InputMaybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  gtmStatus_lte?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  gtmStatus_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  gtmStatus_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string. */
  gtmStatus_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  gtmStatus_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  gtmStatus_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  gtmStatus_starts_with?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: InputMaybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: InputMaybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: InputMaybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  locations_every?: InputMaybe<LocationWhereInput>;
  locations_none?: InputMaybe<LocationWhereInput>;
  locations_some?: InputMaybe<LocationWhereInput>;
  menuDataKey?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  menuDataKey_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  menuDataKey_ends_with?: InputMaybe<Scalars['String']>;
  /** All values greater than the given value. */
  menuDataKey_gt?: InputMaybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  menuDataKey_gte?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  menuDataKey_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  menuDataKey_lt?: InputMaybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  menuDataKey_lte?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  menuDataKey_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  menuDataKey_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string. */
  menuDataKey_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  menuDataKey_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  menuDataKey_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  menuDataKey_starts_with?: InputMaybe<Scalars['String']>;
  tracksBasketItems?: InputMaybe<Scalars['Boolean']>;
  /** All values that are not equal to given value. */
  tracksBasketItems_not?: InputMaybe<Scalars['Boolean']>;
  traffId?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  traffId_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  traffId_ends_with?: InputMaybe<Scalars['String']>;
  /** All values greater than the given value. */
  traffId_gt?: InputMaybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  traffId_gte?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  traffId_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  traffId_lt?: InputMaybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  traffId_lte?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  traffId_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  traffId_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string. */
  traffId_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  traffId_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  traffId_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  traffId_starts_with?: InputMaybe<Scalars['String']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  utmCampaign?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  utmCampaign_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  utmCampaign_ends_with?: InputMaybe<Scalars['String']>;
  /** All values greater than the given value. */
  utmCampaign_gt?: InputMaybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  utmCampaign_gte?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  utmCampaign_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  utmCampaign_lt?: InputMaybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  utmCampaign_lte?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  utmCampaign_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  utmCampaign_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string. */
  utmCampaign_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  utmCampaign_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  utmCampaign_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  utmCampaign_starts_with?: InputMaybe<Scalars['String']>;
};

export type TransactionsConfigWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export type User = Node & {
  __typename?: 'User';
  address?: Maybe<Location>;
  avatar?: Maybe<Media>;
  cannatype?: Maybe<Cannatype>;
  changes?: Maybe<Array<Change>>;
  cognitoUserId: Scalars['String'];
  config?: Maybe<UserConfig>;
  conversation?: Maybe<Array<Conversation>>;
  createdAt: Scalars['DateTime'];
  createdIabCategoryGroups?: Maybe<Array<IabCategoryGroup>>;
  createdRegionGroups?: Maybe<Array<RegionGroup>>;
  email?: Maybe<Scalars['String']>;
  events?: Maybe<Array<Event>>;
  id: Scalars['ID'];
  messages?: Maybe<Array<Message>>;
  msaStatus?: Maybe<MsaVersion>;
  name?: Maybe<Scalars['String']>;
  notifications?: Maybe<Array<Notification>>;
  offers?: Maybe<Array<Offer>>;
  orgs?: Maybe<Array<Org>>;
  phone?: Maybe<Scalars['String']>;
  products?: Maybe<Array<Product>>;
  reviews?: Maybe<Array<Review>>;
  roles?: Maybe<Array<Role>>;
  salesforceId?: Maybe<Scalars['String']>;
  ssoToken?: Maybe<Scalars['String']>;
  strains?: Maybe<Array<Strain>>;
  updatedAt: Scalars['DateTime'];
  updatedIabCategoryGroups?: Maybe<Array<IabCategoryGroup>>;
  updatedRegionGroups?: Maybe<Array<RegionGroup>>;
  username: Scalars['String'];
};


export type UserChangesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ChangeOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ChangeWhereInput>;
};


export type UserConversationArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ConversationOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ConversationWhereInput>;
};


export type UserCreatedIabCategoryGroupsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<IabCategoryGroupOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<IabCategoryGroupWhereInput>;
};


export type UserCreatedRegionGroupsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<RegionGroupOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<RegionGroupWhereInput>;
};


export type UserEventsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<EventOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<EventWhereInput>;
};


export type UserMessagesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MessageOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<MessageWhereInput>;
};


export type UserNotificationsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<NotificationOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<NotificationWhereInput>;
};


export type UserOffersArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<OfferOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<OfferWhereInput>;
};


export type UserOrgsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<OrgOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<OrgWhereInput>;
};


export type UserProductsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ProductOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ProductWhereInput>;
};


export type UserReviewsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ReviewOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ReviewWhereInput>;
};


export type UserRolesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<RoleOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<RoleWhereInput>;
};


export type UserStrainsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<StrainOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<StrainWhereInput>;
};


export type UserUpdatedIabCategoryGroupsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<IabCategoryGroupOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<IabCategoryGroupWhereInput>;
};


export type UserUpdatedRegionGroupsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<RegionGroupOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<RegionGroupWhereInput>;
};

export type UserConfig = Node & {
  __typename?: 'UserConfig';
  articles?: Maybe<Scalars['Boolean']>;
  campaignSummary?: Maybe<Scalars['Boolean']>;
  canResetPasswords?: Maybe<Scalars['Boolean']>;
  createdAt: Scalars['DateTime'];
  exportData?: Maybe<Scalars['Boolean']>;
  hasInsights?: Maybe<Scalars['Boolean']>;
  horizontalNavigation?: Maybe<Scalars['Boolean']>;
  id: Scalars['ID'];
  isAdmin?: Maybe<Scalars['Boolean']>;
  isDemo?: Maybe<Scalars['Boolean']>;
  isPacing?: Maybe<Scalars['Boolean']>;
  isPartner?: Maybe<Scalars['Boolean']>;
  isProcessor?: Maybe<Scalars['Boolean']>;
  isSelfService?: Maybe<Scalars['Boolean']>;
  isTrafficker?: Maybe<Scalars['Boolean']>;
  pastData?: Maybe<Scalars['Boolean']>;
  priceVisible?: Maybe<Scalars['Boolean']>;
  providersVisible?: Maybe<Scalars['Boolean']>;
  regulated?: Maybe<Scalars['Boolean']>;
  segment?: Maybe<Scalars['Boolean']>;
  technicalSupport?: Maybe<Scalars['Boolean']>;
  updatedAt: Scalars['DateTime'];
  users?: Maybe<Array<User>>;
};


export type UserConfigUsersArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<UserOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<UserWhereInput>;
};

export type UserConfigCreateInput = {
  articles?: InputMaybe<Scalars['Boolean']>;
  campaignSummary?: InputMaybe<Scalars['Boolean']>;
  canResetPasswords?: InputMaybe<Scalars['Boolean']>;
  exportData?: InputMaybe<Scalars['Boolean']>;
  hasInsights?: InputMaybe<Scalars['Boolean']>;
  horizontalNavigation?: InputMaybe<Scalars['Boolean']>;
  isAdmin?: InputMaybe<Scalars['Boolean']>;
  isDemo?: InputMaybe<Scalars['Boolean']>;
  isPacing?: InputMaybe<Scalars['Boolean']>;
  isPartner?: InputMaybe<Scalars['Boolean']>;
  isProcessor?: InputMaybe<Scalars['Boolean']>;
  isSelfService?: InputMaybe<Scalars['Boolean']>;
  isTrafficker?: InputMaybe<Scalars['Boolean']>;
  pastData?: InputMaybe<Scalars['Boolean']>;
  priceVisible?: InputMaybe<Scalars['Boolean']>;
  providersVisible?: InputMaybe<Scalars['Boolean']>;
  regulated?: InputMaybe<Scalars['Boolean']>;
  segment?: InputMaybe<Scalars['Boolean']>;
  technicalSupport?: InputMaybe<Scalars['Boolean']>;
  users?: InputMaybe<UserCreateManyWithoutConfigInput>;
};

export type UserConfigCreateOneWithoutUsersInput = {
  connect?: InputMaybe<UserConfigWhereUniqueInput>;
  create?: InputMaybe<UserConfigCreateWithoutUsersInput>;
};

export type UserConfigCreateWithoutUsersInput = {
  articles?: InputMaybe<Scalars['Boolean']>;
  campaignSummary?: InputMaybe<Scalars['Boolean']>;
  canResetPasswords?: InputMaybe<Scalars['Boolean']>;
  exportData?: InputMaybe<Scalars['Boolean']>;
  hasInsights?: InputMaybe<Scalars['Boolean']>;
  horizontalNavigation?: InputMaybe<Scalars['Boolean']>;
  isAdmin?: InputMaybe<Scalars['Boolean']>;
  isDemo?: InputMaybe<Scalars['Boolean']>;
  isPacing?: InputMaybe<Scalars['Boolean']>;
  isPartner?: InputMaybe<Scalars['Boolean']>;
  isProcessor?: InputMaybe<Scalars['Boolean']>;
  isSelfService?: InputMaybe<Scalars['Boolean']>;
  isTrafficker?: InputMaybe<Scalars['Boolean']>;
  pastData?: InputMaybe<Scalars['Boolean']>;
  priceVisible?: InputMaybe<Scalars['Boolean']>;
  providersVisible?: InputMaybe<Scalars['Boolean']>;
  regulated?: InputMaybe<Scalars['Boolean']>;
  segment?: InputMaybe<Scalars['Boolean']>;
  technicalSupport?: InputMaybe<Scalars['Boolean']>;
};

export type UserConfigUpdateOneWithoutUsersInput = {
  connect?: InputMaybe<UserConfigWhereUniqueInput>;
  create?: InputMaybe<UserConfigCreateWithoutUsersInput>;
  delete?: InputMaybe<Scalars['Boolean']>;
  disconnect?: InputMaybe<Scalars['Boolean']>;
  update?: InputMaybe<UserConfigUpdateWithoutUsersDataInput>;
  upsert?: InputMaybe<UserConfigUpsertWithoutUsersInput>;
};

export type UserConfigUpdateWithoutUsersDataInput = {
  articles?: InputMaybe<Scalars['Boolean']>;
  campaignSummary?: InputMaybe<Scalars['Boolean']>;
  canResetPasswords?: InputMaybe<Scalars['Boolean']>;
  exportData?: InputMaybe<Scalars['Boolean']>;
  hasInsights?: InputMaybe<Scalars['Boolean']>;
  horizontalNavigation?: InputMaybe<Scalars['Boolean']>;
  isAdmin?: InputMaybe<Scalars['Boolean']>;
  isDemo?: InputMaybe<Scalars['Boolean']>;
  isPacing?: InputMaybe<Scalars['Boolean']>;
  isPartner?: InputMaybe<Scalars['Boolean']>;
  isProcessor?: InputMaybe<Scalars['Boolean']>;
  isSelfService?: InputMaybe<Scalars['Boolean']>;
  isTrafficker?: InputMaybe<Scalars['Boolean']>;
  pastData?: InputMaybe<Scalars['Boolean']>;
  priceVisible?: InputMaybe<Scalars['Boolean']>;
  providersVisible?: InputMaybe<Scalars['Boolean']>;
  regulated?: InputMaybe<Scalars['Boolean']>;
  segment?: InputMaybe<Scalars['Boolean']>;
  technicalSupport?: InputMaybe<Scalars['Boolean']>;
};

export type UserConfigUpsertWithoutUsersInput = {
  create: UserConfigCreateWithoutUsersInput;
  update: UserConfigUpdateWithoutUsersDataInput;
};

export type UserConfigWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<UserConfigWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<UserConfigWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<UserConfigWhereInput>>;
  articles?: InputMaybe<Scalars['Boolean']>;
  /** All values that are not equal to given value. */
  articles_not?: InputMaybe<Scalars['Boolean']>;
  campaignSummary?: InputMaybe<Scalars['Boolean']>;
  /** All values that are not equal to given value. */
  campaignSummary_not?: InputMaybe<Scalars['Boolean']>;
  canResetPasswords?: InputMaybe<Scalars['Boolean']>;
  /** All values that are not equal to given value. */
  canResetPasswords_not?: InputMaybe<Scalars['Boolean']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  exportData?: InputMaybe<Scalars['Boolean']>;
  /** All values that are not equal to given value. */
  exportData_not?: InputMaybe<Scalars['Boolean']>;
  hasInsights?: InputMaybe<Scalars['Boolean']>;
  /** All values that are not equal to given value. */
  hasInsights_not?: InputMaybe<Scalars['Boolean']>;
  horizontalNavigation?: InputMaybe<Scalars['Boolean']>;
  /** All values that are not equal to given value. */
  horizontalNavigation_not?: InputMaybe<Scalars['Boolean']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: InputMaybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: InputMaybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: InputMaybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  isAdmin?: InputMaybe<Scalars['Boolean']>;
  /** All values that are not equal to given value. */
  isAdmin_not?: InputMaybe<Scalars['Boolean']>;
  isDemo?: InputMaybe<Scalars['Boolean']>;
  /** All values that are not equal to given value. */
  isDemo_not?: InputMaybe<Scalars['Boolean']>;
  isPacing?: InputMaybe<Scalars['Boolean']>;
  /** All values that are not equal to given value. */
  isPacing_not?: InputMaybe<Scalars['Boolean']>;
  isPartner?: InputMaybe<Scalars['Boolean']>;
  /** All values that are not equal to given value. */
  isPartner_not?: InputMaybe<Scalars['Boolean']>;
  isProcessor?: InputMaybe<Scalars['Boolean']>;
  /** All values that are not equal to given value. */
  isProcessor_not?: InputMaybe<Scalars['Boolean']>;
  isSelfService?: InputMaybe<Scalars['Boolean']>;
  /** All values that are not equal to given value. */
  isSelfService_not?: InputMaybe<Scalars['Boolean']>;
  isTrafficker?: InputMaybe<Scalars['Boolean']>;
  /** All values that are not equal to given value. */
  isTrafficker_not?: InputMaybe<Scalars['Boolean']>;
  pastData?: InputMaybe<Scalars['Boolean']>;
  /** All values that are not equal to given value. */
  pastData_not?: InputMaybe<Scalars['Boolean']>;
  priceVisible?: InputMaybe<Scalars['Boolean']>;
  /** All values that are not equal to given value. */
  priceVisible_not?: InputMaybe<Scalars['Boolean']>;
  providersVisible?: InputMaybe<Scalars['Boolean']>;
  /** All values that are not equal to given value. */
  providersVisible_not?: InputMaybe<Scalars['Boolean']>;
  regulated?: InputMaybe<Scalars['Boolean']>;
  /** All values that are not equal to given value. */
  regulated_not?: InputMaybe<Scalars['Boolean']>;
  segment?: InputMaybe<Scalars['Boolean']>;
  /** All values that are not equal to given value. */
  segment_not?: InputMaybe<Scalars['Boolean']>;
  technicalSupport?: InputMaybe<Scalars['Boolean']>;
  /** All values that are not equal to given value. */
  technicalSupport_not?: InputMaybe<Scalars['Boolean']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  users_every?: InputMaybe<UserWhereInput>;
  users_none?: InputMaybe<UserWhereInput>;
  users_some?: InputMaybe<UserWhereInput>;
};

export type UserConfigWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export type UserCreateInput = {
  address?: InputMaybe<LocationCreateOneInput>;
  avatar?: InputMaybe<MediaCreateOneInput>;
  cannatype?: InputMaybe<CannatypeCreateOneWithoutUserInput>;
  changes?: InputMaybe<ChangeCreateManyWithoutChangedByInput>;
  cognitoUserId: Scalars['String'];
  config?: InputMaybe<UserConfigCreateOneWithoutUsersInput>;
  conversation?: InputMaybe<ConversationCreateManyWithoutUserInput>;
  createdIabCategoryGroups?: InputMaybe<IabCategoryGroupCreateManyWithoutCreatedByInput>;
  createdRegionGroups?: InputMaybe<RegionGroupCreateManyWithoutCreatedByInput>;
  email?: InputMaybe<Scalars['String']>;
  events?: InputMaybe<EventCreateManyWithoutCreatedByInput>;
  messages?: InputMaybe<MessageCreateManyWithoutUserInput>;
  msaStatus?: InputMaybe<MsaVersion>;
  name?: InputMaybe<Scalars['String']>;
  notifications?: InputMaybe<NotificationCreateManyWithoutUserInput>;
  offers?: InputMaybe<OfferCreateManyWithoutCreatedByInput>;
  orgs?: InputMaybe<OrgCreateManyInput>;
  phone?: InputMaybe<Scalars['String']>;
  products?: InputMaybe<ProductCreateManyWithoutCreatedByInput>;
  reviews?: InputMaybe<ReviewCreateManyWithoutCreatedByInput>;
  roles?: InputMaybe<RoleCreateManyWithoutUsersInput>;
  salesforceId?: InputMaybe<Scalars['String']>;
  ssoToken?: InputMaybe<Scalars['String']>;
  strains?: InputMaybe<StrainCreateManyWithoutCreatedByInput>;
  updatedIabCategoryGroups?: InputMaybe<IabCategoryGroupCreateManyWithoutUpdatedByInput>;
  updatedRegionGroups?: InputMaybe<RegionGroupCreateManyWithoutUpdatedByInput>;
  username: Scalars['String'];
};

export type UserCreateManyInput = {
  connect?: InputMaybe<Array<UserWhereUniqueInput>>;
  create?: InputMaybe<Array<UserCreateInput>>;
};

export type UserCreateManyWithoutConfigInput = {
  connect?: InputMaybe<Array<UserWhereUniqueInput>>;
  create?: InputMaybe<Array<UserCreateWithoutConfigInput>>;
};

export type UserCreateManyWithoutRolesInput = {
  connect?: InputMaybe<Array<UserWhereUniqueInput>>;
  create?: InputMaybe<Array<UserCreateWithoutRolesInput>>;
};

export type UserCreateOneInput = {
  connect?: InputMaybe<UserWhereUniqueInput>;
  create?: InputMaybe<UserCreateInput>;
};

export type UserCreateOneWithoutCannatypeInput = {
  connect?: InputMaybe<UserWhereUniqueInput>;
  create?: InputMaybe<UserCreateWithoutCannatypeInput>;
};

export type UserCreateOneWithoutChangesInput = {
  connect?: InputMaybe<UserWhereUniqueInput>;
  create?: InputMaybe<UserCreateWithoutChangesInput>;
};

export type UserCreateOneWithoutConversationInput = {
  connect?: InputMaybe<UserWhereUniqueInput>;
  create?: InputMaybe<UserCreateWithoutConversationInput>;
};

export type UserCreateOneWithoutCreatedIabCategoryGroupsInput = {
  connect?: InputMaybe<UserWhereUniqueInput>;
  create?: InputMaybe<UserCreateWithoutCreatedIabCategoryGroupsInput>;
};

export type UserCreateOneWithoutCreatedRegionGroupsInput = {
  connect?: InputMaybe<UserWhereUniqueInput>;
  create?: InputMaybe<UserCreateWithoutCreatedRegionGroupsInput>;
};

export type UserCreateOneWithoutEventsInput = {
  connect?: InputMaybe<UserWhereUniqueInput>;
  create?: InputMaybe<UserCreateWithoutEventsInput>;
};

export type UserCreateOneWithoutMessagesInput = {
  connect?: InputMaybe<UserWhereUniqueInput>;
  create?: InputMaybe<UserCreateWithoutMessagesInput>;
};

export type UserCreateOneWithoutNotificationsInput = {
  connect?: InputMaybe<UserWhereUniqueInput>;
  create?: InputMaybe<UserCreateWithoutNotificationsInput>;
};

export type UserCreateOneWithoutOffersInput = {
  connect?: InputMaybe<UserWhereUniqueInput>;
  create?: InputMaybe<UserCreateWithoutOffersInput>;
};

export type UserCreateOneWithoutProductsInput = {
  connect?: InputMaybe<UserWhereUniqueInput>;
  create?: InputMaybe<UserCreateWithoutProductsInput>;
};

export type UserCreateOneWithoutReviewsInput = {
  connect?: InputMaybe<UserWhereUniqueInput>;
  create?: InputMaybe<UserCreateWithoutReviewsInput>;
};

export type UserCreateOneWithoutStrainsInput = {
  connect?: InputMaybe<UserWhereUniqueInput>;
  create?: InputMaybe<UserCreateWithoutStrainsInput>;
};

export type UserCreateOneWithoutUpdatedIabCategoryGroupsInput = {
  connect?: InputMaybe<UserWhereUniqueInput>;
  create?: InputMaybe<UserCreateWithoutUpdatedIabCategoryGroupsInput>;
};

export type UserCreateOneWithoutUpdatedRegionGroupsInput = {
  connect?: InputMaybe<UserWhereUniqueInput>;
  create?: InputMaybe<UserCreateWithoutUpdatedRegionGroupsInput>;
};

export type UserCreateWithoutCannatypeInput = {
  address?: InputMaybe<LocationCreateOneInput>;
  avatar?: InputMaybe<MediaCreateOneInput>;
  changes?: InputMaybe<ChangeCreateManyWithoutChangedByInput>;
  cognitoUserId: Scalars['String'];
  config?: InputMaybe<UserConfigCreateOneWithoutUsersInput>;
  conversation?: InputMaybe<ConversationCreateManyWithoutUserInput>;
  createdIabCategoryGroups?: InputMaybe<IabCategoryGroupCreateManyWithoutCreatedByInput>;
  createdRegionGroups?: InputMaybe<RegionGroupCreateManyWithoutCreatedByInput>;
  email?: InputMaybe<Scalars['String']>;
  events?: InputMaybe<EventCreateManyWithoutCreatedByInput>;
  messages?: InputMaybe<MessageCreateManyWithoutUserInput>;
  msaStatus?: InputMaybe<MsaVersion>;
  name?: InputMaybe<Scalars['String']>;
  notifications?: InputMaybe<NotificationCreateManyWithoutUserInput>;
  offers?: InputMaybe<OfferCreateManyWithoutCreatedByInput>;
  orgs?: InputMaybe<OrgCreateManyInput>;
  phone?: InputMaybe<Scalars['String']>;
  products?: InputMaybe<ProductCreateManyWithoutCreatedByInput>;
  reviews?: InputMaybe<ReviewCreateManyWithoutCreatedByInput>;
  roles?: InputMaybe<RoleCreateManyWithoutUsersInput>;
  salesforceId?: InputMaybe<Scalars['String']>;
  ssoToken?: InputMaybe<Scalars['String']>;
  strains?: InputMaybe<StrainCreateManyWithoutCreatedByInput>;
  updatedIabCategoryGroups?: InputMaybe<IabCategoryGroupCreateManyWithoutUpdatedByInput>;
  updatedRegionGroups?: InputMaybe<RegionGroupCreateManyWithoutUpdatedByInput>;
  username: Scalars['String'];
};

export type UserCreateWithoutChangesInput = {
  address?: InputMaybe<LocationCreateOneInput>;
  avatar?: InputMaybe<MediaCreateOneInput>;
  cannatype?: InputMaybe<CannatypeCreateOneWithoutUserInput>;
  cognitoUserId: Scalars['String'];
  config?: InputMaybe<UserConfigCreateOneWithoutUsersInput>;
  conversation?: InputMaybe<ConversationCreateManyWithoutUserInput>;
  createdIabCategoryGroups?: InputMaybe<IabCategoryGroupCreateManyWithoutCreatedByInput>;
  createdRegionGroups?: InputMaybe<RegionGroupCreateManyWithoutCreatedByInput>;
  email?: InputMaybe<Scalars['String']>;
  events?: InputMaybe<EventCreateManyWithoutCreatedByInput>;
  messages?: InputMaybe<MessageCreateManyWithoutUserInput>;
  msaStatus?: InputMaybe<MsaVersion>;
  name?: InputMaybe<Scalars['String']>;
  notifications?: InputMaybe<NotificationCreateManyWithoutUserInput>;
  offers?: InputMaybe<OfferCreateManyWithoutCreatedByInput>;
  orgs?: InputMaybe<OrgCreateManyInput>;
  phone?: InputMaybe<Scalars['String']>;
  products?: InputMaybe<ProductCreateManyWithoutCreatedByInput>;
  reviews?: InputMaybe<ReviewCreateManyWithoutCreatedByInput>;
  roles?: InputMaybe<RoleCreateManyWithoutUsersInput>;
  salesforceId?: InputMaybe<Scalars['String']>;
  ssoToken?: InputMaybe<Scalars['String']>;
  strains?: InputMaybe<StrainCreateManyWithoutCreatedByInput>;
  updatedIabCategoryGroups?: InputMaybe<IabCategoryGroupCreateManyWithoutUpdatedByInput>;
  updatedRegionGroups?: InputMaybe<RegionGroupCreateManyWithoutUpdatedByInput>;
  username: Scalars['String'];
};

export type UserCreateWithoutConfigInput = {
  address?: InputMaybe<LocationCreateOneInput>;
  avatar?: InputMaybe<MediaCreateOneInput>;
  cannatype?: InputMaybe<CannatypeCreateOneWithoutUserInput>;
  changes?: InputMaybe<ChangeCreateManyWithoutChangedByInput>;
  cognitoUserId: Scalars['String'];
  conversation?: InputMaybe<ConversationCreateManyWithoutUserInput>;
  createdIabCategoryGroups?: InputMaybe<IabCategoryGroupCreateManyWithoutCreatedByInput>;
  createdRegionGroups?: InputMaybe<RegionGroupCreateManyWithoutCreatedByInput>;
  email?: InputMaybe<Scalars['String']>;
  events?: InputMaybe<EventCreateManyWithoutCreatedByInput>;
  messages?: InputMaybe<MessageCreateManyWithoutUserInput>;
  msaStatus?: InputMaybe<MsaVersion>;
  name?: InputMaybe<Scalars['String']>;
  notifications?: InputMaybe<NotificationCreateManyWithoutUserInput>;
  offers?: InputMaybe<OfferCreateManyWithoutCreatedByInput>;
  orgs?: InputMaybe<OrgCreateManyInput>;
  phone?: InputMaybe<Scalars['String']>;
  products?: InputMaybe<ProductCreateManyWithoutCreatedByInput>;
  reviews?: InputMaybe<ReviewCreateManyWithoutCreatedByInput>;
  roles?: InputMaybe<RoleCreateManyWithoutUsersInput>;
  salesforceId?: InputMaybe<Scalars['String']>;
  ssoToken?: InputMaybe<Scalars['String']>;
  strains?: InputMaybe<StrainCreateManyWithoutCreatedByInput>;
  updatedIabCategoryGroups?: InputMaybe<IabCategoryGroupCreateManyWithoutUpdatedByInput>;
  updatedRegionGroups?: InputMaybe<RegionGroupCreateManyWithoutUpdatedByInput>;
  username: Scalars['String'];
};

export type UserCreateWithoutConversationInput = {
  address?: InputMaybe<LocationCreateOneInput>;
  avatar?: InputMaybe<MediaCreateOneInput>;
  cannatype?: InputMaybe<CannatypeCreateOneWithoutUserInput>;
  changes?: InputMaybe<ChangeCreateManyWithoutChangedByInput>;
  cognitoUserId: Scalars['String'];
  config?: InputMaybe<UserConfigCreateOneWithoutUsersInput>;
  createdIabCategoryGroups?: InputMaybe<IabCategoryGroupCreateManyWithoutCreatedByInput>;
  createdRegionGroups?: InputMaybe<RegionGroupCreateManyWithoutCreatedByInput>;
  email?: InputMaybe<Scalars['String']>;
  events?: InputMaybe<EventCreateManyWithoutCreatedByInput>;
  messages?: InputMaybe<MessageCreateManyWithoutUserInput>;
  msaStatus?: InputMaybe<MsaVersion>;
  name?: InputMaybe<Scalars['String']>;
  notifications?: InputMaybe<NotificationCreateManyWithoutUserInput>;
  offers?: InputMaybe<OfferCreateManyWithoutCreatedByInput>;
  orgs?: InputMaybe<OrgCreateManyInput>;
  phone?: InputMaybe<Scalars['String']>;
  products?: InputMaybe<ProductCreateManyWithoutCreatedByInput>;
  reviews?: InputMaybe<ReviewCreateManyWithoutCreatedByInput>;
  roles?: InputMaybe<RoleCreateManyWithoutUsersInput>;
  salesforceId?: InputMaybe<Scalars['String']>;
  ssoToken?: InputMaybe<Scalars['String']>;
  strains?: InputMaybe<StrainCreateManyWithoutCreatedByInput>;
  updatedIabCategoryGroups?: InputMaybe<IabCategoryGroupCreateManyWithoutUpdatedByInput>;
  updatedRegionGroups?: InputMaybe<RegionGroupCreateManyWithoutUpdatedByInput>;
  username: Scalars['String'];
};

export type UserCreateWithoutCreatedIabCategoryGroupsInput = {
  address?: InputMaybe<LocationCreateOneInput>;
  avatar?: InputMaybe<MediaCreateOneInput>;
  cannatype?: InputMaybe<CannatypeCreateOneWithoutUserInput>;
  changes?: InputMaybe<ChangeCreateManyWithoutChangedByInput>;
  cognitoUserId: Scalars['String'];
  config?: InputMaybe<UserConfigCreateOneWithoutUsersInput>;
  conversation?: InputMaybe<ConversationCreateManyWithoutUserInput>;
  createdRegionGroups?: InputMaybe<RegionGroupCreateManyWithoutCreatedByInput>;
  email?: InputMaybe<Scalars['String']>;
  events?: InputMaybe<EventCreateManyWithoutCreatedByInput>;
  messages?: InputMaybe<MessageCreateManyWithoutUserInput>;
  msaStatus?: InputMaybe<MsaVersion>;
  name?: InputMaybe<Scalars['String']>;
  notifications?: InputMaybe<NotificationCreateManyWithoutUserInput>;
  offers?: InputMaybe<OfferCreateManyWithoutCreatedByInput>;
  orgs?: InputMaybe<OrgCreateManyInput>;
  phone?: InputMaybe<Scalars['String']>;
  products?: InputMaybe<ProductCreateManyWithoutCreatedByInput>;
  reviews?: InputMaybe<ReviewCreateManyWithoutCreatedByInput>;
  roles?: InputMaybe<RoleCreateManyWithoutUsersInput>;
  salesforceId?: InputMaybe<Scalars['String']>;
  ssoToken?: InputMaybe<Scalars['String']>;
  strains?: InputMaybe<StrainCreateManyWithoutCreatedByInput>;
  updatedIabCategoryGroups?: InputMaybe<IabCategoryGroupCreateManyWithoutUpdatedByInput>;
  updatedRegionGroups?: InputMaybe<RegionGroupCreateManyWithoutUpdatedByInput>;
  username: Scalars['String'];
};

export type UserCreateWithoutCreatedRegionGroupsInput = {
  address?: InputMaybe<LocationCreateOneInput>;
  avatar?: InputMaybe<MediaCreateOneInput>;
  cannatype?: InputMaybe<CannatypeCreateOneWithoutUserInput>;
  changes?: InputMaybe<ChangeCreateManyWithoutChangedByInput>;
  cognitoUserId: Scalars['String'];
  config?: InputMaybe<UserConfigCreateOneWithoutUsersInput>;
  conversation?: InputMaybe<ConversationCreateManyWithoutUserInput>;
  createdIabCategoryGroups?: InputMaybe<IabCategoryGroupCreateManyWithoutCreatedByInput>;
  email?: InputMaybe<Scalars['String']>;
  events?: InputMaybe<EventCreateManyWithoutCreatedByInput>;
  messages?: InputMaybe<MessageCreateManyWithoutUserInput>;
  msaStatus?: InputMaybe<MsaVersion>;
  name?: InputMaybe<Scalars['String']>;
  notifications?: InputMaybe<NotificationCreateManyWithoutUserInput>;
  offers?: InputMaybe<OfferCreateManyWithoutCreatedByInput>;
  orgs?: InputMaybe<OrgCreateManyInput>;
  phone?: InputMaybe<Scalars['String']>;
  products?: InputMaybe<ProductCreateManyWithoutCreatedByInput>;
  reviews?: InputMaybe<ReviewCreateManyWithoutCreatedByInput>;
  roles?: InputMaybe<RoleCreateManyWithoutUsersInput>;
  salesforceId?: InputMaybe<Scalars['String']>;
  ssoToken?: InputMaybe<Scalars['String']>;
  strains?: InputMaybe<StrainCreateManyWithoutCreatedByInput>;
  updatedIabCategoryGroups?: InputMaybe<IabCategoryGroupCreateManyWithoutUpdatedByInput>;
  updatedRegionGroups?: InputMaybe<RegionGroupCreateManyWithoutUpdatedByInput>;
  username: Scalars['String'];
};

export type UserCreateWithoutEventsInput = {
  address?: InputMaybe<LocationCreateOneInput>;
  avatar?: InputMaybe<MediaCreateOneInput>;
  cannatype?: InputMaybe<CannatypeCreateOneWithoutUserInput>;
  changes?: InputMaybe<ChangeCreateManyWithoutChangedByInput>;
  cognitoUserId: Scalars['String'];
  config?: InputMaybe<UserConfigCreateOneWithoutUsersInput>;
  conversation?: InputMaybe<ConversationCreateManyWithoutUserInput>;
  createdIabCategoryGroups?: InputMaybe<IabCategoryGroupCreateManyWithoutCreatedByInput>;
  createdRegionGroups?: InputMaybe<RegionGroupCreateManyWithoutCreatedByInput>;
  email?: InputMaybe<Scalars['String']>;
  messages?: InputMaybe<MessageCreateManyWithoutUserInput>;
  msaStatus?: InputMaybe<MsaVersion>;
  name?: InputMaybe<Scalars['String']>;
  notifications?: InputMaybe<NotificationCreateManyWithoutUserInput>;
  offers?: InputMaybe<OfferCreateManyWithoutCreatedByInput>;
  orgs?: InputMaybe<OrgCreateManyInput>;
  phone?: InputMaybe<Scalars['String']>;
  products?: InputMaybe<ProductCreateManyWithoutCreatedByInput>;
  reviews?: InputMaybe<ReviewCreateManyWithoutCreatedByInput>;
  roles?: InputMaybe<RoleCreateManyWithoutUsersInput>;
  salesforceId?: InputMaybe<Scalars['String']>;
  ssoToken?: InputMaybe<Scalars['String']>;
  strains?: InputMaybe<StrainCreateManyWithoutCreatedByInput>;
  updatedIabCategoryGroups?: InputMaybe<IabCategoryGroupCreateManyWithoutUpdatedByInput>;
  updatedRegionGroups?: InputMaybe<RegionGroupCreateManyWithoutUpdatedByInput>;
  username: Scalars['String'];
};

export type UserCreateWithoutMessagesInput = {
  address?: InputMaybe<LocationCreateOneInput>;
  avatar?: InputMaybe<MediaCreateOneInput>;
  cannatype?: InputMaybe<CannatypeCreateOneWithoutUserInput>;
  changes?: InputMaybe<ChangeCreateManyWithoutChangedByInput>;
  cognitoUserId: Scalars['String'];
  config?: InputMaybe<UserConfigCreateOneWithoutUsersInput>;
  conversation?: InputMaybe<ConversationCreateManyWithoutUserInput>;
  createdIabCategoryGroups?: InputMaybe<IabCategoryGroupCreateManyWithoutCreatedByInput>;
  createdRegionGroups?: InputMaybe<RegionGroupCreateManyWithoutCreatedByInput>;
  email?: InputMaybe<Scalars['String']>;
  events?: InputMaybe<EventCreateManyWithoutCreatedByInput>;
  msaStatus?: InputMaybe<MsaVersion>;
  name?: InputMaybe<Scalars['String']>;
  notifications?: InputMaybe<NotificationCreateManyWithoutUserInput>;
  offers?: InputMaybe<OfferCreateManyWithoutCreatedByInput>;
  orgs?: InputMaybe<OrgCreateManyInput>;
  phone?: InputMaybe<Scalars['String']>;
  products?: InputMaybe<ProductCreateManyWithoutCreatedByInput>;
  reviews?: InputMaybe<ReviewCreateManyWithoutCreatedByInput>;
  roles?: InputMaybe<RoleCreateManyWithoutUsersInput>;
  salesforceId?: InputMaybe<Scalars['String']>;
  ssoToken?: InputMaybe<Scalars['String']>;
  strains?: InputMaybe<StrainCreateManyWithoutCreatedByInput>;
  updatedIabCategoryGroups?: InputMaybe<IabCategoryGroupCreateManyWithoutUpdatedByInput>;
  updatedRegionGroups?: InputMaybe<RegionGroupCreateManyWithoutUpdatedByInput>;
  username: Scalars['String'];
};

export type UserCreateWithoutNotificationsInput = {
  address?: InputMaybe<LocationCreateOneInput>;
  avatar?: InputMaybe<MediaCreateOneInput>;
  cannatype?: InputMaybe<CannatypeCreateOneWithoutUserInput>;
  changes?: InputMaybe<ChangeCreateManyWithoutChangedByInput>;
  cognitoUserId: Scalars['String'];
  config?: InputMaybe<UserConfigCreateOneWithoutUsersInput>;
  conversation?: InputMaybe<ConversationCreateManyWithoutUserInput>;
  createdIabCategoryGroups?: InputMaybe<IabCategoryGroupCreateManyWithoutCreatedByInput>;
  createdRegionGroups?: InputMaybe<RegionGroupCreateManyWithoutCreatedByInput>;
  email?: InputMaybe<Scalars['String']>;
  events?: InputMaybe<EventCreateManyWithoutCreatedByInput>;
  messages?: InputMaybe<MessageCreateManyWithoutUserInput>;
  msaStatus?: InputMaybe<MsaVersion>;
  name?: InputMaybe<Scalars['String']>;
  offers?: InputMaybe<OfferCreateManyWithoutCreatedByInput>;
  orgs?: InputMaybe<OrgCreateManyInput>;
  phone?: InputMaybe<Scalars['String']>;
  products?: InputMaybe<ProductCreateManyWithoutCreatedByInput>;
  reviews?: InputMaybe<ReviewCreateManyWithoutCreatedByInput>;
  roles?: InputMaybe<RoleCreateManyWithoutUsersInput>;
  salesforceId?: InputMaybe<Scalars['String']>;
  ssoToken?: InputMaybe<Scalars['String']>;
  strains?: InputMaybe<StrainCreateManyWithoutCreatedByInput>;
  updatedIabCategoryGroups?: InputMaybe<IabCategoryGroupCreateManyWithoutUpdatedByInput>;
  updatedRegionGroups?: InputMaybe<RegionGroupCreateManyWithoutUpdatedByInput>;
  username: Scalars['String'];
};

export type UserCreateWithoutOffersInput = {
  address?: InputMaybe<LocationCreateOneInput>;
  avatar?: InputMaybe<MediaCreateOneInput>;
  cannatype?: InputMaybe<CannatypeCreateOneWithoutUserInput>;
  changes?: InputMaybe<ChangeCreateManyWithoutChangedByInput>;
  cognitoUserId: Scalars['String'];
  config?: InputMaybe<UserConfigCreateOneWithoutUsersInput>;
  conversation?: InputMaybe<ConversationCreateManyWithoutUserInput>;
  createdIabCategoryGroups?: InputMaybe<IabCategoryGroupCreateManyWithoutCreatedByInput>;
  createdRegionGroups?: InputMaybe<RegionGroupCreateManyWithoutCreatedByInput>;
  email?: InputMaybe<Scalars['String']>;
  events?: InputMaybe<EventCreateManyWithoutCreatedByInput>;
  messages?: InputMaybe<MessageCreateManyWithoutUserInput>;
  msaStatus?: InputMaybe<MsaVersion>;
  name?: InputMaybe<Scalars['String']>;
  notifications?: InputMaybe<NotificationCreateManyWithoutUserInput>;
  orgs?: InputMaybe<OrgCreateManyInput>;
  phone?: InputMaybe<Scalars['String']>;
  products?: InputMaybe<ProductCreateManyWithoutCreatedByInput>;
  reviews?: InputMaybe<ReviewCreateManyWithoutCreatedByInput>;
  roles?: InputMaybe<RoleCreateManyWithoutUsersInput>;
  salesforceId?: InputMaybe<Scalars['String']>;
  ssoToken?: InputMaybe<Scalars['String']>;
  strains?: InputMaybe<StrainCreateManyWithoutCreatedByInput>;
  updatedIabCategoryGroups?: InputMaybe<IabCategoryGroupCreateManyWithoutUpdatedByInput>;
  updatedRegionGroups?: InputMaybe<RegionGroupCreateManyWithoutUpdatedByInput>;
  username: Scalars['String'];
};

export type UserCreateWithoutProductsInput = {
  address?: InputMaybe<LocationCreateOneInput>;
  avatar?: InputMaybe<MediaCreateOneInput>;
  cannatype?: InputMaybe<CannatypeCreateOneWithoutUserInput>;
  changes?: InputMaybe<ChangeCreateManyWithoutChangedByInput>;
  cognitoUserId: Scalars['String'];
  config?: InputMaybe<UserConfigCreateOneWithoutUsersInput>;
  conversation?: InputMaybe<ConversationCreateManyWithoutUserInput>;
  createdIabCategoryGroups?: InputMaybe<IabCategoryGroupCreateManyWithoutCreatedByInput>;
  createdRegionGroups?: InputMaybe<RegionGroupCreateManyWithoutCreatedByInput>;
  email?: InputMaybe<Scalars['String']>;
  events?: InputMaybe<EventCreateManyWithoutCreatedByInput>;
  messages?: InputMaybe<MessageCreateManyWithoutUserInput>;
  msaStatus?: InputMaybe<MsaVersion>;
  name?: InputMaybe<Scalars['String']>;
  notifications?: InputMaybe<NotificationCreateManyWithoutUserInput>;
  offers?: InputMaybe<OfferCreateManyWithoutCreatedByInput>;
  orgs?: InputMaybe<OrgCreateManyInput>;
  phone?: InputMaybe<Scalars['String']>;
  reviews?: InputMaybe<ReviewCreateManyWithoutCreatedByInput>;
  roles?: InputMaybe<RoleCreateManyWithoutUsersInput>;
  salesforceId?: InputMaybe<Scalars['String']>;
  ssoToken?: InputMaybe<Scalars['String']>;
  strains?: InputMaybe<StrainCreateManyWithoutCreatedByInput>;
  updatedIabCategoryGroups?: InputMaybe<IabCategoryGroupCreateManyWithoutUpdatedByInput>;
  updatedRegionGroups?: InputMaybe<RegionGroupCreateManyWithoutUpdatedByInput>;
  username: Scalars['String'];
};

export type UserCreateWithoutReviewsInput = {
  address?: InputMaybe<LocationCreateOneInput>;
  avatar?: InputMaybe<MediaCreateOneInput>;
  cannatype?: InputMaybe<CannatypeCreateOneWithoutUserInput>;
  changes?: InputMaybe<ChangeCreateManyWithoutChangedByInput>;
  cognitoUserId: Scalars['String'];
  config?: InputMaybe<UserConfigCreateOneWithoutUsersInput>;
  conversation?: InputMaybe<ConversationCreateManyWithoutUserInput>;
  createdIabCategoryGroups?: InputMaybe<IabCategoryGroupCreateManyWithoutCreatedByInput>;
  createdRegionGroups?: InputMaybe<RegionGroupCreateManyWithoutCreatedByInput>;
  email?: InputMaybe<Scalars['String']>;
  events?: InputMaybe<EventCreateManyWithoutCreatedByInput>;
  messages?: InputMaybe<MessageCreateManyWithoutUserInput>;
  msaStatus?: InputMaybe<MsaVersion>;
  name?: InputMaybe<Scalars['String']>;
  notifications?: InputMaybe<NotificationCreateManyWithoutUserInput>;
  offers?: InputMaybe<OfferCreateManyWithoutCreatedByInput>;
  orgs?: InputMaybe<OrgCreateManyInput>;
  phone?: InputMaybe<Scalars['String']>;
  products?: InputMaybe<ProductCreateManyWithoutCreatedByInput>;
  roles?: InputMaybe<RoleCreateManyWithoutUsersInput>;
  salesforceId?: InputMaybe<Scalars['String']>;
  ssoToken?: InputMaybe<Scalars['String']>;
  strains?: InputMaybe<StrainCreateManyWithoutCreatedByInput>;
  updatedIabCategoryGroups?: InputMaybe<IabCategoryGroupCreateManyWithoutUpdatedByInput>;
  updatedRegionGroups?: InputMaybe<RegionGroupCreateManyWithoutUpdatedByInput>;
  username: Scalars['String'];
};

export type UserCreateWithoutRolesInput = {
  address?: InputMaybe<LocationCreateOneInput>;
  avatar?: InputMaybe<MediaCreateOneInput>;
  cannatype?: InputMaybe<CannatypeCreateOneWithoutUserInput>;
  changes?: InputMaybe<ChangeCreateManyWithoutChangedByInput>;
  cognitoUserId: Scalars['String'];
  config?: InputMaybe<UserConfigCreateOneWithoutUsersInput>;
  conversation?: InputMaybe<ConversationCreateManyWithoutUserInput>;
  createdIabCategoryGroups?: InputMaybe<IabCategoryGroupCreateManyWithoutCreatedByInput>;
  createdRegionGroups?: InputMaybe<RegionGroupCreateManyWithoutCreatedByInput>;
  email?: InputMaybe<Scalars['String']>;
  events?: InputMaybe<EventCreateManyWithoutCreatedByInput>;
  messages?: InputMaybe<MessageCreateManyWithoutUserInput>;
  msaStatus?: InputMaybe<MsaVersion>;
  name?: InputMaybe<Scalars['String']>;
  notifications?: InputMaybe<NotificationCreateManyWithoutUserInput>;
  offers?: InputMaybe<OfferCreateManyWithoutCreatedByInput>;
  orgs?: InputMaybe<OrgCreateManyInput>;
  phone?: InputMaybe<Scalars['String']>;
  products?: InputMaybe<ProductCreateManyWithoutCreatedByInput>;
  reviews?: InputMaybe<ReviewCreateManyWithoutCreatedByInput>;
  salesforceId?: InputMaybe<Scalars['String']>;
  ssoToken?: InputMaybe<Scalars['String']>;
  strains?: InputMaybe<StrainCreateManyWithoutCreatedByInput>;
  updatedIabCategoryGroups?: InputMaybe<IabCategoryGroupCreateManyWithoutUpdatedByInput>;
  updatedRegionGroups?: InputMaybe<RegionGroupCreateManyWithoutUpdatedByInput>;
  username: Scalars['String'];
};

export type UserCreateWithoutStrainsInput = {
  address?: InputMaybe<LocationCreateOneInput>;
  avatar?: InputMaybe<MediaCreateOneInput>;
  cannatype?: InputMaybe<CannatypeCreateOneWithoutUserInput>;
  changes?: InputMaybe<ChangeCreateManyWithoutChangedByInput>;
  cognitoUserId: Scalars['String'];
  config?: InputMaybe<UserConfigCreateOneWithoutUsersInput>;
  conversation?: InputMaybe<ConversationCreateManyWithoutUserInput>;
  createdIabCategoryGroups?: InputMaybe<IabCategoryGroupCreateManyWithoutCreatedByInput>;
  createdRegionGroups?: InputMaybe<RegionGroupCreateManyWithoutCreatedByInput>;
  email?: InputMaybe<Scalars['String']>;
  events?: InputMaybe<EventCreateManyWithoutCreatedByInput>;
  messages?: InputMaybe<MessageCreateManyWithoutUserInput>;
  msaStatus?: InputMaybe<MsaVersion>;
  name?: InputMaybe<Scalars['String']>;
  notifications?: InputMaybe<NotificationCreateManyWithoutUserInput>;
  offers?: InputMaybe<OfferCreateManyWithoutCreatedByInput>;
  orgs?: InputMaybe<OrgCreateManyInput>;
  phone?: InputMaybe<Scalars['String']>;
  products?: InputMaybe<ProductCreateManyWithoutCreatedByInput>;
  reviews?: InputMaybe<ReviewCreateManyWithoutCreatedByInput>;
  roles?: InputMaybe<RoleCreateManyWithoutUsersInput>;
  salesforceId?: InputMaybe<Scalars['String']>;
  ssoToken?: InputMaybe<Scalars['String']>;
  updatedIabCategoryGroups?: InputMaybe<IabCategoryGroupCreateManyWithoutUpdatedByInput>;
  updatedRegionGroups?: InputMaybe<RegionGroupCreateManyWithoutUpdatedByInput>;
  username: Scalars['String'];
};

export type UserCreateWithoutUpdatedIabCategoryGroupsInput = {
  address?: InputMaybe<LocationCreateOneInput>;
  avatar?: InputMaybe<MediaCreateOneInput>;
  cannatype?: InputMaybe<CannatypeCreateOneWithoutUserInput>;
  changes?: InputMaybe<ChangeCreateManyWithoutChangedByInput>;
  cognitoUserId: Scalars['String'];
  config?: InputMaybe<UserConfigCreateOneWithoutUsersInput>;
  conversation?: InputMaybe<ConversationCreateManyWithoutUserInput>;
  createdIabCategoryGroups?: InputMaybe<IabCategoryGroupCreateManyWithoutCreatedByInput>;
  createdRegionGroups?: InputMaybe<RegionGroupCreateManyWithoutCreatedByInput>;
  email?: InputMaybe<Scalars['String']>;
  events?: InputMaybe<EventCreateManyWithoutCreatedByInput>;
  messages?: InputMaybe<MessageCreateManyWithoutUserInput>;
  msaStatus?: InputMaybe<MsaVersion>;
  name?: InputMaybe<Scalars['String']>;
  notifications?: InputMaybe<NotificationCreateManyWithoutUserInput>;
  offers?: InputMaybe<OfferCreateManyWithoutCreatedByInput>;
  orgs?: InputMaybe<OrgCreateManyInput>;
  phone?: InputMaybe<Scalars['String']>;
  products?: InputMaybe<ProductCreateManyWithoutCreatedByInput>;
  reviews?: InputMaybe<ReviewCreateManyWithoutCreatedByInput>;
  roles?: InputMaybe<RoleCreateManyWithoutUsersInput>;
  salesforceId?: InputMaybe<Scalars['String']>;
  ssoToken?: InputMaybe<Scalars['String']>;
  strains?: InputMaybe<StrainCreateManyWithoutCreatedByInput>;
  updatedRegionGroups?: InputMaybe<RegionGroupCreateManyWithoutUpdatedByInput>;
  username: Scalars['String'];
};

export type UserCreateWithoutUpdatedRegionGroupsInput = {
  address?: InputMaybe<LocationCreateOneInput>;
  avatar?: InputMaybe<MediaCreateOneInput>;
  cannatype?: InputMaybe<CannatypeCreateOneWithoutUserInput>;
  changes?: InputMaybe<ChangeCreateManyWithoutChangedByInput>;
  cognitoUserId: Scalars['String'];
  config?: InputMaybe<UserConfigCreateOneWithoutUsersInput>;
  conversation?: InputMaybe<ConversationCreateManyWithoutUserInput>;
  createdIabCategoryGroups?: InputMaybe<IabCategoryGroupCreateManyWithoutCreatedByInput>;
  createdRegionGroups?: InputMaybe<RegionGroupCreateManyWithoutCreatedByInput>;
  email?: InputMaybe<Scalars['String']>;
  events?: InputMaybe<EventCreateManyWithoutCreatedByInput>;
  messages?: InputMaybe<MessageCreateManyWithoutUserInput>;
  msaStatus?: InputMaybe<MsaVersion>;
  name?: InputMaybe<Scalars['String']>;
  notifications?: InputMaybe<NotificationCreateManyWithoutUserInput>;
  offers?: InputMaybe<OfferCreateManyWithoutCreatedByInput>;
  orgs?: InputMaybe<OrgCreateManyInput>;
  phone?: InputMaybe<Scalars['String']>;
  products?: InputMaybe<ProductCreateManyWithoutCreatedByInput>;
  reviews?: InputMaybe<ReviewCreateManyWithoutCreatedByInput>;
  roles?: InputMaybe<RoleCreateManyWithoutUsersInput>;
  salesforceId?: InputMaybe<Scalars['String']>;
  ssoToken?: InputMaybe<Scalars['String']>;
  strains?: InputMaybe<StrainCreateManyWithoutCreatedByInput>;
  updatedIabCategoryGroups?: InputMaybe<IabCategoryGroupCreateManyWithoutUpdatedByInput>;
  username: Scalars['String'];
};

export enum UserOrderByInput {
  CognitoUserIdAsc = 'cognitoUserId_ASC',
  CognitoUserIdDesc = 'cognitoUserId_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  EmailAsc = 'email_ASC',
  EmailDesc = 'email_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  MsaStatusAsc = 'msaStatus_ASC',
  MsaStatusDesc = 'msaStatus_DESC',
  NameAsc = 'name_ASC',
  NameDesc = 'name_DESC',
  PhoneAsc = 'phone_ASC',
  PhoneDesc = 'phone_DESC',
  SalesforceIdAsc = 'salesforceId_ASC',
  SalesforceIdDesc = 'salesforceId_DESC',
  SsoTokenAsc = 'ssoToken_ASC',
  SsoTokenDesc = 'ssoToken_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  UsernameAsc = 'username_ASC',
  UsernameDesc = 'username_DESC'
}

export type UserPreviousValues = {
  __typename?: 'UserPreviousValues';
  cognitoUserId: Scalars['String'];
  createdAt: Scalars['DateTime'];
  email?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  msaStatus?: Maybe<MsaVersion>;
  name?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  salesforceId?: Maybe<Scalars['String']>;
  ssoToken?: Maybe<Scalars['String']>;
  updatedAt: Scalars['DateTime'];
  username: Scalars['String'];
};

export type UserSubscriptionPayload = {
  __typename?: 'UserSubscriptionPayload';
  mutation: MutationType;
  node?: Maybe<User>;
  previousValues?: Maybe<UserPreviousValues>;
  updatedFields?: Maybe<Array<Scalars['String']>>;
};

export type UserSubscriptionWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<UserSubscriptionWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<UserSubscriptionWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<UserSubscriptionWhereInput>>;
  /** The subscription event gets dispatched when it's listed in mutation_in */
  mutation_in?: InputMaybe<Array<MutationType>>;
  node?: InputMaybe<UserWhereInput>;
  /** The subscription event gets only dispatched when one of the updated fields names is included in this list */
  updatedFields_contains?: InputMaybe<Scalars['String']>;
  /** The subscription event gets only dispatched when all of the field names included in this list have been updated */
  updatedFields_contains_every?: InputMaybe<Array<Scalars['String']>>;
  /** The subscription event gets only dispatched when some of the field names included in this list have been updated */
  updatedFields_contains_some?: InputMaybe<Array<Scalars['String']>>;
};

export type UserUpdateDataInput = {
  address?: InputMaybe<LocationUpdateOneInput>;
  avatar?: InputMaybe<MediaUpdateOneInput>;
  cannatype?: InputMaybe<CannatypeUpdateOneWithoutUserInput>;
  changes?: InputMaybe<ChangeUpdateManyWithoutChangedByInput>;
  cognitoUserId?: InputMaybe<Scalars['String']>;
  config?: InputMaybe<UserConfigUpdateOneWithoutUsersInput>;
  conversation?: InputMaybe<ConversationUpdateManyWithoutUserInput>;
  createdIabCategoryGroups?: InputMaybe<IabCategoryGroupUpdateManyWithoutCreatedByInput>;
  createdRegionGroups?: InputMaybe<RegionGroupUpdateManyWithoutCreatedByInput>;
  email?: InputMaybe<Scalars['String']>;
  events?: InputMaybe<EventUpdateManyWithoutCreatedByInput>;
  messages?: InputMaybe<MessageUpdateManyWithoutUserInput>;
  msaStatus?: InputMaybe<MsaVersion>;
  name?: InputMaybe<Scalars['String']>;
  notifications?: InputMaybe<NotificationUpdateManyWithoutUserInput>;
  offers?: InputMaybe<OfferUpdateManyWithoutCreatedByInput>;
  orgs?: InputMaybe<OrgUpdateManyInput>;
  phone?: InputMaybe<Scalars['String']>;
  products?: InputMaybe<ProductUpdateManyWithoutCreatedByInput>;
  reviews?: InputMaybe<ReviewUpdateManyWithoutCreatedByInput>;
  roles?: InputMaybe<RoleUpdateManyWithoutUsersInput>;
  salesforceId?: InputMaybe<Scalars['String']>;
  ssoToken?: InputMaybe<Scalars['String']>;
  strains?: InputMaybe<StrainUpdateManyWithoutCreatedByInput>;
  updatedIabCategoryGroups?: InputMaybe<IabCategoryGroupUpdateManyWithoutUpdatedByInput>;
  updatedRegionGroups?: InputMaybe<RegionGroupUpdateManyWithoutUpdatedByInput>;
  username?: InputMaybe<Scalars['String']>;
};

export type UserUpdateInput = {
  address?: InputMaybe<LocationUpdateOneInput>;
  avatar?: InputMaybe<MediaUpdateOneInput>;
  cannatype?: InputMaybe<CannatypeUpdateOneWithoutUserInput>;
  changes?: InputMaybe<ChangeUpdateManyWithoutChangedByInput>;
  cognitoUserId?: InputMaybe<Scalars['String']>;
  config?: InputMaybe<UserConfigUpdateOneWithoutUsersInput>;
  conversation?: InputMaybe<ConversationUpdateManyWithoutUserInput>;
  createdIabCategoryGroups?: InputMaybe<IabCategoryGroupUpdateManyWithoutCreatedByInput>;
  createdRegionGroups?: InputMaybe<RegionGroupUpdateManyWithoutCreatedByInput>;
  email?: InputMaybe<Scalars['String']>;
  events?: InputMaybe<EventUpdateManyWithoutCreatedByInput>;
  messages?: InputMaybe<MessageUpdateManyWithoutUserInput>;
  msaStatus?: InputMaybe<MsaVersion>;
  name?: InputMaybe<Scalars['String']>;
  notifications?: InputMaybe<NotificationUpdateManyWithoutUserInput>;
  offers?: InputMaybe<OfferUpdateManyWithoutCreatedByInput>;
  orgs?: InputMaybe<OrgUpdateManyInput>;
  phone?: InputMaybe<Scalars['String']>;
  products?: InputMaybe<ProductUpdateManyWithoutCreatedByInput>;
  reviews?: InputMaybe<ReviewUpdateManyWithoutCreatedByInput>;
  roles?: InputMaybe<RoleUpdateManyWithoutUsersInput>;
  salesforceId?: InputMaybe<Scalars['String']>;
  ssoToken?: InputMaybe<Scalars['String']>;
  strains?: InputMaybe<StrainUpdateManyWithoutCreatedByInput>;
  updatedIabCategoryGroups?: InputMaybe<IabCategoryGroupUpdateManyWithoutUpdatedByInput>;
  updatedRegionGroups?: InputMaybe<RegionGroupUpdateManyWithoutUpdatedByInput>;
  username?: InputMaybe<Scalars['String']>;
};

export type UserUpdateManyInput = {
  connect?: InputMaybe<Array<UserWhereUniqueInput>>;
  create?: InputMaybe<Array<UserCreateInput>>;
  delete?: InputMaybe<Array<UserWhereUniqueInput>>;
  disconnect?: InputMaybe<Array<UserWhereUniqueInput>>;
  update?: InputMaybe<Array<UserUpdateWithWhereUniqueNestedInput>>;
  upsert?: InputMaybe<Array<UserUpsertWithWhereUniqueNestedInput>>;
};

export type UserUpdateManyWithoutRolesInput = {
  connect?: InputMaybe<Array<UserWhereUniqueInput>>;
  create?: InputMaybe<Array<UserCreateWithoutRolesInput>>;
  delete?: InputMaybe<Array<UserWhereUniqueInput>>;
  disconnect?: InputMaybe<Array<UserWhereUniqueInput>>;
  update?: InputMaybe<Array<UserUpdateWithWhereUniqueWithoutRolesInput>>;
  upsert?: InputMaybe<Array<UserUpsertWithWhereUniqueWithoutRolesInput>>;
};

export type UserUpdateOneInput = {
  connect?: InputMaybe<UserWhereUniqueInput>;
  create?: InputMaybe<UserCreateInput>;
  delete?: InputMaybe<Scalars['Boolean']>;
  disconnect?: InputMaybe<Scalars['Boolean']>;
  update?: InputMaybe<UserUpdateDataInput>;
  upsert?: InputMaybe<UserUpsertNestedInput>;
};

export type UserUpdateOneRequiredWithoutReviewsInput = {
  connect?: InputMaybe<UserWhereUniqueInput>;
  create?: InputMaybe<UserCreateWithoutReviewsInput>;
  update?: InputMaybe<UserUpdateWithoutReviewsDataInput>;
  upsert?: InputMaybe<UserUpsertWithoutReviewsInput>;
};

export type UserUpdateOneWithoutCannatypeInput = {
  connect?: InputMaybe<UserWhereUniqueInput>;
  create?: InputMaybe<UserCreateWithoutCannatypeInput>;
  delete?: InputMaybe<Scalars['Boolean']>;
  disconnect?: InputMaybe<Scalars['Boolean']>;
  update?: InputMaybe<UserUpdateWithoutCannatypeDataInput>;
  upsert?: InputMaybe<UserUpsertWithoutCannatypeInput>;
};

export type UserUpdateOneWithoutChangesInput = {
  connect?: InputMaybe<UserWhereUniqueInput>;
  create?: InputMaybe<UserCreateWithoutChangesInput>;
  delete?: InputMaybe<Scalars['Boolean']>;
  disconnect?: InputMaybe<Scalars['Boolean']>;
  update?: InputMaybe<UserUpdateWithoutChangesDataInput>;
  upsert?: InputMaybe<UserUpsertWithoutChangesInput>;
};

export type UserUpdateOneWithoutConversationInput = {
  connect?: InputMaybe<UserWhereUniqueInput>;
  create?: InputMaybe<UserCreateWithoutConversationInput>;
  delete?: InputMaybe<Scalars['Boolean']>;
  disconnect?: InputMaybe<Scalars['Boolean']>;
  update?: InputMaybe<UserUpdateWithoutConversationDataInput>;
  upsert?: InputMaybe<UserUpsertWithoutConversationInput>;
};

export type UserUpdateOneWithoutCreatedIabCategoryGroupsInput = {
  connect?: InputMaybe<UserWhereUniqueInput>;
  create?: InputMaybe<UserCreateWithoutCreatedIabCategoryGroupsInput>;
  delete?: InputMaybe<Scalars['Boolean']>;
  disconnect?: InputMaybe<Scalars['Boolean']>;
  update?: InputMaybe<UserUpdateWithoutCreatedIabCategoryGroupsDataInput>;
  upsert?: InputMaybe<UserUpsertWithoutCreatedIabCategoryGroupsInput>;
};

export type UserUpdateOneWithoutCreatedRegionGroupsInput = {
  connect?: InputMaybe<UserWhereUniqueInput>;
  create?: InputMaybe<UserCreateWithoutCreatedRegionGroupsInput>;
  delete?: InputMaybe<Scalars['Boolean']>;
  disconnect?: InputMaybe<Scalars['Boolean']>;
  update?: InputMaybe<UserUpdateWithoutCreatedRegionGroupsDataInput>;
  upsert?: InputMaybe<UserUpsertWithoutCreatedRegionGroupsInput>;
};

export type UserUpdateOneWithoutEventsInput = {
  connect?: InputMaybe<UserWhereUniqueInput>;
  create?: InputMaybe<UserCreateWithoutEventsInput>;
  delete?: InputMaybe<Scalars['Boolean']>;
  disconnect?: InputMaybe<Scalars['Boolean']>;
  update?: InputMaybe<UserUpdateWithoutEventsDataInput>;
  upsert?: InputMaybe<UserUpsertWithoutEventsInput>;
};

export type UserUpdateOneWithoutMessagesInput = {
  connect?: InputMaybe<UserWhereUniqueInput>;
  create?: InputMaybe<UserCreateWithoutMessagesInput>;
  delete?: InputMaybe<Scalars['Boolean']>;
  disconnect?: InputMaybe<Scalars['Boolean']>;
  update?: InputMaybe<UserUpdateWithoutMessagesDataInput>;
  upsert?: InputMaybe<UserUpsertWithoutMessagesInput>;
};

export type UserUpdateOneWithoutNotificationsInput = {
  connect?: InputMaybe<UserWhereUniqueInput>;
  create?: InputMaybe<UserCreateWithoutNotificationsInput>;
  delete?: InputMaybe<Scalars['Boolean']>;
  disconnect?: InputMaybe<Scalars['Boolean']>;
  update?: InputMaybe<UserUpdateWithoutNotificationsDataInput>;
  upsert?: InputMaybe<UserUpsertWithoutNotificationsInput>;
};

export type UserUpdateOneWithoutOffersInput = {
  connect?: InputMaybe<UserWhereUniqueInput>;
  create?: InputMaybe<UserCreateWithoutOffersInput>;
  delete?: InputMaybe<Scalars['Boolean']>;
  disconnect?: InputMaybe<Scalars['Boolean']>;
  update?: InputMaybe<UserUpdateWithoutOffersDataInput>;
  upsert?: InputMaybe<UserUpsertWithoutOffersInput>;
};

export type UserUpdateOneWithoutProductsInput = {
  connect?: InputMaybe<UserWhereUniqueInput>;
  create?: InputMaybe<UserCreateWithoutProductsInput>;
  delete?: InputMaybe<Scalars['Boolean']>;
  disconnect?: InputMaybe<Scalars['Boolean']>;
  update?: InputMaybe<UserUpdateWithoutProductsDataInput>;
  upsert?: InputMaybe<UserUpsertWithoutProductsInput>;
};

export type UserUpdateOneWithoutStrainsInput = {
  connect?: InputMaybe<UserWhereUniqueInput>;
  create?: InputMaybe<UserCreateWithoutStrainsInput>;
  delete?: InputMaybe<Scalars['Boolean']>;
  disconnect?: InputMaybe<Scalars['Boolean']>;
  update?: InputMaybe<UserUpdateWithoutStrainsDataInput>;
  upsert?: InputMaybe<UserUpsertWithoutStrainsInput>;
};

export type UserUpdateOneWithoutUpdatedIabCategoryGroupsInput = {
  connect?: InputMaybe<UserWhereUniqueInput>;
  create?: InputMaybe<UserCreateWithoutUpdatedIabCategoryGroupsInput>;
  delete?: InputMaybe<Scalars['Boolean']>;
  disconnect?: InputMaybe<Scalars['Boolean']>;
  update?: InputMaybe<UserUpdateWithoutUpdatedIabCategoryGroupsDataInput>;
  upsert?: InputMaybe<UserUpsertWithoutUpdatedIabCategoryGroupsInput>;
};

export type UserUpdateOneWithoutUpdatedRegionGroupsInput = {
  connect?: InputMaybe<UserWhereUniqueInput>;
  create?: InputMaybe<UserCreateWithoutUpdatedRegionGroupsInput>;
  delete?: InputMaybe<Scalars['Boolean']>;
  disconnect?: InputMaybe<Scalars['Boolean']>;
  update?: InputMaybe<UserUpdateWithoutUpdatedRegionGroupsDataInput>;
  upsert?: InputMaybe<UserUpsertWithoutUpdatedRegionGroupsInput>;
};

export type UserUpdateWithWhereUniqueNestedInput = {
  data: UserUpdateDataInput;
  where: UserWhereUniqueInput;
};

export type UserUpdateWithWhereUniqueWithoutRolesInput = {
  data: UserUpdateWithoutRolesDataInput;
  where: UserWhereUniqueInput;
};

export type UserUpdateWithoutCannatypeDataInput = {
  address?: InputMaybe<LocationUpdateOneInput>;
  avatar?: InputMaybe<MediaUpdateOneInput>;
  changes?: InputMaybe<ChangeUpdateManyWithoutChangedByInput>;
  cognitoUserId?: InputMaybe<Scalars['String']>;
  config?: InputMaybe<UserConfigUpdateOneWithoutUsersInput>;
  conversation?: InputMaybe<ConversationUpdateManyWithoutUserInput>;
  createdIabCategoryGroups?: InputMaybe<IabCategoryGroupUpdateManyWithoutCreatedByInput>;
  createdRegionGroups?: InputMaybe<RegionGroupUpdateManyWithoutCreatedByInput>;
  email?: InputMaybe<Scalars['String']>;
  events?: InputMaybe<EventUpdateManyWithoutCreatedByInput>;
  messages?: InputMaybe<MessageUpdateManyWithoutUserInput>;
  msaStatus?: InputMaybe<MsaVersion>;
  name?: InputMaybe<Scalars['String']>;
  notifications?: InputMaybe<NotificationUpdateManyWithoutUserInput>;
  offers?: InputMaybe<OfferUpdateManyWithoutCreatedByInput>;
  orgs?: InputMaybe<OrgUpdateManyInput>;
  phone?: InputMaybe<Scalars['String']>;
  products?: InputMaybe<ProductUpdateManyWithoutCreatedByInput>;
  reviews?: InputMaybe<ReviewUpdateManyWithoutCreatedByInput>;
  roles?: InputMaybe<RoleUpdateManyWithoutUsersInput>;
  salesforceId?: InputMaybe<Scalars['String']>;
  ssoToken?: InputMaybe<Scalars['String']>;
  strains?: InputMaybe<StrainUpdateManyWithoutCreatedByInput>;
  updatedIabCategoryGroups?: InputMaybe<IabCategoryGroupUpdateManyWithoutUpdatedByInput>;
  updatedRegionGroups?: InputMaybe<RegionGroupUpdateManyWithoutUpdatedByInput>;
  username?: InputMaybe<Scalars['String']>;
};

export type UserUpdateWithoutChangesDataInput = {
  address?: InputMaybe<LocationUpdateOneInput>;
  avatar?: InputMaybe<MediaUpdateOneInput>;
  cannatype?: InputMaybe<CannatypeUpdateOneWithoutUserInput>;
  cognitoUserId?: InputMaybe<Scalars['String']>;
  config?: InputMaybe<UserConfigUpdateOneWithoutUsersInput>;
  conversation?: InputMaybe<ConversationUpdateManyWithoutUserInput>;
  createdIabCategoryGroups?: InputMaybe<IabCategoryGroupUpdateManyWithoutCreatedByInput>;
  createdRegionGroups?: InputMaybe<RegionGroupUpdateManyWithoutCreatedByInput>;
  email?: InputMaybe<Scalars['String']>;
  events?: InputMaybe<EventUpdateManyWithoutCreatedByInput>;
  messages?: InputMaybe<MessageUpdateManyWithoutUserInput>;
  msaStatus?: InputMaybe<MsaVersion>;
  name?: InputMaybe<Scalars['String']>;
  notifications?: InputMaybe<NotificationUpdateManyWithoutUserInput>;
  offers?: InputMaybe<OfferUpdateManyWithoutCreatedByInput>;
  orgs?: InputMaybe<OrgUpdateManyInput>;
  phone?: InputMaybe<Scalars['String']>;
  products?: InputMaybe<ProductUpdateManyWithoutCreatedByInput>;
  reviews?: InputMaybe<ReviewUpdateManyWithoutCreatedByInput>;
  roles?: InputMaybe<RoleUpdateManyWithoutUsersInput>;
  salesforceId?: InputMaybe<Scalars['String']>;
  ssoToken?: InputMaybe<Scalars['String']>;
  strains?: InputMaybe<StrainUpdateManyWithoutCreatedByInput>;
  updatedIabCategoryGroups?: InputMaybe<IabCategoryGroupUpdateManyWithoutUpdatedByInput>;
  updatedRegionGroups?: InputMaybe<RegionGroupUpdateManyWithoutUpdatedByInput>;
  username?: InputMaybe<Scalars['String']>;
};

export type UserUpdateWithoutConversationDataInput = {
  address?: InputMaybe<LocationUpdateOneInput>;
  avatar?: InputMaybe<MediaUpdateOneInput>;
  cannatype?: InputMaybe<CannatypeUpdateOneWithoutUserInput>;
  changes?: InputMaybe<ChangeUpdateManyWithoutChangedByInput>;
  cognitoUserId?: InputMaybe<Scalars['String']>;
  config?: InputMaybe<UserConfigUpdateOneWithoutUsersInput>;
  createdIabCategoryGroups?: InputMaybe<IabCategoryGroupUpdateManyWithoutCreatedByInput>;
  createdRegionGroups?: InputMaybe<RegionGroupUpdateManyWithoutCreatedByInput>;
  email?: InputMaybe<Scalars['String']>;
  events?: InputMaybe<EventUpdateManyWithoutCreatedByInput>;
  messages?: InputMaybe<MessageUpdateManyWithoutUserInput>;
  msaStatus?: InputMaybe<MsaVersion>;
  name?: InputMaybe<Scalars['String']>;
  notifications?: InputMaybe<NotificationUpdateManyWithoutUserInput>;
  offers?: InputMaybe<OfferUpdateManyWithoutCreatedByInput>;
  orgs?: InputMaybe<OrgUpdateManyInput>;
  phone?: InputMaybe<Scalars['String']>;
  products?: InputMaybe<ProductUpdateManyWithoutCreatedByInput>;
  reviews?: InputMaybe<ReviewUpdateManyWithoutCreatedByInput>;
  roles?: InputMaybe<RoleUpdateManyWithoutUsersInput>;
  salesforceId?: InputMaybe<Scalars['String']>;
  ssoToken?: InputMaybe<Scalars['String']>;
  strains?: InputMaybe<StrainUpdateManyWithoutCreatedByInput>;
  updatedIabCategoryGroups?: InputMaybe<IabCategoryGroupUpdateManyWithoutUpdatedByInput>;
  updatedRegionGroups?: InputMaybe<RegionGroupUpdateManyWithoutUpdatedByInput>;
  username?: InputMaybe<Scalars['String']>;
};

export type UserUpdateWithoutCreatedIabCategoryGroupsDataInput = {
  address?: InputMaybe<LocationUpdateOneInput>;
  avatar?: InputMaybe<MediaUpdateOneInput>;
  cannatype?: InputMaybe<CannatypeUpdateOneWithoutUserInput>;
  changes?: InputMaybe<ChangeUpdateManyWithoutChangedByInput>;
  cognitoUserId?: InputMaybe<Scalars['String']>;
  config?: InputMaybe<UserConfigUpdateOneWithoutUsersInput>;
  conversation?: InputMaybe<ConversationUpdateManyWithoutUserInput>;
  createdRegionGroups?: InputMaybe<RegionGroupUpdateManyWithoutCreatedByInput>;
  email?: InputMaybe<Scalars['String']>;
  events?: InputMaybe<EventUpdateManyWithoutCreatedByInput>;
  messages?: InputMaybe<MessageUpdateManyWithoutUserInput>;
  msaStatus?: InputMaybe<MsaVersion>;
  name?: InputMaybe<Scalars['String']>;
  notifications?: InputMaybe<NotificationUpdateManyWithoutUserInput>;
  offers?: InputMaybe<OfferUpdateManyWithoutCreatedByInput>;
  orgs?: InputMaybe<OrgUpdateManyInput>;
  phone?: InputMaybe<Scalars['String']>;
  products?: InputMaybe<ProductUpdateManyWithoutCreatedByInput>;
  reviews?: InputMaybe<ReviewUpdateManyWithoutCreatedByInput>;
  roles?: InputMaybe<RoleUpdateManyWithoutUsersInput>;
  salesforceId?: InputMaybe<Scalars['String']>;
  ssoToken?: InputMaybe<Scalars['String']>;
  strains?: InputMaybe<StrainUpdateManyWithoutCreatedByInput>;
  updatedIabCategoryGroups?: InputMaybe<IabCategoryGroupUpdateManyWithoutUpdatedByInput>;
  updatedRegionGroups?: InputMaybe<RegionGroupUpdateManyWithoutUpdatedByInput>;
  username?: InputMaybe<Scalars['String']>;
};

export type UserUpdateWithoutCreatedRegionGroupsDataInput = {
  address?: InputMaybe<LocationUpdateOneInput>;
  avatar?: InputMaybe<MediaUpdateOneInput>;
  cannatype?: InputMaybe<CannatypeUpdateOneWithoutUserInput>;
  changes?: InputMaybe<ChangeUpdateManyWithoutChangedByInput>;
  cognitoUserId?: InputMaybe<Scalars['String']>;
  config?: InputMaybe<UserConfigUpdateOneWithoutUsersInput>;
  conversation?: InputMaybe<ConversationUpdateManyWithoutUserInput>;
  createdIabCategoryGroups?: InputMaybe<IabCategoryGroupUpdateManyWithoutCreatedByInput>;
  email?: InputMaybe<Scalars['String']>;
  events?: InputMaybe<EventUpdateManyWithoutCreatedByInput>;
  messages?: InputMaybe<MessageUpdateManyWithoutUserInput>;
  msaStatus?: InputMaybe<MsaVersion>;
  name?: InputMaybe<Scalars['String']>;
  notifications?: InputMaybe<NotificationUpdateManyWithoutUserInput>;
  offers?: InputMaybe<OfferUpdateManyWithoutCreatedByInput>;
  orgs?: InputMaybe<OrgUpdateManyInput>;
  phone?: InputMaybe<Scalars['String']>;
  products?: InputMaybe<ProductUpdateManyWithoutCreatedByInput>;
  reviews?: InputMaybe<ReviewUpdateManyWithoutCreatedByInput>;
  roles?: InputMaybe<RoleUpdateManyWithoutUsersInput>;
  salesforceId?: InputMaybe<Scalars['String']>;
  ssoToken?: InputMaybe<Scalars['String']>;
  strains?: InputMaybe<StrainUpdateManyWithoutCreatedByInput>;
  updatedIabCategoryGroups?: InputMaybe<IabCategoryGroupUpdateManyWithoutUpdatedByInput>;
  updatedRegionGroups?: InputMaybe<RegionGroupUpdateManyWithoutUpdatedByInput>;
  username?: InputMaybe<Scalars['String']>;
};

export type UserUpdateWithoutEventsDataInput = {
  address?: InputMaybe<LocationUpdateOneInput>;
  avatar?: InputMaybe<MediaUpdateOneInput>;
  cannatype?: InputMaybe<CannatypeUpdateOneWithoutUserInput>;
  changes?: InputMaybe<ChangeUpdateManyWithoutChangedByInput>;
  cognitoUserId?: InputMaybe<Scalars['String']>;
  config?: InputMaybe<UserConfigUpdateOneWithoutUsersInput>;
  conversation?: InputMaybe<ConversationUpdateManyWithoutUserInput>;
  createdIabCategoryGroups?: InputMaybe<IabCategoryGroupUpdateManyWithoutCreatedByInput>;
  createdRegionGroups?: InputMaybe<RegionGroupUpdateManyWithoutCreatedByInput>;
  email?: InputMaybe<Scalars['String']>;
  messages?: InputMaybe<MessageUpdateManyWithoutUserInput>;
  msaStatus?: InputMaybe<MsaVersion>;
  name?: InputMaybe<Scalars['String']>;
  notifications?: InputMaybe<NotificationUpdateManyWithoutUserInput>;
  offers?: InputMaybe<OfferUpdateManyWithoutCreatedByInput>;
  orgs?: InputMaybe<OrgUpdateManyInput>;
  phone?: InputMaybe<Scalars['String']>;
  products?: InputMaybe<ProductUpdateManyWithoutCreatedByInput>;
  reviews?: InputMaybe<ReviewUpdateManyWithoutCreatedByInput>;
  roles?: InputMaybe<RoleUpdateManyWithoutUsersInput>;
  salesforceId?: InputMaybe<Scalars['String']>;
  ssoToken?: InputMaybe<Scalars['String']>;
  strains?: InputMaybe<StrainUpdateManyWithoutCreatedByInput>;
  updatedIabCategoryGroups?: InputMaybe<IabCategoryGroupUpdateManyWithoutUpdatedByInput>;
  updatedRegionGroups?: InputMaybe<RegionGroupUpdateManyWithoutUpdatedByInput>;
  username?: InputMaybe<Scalars['String']>;
};

export type UserUpdateWithoutMessagesDataInput = {
  address?: InputMaybe<LocationUpdateOneInput>;
  avatar?: InputMaybe<MediaUpdateOneInput>;
  cannatype?: InputMaybe<CannatypeUpdateOneWithoutUserInput>;
  changes?: InputMaybe<ChangeUpdateManyWithoutChangedByInput>;
  cognitoUserId?: InputMaybe<Scalars['String']>;
  config?: InputMaybe<UserConfigUpdateOneWithoutUsersInput>;
  conversation?: InputMaybe<ConversationUpdateManyWithoutUserInput>;
  createdIabCategoryGroups?: InputMaybe<IabCategoryGroupUpdateManyWithoutCreatedByInput>;
  createdRegionGroups?: InputMaybe<RegionGroupUpdateManyWithoutCreatedByInput>;
  email?: InputMaybe<Scalars['String']>;
  events?: InputMaybe<EventUpdateManyWithoutCreatedByInput>;
  msaStatus?: InputMaybe<MsaVersion>;
  name?: InputMaybe<Scalars['String']>;
  notifications?: InputMaybe<NotificationUpdateManyWithoutUserInput>;
  offers?: InputMaybe<OfferUpdateManyWithoutCreatedByInput>;
  orgs?: InputMaybe<OrgUpdateManyInput>;
  phone?: InputMaybe<Scalars['String']>;
  products?: InputMaybe<ProductUpdateManyWithoutCreatedByInput>;
  reviews?: InputMaybe<ReviewUpdateManyWithoutCreatedByInput>;
  roles?: InputMaybe<RoleUpdateManyWithoutUsersInput>;
  salesforceId?: InputMaybe<Scalars['String']>;
  ssoToken?: InputMaybe<Scalars['String']>;
  strains?: InputMaybe<StrainUpdateManyWithoutCreatedByInput>;
  updatedIabCategoryGroups?: InputMaybe<IabCategoryGroupUpdateManyWithoutUpdatedByInput>;
  updatedRegionGroups?: InputMaybe<RegionGroupUpdateManyWithoutUpdatedByInput>;
  username?: InputMaybe<Scalars['String']>;
};

export type UserUpdateWithoutNotificationsDataInput = {
  address?: InputMaybe<LocationUpdateOneInput>;
  avatar?: InputMaybe<MediaUpdateOneInput>;
  cannatype?: InputMaybe<CannatypeUpdateOneWithoutUserInput>;
  changes?: InputMaybe<ChangeUpdateManyWithoutChangedByInput>;
  cognitoUserId?: InputMaybe<Scalars['String']>;
  config?: InputMaybe<UserConfigUpdateOneWithoutUsersInput>;
  conversation?: InputMaybe<ConversationUpdateManyWithoutUserInput>;
  createdIabCategoryGroups?: InputMaybe<IabCategoryGroupUpdateManyWithoutCreatedByInput>;
  createdRegionGroups?: InputMaybe<RegionGroupUpdateManyWithoutCreatedByInput>;
  email?: InputMaybe<Scalars['String']>;
  events?: InputMaybe<EventUpdateManyWithoutCreatedByInput>;
  messages?: InputMaybe<MessageUpdateManyWithoutUserInput>;
  msaStatus?: InputMaybe<MsaVersion>;
  name?: InputMaybe<Scalars['String']>;
  offers?: InputMaybe<OfferUpdateManyWithoutCreatedByInput>;
  orgs?: InputMaybe<OrgUpdateManyInput>;
  phone?: InputMaybe<Scalars['String']>;
  products?: InputMaybe<ProductUpdateManyWithoutCreatedByInput>;
  reviews?: InputMaybe<ReviewUpdateManyWithoutCreatedByInput>;
  roles?: InputMaybe<RoleUpdateManyWithoutUsersInput>;
  salesforceId?: InputMaybe<Scalars['String']>;
  ssoToken?: InputMaybe<Scalars['String']>;
  strains?: InputMaybe<StrainUpdateManyWithoutCreatedByInput>;
  updatedIabCategoryGroups?: InputMaybe<IabCategoryGroupUpdateManyWithoutUpdatedByInput>;
  updatedRegionGroups?: InputMaybe<RegionGroupUpdateManyWithoutUpdatedByInput>;
  username?: InputMaybe<Scalars['String']>;
};

export type UserUpdateWithoutOffersDataInput = {
  address?: InputMaybe<LocationUpdateOneInput>;
  avatar?: InputMaybe<MediaUpdateOneInput>;
  cannatype?: InputMaybe<CannatypeUpdateOneWithoutUserInput>;
  changes?: InputMaybe<ChangeUpdateManyWithoutChangedByInput>;
  cognitoUserId?: InputMaybe<Scalars['String']>;
  config?: InputMaybe<UserConfigUpdateOneWithoutUsersInput>;
  conversation?: InputMaybe<ConversationUpdateManyWithoutUserInput>;
  createdIabCategoryGroups?: InputMaybe<IabCategoryGroupUpdateManyWithoutCreatedByInput>;
  createdRegionGroups?: InputMaybe<RegionGroupUpdateManyWithoutCreatedByInput>;
  email?: InputMaybe<Scalars['String']>;
  events?: InputMaybe<EventUpdateManyWithoutCreatedByInput>;
  messages?: InputMaybe<MessageUpdateManyWithoutUserInput>;
  msaStatus?: InputMaybe<MsaVersion>;
  name?: InputMaybe<Scalars['String']>;
  notifications?: InputMaybe<NotificationUpdateManyWithoutUserInput>;
  orgs?: InputMaybe<OrgUpdateManyInput>;
  phone?: InputMaybe<Scalars['String']>;
  products?: InputMaybe<ProductUpdateManyWithoutCreatedByInput>;
  reviews?: InputMaybe<ReviewUpdateManyWithoutCreatedByInput>;
  roles?: InputMaybe<RoleUpdateManyWithoutUsersInput>;
  salesforceId?: InputMaybe<Scalars['String']>;
  ssoToken?: InputMaybe<Scalars['String']>;
  strains?: InputMaybe<StrainUpdateManyWithoutCreatedByInput>;
  updatedIabCategoryGroups?: InputMaybe<IabCategoryGroupUpdateManyWithoutUpdatedByInput>;
  updatedRegionGroups?: InputMaybe<RegionGroupUpdateManyWithoutUpdatedByInput>;
  username?: InputMaybe<Scalars['String']>;
};

export type UserUpdateWithoutProductsDataInput = {
  address?: InputMaybe<LocationUpdateOneInput>;
  avatar?: InputMaybe<MediaUpdateOneInput>;
  cannatype?: InputMaybe<CannatypeUpdateOneWithoutUserInput>;
  changes?: InputMaybe<ChangeUpdateManyWithoutChangedByInput>;
  cognitoUserId?: InputMaybe<Scalars['String']>;
  config?: InputMaybe<UserConfigUpdateOneWithoutUsersInput>;
  conversation?: InputMaybe<ConversationUpdateManyWithoutUserInput>;
  createdIabCategoryGroups?: InputMaybe<IabCategoryGroupUpdateManyWithoutCreatedByInput>;
  createdRegionGroups?: InputMaybe<RegionGroupUpdateManyWithoutCreatedByInput>;
  email?: InputMaybe<Scalars['String']>;
  events?: InputMaybe<EventUpdateManyWithoutCreatedByInput>;
  messages?: InputMaybe<MessageUpdateManyWithoutUserInput>;
  msaStatus?: InputMaybe<MsaVersion>;
  name?: InputMaybe<Scalars['String']>;
  notifications?: InputMaybe<NotificationUpdateManyWithoutUserInput>;
  offers?: InputMaybe<OfferUpdateManyWithoutCreatedByInput>;
  orgs?: InputMaybe<OrgUpdateManyInput>;
  phone?: InputMaybe<Scalars['String']>;
  reviews?: InputMaybe<ReviewUpdateManyWithoutCreatedByInput>;
  roles?: InputMaybe<RoleUpdateManyWithoutUsersInput>;
  salesforceId?: InputMaybe<Scalars['String']>;
  ssoToken?: InputMaybe<Scalars['String']>;
  strains?: InputMaybe<StrainUpdateManyWithoutCreatedByInput>;
  updatedIabCategoryGroups?: InputMaybe<IabCategoryGroupUpdateManyWithoutUpdatedByInput>;
  updatedRegionGroups?: InputMaybe<RegionGroupUpdateManyWithoutUpdatedByInput>;
  username?: InputMaybe<Scalars['String']>;
};

export type UserUpdateWithoutReviewsDataInput = {
  address?: InputMaybe<LocationUpdateOneInput>;
  avatar?: InputMaybe<MediaUpdateOneInput>;
  cannatype?: InputMaybe<CannatypeUpdateOneWithoutUserInput>;
  changes?: InputMaybe<ChangeUpdateManyWithoutChangedByInput>;
  cognitoUserId?: InputMaybe<Scalars['String']>;
  config?: InputMaybe<UserConfigUpdateOneWithoutUsersInput>;
  conversation?: InputMaybe<ConversationUpdateManyWithoutUserInput>;
  createdIabCategoryGroups?: InputMaybe<IabCategoryGroupUpdateManyWithoutCreatedByInput>;
  createdRegionGroups?: InputMaybe<RegionGroupUpdateManyWithoutCreatedByInput>;
  email?: InputMaybe<Scalars['String']>;
  events?: InputMaybe<EventUpdateManyWithoutCreatedByInput>;
  messages?: InputMaybe<MessageUpdateManyWithoutUserInput>;
  msaStatus?: InputMaybe<MsaVersion>;
  name?: InputMaybe<Scalars['String']>;
  notifications?: InputMaybe<NotificationUpdateManyWithoutUserInput>;
  offers?: InputMaybe<OfferUpdateManyWithoutCreatedByInput>;
  orgs?: InputMaybe<OrgUpdateManyInput>;
  phone?: InputMaybe<Scalars['String']>;
  products?: InputMaybe<ProductUpdateManyWithoutCreatedByInput>;
  roles?: InputMaybe<RoleUpdateManyWithoutUsersInput>;
  salesforceId?: InputMaybe<Scalars['String']>;
  ssoToken?: InputMaybe<Scalars['String']>;
  strains?: InputMaybe<StrainUpdateManyWithoutCreatedByInput>;
  updatedIabCategoryGroups?: InputMaybe<IabCategoryGroupUpdateManyWithoutUpdatedByInput>;
  updatedRegionGroups?: InputMaybe<RegionGroupUpdateManyWithoutUpdatedByInput>;
  username?: InputMaybe<Scalars['String']>;
};

export type UserUpdateWithoutRolesDataInput = {
  address?: InputMaybe<LocationUpdateOneInput>;
  avatar?: InputMaybe<MediaUpdateOneInput>;
  cannatype?: InputMaybe<CannatypeUpdateOneWithoutUserInput>;
  changes?: InputMaybe<ChangeUpdateManyWithoutChangedByInput>;
  cognitoUserId?: InputMaybe<Scalars['String']>;
  config?: InputMaybe<UserConfigUpdateOneWithoutUsersInput>;
  conversation?: InputMaybe<ConversationUpdateManyWithoutUserInput>;
  createdIabCategoryGroups?: InputMaybe<IabCategoryGroupUpdateManyWithoutCreatedByInput>;
  createdRegionGroups?: InputMaybe<RegionGroupUpdateManyWithoutCreatedByInput>;
  email?: InputMaybe<Scalars['String']>;
  events?: InputMaybe<EventUpdateManyWithoutCreatedByInput>;
  messages?: InputMaybe<MessageUpdateManyWithoutUserInput>;
  msaStatus?: InputMaybe<MsaVersion>;
  name?: InputMaybe<Scalars['String']>;
  notifications?: InputMaybe<NotificationUpdateManyWithoutUserInput>;
  offers?: InputMaybe<OfferUpdateManyWithoutCreatedByInput>;
  orgs?: InputMaybe<OrgUpdateManyInput>;
  phone?: InputMaybe<Scalars['String']>;
  products?: InputMaybe<ProductUpdateManyWithoutCreatedByInput>;
  reviews?: InputMaybe<ReviewUpdateManyWithoutCreatedByInput>;
  salesforceId?: InputMaybe<Scalars['String']>;
  ssoToken?: InputMaybe<Scalars['String']>;
  strains?: InputMaybe<StrainUpdateManyWithoutCreatedByInput>;
  updatedIabCategoryGroups?: InputMaybe<IabCategoryGroupUpdateManyWithoutUpdatedByInput>;
  updatedRegionGroups?: InputMaybe<RegionGroupUpdateManyWithoutUpdatedByInput>;
  username?: InputMaybe<Scalars['String']>;
};

export type UserUpdateWithoutStrainsDataInput = {
  address?: InputMaybe<LocationUpdateOneInput>;
  avatar?: InputMaybe<MediaUpdateOneInput>;
  cannatype?: InputMaybe<CannatypeUpdateOneWithoutUserInput>;
  changes?: InputMaybe<ChangeUpdateManyWithoutChangedByInput>;
  cognitoUserId?: InputMaybe<Scalars['String']>;
  config?: InputMaybe<UserConfigUpdateOneWithoutUsersInput>;
  conversation?: InputMaybe<ConversationUpdateManyWithoutUserInput>;
  createdIabCategoryGroups?: InputMaybe<IabCategoryGroupUpdateManyWithoutCreatedByInput>;
  createdRegionGroups?: InputMaybe<RegionGroupUpdateManyWithoutCreatedByInput>;
  email?: InputMaybe<Scalars['String']>;
  events?: InputMaybe<EventUpdateManyWithoutCreatedByInput>;
  messages?: InputMaybe<MessageUpdateManyWithoutUserInput>;
  msaStatus?: InputMaybe<MsaVersion>;
  name?: InputMaybe<Scalars['String']>;
  notifications?: InputMaybe<NotificationUpdateManyWithoutUserInput>;
  offers?: InputMaybe<OfferUpdateManyWithoutCreatedByInput>;
  orgs?: InputMaybe<OrgUpdateManyInput>;
  phone?: InputMaybe<Scalars['String']>;
  products?: InputMaybe<ProductUpdateManyWithoutCreatedByInput>;
  reviews?: InputMaybe<ReviewUpdateManyWithoutCreatedByInput>;
  roles?: InputMaybe<RoleUpdateManyWithoutUsersInput>;
  salesforceId?: InputMaybe<Scalars['String']>;
  ssoToken?: InputMaybe<Scalars['String']>;
  updatedIabCategoryGroups?: InputMaybe<IabCategoryGroupUpdateManyWithoutUpdatedByInput>;
  updatedRegionGroups?: InputMaybe<RegionGroupUpdateManyWithoutUpdatedByInput>;
  username?: InputMaybe<Scalars['String']>;
};

export type UserUpdateWithoutUpdatedIabCategoryGroupsDataInput = {
  address?: InputMaybe<LocationUpdateOneInput>;
  avatar?: InputMaybe<MediaUpdateOneInput>;
  cannatype?: InputMaybe<CannatypeUpdateOneWithoutUserInput>;
  changes?: InputMaybe<ChangeUpdateManyWithoutChangedByInput>;
  cognitoUserId?: InputMaybe<Scalars['String']>;
  config?: InputMaybe<UserConfigUpdateOneWithoutUsersInput>;
  conversation?: InputMaybe<ConversationUpdateManyWithoutUserInput>;
  createdIabCategoryGroups?: InputMaybe<IabCategoryGroupUpdateManyWithoutCreatedByInput>;
  createdRegionGroups?: InputMaybe<RegionGroupUpdateManyWithoutCreatedByInput>;
  email?: InputMaybe<Scalars['String']>;
  events?: InputMaybe<EventUpdateManyWithoutCreatedByInput>;
  messages?: InputMaybe<MessageUpdateManyWithoutUserInput>;
  msaStatus?: InputMaybe<MsaVersion>;
  name?: InputMaybe<Scalars['String']>;
  notifications?: InputMaybe<NotificationUpdateManyWithoutUserInput>;
  offers?: InputMaybe<OfferUpdateManyWithoutCreatedByInput>;
  orgs?: InputMaybe<OrgUpdateManyInput>;
  phone?: InputMaybe<Scalars['String']>;
  products?: InputMaybe<ProductUpdateManyWithoutCreatedByInput>;
  reviews?: InputMaybe<ReviewUpdateManyWithoutCreatedByInput>;
  roles?: InputMaybe<RoleUpdateManyWithoutUsersInput>;
  salesforceId?: InputMaybe<Scalars['String']>;
  ssoToken?: InputMaybe<Scalars['String']>;
  strains?: InputMaybe<StrainUpdateManyWithoutCreatedByInput>;
  updatedRegionGroups?: InputMaybe<RegionGroupUpdateManyWithoutUpdatedByInput>;
  username?: InputMaybe<Scalars['String']>;
};

export type UserUpdateWithoutUpdatedRegionGroupsDataInput = {
  address?: InputMaybe<LocationUpdateOneInput>;
  avatar?: InputMaybe<MediaUpdateOneInput>;
  cannatype?: InputMaybe<CannatypeUpdateOneWithoutUserInput>;
  changes?: InputMaybe<ChangeUpdateManyWithoutChangedByInput>;
  cognitoUserId?: InputMaybe<Scalars['String']>;
  config?: InputMaybe<UserConfigUpdateOneWithoutUsersInput>;
  conversation?: InputMaybe<ConversationUpdateManyWithoutUserInput>;
  createdIabCategoryGroups?: InputMaybe<IabCategoryGroupUpdateManyWithoutCreatedByInput>;
  createdRegionGroups?: InputMaybe<RegionGroupUpdateManyWithoutCreatedByInput>;
  email?: InputMaybe<Scalars['String']>;
  events?: InputMaybe<EventUpdateManyWithoutCreatedByInput>;
  messages?: InputMaybe<MessageUpdateManyWithoutUserInput>;
  msaStatus?: InputMaybe<MsaVersion>;
  name?: InputMaybe<Scalars['String']>;
  notifications?: InputMaybe<NotificationUpdateManyWithoutUserInput>;
  offers?: InputMaybe<OfferUpdateManyWithoutCreatedByInput>;
  orgs?: InputMaybe<OrgUpdateManyInput>;
  phone?: InputMaybe<Scalars['String']>;
  products?: InputMaybe<ProductUpdateManyWithoutCreatedByInput>;
  reviews?: InputMaybe<ReviewUpdateManyWithoutCreatedByInput>;
  roles?: InputMaybe<RoleUpdateManyWithoutUsersInput>;
  salesforceId?: InputMaybe<Scalars['String']>;
  ssoToken?: InputMaybe<Scalars['String']>;
  strains?: InputMaybe<StrainUpdateManyWithoutCreatedByInput>;
  updatedIabCategoryGroups?: InputMaybe<IabCategoryGroupUpdateManyWithoutUpdatedByInput>;
  username?: InputMaybe<Scalars['String']>;
};

export type UserUpsertNestedInput = {
  create: UserCreateInput;
  update: UserUpdateDataInput;
};

export type UserUpsertWithWhereUniqueNestedInput = {
  create: UserCreateInput;
  update: UserUpdateDataInput;
  where: UserWhereUniqueInput;
};

export type UserUpsertWithWhereUniqueWithoutRolesInput = {
  create: UserCreateWithoutRolesInput;
  update: UserUpdateWithoutRolesDataInput;
  where: UserWhereUniqueInput;
};

export type UserUpsertWithoutCannatypeInput = {
  create: UserCreateWithoutCannatypeInput;
  update: UserUpdateWithoutCannatypeDataInput;
};

export type UserUpsertWithoutChangesInput = {
  create: UserCreateWithoutChangesInput;
  update: UserUpdateWithoutChangesDataInput;
};

export type UserUpsertWithoutConversationInput = {
  create: UserCreateWithoutConversationInput;
  update: UserUpdateWithoutConversationDataInput;
};

export type UserUpsertWithoutCreatedIabCategoryGroupsInput = {
  create: UserCreateWithoutCreatedIabCategoryGroupsInput;
  update: UserUpdateWithoutCreatedIabCategoryGroupsDataInput;
};

export type UserUpsertWithoutCreatedRegionGroupsInput = {
  create: UserCreateWithoutCreatedRegionGroupsInput;
  update: UserUpdateWithoutCreatedRegionGroupsDataInput;
};

export type UserUpsertWithoutEventsInput = {
  create: UserCreateWithoutEventsInput;
  update: UserUpdateWithoutEventsDataInput;
};

export type UserUpsertWithoutMessagesInput = {
  create: UserCreateWithoutMessagesInput;
  update: UserUpdateWithoutMessagesDataInput;
};

export type UserUpsertWithoutNotificationsInput = {
  create: UserCreateWithoutNotificationsInput;
  update: UserUpdateWithoutNotificationsDataInput;
};

export type UserUpsertWithoutOffersInput = {
  create: UserCreateWithoutOffersInput;
  update: UserUpdateWithoutOffersDataInput;
};

export type UserUpsertWithoutProductsInput = {
  create: UserCreateWithoutProductsInput;
  update: UserUpdateWithoutProductsDataInput;
};

export type UserUpsertWithoutReviewsInput = {
  create: UserCreateWithoutReviewsInput;
  update: UserUpdateWithoutReviewsDataInput;
};

export type UserUpsertWithoutStrainsInput = {
  create: UserCreateWithoutStrainsInput;
  update: UserUpdateWithoutStrainsDataInput;
};

export type UserUpsertWithoutUpdatedIabCategoryGroupsInput = {
  create: UserCreateWithoutUpdatedIabCategoryGroupsInput;
  update: UserUpdateWithoutUpdatedIabCategoryGroupsDataInput;
};

export type UserUpsertWithoutUpdatedRegionGroupsInput = {
  create: UserCreateWithoutUpdatedRegionGroupsInput;
  update: UserUpdateWithoutUpdatedRegionGroupsDataInput;
};

export type UserWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<UserWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<UserWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<UserWhereInput>>;
  address?: InputMaybe<LocationWhereInput>;
  avatar?: InputMaybe<MediaWhereInput>;
  cannatype?: InputMaybe<CannatypeWhereInput>;
  changes_every?: InputMaybe<ChangeWhereInput>;
  changes_none?: InputMaybe<ChangeWhereInput>;
  changes_some?: InputMaybe<ChangeWhereInput>;
  cognitoUserId?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  cognitoUserId_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  cognitoUserId_ends_with?: InputMaybe<Scalars['String']>;
  /** All values greater than the given value. */
  cognitoUserId_gt?: InputMaybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  cognitoUserId_gte?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  cognitoUserId_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  cognitoUserId_lt?: InputMaybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  cognitoUserId_lte?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  cognitoUserId_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  cognitoUserId_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string. */
  cognitoUserId_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  cognitoUserId_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  cognitoUserId_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  cognitoUserId_starts_with?: InputMaybe<Scalars['String']>;
  config?: InputMaybe<UserConfigWhereInput>;
  conversation_every?: InputMaybe<ConversationWhereInput>;
  conversation_none?: InputMaybe<ConversationWhereInput>;
  conversation_some?: InputMaybe<ConversationWhereInput>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  createdIabCategoryGroups_every?: InputMaybe<IabCategoryGroupWhereInput>;
  createdIabCategoryGroups_none?: InputMaybe<IabCategoryGroupWhereInput>;
  createdIabCategoryGroups_some?: InputMaybe<IabCategoryGroupWhereInput>;
  createdRegionGroups_every?: InputMaybe<RegionGroupWhereInput>;
  createdRegionGroups_none?: InputMaybe<RegionGroupWhereInput>;
  createdRegionGroups_some?: InputMaybe<RegionGroupWhereInput>;
  email?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  email_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  email_ends_with?: InputMaybe<Scalars['String']>;
  /** All values greater than the given value. */
  email_gt?: InputMaybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  email_gte?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  email_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  email_lt?: InputMaybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  email_lte?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  email_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  email_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string. */
  email_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  email_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  email_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  email_starts_with?: InputMaybe<Scalars['String']>;
  events_every?: InputMaybe<EventWhereInput>;
  events_none?: InputMaybe<EventWhereInput>;
  events_some?: InputMaybe<EventWhereInput>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: InputMaybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: InputMaybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: InputMaybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  messages_every?: InputMaybe<MessageWhereInput>;
  messages_none?: InputMaybe<MessageWhereInput>;
  messages_some?: InputMaybe<MessageWhereInput>;
  msaStatus?: InputMaybe<MsaVersion>;
  /** All values that are contained in given list. */
  msaStatus_in?: InputMaybe<Array<MsaVersion>>;
  /** All values that are not equal to given value. */
  msaStatus_not?: InputMaybe<MsaVersion>;
  /** All values that are not contained in given list. */
  msaStatus_not_in?: InputMaybe<Array<MsaVersion>>;
  name?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  name_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  name_ends_with?: InputMaybe<Scalars['String']>;
  /** All values greater than the given value. */
  name_gt?: InputMaybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  name_gte?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  name_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  name_lt?: InputMaybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  name_lte?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  name_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  name_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string. */
  name_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  name_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  name_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  name_starts_with?: InputMaybe<Scalars['String']>;
  notifications_every?: InputMaybe<NotificationWhereInput>;
  notifications_none?: InputMaybe<NotificationWhereInput>;
  notifications_some?: InputMaybe<NotificationWhereInput>;
  offers_every?: InputMaybe<OfferWhereInput>;
  offers_none?: InputMaybe<OfferWhereInput>;
  offers_some?: InputMaybe<OfferWhereInput>;
  orgs_every?: InputMaybe<OrgWhereInput>;
  orgs_none?: InputMaybe<OrgWhereInput>;
  orgs_some?: InputMaybe<OrgWhereInput>;
  phone?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  phone_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  phone_ends_with?: InputMaybe<Scalars['String']>;
  /** All values greater than the given value. */
  phone_gt?: InputMaybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  phone_gte?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  phone_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  phone_lt?: InputMaybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  phone_lte?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  phone_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  phone_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string. */
  phone_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  phone_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  phone_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  phone_starts_with?: InputMaybe<Scalars['String']>;
  products_every?: InputMaybe<ProductWhereInput>;
  products_none?: InputMaybe<ProductWhereInput>;
  products_some?: InputMaybe<ProductWhereInput>;
  reviews_every?: InputMaybe<ReviewWhereInput>;
  reviews_none?: InputMaybe<ReviewWhereInput>;
  reviews_some?: InputMaybe<ReviewWhereInput>;
  roles_every?: InputMaybe<RoleWhereInput>;
  roles_none?: InputMaybe<RoleWhereInput>;
  roles_some?: InputMaybe<RoleWhereInput>;
  salesforceId?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  salesforceId_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  salesforceId_ends_with?: InputMaybe<Scalars['String']>;
  /** All values greater than the given value. */
  salesforceId_gt?: InputMaybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  salesforceId_gte?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  salesforceId_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  salesforceId_lt?: InputMaybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  salesforceId_lte?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  salesforceId_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  salesforceId_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string. */
  salesforceId_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  salesforceId_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  salesforceId_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  salesforceId_starts_with?: InputMaybe<Scalars['String']>;
  ssoToken?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  ssoToken_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  ssoToken_ends_with?: InputMaybe<Scalars['String']>;
  /** All values greater than the given value. */
  ssoToken_gt?: InputMaybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  ssoToken_gte?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  ssoToken_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  ssoToken_lt?: InputMaybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  ssoToken_lte?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  ssoToken_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  ssoToken_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string. */
  ssoToken_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  ssoToken_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  ssoToken_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  ssoToken_starts_with?: InputMaybe<Scalars['String']>;
  strains_every?: InputMaybe<StrainWhereInput>;
  strains_none?: InputMaybe<StrainWhereInput>;
  strains_some?: InputMaybe<StrainWhereInput>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  updatedIabCategoryGroups_every?: InputMaybe<IabCategoryGroupWhereInput>;
  updatedIabCategoryGroups_none?: InputMaybe<IabCategoryGroupWhereInput>;
  updatedIabCategoryGroups_some?: InputMaybe<IabCategoryGroupWhereInput>;
  updatedRegionGroups_every?: InputMaybe<RegionGroupWhereInput>;
  updatedRegionGroups_none?: InputMaybe<RegionGroupWhereInput>;
  updatedRegionGroups_some?: InputMaybe<RegionGroupWhereInput>;
  username?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  username_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  username_ends_with?: InputMaybe<Scalars['String']>;
  /** All values greater than the given value. */
  username_gt?: InputMaybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  username_gte?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  username_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  username_lt?: InputMaybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  username_lte?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  username_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  username_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string. */
  username_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  username_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  username_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  username_starts_with?: InputMaybe<Scalars['String']>;
};

export type UserWhereUniqueInput = {
  cognitoUserId?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  username?: InputMaybe<Scalars['String']>;
};

export type WellnessEffect = Node & {
  __typename?: 'WellnessEffect';
  add_adhd?: Maybe<Scalars['Float']>;
  anxiety?: Maybe<Scalars['Float']>;
  appetite?: Maybe<Scalars['Float']>;
  cannatypes?: Maybe<Array<Cannatype>>;
  createdAt: Scalars['DateTime'];
  depression?: Maybe<Scalars['Float']>;
  fatigue?: Maybe<Scalars['Float']>;
  id: Scalars['ID'];
  immune_stimulant?: Maybe<Scalars['Float']>;
  insomnia?: Maybe<Scalars['Float']>;
  mood_enhancement?: Maybe<Scalars['Float']>;
  muscle_tension?: Maybe<Scalars['Float']>;
  nausea?: Maybe<Scalars['Float']>;
  pain?: Maybe<Scalars['Float']>;
  products?: Maybe<Array<Product>>;
  strains?: Maybe<Array<Strain>>;
  stress?: Maybe<Scalars['Float']>;
  updatedAt: Scalars['DateTime'];
};


export type WellnessEffectCannatypesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<CannatypeOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<CannatypeWhereInput>;
};


export type WellnessEffectProductsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ProductOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ProductWhereInput>;
};


export type WellnessEffectStrainsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<StrainOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<StrainWhereInput>;
};

export type WellnessEffectCreateOneWithoutCannatypesInput = {
  connect?: InputMaybe<WellnessEffectWhereUniqueInput>;
  create?: InputMaybe<WellnessEffectCreateWithoutCannatypesInput>;
};

export type WellnessEffectCreateOneWithoutProductsInput = {
  connect?: InputMaybe<WellnessEffectWhereUniqueInput>;
  create?: InputMaybe<WellnessEffectCreateWithoutProductsInput>;
};

export type WellnessEffectCreateOneWithoutStrainsInput = {
  connect?: InputMaybe<WellnessEffectWhereUniqueInput>;
  create?: InputMaybe<WellnessEffectCreateWithoutStrainsInput>;
};

export type WellnessEffectCreateWithoutCannatypesInput = {
  add_adhd?: InputMaybe<Scalars['Float']>;
  anxiety?: InputMaybe<Scalars['Float']>;
  appetite?: InputMaybe<Scalars['Float']>;
  depression?: InputMaybe<Scalars['Float']>;
  fatigue?: InputMaybe<Scalars['Float']>;
  immune_stimulant?: InputMaybe<Scalars['Float']>;
  insomnia?: InputMaybe<Scalars['Float']>;
  mood_enhancement?: InputMaybe<Scalars['Float']>;
  muscle_tension?: InputMaybe<Scalars['Float']>;
  nausea?: InputMaybe<Scalars['Float']>;
  pain?: InputMaybe<Scalars['Float']>;
  products?: InputMaybe<ProductCreateManyWithoutWellnessEffectInput>;
  strains?: InputMaybe<StrainCreateManyWithoutWellnessEffectInput>;
  stress?: InputMaybe<Scalars['Float']>;
};

export type WellnessEffectCreateWithoutProductsInput = {
  add_adhd?: InputMaybe<Scalars['Float']>;
  anxiety?: InputMaybe<Scalars['Float']>;
  appetite?: InputMaybe<Scalars['Float']>;
  cannatypes?: InputMaybe<CannatypeCreateManyWithoutWellnessEffectInput>;
  depression?: InputMaybe<Scalars['Float']>;
  fatigue?: InputMaybe<Scalars['Float']>;
  immune_stimulant?: InputMaybe<Scalars['Float']>;
  insomnia?: InputMaybe<Scalars['Float']>;
  mood_enhancement?: InputMaybe<Scalars['Float']>;
  muscle_tension?: InputMaybe<Scalars['Float']>;
  nausea?: InputMaybe<Scalars['Float']>;
  pain?: InputMaybe<Scalars['Float']>;
  strains?: InputMaybe<StrainCreateManyWithoutWellnessEffectInput>;
  stress?: InputMaybe<Scalars['Float']>;
};

export type WellnessEffectCreateWithoutStrainsInput = {
  add_adhd?: InputMaybe<Scalars['Float']>;
  anxiety?: InputMaybe<Scalars['Float']>;
  appetite?: InputMaybe<Scalars['Float']>;
  cannatypes?: InputMaybe<CannatypeCreateManyWithoutWellnessEffectInput>;
  depression?: InputMaybe<Scalars['Float']>;
  fatigue?: InputMaybe<Scalars['Float']>;
  immune_stimulant?: InputMaybe<Scalars['Float']>;
  insomnia?: InputMaybe<Scalars['Float']>;
  mood_enhancement?: InputMaybe<Scalars['Float']>;
  muscle_tension?: InputMaybe<Scalars['Float']>;
  nausea?: InputMaybe<Scalars['Float']>;
  pain?: InputMaybe<Scalars['Float']>;
  products?: InputMaybe<ProductCreateManyWithoutWellnessEffectInput>;
  stress?: InputMaybe<Scalars['Float']>;
};

export type WellnessEffectUpdateOneWithoutCannatypesInput = {
  connect?: InputMaybe<WellnessEffectWhereUniqueInput>;
  create?: InputMaybe<WellnessEffectCreateWithoutCannatypesInput>;
  delete?: InputMaybe<Scalars['Boolean']>;
  disconnect?: InputMaybe<Scalars['Boolean']>;
  update?: InputMaybe<WellnessEffectUpdateWithoutCannatypesDataInput>;
  upsert?: InputMaybe<WellnessEffectUpsertWithoutCannatypesInput>;
};

export type WellnessEffectUpdateOneWithoutProductsInput = {
  connect?: InputMaybe<WellnessEffectWhereUniqueInput>;
  create?: InputMaybe<WellnessEffectCreateWithoutProductsInput>;
  delete?: InputMaybe<Scalars['Boolean']>;
  disconnect?: InputMaybe<Scalars['Boolean']>;
  update?: InputMaybe<WellnessEffectUpdateWithoutProductsDataInput>;
  upsert?: InputMaybe<WellnessEffectUpsertWithoutProductsInput>;
};

export type WellnessEffectUpdateOneWithoutStrainsInput = {
  connect?: InputMaybe<WellnessEffectWhereUniqueInput>;
  create?: InputMaybe<WellnessEffectCreateWithoutStrainsInput>;
  delete?: InputMaybe<Scalars['Boolean']>;
  disconnect?: InputMaybe<Scalars['Boolean']>;
  update?: InputMaybe<WellnessEffectUpdateWithoutStrainsDataInput>;
  upsert?: InputMaybe<WellnessEffectUpsertWithoutStrainsInput>;
};

export type WellnessEffectUpdateWithoutCannatypesDataInput = {
  add_adhd?: InputMaybe<Scalars['Float']>;
  anxiety?: InputMaybe<Scalars['Float']>;
  appetite?: InputMaybe<Scalars['Float']>;
  depression?: InputMaybe<Scalars['Float']>;
  fatigue?: InputMaybe<Scalars['Float']>;
  immune_stimulant?: InputMaybe<Scalars['Float']>;
  insomnia?: InputMaybe<Scalars['Float']>;
  mood_enhancement?: InputMaybe<Scalars['Float']>;
  muscle_tension?: InputMaybe<Scalars['Float']>;
  nausea?: InputMaybe<Scalars['Float']>;
  pain?: InputMaybe<Scalars['Float']>;
  products?: InputMaybe<ProductUpdateManyWithoutWellnessEffectInput>;
  strains?: InputMaybe<StrainUpdateManyWithoutWellnessEffectInput>;
  stress?: InputMaybe<Scalars['Float']>;
};

export type WellnessEffectUpdateWithoutProductsDataInput = {
  add_adhd?: InputMaybe<Scalars['Float']>;
  anxiety?: InputMaybe<Scalars['Float']>;
  appetite?: InputMaybe<Scalars['Float']>;
  cannatypes?: InputMaybe<CannatypeUpdateManyWithoutWellnessEffectInput>;
  depression?: InputMaybe<Scalars['Float']>;
  fatigue?: InputMaybe<Scalars['Float']>;
  immune_stimulant?: InputMaybe<Scalars['Float']>;
  insomnia?: InputMaybe<Scalars['Float']>;
  mood_enhancement?: InputMaybe<Scalars['Float']>;
  muscle_tension?: InputMaybe<Scalars['Float']>;
  nausea?: InputMaybe<Scalars['Float']>;
  pain?: InputMaybe<Scalars['Float']>;
  strains?: InputMaybe<StrainUpdateManyWithoutWellnessEffectInput>;
  stress?: InputMaybe<Scalars['Float']>;
};

export type WellnessEffectUpdateWithoutStrainsDataInput = {
  add_adhd?: InputMaybe<Scalars['Float']>;
  anxiety?: InputMaybe<Scalars['Float']>;
  appetite?: InputMaybe<Scalars['Float']>;
  cannatypes?: InputMaybe<CannatypeUpdateManyWithoutWellnessEffectInput>;
  depression?: InputMaybe<Scalars['Float']>;
  fatigue?: InputMaybe<Scalars['Float']>;
  immune_stimulant?: InputMaybe<Scalars['Float']>;
  insomnia?: InputMaybe<Scalars['Float']>;
  mood_enhancement?: InputMaybe<Scalars['Float']>;
  muscle_tension?: InputMaybe<Scalars['Float']>;
  nausea?: InputMaybe<Scalars['Float']>;
  pain?: InputMaybe<Scalars['Float']>;
  products?: InputMaybe<ProductUpdateManyWithoutWellnessEffectInput>;
  stress?: InputMaybe<Scalars['Float']>;
};

export type WellnessEffectUpsertWithoutCannatypesInput = {
  create: WellnessEffectCreateWithoutCannatypesInput;
  update: WellnessEffectUpdateWithoutCannatypesDataInput;
};

export type WellnessEffectUpsertWithoutProductsInput = {
  create: WellnessEffectCreateWithoutProductsInput;
  update: WellnessEffectUpdateWithoutProductsDataInput;
};

export type WellnessEffectUpsertWithoutStrainsInput = {
  create: WellnessEffectCreateWithoutStrainsInput;
  update: WellnessEffectUpdateWithoutStrainsDataInput;
};

export type WellnessEffectWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<WellnessEffectWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<WellnessEffectWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<WellnessEffectWhereInput>>;
  add_adhd?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  add_adhd_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  add_adhd_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  add_adhd_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  add_adhd_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  add_adhd_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  add_adhd_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  add_adhd_not_in?: InputMaybe<Array<Scalars['Float']>>;
  anxiety?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  anxiety_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  anxiety_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  anxiety_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  anxiety_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  anxiety_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  anxiety_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  anxiety_not_in?: InputMaybe<Array<Scalars['Float']>>;
  appetite?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  appetite_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  appetite_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  appetite_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  appetite_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  appetite_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  appetite_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  appetite_not_in?: InputMaybe<Array<Scalars['Float']>>;
  cannatypes_every?: InputMaybe<CannatypeWhereInput>;
  cannatypes_none?: InputMaybe<CannatypeWhereInput>;
  cannatypes_some?: InputMaybe<CannatypeWhereInput>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  depression?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  depression_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  depression_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  depression_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  depression_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  depression_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  depression_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  depression_not_in?: InputMaybe<Array<Scalars['Float']>>;
  fatigue?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  fatigue_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  fatigue_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  fatigue_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  fatigue_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  fatigue_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  fatigue_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  fatigue_not_in?: InputMaybe<Array<Scalars['Float']>>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: InputMaybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: InputMaybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: InputMaybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  immune_stimulant?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  immune_stimulant_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  immune_stimulant_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  immune_stimulant_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  immune_stimulant_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  immune_stimulant_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  immune_stimulant_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  immune_stimulant_not_in?: InputMaybe<Array<Scalars['Float']>>;
  insomnia?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  insomnia_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  insomnia_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  insomnia_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  insomnia_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  insomnia_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  insomnia_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  insomnia_not_in?: InputMaybe<Array<Scalars['Float']>>;
  mood_enhancement?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  mood_enhancement_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  mood_enhancement_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  mood_enhancement_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  mood_enhancement_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  mood_enhancement_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  mood_enhancement_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  mood_enhancement_not_in?: InputMaybe<Array<Scalars['Float']>>;
  muscle_tension?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  muscle_tension_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  muscle_tension_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  muscle_tension_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  muscle_tension_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  muscle_tension_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  muscle_tension_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  muscle_tension_not_in?: InputMaybe<Array<Scalars['Float']>>;
  nausea?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  nausea_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  nausea_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  nausea_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  nausea_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  nausea_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  nausea_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  nausea_not_in?: InputMaybe<Array<Scalars['Float']>>;
  pain?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  pain_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  pain_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  pain_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  pain_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  pain_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  pain_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  pain_not_in?: InputMaybe<Array<Scalars['Float']>>;
  products_every?: InputMaybe<ProductWhereInput>;
  products_none?: InputMaybe<ProductWhereInput>;
  products_some?: InputMaybe<ProductWhereInput>;
  strains_every?: InputMaybe<StrainWhereInput>;
  strains_none?: InputMaybe<StrainWhereInput>;
  strains_some?: InputMaybe<StrainWhereInput>;
  stress?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  stress_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  stress_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  stress_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  stress_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  stress_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  stress_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  stress_not_in?: InputMaybe<Array<Scalars['Float']>>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
};

export type WellnessEffectWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export type AppNexusSegmentInput = {
  member_id: Scalars['Int'];
  segment_id?: InputMaybe<Scalars['Int']>;
};

export type CampaignApiHandlerInput = {
  orgId: Scalars['ID'];
  provider: Scalars['String'];
};

export type DisableDashboardUserInput = {
  roleId: Scalars['ID'];
};

export type EditAppNexusMappingRecordInput = {
  active?: InputMaybe<Scalars['Boolean']>;
  data_category_id?: InputMaybe<Scalars['Int']>;
  data_provider_id?: InputMaybe<Scalars['Int']>;
  data_segment_type_id?: InputMaybe<Scalars['String']>;
  is_public?: InputMaybe<Scalars['Boolean']>;
  member_id: Scalars['Int'];
  segment_id?: InputMaybe<Scalars['Int']>;
};

export type EditDashboardUserInput = {
  avatar?: InputMaybe<Scalars['ID']>;
  config: UserConfigCreateInput;
  email?: InputMaybe<Scalars['String']>;
  name?: InputMaybe<Scalars['String']>;
  orgId: Scalars['ID'];
  phone: Scalars['String'];
  roleId: Scalars['ID'];
  roleItems?: InputMaybe<Array<RoleItemCreateWithoutRoleInput>>;
  ssoToken?: InputMaybe<Scalars['String']>;
};

export type SendSmsInput = {
  customer: Scalars['ID'];
  id: Scalars['ID'];
  message: Scalars['String'];
  number: Scalars['String'];
};

export type CreateOrgMutationVariables = Exact<{
  name: Scalars['String'];
  description?: InputMaybe<Scalars['String']>;
  website: Scalars['String'];
  domain?: InputMaybe<Scalars['String']>;
  level: PartnerLevel;
  logoId?: InputMaybe<MediaCreateOneWithoutOrgInput>;
  parentOrgs?: InputMaybe<Array<OrgWhereUniqueInput> | OrgWhereUniqueInput>;
  roleitems?: InputMaybe<Array<RoleItemCreateWithoutRoleInput> | RoleItemCreateWithoutRoleInput>;
  config?: InputMaybe<OrgConfigCreateWithoutOrgsInput>;
  reTargeting: Scalars['Boolean'];
  appIds?: InputMaybe<Array<Scalars['String']> | Scalars['String']>;
  tradeDeskIdentifier?: InputMaybe<Scalars['String']>;
  storageBucket?: InputMaybe<Scalars['String']>;
  googleCustomerId?: InputMaybe<Scalars['String']>;
  signInLogoId?: InputMaybe<MediaCreateOneInput>;
  viewId?: InputMaybe<Scalars['String']>;
  seo: Scalars['Boolean'];
  chatWootId?: InputMaybe<Scalars['String']>;
  cpm?: InputMaybe<Scalars['String']>;
  isGA4?: InputMaybe<Scalars['Boolean']>;
}>;


export type CreateOrgMutation = { __typename?: 'Mutation', createOrg: { __typename?: 'Org', id: string, name: string, description?: string | null, level: PartnerLevel, website?: string | null, domain?: string | null, chatWootId?: string | null, cpm?: string | null, brands?: Array<{ __typename?: 'Brand', name?: string | null, logo?: { __typename?: 'Media', key: string } | null }> | null, config?: { __typename?: 'OrgConfig', priceVisible?: boolean | null, isDemo?: boolean | null, isAdmin?: boolean | null, isPartner?: boolean | null, isTrafficker?: boolean | null, exportData?: boolean | null, isSelfService?: boolean | null, hasInsights?: boolean | null, providersVisible?: boolean | null, isProcessor?: boolean | null, canResetPasswords?: boolean | null, campaignSummary?: boolean | null, isPacing?: boolean | null, pastData?: boolean | null, segment?: boolean | null, technicalSupport?: boolean | null, articles?: boolean | null } | null, dataConfig?: { __typename?: 'OrgDataConfig', reTargeting: boolean, appIds: Array<string>, tradeDeskIdentifier?: string | null, storageBucket?: string | null, googleCustomerId?: string | null, seo?: boolean | null, googleAnalytics?: { __typename?: 'GoogleAnalytics', viewId?: string | null, isGA4?: boolean | null } | null } | null, locations?: Array<{ __typename?: 'Location', street: string, city: string, state?: StateType | null }> | null, logo?: { __typename?: 'Media', id: string, key: string } | null, signInLogo?: { __typename?: 'Media', id: string, key: string } | null, roles?: Array<{ __typename?: 'Role', id: string, name?: string | null, isMaster?: boolean | null, roleItems?: Array<{ __typename?: 'RoleItem', id: string, feature: Feature, actions: Array<FeatureActions> }> | null, users?: Array<{ __typename?: 'User', id: string }> | null }> | null, parentOrg?: Array<{ __typename?: 'Org', name: string, id: string }> | null } };

export type CreateDashboardUserMutationVariables = Exact<{
  username: Scalars['String'];
  email: Scalars['String'];
  phone: Scalars['String'];
  orgId: Scalars['ID'];
  roleItems?: InputMaybe<Array<RoleItemCreateWithoutRoleInput> | RoleItemCreateWithoutRoleInput>;
  avatar?: InputMaybe<Scalars['ID']>;
  name?: InputMaybe<Scalars['String']>;
  config: UserConfigCreateInput;
}>;


export type CreateDashboardUserMutation = { __typename?: 'Mutation', createDashboardUser: { __typename?: 'User', id: string, name?: string | null, username: string, email?: string | null, phone?: string | null, cognitoUserId: string, roles?: Array<{ __typename?: 'Role', id: string, roleItems?: Array<{ __typename?: 'RoleItem', id: string, feature: Feature, actions: Array<FeatureActions> }> | null, org: { __typename?: 'Org', id: string, name: string, parentOrg?: Array<{ __typename?: 'Org', id: string, name: string }> | null, logo?: { __typename?: 'Media', id: string, key: string } | null } }> | null, avatar?: { __typename?: 'Media', id: string, key: string } | null } };

export type GetOrgQueryVariables = Exact<{
  id: Scalars['ID'];
}>;


export type GetOrgQuery = { __typename?: 'Query', orgs: Array<{ __typename?: 'Org', id: string } | null> };

export type GetOrgBySalesforceIdQueryVariables = Exact<{
  salesforceId: Scalars['String'];
}>;


export type GetOrgBySalesforceIdQuery = { __typename?: 'Query', orgs: Array<{ __typename?: 'Org', id: string, salesforceId?: string | null, name: string } | null> };

export type GetUserBySalesforceIdOrEmailQueryVariables = Exact<{
  salesforceId: Scalars['String'];
  email: Scalars['String'];
}>;


export type GetUserBySalesforceIdOrEmailQuery = { __typename?: 'Query', users: Array<{ __typename?: 'User', id: string, username: string, email?: string | null } | null> };


export const CreateOrgDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"createOrg"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"name"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"description"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"website"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"domain"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"level"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"PartnerLevel"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"logoId"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"MediaCreateOneWithoutOrgInput"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"parentOrgs"}},"type":{"kind":"ListType","type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"OrgWhereUniqueInput"}}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"roleitems"}},"type":{"kind":"ListType","type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"RoleItemCreateWithoutRoleInput"}}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"config"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"OrgConfigCreateWithoutOrgsInput"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"reTargeting"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Boolean"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"appIds"}},"type":{"kind":"ListType","type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"tradeDeskIdentifier"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"storageBucket"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"googleCustomerId"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"signInLogoId"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"MediaCreateOneInput"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"viewId"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"seo"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Boolean"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"chatWootId"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"cpm"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"isGA4"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"Boolean"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"createOrg"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"data"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"name"},"value":{"kind":"Variable","name":{"kind":"Name","value":"name"}}},{"kind":"ObjectField","name":{"kind":"Name","value":"description"},"value":{"kind":"Variable","name":{"kind":"Name","value":"description"}}},{"kind":"ObjectField","name":{"kind":"Name","value":"website"},"value":{"kind":"Variable","name":{"kind":"Name","value":"website"}}},{"kind":"ObjectField","name":{"kind":"Name","value":"domain"},"value":{"kind":"Variable","name":{"kind":"Name","value":"domain"}}},{"kind":"ObjectField","name":{"kind":"Name","value":"logo"},"value":{"kind":"Variable","name":{"kind":"Name","value":"logoId"}}},{"kind":"ObjectField","name":{"kind":"Name","value":"signInLogo"},"value":{"kind":"Variable","name":{"kind":"Name","value":"signInLogoId"}}},{"kind":"ObjectField","name":{"kind":"Name","value":"level"},"value":{"kind":"Variable","name":{"kind":"Name","value":"level"}}},{"kind":"ObjectField","name":{"kind":"Name","value":"chatWootId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"chatWootId"}}},{"kind":"ObjectField","name":{"kind":"Name","value":"cpm"},"value":{"kind":"Variable","name":{"kind":"Name","value":"cpm"}}},{"kind":"ObjectField","name":{"kind":"Name","value":"parentOrg"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"connect"},"value":{"kind":"Variable","name":{"kind":"Name","value":"parentOrgs"}}}]}},{"kind":"ObjectField","name":{"kind":"Name","value":"config"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"create"},"value":{"kind":"Variable","name":{"kind":"Name","value":"config"}}}]}},{"kind":"ObjectField","name":{"kind":"Name","value":"dataConfig"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"create"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"reTargeting"},"value":{"kind":"Variable","name":{"kind":"Name","value":"reTargeting"}}},{"kind":"ObjectField","name":{"kind":"Name","value":"appIds"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"set"},"value":{"kind":"Variable","name":{"kind":"Name","value":"appIds"}}}]}},{"kind":"ObjectField","name":{"kind":"Name","value":"tradeDeskIdentifier"},"value":{"kind":"Variable","name":{"kind":"Name","value":"tradeDeskIdentifier"}}},{"kind":"ObjectField","name":{"kind":"Name","value":"storageBucket"},"value":{"kind":"Variable","name":{"kind":"Name","value":"storageBucket"}}},{"kind":"ObjectField","name":{"kind":"Name","value":"googleCustomerId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"googleCustomerId"}}},{"kind":"ObjectField","name":{"kind":"Name","value":"seo"},"value":{"kind":"Variable","name":{"kind":"Name","value":"seo"}}},{"kind":"ObjectField","name":{"kind":"Name","value":"googleAnalytics"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"create"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"viewId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"viewId"}}},{"kind":"ObjectField","name":{"kind":"Name","value":"isGA4"},"value":{"kind":"Variable","name":{"kind":"Name","value":"isGA4"}}}]}}]}}]}}]}},{"kind":"ObjectField","name":{"kind":"Name","value":"roles"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"create"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"name"},"value":{"kind":"Variable","name":{"kind":"Name","value":"name"}}},{"kind":"ObjectField","name":{"kind":"Name","value":"roleItems"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"create"},"value":{"kind":"Variable","name":{"kind":"Name","value":"roleitems"}}}]}},{"kind":"ObjectField","name":{"kind":"Name","value":"isMaster"},"value":{"kind":"BooleanValue","value":true}}]}}]}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"brands"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"first"},"value":{"kind":"IntValue","value":"5"}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"logo"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"key"}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"config"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"priceVisible"}},{"kind":"Field","name":{"kind":"Name","value":"isDemo"}},{"kind":"Field","name":{"kind":"Name","value":"isAdmin"}},{"kind":"Field","name":{"kind":"Name","value":"isPartner"}},{"kind":"Field","name":{"kind":"Name","value":"isTrafficker"}},{"kind":"Field","name":{"kind":"Name","value":"exportData"}},{"kind":"Field","name":{"kind":"Name","value":"isSelfService"}},{"kind":"Field","name":{"kind":"Name","value":"hasInsights"}},{"kind":"Field","name":{"kind":"Name","value":"providersVisible"}},{"kind":"Field","name":{"kind":"Name","value":"isProcessor"}},{"kind":"Field","name":{"kind":"Name","value":"canResetPasswords"}},{"kind":"Field","name":{"kind":"Name","value":"campaignSummary"}},{"kind":"Field","name":{"kind":"Name","value":"isPacing"}},{"kind":"Field","name":{"kind":"Name","value":"pastData"}},{"kind":"Field","name":{"kind":"Name","value":"segment"}},{"kind":"Field","name":{"kind":"Name","value":"technicalSupport"}},{"kind":"Field","name":{"kind":"Name","value":"articles"}}]}},{"kind":"Field","name":{"kind":"Name","value":"dataConfig"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"reTargeting"}},{"kind":"Field","name":{"kind":"Name","value":"appIds"}},{"kind":"Field","name":{"kind":"Name","value":"tradeDeskIdentifier"}},{"kind":"Field","name":{"kind":"Name","value":"storageBucket"}},{"kind":"Field","name":{"kind":"Name","value":"googleCustomerId"}},{"kind":"Field","name":{"kind":"Name","value":"seo"}},{"kind":"Field","name":{"kind":"Name","value":"googleAnalytics"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"viewId"}},{"kind":"Field","name":{"kind":"Name","value":"isGA4"}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"description"}},{"kind":"Field","name":{"kind":"Name","value":"locations"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"first"},"value":{"kind":"IntValue","value":"5"}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"street"}},{"kind":"Field","name":{"kind":"Name","value":"city"}},{"kind":"Field","name":{"kind":"Name","value":"state"}}]}},{"kind":"Field","name":{"kind":"Name","value":"logo"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"key"}}]}},{"kind":"Field","name":{"kind":"Name","value":"signInLogo"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"key"}}]}},{"kind":"Field","name":{"kind":"Name","value":"roles"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"first"},"value":{"kind":"IntValue","value":"5"}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"isMaster"}},{"kind":"Field","name":{"kind":"Name","value":"roleItems"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"first"},"value":{"kind":"IntValue","value":"10"}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"feature"}},{"kind":"Field","name":{"kind":"Name","value":"actions"}}]}},{"kind":"Field","name":{"kind":"Name","value":"users"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"level"}},{"kind":"Field","name":{"kind":"Name","value":"website"}},{"kind":"Field","name":{"kind":"Name","value":"domain"}},{"kind":"Field","name":{"kind":"Name","value":"parentOrg"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"id"}}]}},{"kind":"Field","name":{"kind":"Name","value":"chatWootId"}},{"kind":"Field","name":{"kind":"Name","value":"cpm"}}]}}]}}]} as unknown as DocumentNode<CreateOrgMutation, CreateOrgMutationVariables>;
export const CreateDashboardUserDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"createDashboardUser"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"username"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"email"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"phone"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"orgId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"roleItems"}},"type":{"kind":"ListType","type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"RoleItemCreateWithoutRoleInput"}}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"avatar"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"name"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"config"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"UserConfigCreateInput"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"createDashboardUser"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"data"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"username"},"value":{"kind":"Variable","name":{"kind":"Name","value":"username"}}},{"kind":"ObjectField","name":{"kind":"Name","value":"email"},"value":{"kind":"Variable","name":{"kind":"Name","value":"email"}}},{"kind":"ObjectField","name":{"kind":"Name","value":"phone"},"value":{"kind":"Variable","name":{"kind":"Name","value":"phone"}}},{"kind":"ObjectField","name":{"kind":"Name","value":"orgId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"orgId"}}},{"kind":"ObjectField","name":{"kind":"Name","value":"roleItems"},"value":{"kind":"Variable","name":{"kind":"Name","value":"roleItems"}}},{"kind":"ObjectField","name":{"kind":"Name","value":"avatar"},"value":{"kind":"Variable","name":{"kind":"Name","value":"avatar"}}},{"kind":"ObjectField","name":{"kind":"Name","value":"name"},"value":{"kind":"Variable","name":{"kind":"Name","value":"name"}}},{"kind":"ObjectField","name":{"kind":"Name","value":"config"},"value":{"kind":"Variable","name":{"kind":"Name","value":"config"}}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"username"}},{"kind":"Field","name":{"kind":"Name","value":"email"}},{"kind":"Field","name":{"kind":"Name","value":"phone"}},{"kind":"Field","name":{"kind":"Name","value":"cognitoUserId"}},{"kind":"Field","name":{"kind":"Name","value":"roles"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"first"},"value":{"kind":"IntValue","value":"5"}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"roleItems"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"first"},"value":{"kind":"IntValue","value":"20"}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"feature"}},{"kind":"Field","name":{"kind":"Name","value":"actions"}}]}},{"kind":"Field","name":{"kind":"Name","value":"org"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"parentOrg"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}}]}},{"kind":"Field","name":{"kind":"Name","value":"logo"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"key"}}]}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"avatar"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"key"}}]}}]}}]}}]} as unknown as DocumentNode<CreateDashboardUserMutation, CreateDashboardUserMutationVariables>;
export const GetOrgDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"getOrg"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"orgs"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"id_not"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}}]}}]}}]} as unknown as DocumentNode<GetOrgQuery, GetOrgQueryVariables>;
export const GetOrgBySalesforceIdDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"getOrgBySalesforceId"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"salesforceId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"orgs"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"salesforceId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"salesforceId"}}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"salesforceId"}},{"kind":"Field","name":{"kind":"Name","value":"name"}}]}}]}}]} as unknown as DocumentNode<GetOrgBySalesforceIdQuery, GetOrgBySalesforceIdQueryVariables>;
export const GetUserBySalesforceIdOrEmailDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"getUserBySalesforceIdOrEmail"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"salesforceId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"email"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"users"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"OR"},"value":{"kind":"ListValue","values":[{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"salesforceId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"salesforceId"}}}]},{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"email"},"value":{"kind":"Variable","name":{"kind":"Name","value":"email"}}}]}]}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"username"}},{"kind":"Field","name":{"kind":"Name","value":"email"}}]}}]}}]} as unknown as DocumentNode<GetUserBySalesforceIdOrEmailQuery, GetUserBySalesforceIdOrEmailQueryVariables>;