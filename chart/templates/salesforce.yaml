apiVersion: v1
kind: Service
metadata:
  name: |-
    {{ .Release.Name }}
  labels:
    name: |-
      {{ .Release.Name }}
  annotations: 
    external-dns.alpha.kubernetes.io/hostname: |-
      {{ .Values.httpEndpoint }}
    service.beta.kubernetes.io/aws-load-balancer-ssl-cert: |-
      {{ .Values.certificateArn }}
    service.beta.kubernetes.io/aws-load-balancer-backend-protocol: http
    service.beta.kubernetes.io/aws-load-balancer-ssl-ports: "443"
    # service.beta.kubernetes.io/aws-load-balancer-cross-zone-load-balancing-enabled: 'true'
    # service.beta.kubernetes.io/aws-load-balancer-type: nlb
    # dns.alpha.kubernetes.io/external: |-
    #   {{ .Values.httpEndpoint }}
spec:
  type: LoadBalancer
  ports:
  - name: http
    port: 80
    protocol: TCP
    targetPort: 1234
  - name: https
    port: 443
    protocol: TCP
    targetPort: 1234
  externalIPs:
  - 10.28.97.100
  selector:
    # This needs to match the selector in the RC/Deployment
    app: |-
      {{ .Release.Name }}
# ---
# apiVersion: networking.k8s.io/v1
# kind: Ingress
# metadata:
#   name: |-
#     {{ .Release.Name }}
#   labels:
#     name: |-
#       {{ .Release.Name }}
#   annotations:
#     nginx.ingress.kubernetes.io/proxy-connect-timeout: "300"
#     nginx.ingress.kubernetes.io/proxy-read-timeout: "300"
#     nginx.ingress.kubernetes.io/proxy-send-timeout: "300"
#     nginx.ingress.kubernetes.io/proxy-buffer-size: "32k"
#     nginx.ingress.kubernetes.io/proxy-buffers-number: "8"
# spec:
#   ingressClassName: nginx
#   rules:
#   - host: |-
#       {{ .Values.httpEndpoint }}
#     http:
#       paths:
#       - pathType: Prefix
#         path: /
#         backend:
#           service:
#             name: |-
#               {{ .Release.Name }}
#             port:
#               number: 4000
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: |-
    {{ .Release.Name }}
  namespace: default
  labels:
    app: |-
      {{ .Release.Name }}
spec:
  revisionHistoryLimit: 1
  replicas: 1
  selector:
    matchLabels:
      app: |-
        {{ .Release.Name }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 0
      maxSurge: 1
  template:
    metadata:
      labels:
        app: |-
          {{ .Release.Name }}
    spec:
      nodeSelector:
        kops.k8s.io/instancegroup: small-nodes
      containers:
      - name: |-
          {{ .Release.Name }}
        image: |-
          {{ .Values.repoUrl }}/salesforce-automation:{{ .Values.commitSha }}
        imagePullPolicy: Always 
        ports:
          - name: salesforce
            containerPort: 1234
            protocol: TCP
        resources:
          limits:
            cpu: |-
              {{ .Values.cpuLimit }}
            memory: |-
              {{ .Values.memoryLimit }}
          requests:
            cpu: |-
              {{ .Values.cpuRequest }}
            memory: |-
              {{ .Values.memoryRequest }}
        env:  
        - name: GRAPHQL_ENDPOINT
          value: |-
            {{ .Values.gqlEndpoint }}
        - name: LOG_LEVEL
          value: |-
            {{ .Values.logLevel }}
        - name: NODE_ENV
          value: |-
            {{ .Values.nodeEnv }}
        - name: SALESFORCE_CHANNEL
          value: |-
            {{ .Values.salesForceChannel }}
        - name: INTUIT_ENVIRONMENT
          value: |-
            {{ .Values.intuitEnvironment }}
        - name: GRAPHQL_KEY
          valueFrom:
            secretKeyRef:
              name: one-pass-salesforce
              key: GRAPHQL_KEY
        - name: SALESFORCE_ACCESS_TOKEN
          valueFrom:
            secretKeyRef:
              name: one-pass-salesforce
              key: SALESFORCE_ACCESS_TOKEN
        - name: SALESFORCE_CLIENT_ID
          valueFrom:
            secretKeyRef:
              name: one-pass-salesforce
              key: SALESFORCE_CLIENT_ID
        - name: SALESFORCE_CLIENT_SECRET
          valueFrom:
            secretKeyRef:
              name: one-pass-salesforce
              key: SALESFORCE_CLIENT_SECRET
        - name: SALESFORCE_INSTANCE_URL
          valueFrom:
            secretKeyRef:
              name: one-pass-salesforce
              key: SALESFORCE_INSTANCE_URL
        - name: SALESFORCE_REDIRECT_URI
          valueFrom:
            secretKeyRef:
              name: one-pass-salesforce
              key: SALESFORCE_REDIRECT_URI
        - name: SALESFORCE_REFRESH_TOKEN
          valueFrom:
            secretKeyRef:
              name: one-pass-salesforce
              key: SALESFORCE_REFRESH_TOKEN
        - name: SERVER_KEY
          valueFrom:
            secretKeyRef:
              name: one-pass-salesforce
              key: SERVER_KEY
        - name: INTUIT_CLIENT_ID
          valueFrom:
            secretKeyRef:
              name: one-pass-salesforce
              key: INTUIT_CLIENT_ID
        - name: INTUIT_CLIENT_SECRET
          valueFrom:
            secretKeyRef:
              name: one-pass-salesforce
              key: INTUIT_CLIENT_SECRET
        - name: INTUIT_ACCESS_TOKEN
          valueFrom:
            secretKeyRef:
              name: one-pass-salesforce
              key: INTUIT_ACCESS_TOKEN
        - name: INTUIT_REFRESH_TOKEN
          valueFrom:
            secretKeyRef:
              name: one-pass-salesforce
              key: INTUIT_REFRESH_TOKEN
        - name: INTUIT_REALM_ID
          valueFrom:
            secretKeyRef:
              name: one-pass-salesforce
              key: INTUIT_REALM_ID
        - name: INTUIT_REDIRECT_URI
          # * This is a hack, for some reason AWS isn't serving the app via public DNS
          # * so what I did is just port forward to the pod and use ngrok to forward the request
          # * through ngrok to get OAuth2 for the pod
          value: https://f537-143-44-165-185.ngrok-free.app/intuit/oauth2/callback
          # valueFrom:
          #   secretKeyRef:
          #     name: one-pass-salesforce
          #     key: INTUIT_REDIRECT_URI
        - name: REDIS_URL
          valueFrom:
            secretKeyRef:
              name: one-pass-salesforce
              key: REDIS_URL