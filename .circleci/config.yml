version: 2.1
executors:
  the-executor:
    docker:
      - image: node:22.11.0-slim
    working_directory: ~/salesforce-automation
orbs:
  aws-cli: circleci/aws-cli@4.0
  aws-ecr: circleci/aws-ecr@9.0.2
jobs:
  pre-integration-build:
    executor: the-executor
    steps:
      - checkout
      - run: yarn
      - run: yarn tsc
      - persist_to_workspace:
          root: .
          paths: .
  deploy-staging:
    docker:
      - image: cimg/node:22.11.0
    working_directory: ~/salesforce-automation
    steps:
      - checkout
      - run:
          name: Install kops
          command: |
            KOPS_VERSION=1.22.6
            wget -O kops https://github.com/kubernetes/kops/releases/download/v${KOPS_VERSION}/kops-linux-amd64
            chmod +x ./kops
            sudo mv ./kops /usr/local/bin/kops
            echo "export KOPS_CLUSTER_NAME=${KOPS_CLUSTER_NAME}" >> $BASH_ENV
            echo "export KOPS_STATE_STORE=s3://${KOPS_STATE_STORE}" >> $BASH_ENV
            echo "export AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}" >> $BASH_ENV
            echo "export AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}" >> $BASH_ENV
            echo "export AWS_REGION=${AWS_ECR_REGION}" >> $BASH_ENV
      - run:
          name: Install kubectl
          command: |
            wget -O kubectl https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl
            chmod +x ./kubectl
            sudo mv ./kubectl /usr/local/bin/kubectl
      - run:
          name: Install helm 3
          command: |
            wget https://get.helm.sh/helm-v3.5.2-linux-amd64.tar.gz
            tar -xf helm-v3.5.2-linux-amd64.tar.gz
            chmod +x ./linux-amd64/helm
            sudo mv ./linux-amd64/helm /usr/local/bin/helm3
            kops export kubecfg --admin
            helm3 version
      - run:
          name: Install salesforce-automation (Helm 3)
          command: |
            kops export kubecfg --admin
            helm3 upgrade --install salesforce-automation chart/ --set \
            commitSha=${CIRCLE_SHA1} -f chart/stages/staging.yaml \
            --history-max=1
      - run:
          name: Restart deployment
          command: |
            kops export kubecfg --admin
            kubectl rollout restart deployment salesforce-automation;
      - run:
          name: Helm List on version 3
          command: |
            kops export kubecfg --admin
            helm3 list
  deploy-production:
    docker:
      - image: cimg/node:22.11.0
    working_directory: ~/salesforce-automation
    steps:
      - checkout
      - run:
          name: Install kops
          command: |
            KOPS_VERSION=1.22.6
            wget -O kops https://github.com/kubernetes/kops/releases/download/v${KOPS_VERSION}/kops-linux-amd64
            chmod +x ./kops
            sudo mv ./kops /usr/local/bin/kops
            echo "export KOPS_CLUSTER_NAME=${KOPS_CLUSTER_NAME}" >> $BASH_ENV
            echo "export KOPS_STATE_STORE=s3://${KOPS_STATE_STORE}" >> $BASH_ENV
            echo "export AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}" >> $BASH_ENV
            echo "export AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}" >> $BASH_ENV
            echo "export AWS_REGION=${AWS_ECR_REGION}" >> $BASH_ENV
      - run:
          name: Install kubectl
          command: |
            wget -O kubectl https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl
            chmod +x ./kubectl
            sudo mv ./kubectl /usr/local/bin/kubectl
      - run:
          name: Install helm 3
          command: |
            wget https://get.helm.sh/helm-v3.5.2-linux-amd64.tar.gz
            tar -xf helm-v3.5.2-linux-amd64.tar.gz
            chmod +x ./linux-amd64/helm
            sudo mv ./linux-amd64/helm /usr/local/bin/helm3
            kops export kubecfg --admin
            helm3 version
      - run:
          name: Install salesforce-automation (Helm 3)
          command: |
            kops export kubecfg --admin
            helm3 upgrade --install salesforce-automation chart/ --set \
            commitSha=${CIRCLE_SHA1} -f chart/stages/production.yaml \
            --history-max=1
      - run:
          name: Restart deployment
          command: |
            kops export kubecfg --admin
            kubectl rollout restart deployment salesforce-automation;
      - run:
          name: Helm List on version 3
          command: |
            kops export kubecfg --admin
            helm3 list
workflows:
  version: 2
  build:
    jobs:
      - pre-integration-build:
          name: pre-integration
      - aws-ecr/build_and_push_image:
          context: STAGING
          name: build-push-staging
          account_id: ${AWS_ACCOUNT_ID}
          auth:
            - aws-cli/setup:
              region: ${AWS_ECR_REGION}
          repo_scan_on_push: true
          create_repo: false
          region: ${AWS_ECR_REGION}
          repo: salesforce-automation
          tag: $CIRCLE_SHA1
          platform: linux/amd64
          attach_workspace: true
          workspace_root: .
          extra_build_args: "--build-arg ACCOUNT_URL=${AWS_ECR_ACCOUNT_URL}"
          dockerfile: ./Dockerfile
          filters:
            branches:
              only: staging
          requires: [pre-integration]
      - deploy-staging:
          context: STAGING
          filters:
            branches:
              only: staging
          requires:
            [
              build-push-staging,
            ]

      - aws-ecr/build_and_push_image:
          context: PRODUCTION
          name: build-push-production
          account_id: ${AWS_ACCOUNT_ID}
          auth:
            - aws-cli/setup:
              region: ${AWS_ECR_REGION}
          repo_scan_on_push: true
          create_repo: false
          region: ${AWS_ECR_REGION}
          repo: salesforce-automation
          tag: $CIRCLE_SHA1
          platform: linux/amd64
          attach_workspace: true
          workspace_root: .
          extra_build_args: "--build-arg ACCOUNT_URL=${AWS_ECR_ACCOUNT_URL}"
          dockerfile: ./Dockerfile
          filters:
            branches:
              only: master
          requires: [pre-integration]
      - deploy-production:
          context: PRODUCTION
          filters:
            branches:
              only: master
          requires:
            [
              build-push-production,
            ]